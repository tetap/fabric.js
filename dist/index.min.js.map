{"version":3,"file":"index.min.js","sources":["../src/config.ts","../src/util/internals/console.ts","../src/filters/GLProbes/GLProbe.ts","../src/filters/GLProbes/WebGLProbe.ts","../src/env/browser.ts","../src/env/index.ts","../src/cache.ts","../src/constants.ts","../src/ClassRegistry.ts","../src/util/animation/AnimationRegistry.ts","../src/Observable.ts","../src/util/internals/removeFromArray.ts","../src/util/misc/cos.ts","../src/util/misc/sin.ts","../src/Point.ts","../src/Collection.ts","../src/CommonMethods.ts","../src/util/animation/AnimationFrameProvider.ts","../src/util/internals/uid.ts","../src/util/misc/dom.ts","../src/util/misc/radiansDegreesConversion.ts","../src/util/misc/matrix.ts","../src/util/misc/objectEnlive.ts","../src/util/misc/pick.ts","../src/util/misc/toFixed.ts","../src/util/misc/svgExport.ts","../src/util/typeAssertions.ts","../src/util/dom_misc.ts","../src/canvas/DOMManagers/util.ts","../src/canvas/DOMManagers/StaticCanvasDOMManager.ts","../src/canvas/StaticCanvasOptions.ts","../src/canvas/StaticCanvas.ts","../src/util/dom_event.ts","../src/util/misc/boundingBoxFromPoints.ts","../src/util/misc/objectTransforms.ts","../src/util/misc/planeChange.ts","../src/controls/fireEvent.ts","../src/util/misc/resolveOrigin.ts","../src/util/misc/vectors.ts","../src/controls/util.ts","../src/controls/drag.ts","../src/color/color_map.ts","../src/color/util.ts","../src/color/Color.ts","../src/color/constants.ts","../src/util/misc/svgParsing.ts","../src/shapes/Object/FabricObjectSVGExportMixin.ts","../src/parser/getSvgRegex.ts","../src/shapes/Text/constants.ts","../src/parser/constants.ts","../src/Shadow.ts","../src/util/misc/capValue.ts","../src/shapes/Object/defaultValues.ts","../src/util/animation/easing.ts","../src/util/animation/AnimationBase.ts","../src/util/animation/ValueAnimation.ts","../src/util/animation/ArrayAnimation.ts","../src/util/animation/ColorAnimation.ts","../src/util/animation/animate.ts","../src/Intersection.ts","../src/shapes/Object/ObjectGeometry.ts","../src/shapes/Object/Object.ts","../src/controls/wrapWithFireEvent.ts","../src/controls/wrapWithFixedAnchor.ts","../src/controls/changeWidth.ts","../src/controls/controlRendering.ts","../src/controls/Control.ts","../src/controls/rotate.ts","../src/controls/scale.ts","../src/controls/scaleSkew.ts","../src/controls/commonControls.ts","../src/shapes/Object/InteractiveObject.ts","../src/util/applyMixins.ts","../src/shapes/Object/FabricObject.ts","../src/util/misc/isTransparent.ts","../src/util/misc/projectStroke/StrokeProjectionsBase.ts","../src/util/misc/projectStroke/StrokeLineJoinProjections.ts","../src/util/misc/projectStroke/StrokeLineCapProjections.ts","../src/util/misc/projectStroke/index.ts","../src/util/internals/findRight.ts","../src/util/internals/cloneStyles.ts","../src/util/lang_string.ts","../src/util/misc/textStyles.ts","../src/parser/attributes.ts","../src/parser/selectorMatches.ts","../src/parser/elementMatchesRule.ts","../src/parser/doesSomeParentMatch.ts","../src/parser/getGlobalStylesForElement.ts","../src/parser/normalizeAttr.ts","../src/util/internals/cleanupSvgAttribute.ts","../src/parser/parseTransformAttribute.ts","../src/parser/normalizeValue.ts","../src/parser/parseStyleString.ts","../src/parser/parseStyleAttribute.ts","../src/parser/parseStyleObject.ts","../src/parser/setStrokeFillOpacity.ts","../src/parser/parseAttributes.ts","../src/parser/parseFontDeclaration.ts","../src/shapes/Rect.ts","../src/LayoutManager/constants.ts","../src/LayoutManager/LayoutStrategies/utils.ts","../src/LayoutManager/LayoutStrategies/LayoutStrategy.ts","../src/LayoutManager/LayoutStrategies/FitContentLayout.ts","../src/LayoutManager/LayoutManager.ts","../src/shapes/Group.ts","../src/util/misc/groupSVGElements.ts","../src/util/misc/findScaleTo.ts","../src/util/path/regex.ts","../src/util/path/index.ts","../src/util/internals/getRandomInt.ts","../src/util/internals/dom_request.ts","../src/util/transform_matrix_removal.ts","../src/util/misc/mergeClipPaths.ts","../src/util/internals/dom_style.ts","../src/canvas/DOMManagers/CanvasDOMManager.ts","../src/canvas/SelectableCanvas.ts","../src/canvas/CanvasOptions.ts","../src/canvas/TextEditingManager.ts","../src/canvas/Canvas.ts","../src/gradient/constants.ts","../src/util/internals/ifNaN.ts","../src/parser/percent.ts","../src/gradient/parser/parseColorStops.ts","../src/gradient/parser/misc.ts","../src/gradient/parser/parseCoords.ts","../src/gradient/Gradient.ts","../src/Pattern/Pattern.ts","../src/brushes/BaseBrush.ts","../src/shapes/Path.ts","../src/brushes/PencilBrush.ts","../src/shapes/Circle.ts","../src/shapes/Line.ts","../src/shapes/Triangle.ts","../src/shapes/Ellipse.ts","../src/shapes/Polyline.ts","../src/parser/parsePointsAttribute.ts","../src/shapes/Polygon.ts","../src/shapes/Text/StyledText.ts","../src/shapes/Text/TextSVGExportMixin.ts","../src/shapes/Text/Text.ts","../src/shapes/IText/DraggableTextDelegate.ts","../src/shapes/IText/ITextBehavior.ts","../src/shapes/IText/ITextKeyBehavior.ts","../src/shapes/IText/ITextClickBehavior.ts","../src/shapes/IText/constants.ts","../src/util/internals/applyCanvasTransform.ts","../src/shapes/IText/IText.ts","../src/shapes/Textbox.ts","../src/LayoutManager/LayoutStrategies/ClipPathLayout.ts","../src/LayoutManager/LayoutStrategies/FixedLayout.ts","../src/LayoutManager/ActiveSelectionLayoutManager.ts","../src/shapes/ActiveSelection.ts","../src/filters/Canvas2dFilterBackend.ts","../src/filters/WebGLFilterBackend.ts","../src/filters/FilterBackend.ts","../src/shapes/Image.ts","../src/parser/applyViewboxTransform.ts","../src/parser/getTagName.ts","../src/parser/hasInvalidAncestor.ts","../src/parser/getMultipleNodes.ts","../src/parser/recursivelyParseGradientsXlink.ts","../src/parser/getGradientDefs.ts","../src/parser/elements_parser.ts","../src/parser/getCSSRules.ts","../src/parser/parseSVGDocument.ts","../src/parser/parseUseDirectives.ts","../src/controls/polyControl.ts","../src/controls/skew.ts","../src/controls/pathControl.ts","../src/filters/utils.ts","../src/filters/shaders/baseFilter.ts","../src/filters/BaseFilter.ts","../src/filters/shaders/blendColor.ts","../src/filters/BlendColor.ts","../src/filters/shaders/blendImage.ts","../src/filters/BlendImage.ts","../src/filters/Blur.ts","../src/filters/shaders/blur.ts","../src/filters/Brightness.ts","../src/filters/shaders/brightness.ts","../src/filters/shaders/colorMatrix.ts","../src/filters/ColorMatrix.ts","../src/filters/ColorMatrixFilters.ts","../src/filters/Composed.ts","../src/filters/Contrast.ts","../src/filters/shaders/constrast.ts","../src/filters/shaders/convolute.ts","../src/filters/Convolute.ts","../src/filters/shaders/gamma.ts","../src/filters/Gamma.ts","../src/filters/shaders/grayscale.ts","../src/filters/Grayscale.ts","../src/filters/HueRotation.ts","../src/filters/Invert.ts","../src/filters/shaders/invert.ts","../src/filters/Noise.ts","../src/filters/shaders/noise.ts","../src/filters/Pixelate.ts","../src/filters/shaders/pixelate.ts","../src/filters/RemoveColor.ts","../src/filters/shaders/removeColor.ts","../src/filters/Resize.ts","../src/filters/Saturation.ts","../src/filters/shaders/saturation.ts","../src/filters/Vibrance.ts","../src/filters/shaders/vibrance.ts","../src/brushes/CircleBrush.ts","../src/brushes/PatternBrush.ts","../src/brushes/SprayBrush.ts","../src/parser/loadSVGFromString.ts","../src/parser/loadSVGFromURL.ts"],"sourcesContent":["export type TConfiguration = Partial<BaseConfiguration>;\n\nclass BaseConfiguration {\n  /**\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n   * which is unitless and not rendered equally across browsers.\n   *\n   * Values that work quite well (as of October 2017) are:\n   * - Chrome: 1.5\n   * - Edge: 1.75\n   * - Firefox: 0.9\n   * - Safari: 0.95\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default 1\n   */\n  browserShadowBlurConstant = 1;\n\n  /**\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n   */\n  DPI = 96;\n\n  /**\n   * Device Pixel Ratio\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   */\n  devicePixelRatio =\n    typeof window !== 'undefined' ? window.devicePixelRatio : 1; // eslint-disable-line no-restricted-globals\n\n  /**\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  perfLimitSizeTotal = 2097152;\n\n  /**\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  maxCacheSideLimit = 4096;\n\n  /**\n   * Lowest pixel limit for cache canvases, set at 256PX\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  minCacheSideLimit = 256;\n\n  /**\n   * When 'true', style information is not retained when copy/pasting text, making\n   * pasted text use destination style.\n   * Defaults to 'false'.\n   * @type Boolean\n   * @default\n   * @deprecated\n   */\n  disableStyleCopyPaste = false;\n\n  /**\n   * Enable webgl for filtering picture is available\n   * A filtering backend will be initialized, this will both take memory and\n   * time since a default 2048x2048 canvas will be created for the gl context\n   * @since 2.0.0\n   * @type Boolean\n   * @default\n   */\n  enableGLFiltering = true;\n\n  /**\n   * if webgl is enabled and available, textureSize will determine the size\n   * of the canvas backend\n   *\n   * In order to support old hardware set to `2048` to avoid OOM\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  textureSize = 4096;\n\n  /**\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\n   * @type Boolean\n   * @default false\n   */\n  forceGLPutImageData = false;\n\n  /**\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n   * With the standard behaviour of fabric to translate all curves in absolute commands and by not subtracting the starting point from\n   * the curve is very hard to hit any cache.\n   * Enable only if you know why it could be useful.\n   * Candidate for removal/simplification\n   * @default false\n   */\n  cachesBoundsOfCurve = false;\n\n  /**\n   * Map of font files\n   * Map<fontFamily, pathToFile> of font files\n   */\n  fontPaths: Record</** fontFamily */ string, /** pathToFile */ string> = {};\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * Used in exporting methods (`toObject`, `toJSON`, `toSVG`)\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   */\n  NUM_FRACTION_DIGITS = 4;\n}\n\nexport class Configuration extends BaseConfiguration {\n  constructor(config?: TConfiguration) {\n    super();\n    this.configure(config);\n  }\n\n  configure(config: TConfiguration = {}) {\n    Object.assign(this, config);\n  }\n\n  /**\n   * Map<fontFamily, pathToFile> of font files\n   */\n  addFonts(\n    paths: Record</** fontFamily */ string, /** pathToFile */ string> = {},\n  ) {\n    this.fontPaths = {\n      ...this.fontPaths,\n      ...paths,\n    };\n  }\n\n  removeFonts(fontFamilys: string[] = []) {\n    fontFamilys.forEach((fontFamily) => {\n      delete this.fontPaths[fontFamily];\n    });\n  }\n\n  clearFonts() {\n    this.fontPaths = {};\n  }\n\n  restoreDefaults<T extends BaseConfiguration>(keys?: (keyof T)[]) {\n    const defaults = new BaseConfiguration() as T;\n    const config =\n      keys?.reduce((acc, key) => {\n        acc[key] = defaults[key];\n        return acc;\n      }, {} as T) || defaults;\n    this.configure(config);\n  }\n}\n\nexport const config = new Configuration();\n","export const log = (\n  severity: 'log' | 'warn' | 'error',\n  ...optionalParams: any[]\n) =>\n  // eslint-disable-next-line no-restricted-syntax\n  console[severity]('fabric', ...optionalParams);\n\nexport class FabricError extends Error {\n  constructor(message?: string, options?: ErrorOptions) {\n    super(`fabric: ${message}`, options);\n  }\n}\n\nexport class SignalAbortedError extends FabricError {\n  constructor(context: string) {\n    super(`${context} 'options.signal' is in 'aborted' state`);\n  }\n}\n","export type GLPrecision = 'lowp' | 'mediump' | 'highp';\n\nexport abstract class GLProbe {\n  declare GLPrecision: GLPrecision | undefined;\n  abstract queryWebGL(canvas: HTMLCanvasElement): void;\n  abstract isSupported(textureSize: number): boolean;\n}\n","import { log } from '../../util/internals/console';\nimport { GLProbe } from './GLProbe';\nimport type { GLPrecision } from './GLProbe';\n\n/**\n * Lazy initialize WebGL constants\n */\nexport class WebGLProbe extends GLProbe {\n  declare maxTextureSize?: number;\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {GLPrecision} Precision to test can be any of following\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  private testPrecision(\n    gl: WebGLRenderingContext,\n    precision: GLPrecision,\n  ): boolean {\n    const fragmentSource = `precision ${precision} float;\\nvoid main(){}`;\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fragmentShader) {\n      return false;\n    }\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    return !!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\n  }\n\n  /**\n   * query browser for WebGL\n   */\n  queryWebGL(canvas: HTMLCanvasElement) {\n    const gl = canvas.getContext('webgl');\n    if (gl) {\n      this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      this.GLPrecision = (['highp', 'mediump', 'lowp'] as const).find(\n        (precision) => this.testPrecision(gl, precision),\n      );\n      gl.getExtension('WEBGL_lose_context')!.loseContext();\n      log('log', `WebGL: max texture size ${this.maxTextureSize}`);\n    }\n  }\n\n  isSupported(textureSize: number) {\n    return !!this.maxTextureSize && this.maxTextureSize >= textureSize;\n  }\n}\n","/* eslint-disable no-restricted-globals */\nimport { WebGLProbe } from '../filters/GLProbes/WebGLProbe';\nimport type { TCopyPasteData, TFabricEnv } from './types';\n\nconst copyPasteData: TCopyPasteData = {};\n\nexport const getEnv = (): TFabricEnv => {\n  return {\n    document,\n    window,\n    isTouchSupported:\n      'ontouchstart' in window ||\n      'ontouchstart' in document ||\n      (window && window.navigator && window.navigator.maxTouchPoints > 0),\n    WebGLProbe: new WebGLProbe(),\n    dispose() {\n      // noop\n    },\n    copyPasteData,\n  };\n};\n","/**\n * This file is consumed by fabric.\n * The `./node` and `./browser` files define the env variable that is used by this module.\n * The `./browser` module is defined to be the default env and doesn't set the env at all.\n * This is done in order to support isomorphic usage for browser and node applications\n * since window and document aren't defined at time of import in SSR, we can't set env so we avoid it by deferring to the default env.\n */\n\nimport { config } from '../config';\nimport { getEnv as getBrowserEnv } from './browser';\nimport type { TFabricEnv } from './types';\nimport type { DOMWindow } from 'jsdom';\n\nlet env: TFabricEnv;\n\n/**\n * Sets the environment variables used by fabric.\\\n * This is exposed for special cases, such as configuring a test environment, and should be used with care.\n *\n * **CAUTION**: Must be called before using the package.\n *\n * @example\n * <caption>Passing `window` and `document` objects to fabric (in case they are mocked or something)</caption>\n * import { getEnv, setEnv } from 'fabric';\n * // we want fabric to use the `window` and `document` objects exposed by the environment we are running in.\n * setEnv({ ...getEnv(), window, document });\n * // done with setup, using fabric is now safe\n */\nexport const setEnv = (value: TFabricEnv) => {\n  env = value;\n};\n\n/**\n * In order to support SSR we **MUST** access the browser env only after the window has loaded\n */\nexport const getEnv = () => env || (env = getBrowserEnv());\n\nexport const getFabricDocument = (): Document => getEnv().document;\n\nexport const getFabricWindow = (): (Window & typeof globalThis) | DOMWindow =>\n  getEnv().window;\n\n/**\n * @returns the config value if defined, fallbacks to the environment value\n */\nexport const getDevicePixelRatio = () =>\n  Math.max(config.devicePixelRatio ?? getFabricWindow().devicePixelRatio, 1);\n","import { config } from './config';\nimport type { TRectBounds } from './typedefs';\n\nexport class Cache {\n  /**\n   * Cache of widths of chars in text rendering.\n   */\n  charWidthsCache: Record<\n    /** fontFamily */ string,\n    Record<\n      /** fontStyleCacheKey */ string,\n      Record</** char */ string, /** width */ number>\n    >\n  > = {};\n\n  /**\n   * @return {Object} reference to cache\n   */\n  getFontCache({\n    fontFamily,\n    fontStyle,\n    fontWeight,\n  }: {\n    fontFamily: string;\n    fontStyle: string;\n    fontWeight: string | number;\n  }) {\n    fontFamily = fontFamily.toLowerCase();\n    if (!this.charWidthsCache[fontFamily]) {\n      this.charWidthsCache[fontFamily] = {};\n    }\n    const fontCache = this.charWidthsCache[fontFamily];\n    const cacheKey = `${fontStyle.toLowerCase()}_${(\n      fontWeight + ''\n    ).toLowerCase()}`;\n    if (!fontCache[cacheKey]) {\n      fontCache[cacheKey] = {};\n    }\n    return fontCache[cacheKey];\n  }\n\n  /**\n   * Clear char widths cache for the given font family or all the cache if no\n   * fontFamily is specified.\n   * Use it if you know you are loading fonts in a lazy way and you are not waiting\n   * for custom fonts to load properly when adding text objects to the canvas.\n   * If a text object is added when its own font is not loaded yet, you will get wrong\n   * measurement and so wrong bounding boxes.\n   * After the font cache is cleared, either change the textObject text content or call\n   * initDimensions() to trigger a recalculation\n   * @param {String} [fontFamily] font family to clear\n   */\n  clearFontCache(fontFamily?: string) {\n    fontFamily = (fontFamily || '').toLowerCase();\n    if (!fontFamily) {\n      this.charWidthsCache = {};\n    } else if (this.charWidthsCache[fontFamily]) {\n      delete this.charWidthsCache[fontFamily];\n    }\n  }\n\n  /**\n   * Given current aspect ratio, determines the max width and height that can\n   * respect the total allowed area for the cache.\n   * @param {number} ar aspect ratio\n   * @return {number[]} Limited dimensions X and Y\n   */\n  limitDimsByArea(ar: number) {\n    const { perfLimitSizeTotal } = config;\n    const roughWidth = Math.sqrt(perfLimitSizeTotal * ar);\n    // we are not returning a point on purpose, to avoid circular dependencies\n    // this is an internal utility\n    return [\n      Math.floor(roughWidth),\n      Math.floor(perfLimitSizeTotal / roughWidth),\n    ];\n  }\n\n  /**\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n   * you do not get any speed benefit and you get a big object in memory.\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n   * can eventually clear it.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  boundsOfCurveCache: Record<string, TRectBounds> = {};\n}\n\nexport const cache = new Cache();\n","import type { TMat2D } from './typedefs';\n// use this syntax so babel plugin see this import here\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\nexport const halfPI = Math.PI / 2;\nexport const quarterPI = Math.PI / 4;\nexport const twoMathPi = Math.PI * 2;\nexport const PiBy180 = Math.PI / 180;\n\nexport const iMatrix = Object.freeze([1, 0, 0, 1, 0, 0]) as TMat2D;\nexport const DEFAULT_SVG_FONT_SIZE = 16;\nexport const ALIASING_LIMIT = 2;\n\n/* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\nexport const kRect = 1 - 0.5522847498;\n\nexport const CENTER = 'center';\nexport const LEFT = 'left';\nexport const TOP = 'top';\nexport const BOTTOM = 'bottom';\nexport const RIGHT = 'right';\nexport const NONE = 'none';\n\nexport const reNewline = /\\r?\\n/;\n\nexport const MOVING = 'moving';\nexport const SCALING = 'scaling';\nexport const ROTATING = 'rotating';\nexport const ROTATE = 'rotate';\nexport const SKEWING = 'skewing';\nexport const RESIZING = 'resizing';\nexport const MODIFY_POLY = 'modifyPoly';\nexport const MODIFY_PATH = 'modifyPath';\nexport const CHANGED = 'changed';\nexport const SCALE = 'scale';\nexport const SCALE_X = 'scaleX';\nexport const SCALE_Y = 'scaleY';\nexport const SKEW_X = 'skewX';\nexport const SKEW_Y = 'skewY';\nexport const FILL = 'fill';\nexport const STROKE = 'stroke';\nexport const MODIFIED = 'modified';\n","import { FabricError } from './util/internals/console';\n\n/*\n * This Map connects the objects type value with their\n * class implementation. It used from any object to understand which are\n * the classes to enlive when requesting a object.type = 'path' for example.\n * Objects uses it for clipPath, Canvas uses it for everything.\n * This is necessary for generic code to run and enlive instances from serialized representation.\n * You can customize which classes get enlived from SVG parsing using this classRegistry.\n * The Registry start empty and gets filled in depending which files you import.\n * If you want to be able to parse arbitrary SVGs or JSON representation of canvases, coming from\n * different sources you will need to import all fabric because you may need all classes.\n */\n\nexport const JSON = 'json';\nexport const SVG = 'svg';\n\nexport class ClassRegistry {\n  declare [JSON]: Map<string, any>;\n  declare [SVG]: Map<string, any>;\n\n  constructor() {\n    this[JSON] = new Map();\n    this[SVG] = new Map();\n  }\n\n  has(classType: string): boolean {\n    return this[JSON].has(classType);\n  }\n\n  getClass<T>(classType: string): T {\n    const constructor = this[JSON].get(classType);\n    if (!constructor) {\n      throw new FabricError(`No class registered for ${classType}`);\n    }\n    return constructor;\n  }\n\n  setClass(classConstructor: any, classType?: string) {\n    if (classType) {\n      this[JSON].set(classType, classConstructor);\n    } else {\n      this[JSON].set(classConstructor.type, classConstructor);\n      // legacy\n      // @TODO: needs to be removed in fabric 7 or 8\n      this[JSON].set(classConstructor.type.toLowerCase(), classConstructor);\n    }\n  }\n\n  getSVGClass(SVGTagName: string): any {\n    return this[SVG].get(SVGTagName);\n  }\n\n  setSVGClass(classConstructor: any, SVGTagName?: string) {\n    this[SVG].set(\n      SVGTagName ?? classConstructor.type.toLowerCase(),\n      classConstructor,\n    );\n  }\n}\n\nexport const classRegistry = new ClassRegistry();\n","import type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type { AnimationBase } from './AnimationBase';\n\n/**\n * Array holding all running animations\n */\nclass AnimationRegistry extends Array<AnimationBase> {\n  /**\n   * Remove a single animation using an animation context\n   * @param {AnimationBase} context\n   */\n  remove(context: AnimationBase) {\n    const index = this.indexOf(context);\n    index > -1 && this.splice(index, 1);\n  }\n\n  /**\n   * Cancel all running animations on the next frame\n   */\n  cancelAll() {\n    const animations = this.splice(0);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations attached to a canvas on the next frame\n   * @param {StaticCanvas} canvas\n   */\n  cancelByCanvas(canvas: StaticCanvas) {\n    if (!canvas) {\n      return [];\n    }\n    const animations = this.filter(\n      (animation) =>\n        animation.target === canvas ||\n        (typeof animation.target === 'object' &&\n          (animation.target as FabricObject)?.canvas === canvas),\n    );\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations for target on the next frame\n   * @param target\n   */\n  cancelByTarget(target: AnimationBase['target']) {\n    if (!target) {\n      return [];\n    }\n    const animations = this.filter((animation) => animation.target === target);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n}\n\nexport const runningAnimations = new AnimationRegistry();\n","export type TEventCallback<T = any> = (options: T) => any;\n\ntype EventRegistryObject<E> = {\n  [K in keyof E]?: TEventCallback<E[K]>;\n};\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n * @see {@link http://fabricjs.com/events|Events demo}\n */\nexport class Observable<EventSpec> {\n  private __eventListeners: Record<keyof EventSpec, TEventCallback[]> =\n    {} as Record<keyof EventSpec, TEventCallback[]>;\n\n  /**\n   * Observes specified event\n   * @alias on\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  on(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (!this.__eventListeners) {\n      this.__eventListeners = {} as Record<keyof EventSpec, TEventCallback[]>;\n    }\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this.on(eventName as K, handler as TEventCallback);\n      });\n      return () => this.off(arg0);\n    } else if (handler) {\n      const eventName = arg0;\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n      return () => this.off(eventName, handler);\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * Observes specified event **once**\n   * @alias once\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  once(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      const disposers: VoidFunction[] = [];\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        disposers.push(this.once(eventName as K, handler as TEventCallback));\n      });\n      return () => disposers.forEach((d) => d());\n    } else if (handler) {\n      const disposer = this.on<K, E>(\n        arg0,\n        function onceHandler(this: Observable<EventSpec>, ...args) {\n          handler.call(this, ...args);\n          disposer();\n        },\n      );\n      return disposer;\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} eventName\n   * @param {Function} [handler]\n   */\n  private _removeEventListener<K extends keyof EventSpec>(\n    eventName: K,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      const eventListener = this.__eventListeners[eventName];\n      const index = eventListener.indexOf(handler);\n      index > -1 && eventListener.splice(index, 1);\n    } else {\n      this.__eventListeners[eventName] = [];\n    }\n  }\n\n  /**\n   * Unsubscribe all event listeners for eventname.\n   * Do not use this pattern. You could kill internal fabricJS events.\n   * We know we should have protected events for internal flows, but we don't have yet\n   * @deprecated\n   * @param {string} eventName event name (eg. 'after:render')\n   */\n  off<K extends keyof EventSpec>(eventName: K): void;\n  /**\n   * unsubscribe an event listener\n   * @param {string} eventName event name (eg. 'after:render')\n   * @param {TEventCallback} handler event listener to unsubscribe\n   */\n  off<K extends keyof EventSpec>(eventName: K, handler: TEventCallback): void;\n  /**\n   * unsubscribe event listeners\n   * @param handlers handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   */\n  off(handlers: EventRegistryObject<EventSpec>): void;\n  /**\n   * unsubscribe all event listeners\n   */\n  off(): void;\n  off<K extends keyof EventSpec>(\n    arg0?: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (typeof arg0 === 'undefined') {\n      for (const eventName in this.__eventListeners) {\n        this._removeEventListener(eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (typeof arg0 === 'object') {\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this._removeEventListener(eventName as K, handler as TEventCallback);\n      });\n    } else {\n      this._removeEventListener(arg0, handler);\n    }\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   */\n  fire<K extends keyof EventSpec>(eventName: K, options?: EventSpec[K]) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    const listenersForEvent = this.__eventListeners[eventName]?.concat();\n    if (listenersForEvent) {\n      for (let i = 0; i < listenersForEvent.length; i++) {\n        listenersForEvent[i].call(this, options || {});\n      }\n    }\n  }\n}\n","/**\n * Removes value from an array.\n * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n * @param {Array} array\n * @param {*} value\n * @return {Array} original array\n */\nexport const removeFromArray = <T>(array: T[], value: T): T[] => {\n  const idx = array.indexOf(value);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n  return array;\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the cosin value for angle.\n */\nexport const cos = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 1;\n  }\n  const angleSlice = Math.abs(angle) / halfPI;\n  switch (angleSlice) {\n    case 1:\n    case 3:\n      return 0;\n    case 2:\n      return -1;\n  }\n  return Math.cos(angle);\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the sin value for angle.\n */\nexport const sin = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 0;\n  }\n  const angleSlice = angle / halfPI;\n  const value = Math.sign(angle);\n  switch (angleSlice) {\n    case 1:\n      return value;\n    case 2:\n      return 0;\n    case 3:\n      return -value;\n  }\n  return Math.sin(angle);\n};\n","import type { TMat2D, TRadian } from './typedefs';\nimport { cos } from './util/misc/cos';\nimport { sin } from './util/misc/sin';\n\nexport interface XY {\n  x: number;\n  y: number;\n}\n\n/**\n * Adaptation of work of Kevin Lindsey(kevin@kevlindev.com)\n */\nexport class Point implements XY {\n  declare x: number;\n\n  declare y: number;\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(point?: XY);\n  constructor(arg0: number | XY = 0, y = 0) {\n    if (typeof arg0 === 'object') {\n      this.x = arg0.x;\n      this.y = arg0.y;\n    } else {\n      this.x = arg0;\n      this.y = y;\n    }\n  }\n\n  /**\n   * Adds another point to this one and returns a new one with the sum\n   * @param {XY} that\n   * @return {Point} new Point instance with added values\n   */\n  add(that: XY): Point {\n    return new Point(this.x + that.x, this.y + that.y);\n  }\n\n  /**\n   * Adds another point to this one\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  addEquals(that: XY): Point {\n    this.x += that.x;\n    this.y += that.y;\n    return this;\n  }\n\n  /**\n   * Adds value to this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point} new Point with added value\n   */\n  scalarAdd(scalar: number): Point {\n    return new Point(this.x + scalar, this.y + scalar);\n  }\n\n  /**\n   * Adds value to this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarAddEquals(scalar: number): Point {\n    this.x += scalar;\n    this.y += scalar;\n    return this;\n  }\n\n  /**\n   * Subtracts another point from this point and returns a new one\n   * @param {XY} that\n   * @return {Point} new Point object with subtracted values\n   */\n  subtract(that: XY): Point {\n    return new Point(this.x - that.x, this.y - that.y);\n  }\n\n  /**\n   * Subtracts another point from this point\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  subtractEquals(that: XY): Point {\n    this.x -= that.x;\n    this.y -= that.y;\n    return this;\n  }\n\n  /**\n   * Subtracts value from this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarSubtract(scalar: number): Point {\n    return new Point(this.x - scalar, this.y - scalar);\n  }\n\n  /**\n   * Subtracts value from this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarSubtractEquals(scalar: number): Point {\n    this.x -= scalar;\n    this.y -= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this point by another value and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  multiply(that: XY): Point {\n    return new Point(this.x * that.x, this.y * that.y);\n  }\n\n  /**\n   * Multiplies this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarMultiply(scalar: number): Point {\n    return new Point(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Multiplies this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarMultiplyEquals(scalar: number): Point {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this point by another and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  divide(that: XY): Point {\n    return new Point(this.x / that.x, this.y / that.y);\n  }\n\n  /**\n   * Divides this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarDivide(scalar: number): Point {\n    return new Point(this.x / scalar, this.y / scalar);\n  }\n\n  /**\n   * Divides this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarDivideEquals(scalar: number): Point {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n\n  /**\n   * Returns true if this point is equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  eq(that: XY): boolean {\n    return this.x === that.x && this.y === that.y;\n  }\n\n  /**\n   * Returns true if this point is less than another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lt(that: XY): boolean {\n    return this.x < that.x && this.y < that.y;\n  }\n\n  /**\n   * Returns true if this point is less than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lte(that: XY): boolean {\n    return this.x <= that.x && this.y <= that.y;\n  }\n\n  /**\n\n   * Returns true if this point is greater another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gt(that: XY): boolean {\n    return this.x > that.x && this.y > that.y;\n  }\n\n  /**\n   * Returns true if this point is greater than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gte(that: XY): boolean {\n    return this.x >= that.x && this.y >= that.y;\n  }\n\n  /**\n   * Returns new point which is the result of linear interpolation with this one and another one\n   * @param {XY} that\n   * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n   * @return {Point}\n   */\n  lerp(that: XY, t = 0.5): Point {\n    t = Math.max(Math.min(1, t), 0);\n    return new Point(\n      this.x + (that.x - this.x) * t,\n      this.y + (that.y - this.y) * t,\n    );\n  }\n\n  /**\n   * Returns distance from this point and another one\n   * @param {XY} that\n   * @return {Number}\n   */\n  distanceFrom(that: XY): number {\n    const dx = this.x - that.x,\n      dy = this.y - that.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  radiansFrom(that: XY): number {\n    return Math.atan2(this.y - that.y, this.x - that.x);\n  }\n\n  /**\n   * Returns the point between this point and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  midPointFrom(that: XY): Point {\n    return this.lerp(that);\n  }\n\n  /**\n   * Returns a new point which is the min of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  min(that: XY): Point {\n    return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n  }\n\n  /**\n   * Returns a new point which is the max of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  max(that: XY): Point {\n    return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n  }\n\n  /**\n   * Returns string representation of this point\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  /**\n   * Sets x/y of this point\n   * @param {Number} x\n   * @param {Number} y\n   * @chainable\n   */\n  setXY(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x of this point\n   * @param {Number} x\n   * @chainable\n   */\n  setX(x: number) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets y of this point\n   * @param {Number} y\n   * @chainable\n   */\n  setY(y: number) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x/y of this point from another point\n   * @param {XY} that\n   * @chainable\n   */\n  setFromPoint(that: XY) {\n    this.x = that.x;\n    this.y = that.y;\n    return this;\n  }\n\n  /**\n   * Swaps x/y of this point and another point\n   * @param {XY} that\n   */\n  swap(that: XY) {\n    const x = this.x,\n      y = this.y;\n    this.x = that.x;\n    this.y = that.y;\n    that.x = x;\n    that.y = y;\n  }\n\n  /**\n   * return a cloned instance of the point\n   * @return {Point}\n   */\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Rotates `point` around `origin` with `radians`\n   * @static\n   * @memberOf fabric.util\n   * @param {XY} origin The origin of the rotation\n   * @param {TRadian} radians The radians of the angle for the rotation\n   * @return {Point} The new rotated point\n   */\n  rotate(radians: TRadian, origin: XY = ZERO): Point {\n    // TODO benchmark and verify the add and subtract how much cost\n    // and then in case early return if no origin is passed\n    const sinus = sin(radians),\n      cosinus = cos(radians);\n    const p = this.subtract(origin);\n    const rotated = new Point(\n      p.x * cosinus - p.y * sinus,\n      p.x * sinus + p.y * cosinus,\n    );\n    return rotated.add(origin);\n  }\n\n  /**\n   * Apply transform t to point p\n   * @static\n   * @memberOf fabric.util\n   * @param  {TMat2D} t The transform\n   * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n   * @return {Point} The transformed point\n   */\n  transform(t: TMat2D, ignoreOffset = false): Point {\n    return new Point(\n      t[0] * this.x + t[2] * this.y + (ignoreOffset ? 0 : t[4]),\n      t[1] * this.x + t[3] * this.y + (ignoreOffset ? 0 : t[5]),\n    );\n  }\n}\n\nexport const ZERO = new Point(0, 0);\n","import type { Constructor, TBBox } from './typedefs';\nimport { removeFromArray } from './util/internals/removeFromArray';\nimport { Point } from './Point';\nimport type { ActiveSelection } from './shapes/ActiveSelection';\nimport type { Group } from './shapes/Group';\nimport type { InteractiveFabricObject } from './shapes/Object/InteractiveObject';\nimport type { FabricObject } from './shapes/Object/FabricObject';\n\nexport const isCollection = (\n  fabricObject?: FabricObject,\n): fabricObject is Group | ActiveSelection => {\n  return !!fabricObject && Array.isArray((fabricObject as Group)._objects);\n};\n\nexport function createCollectionMixin<TBase extends Constructor>(Base: TBase) {\n  class Collection extends Base {\n    /**\n     * @type {FabricObject[]}\n     * @TODO needs to end up in the constructor too\n     */\n    _objects: FabricObject[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectAdded(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectRemoved(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onStackOrderChanged(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    /**\n     * Adds objects to collection\n     * Objects should be instances of (or inherit from) FabricObject\n     * @param {...FabricObject[]} objects to add\n     * @returns {number} new array length\n     */\n    add(...objects: FabricObject[]): number {\n      const size = this._objects.push(...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return size;\n    }\n\n    /**\n     * Inserts an object into collection at specified index\n     * @param {number} index Index to insert object at\n     * @param {...FabricObject[]} objects Object(s) to insert\n     * @returns {number} new array length\n     */\n    insertAt(index: number, ...objects: FabricObject[]) {\n      this._objects.splice(index, 0, ...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return this._objects.length;\n    }\n\n    /**\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * @private\n     * @param {...FabricObject[]} objects objects to remove\n     * @returns {FabricObject[]} removed objects\n     */\n    remove(...objects: FabricObject[]) {\n      const array = this._objects,\n        removed: FabricObject[] = [];\n      objects.forEach((object) => {\n        const index = array.indexOf(object);\n        // only call onObjectRemoved if an object was actually removed\n        if (index !== -1) {\n          array.splice(index, 1);\n          removed.push(object);\n          this._onObjectRemoved(object);\n        }\n      });\n      return removed;\n    }\n\n    /**\n     * Executes given function for each object in this group\n     * A simple shortcut for getObjects().forEach, before es6 was more complicated,\n     * now is just a shortcut.\n     * @param {Function} callback\n     *                   Callback invoked with current object as first argument,\n     *                   index - as second and an array of all objects - as third.\n     */\n    forEachObject(\n      callback: (\n        object: FabricObject,\n        index: number,\n        array: FabricObject[],\n      ) => any,\n    ) {\n      this.getObjects().forEach((object, index, objects) =>\n        callback(object, index, objects),\n      );\n    }\n\n    /**\n     * Returns an array of children objects of this instance\n     * @param {...String} [types] When specified, only objects of these types are returned\n     * @return {Array}\n     */\n    getObjects(...types: string[]) {\n      if (types.length === 0) {\n        return [...this._objects];\n      }\n      return this._objects.filter((o) => o.isType(...types));\n    }\n\n    /**\n     * Returns object at specified index\n     * @param {Number} index\n     * @return {Object} object at index\n     */\n    item(index: number) {\n      return this._objects[index];\n    }\n\n    /**\n     * Returns true if collection contains no objects\n     * @return {Boolean} true if collection is empty\n     */\n    isEmpty() {\n      return this._objects.length === 0;\n    }\n\n    /**\n     * Returns a size of a collection (i.e: length of an array containing its objects)\n     * @return {Number} Collection size\n     */\n    size() {\n      return this._objects.length;\n    }\n\n    /**\n     * Returns true if collection contains an object.\\\n     * **Prefer using {@link FabricObject#isDescendantOf} for performance reasons**\n     * instead of `a.contains(b)` use `b.isDescendantOf(a)`\n     * @param {Object} object Object to check against\n     * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n     * @return {Boolean} `true` if collection contains an object\n     */\n    contains(object: FabricObject, deep?: boolean): boolean {\n      if (this._objects.includes(object)) {\n        return true;\n      } else if (deep) {\n        return this._objects.some(\n          (obj) =>\n            obj instanceof Collection &&\n            (obj as unknown as Collection).contains(object, true),\n        );\n      }\n      return false;\n    }\n\n    /**\n     * Returns number representation of a collection complexity\n     * @return {Number} complexity\n     */\n    complexity() {\n      return this._objects.reduce((memo, current) => {\n        memo += current.complexity ? current.complexity() : 0;\n        return memo;\n      }, 0);\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectToBack(object: FabricObject) {\n      if (!object || object === this._objects[0]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectToFront(object: FabricObject) {\n      if (!object || object === this._objects[this._objects.length - 1]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, `intersecting` allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectBackwards(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== 0) {\n        // if object is not on the bottom of stack\n        const newIdx = this.findNewLowerIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectForward(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== this._objects.length - 1) {\n        // if object is not on top of stack (last item in an array)\n        const newIdx = this.findNewUpperIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {number} index Position to move to\n     * @returns {boolean} true if change occurred\n     */\n    moveObjectTo(object: FabricObject, index: number) {\n      if (object === this._objects[index]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    findNewLowerIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse down the stack looking for the nearest intersecting object\n        for (let i = idx - 1; i >= 0; --i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    }\n\n    findNewUpperIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse up the stack looking for the nearest intersecting object\n        for (let i = idx + 1; i < this._objects.length; ++i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    }\n\n    /**\n     * Given a bounding box, return all the objects of the collection that are contained in the bounding box.\n     * If `includeIntersecting` is true, return also the objects that intersect the bounding box as well.\n     * This is meant to work with selection. Is not a generic method.\n     * @param {TBBox} bbox a bounding box in scene coordinates\n     * @param {{ includeIntersecting?: boolean }} options an object with includeIntersecting\n     * @returns array of objects contained in the bounding box, ordered from top to bottom stacking wise\n     */\n    collectObjects(\n      { left, top, width, height }: TBBox,\n      { includeIntersecting = true }: { includeIntersecting?: boolean } = {},\n    ) {\n      const objects: InteractiveFabricObject[] = [],\n        tl = new Point(left, top),\n        br = tl.add(new Point(width, height));\n\n      // we iterate reverse order to collect top first in case of click.\n      for (let i = this._objects.length - 1; i >= 0; i--) {\n        const object = this._objects[i] as unknown as InteractiveFabricObject;\n        if (\n          object.selectable &&\n          object.visible &&\n          ((includeIntersecting && object.intersectsWithRect(tl, br)) ||\n            object.isContainedWithinRect(tl, br) ||\n            (includeIntersecting && object.containsPoint(tl)) ||\n            (includeIntersecting && object.containsPoint(br)))\n        ) {\n          objects.push(object);\n        }\n      }\n\n      return objects;\n    }\n  }\n\n  // https://github.com/microsoft/TypeScript/issues/32080\n  return Collection;\n}\n","import { Observable } from './Observable';\n\nexport class CommonMethods<EventSpec> extends Observable<EventSpec> {\n  /**\n   * Sets object's properties from options, for initialization only\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected _setOptions(options: any = {}) {\n    for (const prop in options) {\n      this.set(prop, options[prop]);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setObject(obj: Record<string, any>) {\n    for (const prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  }\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   */\n  set(key: string | Record<string, any>, value?: any) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    } else {\n      this._set(key, value);\n    }\n    return this;\n  }\n\n  _set(key: string, value: any) {\n    this[key as keyof this] = value;\n  }\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   */\n  toggle(property: string) {\n    const value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  }\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get(property: string): any {\n    return this[property as keyof this];\n  }\n}\n","import { getFabricWindow } from '../../env';\n\nexport function requestAnimFrame(callback: FrameRequestCallback): number {\n  return getFabricWindow().requestAnimationFrame(callback);\n}\n\nexport function cancelAnimFrame(handle: number): void {\n  return getFabricWindow().cancelAnimationFrame(handle);\n}\n","let id = 0;\n\nexport const uid = () => id++;\n","import { getFabricDocument } from '../../env';\nimport type { ImageFormat, TSize } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElementFor(canvas);\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\n/**\n * Creates a canvas element as big as another\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElementFor = (\n  canvas: HTMLCanvasElement | ImageData | HTMLImageElement | TSize,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number,\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string,\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n\nexport const toBlob = (\n  canvasEl: HTMLCanvasElement,\n  format?: ImageFormat,\n  quality?: number,\n): Promise<Blob | null> =>\n  new Promise((resolve, _) => {\n    canvasEl.toBlob(resolve, `image/${format}`, quality);\n  });\n","import type { TRadian, TDegree } from '../../typedefs';\nimport { PiBy180 } from '../../constants';\n\n/**\n * Transforms degrees to radians.\n * @param {TDegree} degrees value in degrees\n * @return {TRadian} value in radians\n */\nexport const degreesToRadians = (degrees: TDegree): TRadian =>\n  (degrees * PiBy180) as TRadian;\n\n/**\n * Transforms radians to degrees.\n * @param {TRadian} radians value in radians\n * @return {TDegree} value in degrees\n */\nexport const radiansToDegrees = (radians: TRadian): TDegree =>\n  (radians / PiBy180) as TDegree;\n","import { iMatrix } from '../../constants';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TDegree, TRadian, TMat2D } from '../../typedefs';\nimport { cos } from './cos';\nimport { degreesToRadians, radiansToDegrees } from './radiansDegreesConversion';\nimport { sin } from './sin';\n\nexport type TRotateMatrixArgs = {\n  angle?: TDegree;\n};\n\nexport type TTranslateMatrixArgs = {\n  translateX?: number;\n  translateY?: number;\n};\n\nexport type TScaleMatrixArgs = {\n  scaleX?: number;\n  scaleY?: number;\n  flipX?: boolean;\n  flipY?: boolean;\n  skewX?: TDegree;\n  skewY?: TDegree;\n};\n\nexport type TComposeMatrixArgs = TTranslateMatrixArgs &\n  TRotateMatrixArgs &\n  TScaleMatrixArgs;\n\nexport type TQrDecomposeOut = Required<\n  Omit<TComposeMatrixArgs, 'flipX' | 'flipY'>\n>;\n\nexport const isIdentityMatrix = (mat: TMat2D) =>\n  mat.every((value, index) => value === iMatrix[index]);\n\n/**\n * Apply transform t to point p\n * @deprecated use {@link Point#transform}\n * @param  {Point | XY} p The point to transform\n * @param  {Array} t The transform\n * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n * @return {Point} The transformed point\n */\nexport const transformPoint = (\n  p: XY,\n  t: TMat2D,\n  ignoreOffset?: boolean,\n): Point => new Point(p).transform(t, ignoreOffset);\n\n/**\n * Invert transformation t\n * @param {Array} t The transform\n * @return {Array} The inverted transform\n */\nexport const invertTransform = (t: TMat2D): TMat2D => {\n  const a = 1 / (t[0] * t[3] - t[1] * t[2]),\n    r = [a * t[3], -a * t[1], -a * t[2], a * t[0], 0, 0] as TMat2D,\n    { x, y } = new Point(t[4], t[5]).transform(r, true);\n  r[4] = -x;\n  r[5] = -y;\n  return r;\n};\n\n/**\n * Multiply matrix A by matrix B to nest transformations\n * @param  {TMat2D} a First transformMatrix\n * @param  {TMat2D} b Second transformMatrix\n * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n * @return {TMat2D} The product of the two transform matrices\n */\nexport const multiplyTransformMatrices = (\n  a: TMat2D,\n  b: TMat2D,\n  is2x2?: boolean,\n): TMat2D =>\n  [\n    a[0] * b[0] + a[2] * b[1],\n    a[1] * b[0] + a[3] * b[1],\n    a[0] * b[2] + a[2] * b[3],\n    a[1] * b[2] + a[3] * b[3],\n    is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n    is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5],\n  ] as TMat2D;\n\n/**\n * Multiplies {@link matrices} such that a matrix defines the plane for the rest of the matrices **after** it\n *\n * `multiplyTransformMatrixArray([A, B, C, D])` is equivalent to `A(B(C(D)))`\n *\n * @param matrices an array of matrices\n * @param [is2x2] flag to multiply matrices as 2x2 matrices\n * @returns the multiplication product\n */\nexport const multiplyTransformMatrixArray = (\n  matrices: (TMat2D | undefined | null | false)[],\n  is2x2?: boolean,\n) =>\n  matrices.reduceRight(\n    (product: TMat2D, curr) =>\n      curr && product\n        ? multiplyTransformMatrices(curr, product, is2x2)\n        : curr || product,\n    undefined as unknown as TMat2D,\n  ) || iMatrix.concat();\n\nexport const calcPlaneRotation = ([a, b]: TMat2D) =>\n  Math.atan2(b, a) as TRadian;\n\n/**\n * Decomposes standard 2x3 matrix into transform components\n * @param  {TMat2D} a transformMatrix\n * @return {Object} Components of transform\n */\nexport const qrDecompose = (a: TMat2D): TQrDecomposeOut => {\n  const angle = calcPlaneRotation(a),\n    denom = Math.pow(a[0], 2) + Math.pow(a[1], 2),\n    scaleX = Math.sqrt(denom),\n    scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n    skewX = Math.atan2(a[0] * a[2] + a[1] * a[3], denom);\n  return {\n    angle: radiansToDegrees(angle),\n    scaleX,\n    scaleY,\n    skewX: radiansToDegrees(skewX),\n    skewY: 0 as TDegree,\n    translateX: a[4] || 0,\n    translateY: a[5] || 0,\n  };\n};\n\n/**\n * Generate a translation matrix\n *\n * A translation matrix in the form of\n * [ 1 0 x ]\n * [ 0 1 y ]\n * [ 0 0 1 ]\n *\n * See @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#translate for more details\n *\n * @param {number} x translation on X axis\n * @param {number} [y] translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createTranslateMatrix = (x: number, y = 0): TMat2D => [\n  1,\n  0,\n  0,\n  1,\n  x,\n  y,\n];\n\n/**\n * Generate a rotation matrix around around a point (x,y), defaulting to (0,0)\n *\n * A matrix in the form of\n * [cos(a) -sin(a) -x*cos(a)+y*sin(a)+x]\n * [sin(a)  cos(a) -x*sin(a)-y*cos(a)+y]\n * [0       0      1                 ]\n *\n *\n * @param {TDegree} angle rotation in degrees\n * @param {XY} [pivotPoint] pivot point to rotate around\n * @returns {TMat2D} matrix\n */\nexport function createRotateMatrix(\n  { angle = 0 }: TRotateMatrixArgs = {},\n  { x = 0, y = 0 }: Partial<XY> = {},\n): TMat2D {\n  const angleRadiant = degreesToRadians(angle),\n    cosValue = cos(angleRadiant),\n    sinValue = sin(angleRadiant);\n  return [\n    cosValue,\n    sinValue,\n    -sinValue,\n    cosValue,\n    x ? x - (cosValue * x - sinValue * y) : 0,\n    y ? y - (sinValue * x + cosValue * y) : 0,\n  ];\n}\n\n/**\n * Generate a scale matrix around the point (0,0)\n *\n * A matrix in the form of\n * [x 0 0]\n * [0 y 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#scale\n *\n * @param {number} x scale on X axis\n * @param {number} [y] scale on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createScaleMatrix = (x: number, y: number = x): TMat2D => [\n  x,\n  0,\n  0,\n  y,\n  0,\n  0,\n];\n\nexport const angleToSkew = (angle: TDegree) =>\n  Math.tan(degreesToRadians(angle));\n\nexport const skewToAngle = (value: TRadian) =>\n  radiansToDegrees(Math.atan(value));\n\n/**\n * Generate a skew matrix for the X axis\n *\n * A matrix in the form of\n * [1 x 0]\n * [0 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewx\n *\n * @param {TDegree} skewValue translation on X axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewXMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  0,\n  angleToSkew(skewValue),\n  1,\n  0,\n  0,\n];\n\n/**\n * Generate a skew matrix for the Y axis\n *\n * A matrix in the form of\n * [1 0 0]\n * [y 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewy\n *\n * @param {TDegree} skewValue translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewYMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  angleToSkew(skewValue),\n  0,\n  1,\n  0,\n  0,\n];\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet.\n * is called DimensionsTransformMatrix because those properties are the one that influence\n * the size of the resulting box of the object.\n * @param  {Object} options\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @return {Number[]} transform matrix\n */\nexport const calcDimensionsMatrix = ({\n  scaleX = 1,\n  scaleY = 1,\n  flipX = false,\n  flipY = false,\n  skewX = 0 as TDegree,\n  skewY = 0 as TDegree,\n}: TScaleMatrixArgs) => {\n  let matrix = createScaleMatrix(\n    flipX ? -scaleX : scaleX,\n    flipY ? -scaleY : scaleY,\n  );\n  if (skewX) {\n    matrix = multiplyTransformMatrices(matrix, createSkewXMatrix(skewX), true);\n  }\n  if (skewY) {\n    matrix = multiplyTransformMatrices(matrix, createSkewYMatrix(skewY), true);\n  }\n  return matrix;\n};\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet\n * Before changing this function look at: src/benchmarks/calcTransformMatrix.mjs\n * @param  {Object} options\n * @param  {Number} [options.angle]\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @param  {Number} [options.translateX]\n * @param  {Number} [options.translateY]\n * @return {Number[]} transform matrix\n */\nexport const composeMatrix = (options: TComposeMatrixArgs): TMat2D => {\n  const { translateX = 0, translateY = 0, angle = 0 as TDegree } = options;\n  let matrix = createTranslateMatrix(translateX, translateY);\n  if (angle) {\n    matrix = multiplyTransformMatrices(matrix, createRotateMatrix({ angle }));\n  }\n  const scaleMatrix = calcDimensionsMatrix(options);\n  if (!isIdentityMatrix(scaleMatrix)) {\n    matrix = multiplyTransformMatrices(matrix, scaleMatrix);\n  }\n  return matrix;\n};\n","import { noop } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type {\n  Abortable,\n  Constructor,\n  TCrossOrigin,\n  TFiller,\n} from '../../typedefs';\nimport { createImage } from './dom';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { BaseFilter } from '../../filters/BaseFilter';\nimport type { FabricObject as BaseFabricObject } from '../../shapes/Object/Object';\nimport { FabricError, SignalAbortedError } from '../internals/console';\nimport type { Shadow } from '../../Shadow';\n\nexport type LoadImageOptions = Abortable & {\n  /**\n   * cors value for the image loading, default to anonymous\n   */\n  crossOrigin?: TCrossOrigin;\n};\n\n/**\n * Loads image element from given url and resolve it, or catch.\n * @param {String} url URL representing an image\n * @param {LoadImageOptions} [options] image loading options\n * @returns {Promise<HTMLImageElement>} the loaded image.\n */\nexport const loadImage = (\n  url: string,\n  { signal, crossOrigin = null }: LoadImageOptions = {},\n) =>\n  new Promise<HTMLImageElement>(function (resolve, reject) {\n    if (signal && signal.aborted) {\n      return reject(new SignalAbortedError('loadImage'));\n    }\n    const img = createImage();\n    let abort: EventListenerOrEventListenerObject;\n    if (signal) {\n      abort = function (err: Event) {\n        img.src = '';\n        reject(err);\n      };\n      signal.addEventListener('abort', abort, { once: true });\n    }\n    const done = function () {\n      img.onload = img.onerror = null;\n      abort && signal?.removeEventListener('abort', abort);\n      resolve(img);\n    };\n    if (!url) {\n      done();\n      return;\n    }\n    img.onload = done;\n    img.onerror = function () {\n      abort && signal?.removeEventListener('abort', abort);\n      reject(new FabricError(`Error loading ${img.src}`));\n    };\n    crossOrigin && (img.crossOrigin = crossOrigin);\n    img.src = url;\n  });\n\nexport type EnlivenObjectOptions = Abortable & {\n  /**\n   * Method for further parsing of object elements,\n   * called after each fabric object created.\n   */\n  reviver?: <\n    T extends\n      | BaseFabricObject\n      | FabricObject\n      | BaseFilter<string>\n      | Shadow\n      | TFiller,\n  >(\n    serializedObj: Record<string, any>,\n    instance: T,\n  ) => void;\n};\n\n/**\n * @TODO type this correctly.\n * Creates corresponding fabric instances from their object representations\n * @param {Object[]} objects Objects to enliven\n * @param {EnlivenObjectOptions} [options]\n * @param {(serializedObj: object, instance: FabricObject) => any} [options.reviver] Method for further parsing of object elements,\n * called after each fabric object created.\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<FabricObject[]>}\n */\nexport const enlivenObjects = <\n  T extends\n    | BaseFabricObject\n    | FabricObject\n    | BaseFilter<string>\n    | Shadow\n    | TFiller,\n>(\n  objects: any[],\n  { signal, reviver = noop }: EnlivenObjectOptions = {},\n) =>\n  new Promise<T[]>((resolve, reject) => {\n    const instances: T[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    Promise.all(\n      objects.map((obj) =>\n        classRegistry\n          .getClass<\n            Constructor<T> & {\n              fromObject(options: any, context: Abortable): Promise<T>;\n            }\n          >(obj.type)\n          .fromObject(obj, { signal })\n          .then((fabricInstance) => {\n            reviver(obj, fabricInstance);\n            instances.push(fabricInstance);\n            return fabricInstance;\n          }),\n      ),\n    )\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance) => {\n          (instance as FabricObject).dispose &&\n            (instance as FabricObject).dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n\n/**\n * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n * @param {Object} object with properties to enlive ( fill, stroke, clipPath, path )\n * @param {object} [options]\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<Record<string, FabricObject | TFiller | null>>} the input object with enlived values\n */\nexport const enlivenObjectEnlivables = <\n  R = Record<string, FabricObject | TFiller | null>,\n>(\n  serializedObject: any,\n  { signal }: Abortable = {},\n) =>\n  new Promise<R>((resolve, reject) => {\n    const instances: (FabricObject | TFiller | Shadow)[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    // enlive every possible property\n    const promises = Object.values(serializedObject).map((value: any) => {\n      if (!value) {\n        return value;\n      }\n      /**\n       * clipPath or shadow or gradient or text on a path or a pattern,\n       * or the backgroundImage or overlayImage of canvas\n       * If we have a type and there is a classe registered for it, we enlive it.\n       * If there is no class registered for it we return the value as is\n       * */\n      if (value.type && classRegistry.has(value.type)) {\n        return enlivenObjects<FabricObject | Shadow | TFiller>([value], {\n          signal,\n        }).then(([enlived]) => {\n          instances.push(enlived);\n          return enlived;\n        });\n      }\n      return value;\n    });\n    const keys = Object.keys(serializedObject);\n    Promise.all(promises)\n      .then((enlived) => {\n        return enlived.reduce((acc, instance, index) => {\n          acc[keys[index]] = instance;\n          return acc;\n        }, {});\n      })\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance: any) => {\n          instance.dispose && instance.dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n","/**\n * Populates an object with properties of another object\n * @param {Object} source Source object\n * @param {string[]} properties Properties names to include\n * @returns object populated with the picked keys\n */\nexport const pick = <T extends Record<string, any>>(\n  source: T,\n  keys: (keyof T)[] = [],\n) => {\n  return keys.reduce((o, key) => {\n    if (key in source) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n\nexport const pickBy = <T extends Record<string, any>>(\n  source: T,\n  predicate: <K extends keyof T>(value: T[K], key: K, collection: T) => boolean,\n) => {\n  return (Object.keys(source) as (keyof T)[]).reduce((o, key) => {\n    if (predicate(source[key], key, source)) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n","/**\n * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n * @param {number|string} number number to operate on\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {number}\n */\nexport const toFixed = (number: number | string, fractionDigits: number) =>\n  parseFloat(Number(number).toFixed(fractionDigits));\n","import type { TMat2D } from '../../typedefs';\nimport { toFixed } from './toFixed';\nimport { config } from '../../config';\n\n/**\n * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n * @param {TMat2D} transform an array with 6 numbers\n * @return {String} transform matrix for svg\n */\nexport const matrixToSVG = (transform: TMat2D) =>\n  'matrix(' +\n  transform\n    .map((value) => toFixed(value, config.NUM_FRACTION_DIGITS))\n    .join(' ') +\n  ')';\n","import type { FabricObject } from '../shapes/Object/Object';\nimport type { TFiller } from '../typedefs';\nimport type { FabricText } from '../shapes/Text/Text';\nimport type { Pattern } from '../Pattern';\nimport type { Path } from '../shapes/Path';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\n\nexport const isFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && (filler as TFiller).toLive !== undefined;\n};\n\nexport const isSerializableFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && typeof (filler as TFiller).toObject === 'function';\n};\n\nexport const isPattern = (filler: TFiller): filler is Pattern => {\n  return (\n    !!filler && (filler as Pattern).offsetX !== undefined && 'source' in filler\n  );\n};\n\nexport const isTextObject = (\n  fabricObject?: FabricObject,\n): fabricObject is FabricText => {\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as FabricText)._renderText === 'function'\n  );\n};\n\nexport const isPath = (fabricObject?: FabricObject): fabricObject is Path => {\n  // we could use instanceof but that would mean pulling in Text code for a simple check\n  // @todo discuss what to do and how to do\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as Path)._renderPathCommands === 'function'\n  );\n};\n\nexport const isActiveSelection = (\n  fabricObject?: FabricObject,\n): fabricObject is ActiveSelection =>\n  !!fabricObject && 'multiSelectionStacking' in fabricObject;\n","/**\n * Returns element scroll offsets\n * @param {HTMLElement} element Element to operate on\n * @return {Object} Object with left/top values\n */\nexport function getScrollLeftTop(element: HTMLElement | null) {\n  const doc = element && getDocumentFromElement(element);\n  let left = 0,\n    top = 0;\n  if (!element || !doc) {\n    return { left, top };\n  }\n  let elementLoop: HTMLElement | Document | ShadowRoot = element;\n  const docElement = doc.documentElement,\n    body = doc.body || {\n      scrollLeft: 0,\n      scrollTop: 0,\n    };\n  // While loop checks (and then sets element to) .parentNode OR .host\n  //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n  //  but the .parentNode of a root ShadowDOM node will always be null, instead\n  //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n  while (\n    elementLoop &&\n    (elementLoop.parentNode || (elementLoop as unknown as ShadowRoot).host)\n  ) {\n    elementLoop = (elementLoop.parentNode ||\n      (elementLoop as unknown as ShadowRoot).host) as\n      | HTMLElement\n      | Document\n      | ShadowRoot;\n    if (elementLoop === doc) {\n      left = body.scrollLeft || docElement.scrollLeft || 0;\n      top = body.scrollTop || docElement.scrollTop || 0;\n    } else {\n      left += (elementLoop as HTMLElement).scrollLeft || 0;\n      top += (elementLoop as HTMLElement).scrollTop || 0;\n    }\n\n    if (\n      elementLoop.nodeType === 1 &&\n      (elementLoop as HTMLElement).style.position === 'fixed'\n    ) {\n      break;\n    }\n  }\n\n  return { left, top };\n}\n\nexport const getDocumentFromElement = (el: HTMLElement) =>\n  el.ownerDocument || null;\n\nexport const getWindowFromElement = (el: HTMLElement) =>\n  el.ownerDocument?.defaultView || null;\n","import { NONE } from '../../constants';\nimport type { TSize } from '../../typedefs';\nimport {\n  getDocumentFromElement,\n  getWindowFromElement,\n  getScrollLeftTop,\n} from '../../util/dom_misc';\n\nexport const setCanvasDimensions = (\n  el: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  { width, height }: TSize,\n  retinaScaling = 1,\n) => {\n  el.width = width;\n  el.height = height;\n  if (retinaScaling > 1) {\n    el.setAttribute('width', (width * retinaScaling).toString());\n    el.setAttribute('height', (height * retinaScaling).toString());\n    ctx.scale(retinaScaling, retinaScaling);\n  }\n};\n\nexport type CSSDimensions = {\n  width: number | string;\n  height: number | string;\n};\n\nexport const setCSSDimensions = (\n  el: HTMLElement,\n  { width, height }: Partial<CSSDimensions>,\n) => {\n  width && (el.style.width = typeof width === 'number' ? `${width}px` : width);\n  height &&\n    (el.style.height = typeof height === 'number' ? `${height}px` : height);\n};\n\n/**\n * Returns offset for a given element\n * @param {HTMLElement} element Element to get offset for\n * @return {Object} Object with \"left\" and \"top\" properties\n */\nexport function getElementOffset(element: HTMLElement) {\n  const doc = element && getDocumentFromElement(element),\n    offset = { left: 0, top: 0 };\n\n  if (!doc) {\n    return offset;\n  }\n  const elemStyle: CSSStyleDeclaration =\n    getWindowFromElement(element)?.getComputedStyle(element, null) ||\n    ({} as CSSStyleDeclaration);\n  offset.left += parseInt(elemStyle.borderLeftWidth, 10) || 0;\n  offset.top += parseInt(elemStyle.borderTopWidth, 10) || 0;\n  offset.left += parseInt(elemStyle.paddingLeft, 10) || 0;\n  offset.top += parseInt(elemStyle.paddingTop, 10) || 0;\n\n  let box = { left: 0, top: 0 };\n\n  const docElem = doc.documentElement;\n  if (typeof element.getBoundingClientRect !== 'undefined') {\n    box = element.getBoundingClientRect();\n  }\n\n  const scrollLeftTop = getScrollLeftTop(element);\n\n  return {\n    left:\n      box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n    top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top,\n  };\n}\n\n/**\n * Makes element unselectable\n * @param {HTMLElement} element Element to make unselectable\n * @return {HTMLElement} Element that was passed in\n */\nexport function makeElementUnselectable(element: HTMLElement) {\n  if (typeof element.onselectstart !== 'undefined') {\n    element.onselectstart = () => false;\n  }\n  element.style.userSelect = NONE;\n  return element;\n}\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport type { CSSDimensions } from './util';\nimport { setCSSDimensions, getElementOffset } from './util';\nimport { createCanvasElement, isHTMLCanvas } from '../../util/misc/dom';\nimport { setCanvasDimensions } from './util';\nimport { FabricError } from '../../util/internals/console';\n\nexport type CanvasItem = {\n  el: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nexport class StaticCanvasDOMManager {\n  /**\n   * Keeps a copy of the canvas style before setting retina scaling and other potions\n   * in order to return it to original state on dispose\n   * @type string\n   */\n  private _originalCanvasStyle?: string;\n\n  lower: CanvasItem;\n\n  constructor(arg0?: string | HTMLCanvasElement) {\n    const el = this.createLowerCanvas(arg0);\n    this.lower = { el, ctx: el.getContext('2d')! };\n  }\n\n  protected createLowerCanvas(arg0?: HTMLCanvasElement | string) {\n    // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n    const el = isHTMLCanvas(arg0)\n      ? arg0\n      : (arg0 &&\n          (getFabricDocument().getElementById(arg0) as HTMLCanvasElement)) ||\n        createCanvasElement();\n    if (el.hasAttribute('data-fabric')) {\n      throw new FabricError(\n        'Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?',\n      );\n    }\n    this._originalCanvasStyle = el.style.cssText;\n    el.setAttribute('data-fabric', 'main');\n    el.classList.add('lower-canvas');\n    return el;\n  }\n\n  cleanupDOM({ width, height }: TSize) {\n    const { el } = this.lower;\n    // restore canvas style and attributes\n    el.classList.remove('lower-canvas');\n    el.removeAttribute('data-fabric');\n    // restore canvas size to original size in case retina scaling was applied\n    el.setAttribute('width', `${width}`);\n    el.setAttribute('height', `${height}`);\n    el.style.cssText = this._originalCanvasStyle || '';\n    this._originalCanvasStyle = undefined;\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    const { el, ctx } = this.lower;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>) {\n    setCSSDimensions(this.lower.el, size);\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   */\n  calcOffset() {\n    return getElementOffset(this.lower.el);\n  }\n\n  dispose() {\n    getEnv().dispose(this.lower.el);\n    // @ts-expect-error disposing\n    delete this.lower;\n  }\n}\n","import { iMatrix } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TFiller, TMat2D, TOptions } from '../typedefs';\n\ninterface CanvasDrawableOptions {\n  /**\n   * if set to false background image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  backgroundVpt: boolean;\n\n  /**\n   * Background color of canvas instance.\n   * @type {(String|TFiller)}\n   * @default\n   */\n  backgroundColor: TFiller | string;\n\n  /**\n   * Background image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as background, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  backgroundImage?: FabricObject;\n\n  /**\n   * if set to false overlay image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  overlayVpt: boolean;\n\n  /**\n   * Overlay color of canvas instance.\n   * @since 1.3.9\n   * @type {(String|TFiller)}\n   * @default\n   */\n  overlayColor: TFiller | string;\n\n  /**\n   * Overlay image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  overlayImage?: FabricObject;\n}\n\ninterface CanvasRenderingOptions {\n  /**\n   * Indicates whether {@link StaticCanvas#add}, {@link StaticCanvas#insertAt} and {@link StaticCanvas#remove},\n   * {@link StaticCanvas#moveTo}, {@link StaticCanvas#clear} and many more, should also re-render canvas.\n   * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n   * since the renders are queued and executed one per frame.\n   * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n   * Left default to true to do not break documentation and old app, fiddles.\n   * @type Boolean\n   * @default\n   */\n  renderOnAddRemove: boolean;\n\n  /**\n   * Based on vptCoords and object.aCoords, skip rendering of objects that\n   * are not included in current viewport.\n   * May greatly help in applications with crowded canvas and use of zoom/pan\n   * If One of the corner of the bounding box of the object is on the canvas\n   * the objects get rendered.\n   * @type Boolean\n   * @default true\n   */\n  skipOffscreen: boolean;\n\n  /**\n   * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n   * @type Boolean\n   * @default\n   */\n  enableRetinaScaling: boolean;\n\n  /**\n   * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n   * @type Boolean\n   * @default\n   */\n  imageSmoothingEnabled: boolean;\n\n  /**\n   * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n   * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n   * top left corner of the canvas.\n   * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n   * @type FabricObject\n   */\n  clipPath?: FabricObject;\n}\n\nexport interface CanvasExportOptions {\n  /**\n   * Indicates whether toObject/toDatalessObject should include default values\n   * if set to false, takes precedence over the object value.\n   * @type Boolean\n   * @default\n   */\n  includeDefaultValues: boolean;\n\n  /**\n   * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n   * a zoomed canvas will then produce zoomed SVG output.\n   * @type Boolean\n   * @default\n   */\n  svgViewportTransformation: boolean;\n}\n\nexport interface StaticCanvasOptions\n  extends CanvasDrawableOptions,\n    CanvasRenderingOptions,\n    CanvasExportOptions {\n  /**\n   * Width in virtual/logical pixels of the canvas.\n   * The canvas can be larger than width if retina scaling is active\n   * @type number\n   */\n  width: number;\n\n  /**\n   * Height in virtual/logical pixels of the canvas.\n   * The canvas can be taller than width if retina scaling is active\n   * @type height\n   */\n  height: number;\n\n  /**\n   * Indicates whether object controls (borders/controls) are rendered above overlay image\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: boolean;\n\n  /**\n   * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n   * It gives PRIORITY to DOM scrolling, it doesn't make it always possible.\n   * If is true, when using a touch event on the canvas, the canvas will scroll if scroll is possible.\n   * If we are in drawing mode or if we are selecting an object the canvas preventDefault and so it won't scroll\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: boolean;\n\n  /**\n   * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n   * @type Array\n   * @example <caption>Default transform</caption>\n   * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n   * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n   * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n   * @default\n   */\n  viewportTransform: TMat2D;\n}\n\nexport const staticCanvasDefaults: TOptions<StaticCanvasOptions> = {\n  backgroundVpt: true,\n  backgroundColor: '',\n  overlayVpt: true,\n  overlayColor: '',\n\n  includeDefaultValues: true,\n  svgViewportTransformation: true,\n\n  renderOnAddRemove: true,\n  skipOffscreen: true,\n  enableRetinaScaling: true,\n  imageSmoothingEnabled: true,\n\n  /**\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: false,\n  /**\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: false,\n\n  viewportTransform: [...iMatrix],\n};\n","import { config } from '../config';\nimport { CENTER, VERSION } from '../constants';\nimport type { CanvasEvents, StaticCanvasEvents } from '../EventTypeDefs';\nimport type { Gradient } from '../gradient/Gradient';\nimport { createCollectionMixin, isCollection } from '../Collection';\nimport { CommonMethods } from '../CommonMethods';\nimport type { Pattern } from '../Pattern';\nimport { Point } from '../Point';\nimport type { TCachedFabricObject } from '../shapes/Object/Object';\nimport type {\n  Abortable,\n  Constructor,\n  TCornerPoint,\n  TDataUrlOptions,\n  TFiller,\n  TMat2D,\n  TSize,\n  TSVGReviver,\n  TToCanvasElementOptions,\n  TValidToObjectMethod,\n  TOptions,\n} from '../typedefs';\nimport {\n  cancelAnimFrame,\n  requestAnimFrame,\n} from '../util/animation/AnimationFrameProvider';\nimport { runningAnimations } from '../util/animation/AnimationRegistry';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor, toBlob, toDataURL } from '../util/misc/dom';\nimport { invertTransform, transformPoint } from '../util/misc/matrix';\nimport type { EnlivenObjectOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { toFixed } from '../util/misc/toFixed';\nimport { isFiller, isPattern, isTextObject } from '../util/typeAssertions';\nimport { StaticCanvasDOMManager } from './DOMManagers/StaticCanvasDOMManager';\nimport type { CSSDimensions } from './DOMManagers/util';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\nimport { staticCanvasDefaults } from './StaticCanvasOptions';\nimport { log, FabricError } from '../util/internals/console';\nimport { getDevicePixelRatio } from '../env';\n\n/**\n * Having both options in TCanvasSizeOptions set to true transform the call in a calcOffset\n * Better try to restrict with types to avoid confusion.\n */\nexport type TCanvasSizeOptions =\n  | {\n      backstoreOnly?: true;\n      cssOnly?: false;\n    }\n  | {\n      backstoreOnly?: false;\n      cssOnly?: true;\n    };\n\nexport type TSVGExportOptions = {\n  suppressPreamble?: boolean;\n  viewBox?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  encoding?: 'UTF-8'; // test Encoding type and see what happens\n  width?: string;\n  height?: string;\n  reviver?: TSVGReviver;\n};\n\n/**\n * Static canvas class\n * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n * @fires before:render\n * @fires after:render\n * @fires canvas:cleared\n * @fires object:added\n * @fires object:removed\n */\n// TODO: fix `EventSpec` inheritance https://github.com/microsoft/TypeScript/issues/26154#issuecomment-1366616260\nexport class StaticCanvas<\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EventSpec extends StaticCanvasEvents = StaticCanvasEvents,\n  >\n  extends createCollectionMixin(CommonMethods<CanvasEvents>)\n  implements StaticCanvasOptions\n{\n  declare width: number;\n  declare height: number;\n\n  // background\n  declare backgroundVpt: boolean;\n  declare backgroundColor: TFiller | string;\n  declare backgroundImage?: FabricObject;\n  // overlay\n  declare overlayVpt: boolean;\n  declare overlayColor: TFiller | string;\n  declare overlayImage?: FabricObject;\n\n  declare clipPath?: FabricObject;\n\n  declare includeDefaultValues: boolean;\n\n  // rendering config\n  declare renderOnAddRemove: boolean;\n  declare skipOffscreen: boolean;\n  declare enableRetinaScaling: boolean;\n  declare imageSmoothingEnabled: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare controlsAboveOverlay: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare allowTouchScrolling: boolean;\n\n  declare viewportTransform: TMat2D;\n\n  /**\n   * The viewport bounding box in scene plane coordinates, see {@link calcViewportBoundaries}\n   */\n  declare vptCoords: TCornerPoint;\n\n  /**\n   * A reference to the canvas actual HTMLCanvasElement.\n   * Can be use to read the raw pixels, but never write or manipulate\n   * @type HTMLCanvasElement\n   */\n  get lowerCanvasEl() {\n    return this.elements.lower?.el;\n  }\n\n  get contextContainer() {\n    return this.elements.lower?.ctx;\n  }\n\n  /**\n   * If true the Canvas is in the process or has been disposed/destroyed.\n   * No more rendering operation will be executed on this canvas.\n   * @type boolean\n   */\n  declare destroyed?: boolean;\n\n  /**\n   * Started the process of disposing but not done yet.\n   * WIll likely complete the render cycle already scheduled but stopping adding more.\n   * @type boolean\n   */\n  declare disposed?: boolean;\n\n  declare _offset: { left: number; top: number };\n  declare protected hasLostContext: boolean;\n  declare protected nextRenderHandle: number;\n\n  declare elements: StaticCanvasDOMManager;\n\n  /**\n   * When true control drawing is skipped.\n   * This boolean is used to avoid toDataURL to export controls.\n   * Usage of this boolean to build up other flows and features is not supported\n   * @type Boolean\n   * @default false\n   */\n  declare protected skipControlsDrawing: boolean;\n\n  static ownDefaults = staticCanvasDefaults;\n\n  // reference to\n  declare protected __cleanupTask?: {\n    (): void;\n    kill: (reason?: any) => void;\n  };\n\n  static getDefaults(): Record<string, any> {\n    return StaticCanvas.ownDefaults;\n  }\n\n  constructor(\n    el?: string | HTMLCanvasElement,\n    options: TOptions<StaticCanvasOptions> = {},\n  ) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof StaticCanvas).getDefaults(),\n    );\n    this.set(options);\n    this.initElements(el);\n    this._setDimensionsImpl({\n      width: this.width || this.elements.lower.el.width || 0,\n      height: this.height || this.elements.lower.el.height || 0,\n    });\n    this.skipControlsDrawing = false;\n    this.viewportTransform = [...this.viewportTransform];\n    this.calcViewportBoundaries();\n  }\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new StaticCanvasDOMManager(el);\n  }\n\n  add(...objects: FabricObject[]) {\n    const size = super.add(...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const size = super.insertAt(index, ...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    removed.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return removed;\n  }\n\n  _onObjectAdded(obj: FabricObject) {\n    if (obj.canvas && (obj.canvas as StaticCanvas) !== this) {\n      log(\n        'warn',\n        'Canvas is trying to add an object that belongs to a different canvas.\\n' +\n          'Resulting to default behavior: removing object from previous canvas and adding to new canvas',\n      );\n      obj.canvas.remove(obj);\n    }\n    obj._set('canvas', this);\n    obj.setCoords();\n    this.fire('object:added', { target: obj });\n    obj.fire('added', { target: this });\n  }\n\n  _onObjectRemoved(obj: FabricObject) {\n    obj._set('canvas', undefined);\n    this.fire('object:removed', { target: obj });\n    obj.fire('removed', { target: this });\n  }\n\n  _onStackOrderChanged() {\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   * @return {Number} retinaScaling if applied, otherwise 1;\n   */\n  getRetinaScaling() {\n    return this.enableRetinaScaling ? getDevicePixelRatio() : 1;\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   * This method is also attached as \"resize\" event handler of window\n   */\n  calcOffset() {\n    return (this._offset = this.elements.calcOffset());\n  }\n\n  /**\n   * Returns canvas width (in px)\n   * @return {Number}\n   */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /**\n   * Returns canvas height (in px)\n   * @return {Number}\n   */\n  getHeight(): number {\n    return this.height;\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: Partial<TSize | CSSDimensions>,\n    { cssOnly = false, backstoreOnly = false }: TCanvasSizeOptions = {},\n  ) {\n    if (!cssOnly) {\n      const size = {\n        width: this.width,\n        height: this.height,\n        ...(dimensions as Partial<TSize>),\n      };\n      this.elements.setDimensions(size, this.getRetinaScaling());\n      this.hasLostContext = true;\n      this.width = size.width;\n      this.height = size.height;\n    }\n    if (!backstoreOnly) {\n      this.elements.setCSSDimensions(dimensions);\n    }\n\n    this.calcOffset();\n  }\n\n  /**\n   * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n   * @param {Object}        dimensions                    Object with width/height properties\n   * @param {Number|String} [dimensions.width]            Width of canvas element\n   * @param {Number|String} [dimensions.height]           Height of canvas element\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   */\n  setDimensions(\n    dimensions: Partial<CSSDimensions>,\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setDimensions(\n    dimensions: Partial<TSize>,\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setDimensions(dimensions: Partial<TSize>, options?: never): void;\n  setDimensions(\n    dimensions: Partial<TSize | CSSDimensions>,\n    options?: TCanvasSizeOptions,\n  ) {\n    this._setDimensionsImpl(dimensions, options);\n    if (!options || !options.cssOnly) {\n      this.requestRenderAll();\n    }\n  }\n\n  /**\n   * Returns canvas zoom level\n   * @return {Number}\n   */\n  getZoom() {\n    return this.viewportTransform[0];\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    this.viewportTransform = vpt;\n    this.calcViewportBoundaries();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Sets zoom level of this canvas instance, the zoom centered around point\n   * meaning that following zoom to point with the same point will have the visual\n   * effect of the zoom originating from that point. The point won't move.\n   * It has nothing to do with canvas center or visual center of the viewport.\n   * @param {Point} point to zoom with respect to\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  zoomToPoint(point: Point, value: number) {\n    // TODO: just change the scale, preserve other transformations\n    const before = point,\n      vpt: TMat2D = [...this.viewportTransform];\n    const newPoint = transformPoint(point, invertTransform(vpt));\n    vpt[0] = value;\n    vpt[3] = value;\n    const after = transformPoint(newPoint, vpt);\n    vpt[4] += before.x - after.x;\n    vpt[5] += before.y - after.y;\n    this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Sets zoom level of this canvas instance\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  setZoom(value: number) {\n    this.zoomToPoint(new Point(0, 0), value);\n  }\n\n  /**\n   * Pan viewport so as to place point at top left corner of canvas\n   * @param {Point} point to move to\n   */\n  absolutePan(point: Point) {\n    const vpt: TMat2D = [...this.viewportTransform];\n    vpt[4] = -point.x;\n    vpt[5] = -point.y;\n    return this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Pans viewpoint relatively\n   * @param {Point} point (position vector) to move by\n   */\n  relativePan(point: Point) {\n    return this.absolutePan(\n      new Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5],\n      ),\n    );\n  }\n\n  /**\n   * Returns &lt;canvas> element corresponding to this instance\n   * @return {HTMLCanvasElement}\n   */\n  getElement(): HTMLCanvasElement {\n    return this.elements.lower.el;\n  }\n\n  /**\n   * Clears specified context of canvas element\n   * @param {CanvasRenderingContext2D} ctx Context to clear\n   */\n  clearContext(ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Returns context of canvas where objects are drawn\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.elements.lower.ctx;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    this.remove(...this.getObjects());\n    this.backgroundImage = undefined;\n    this.overlayImage = undefined;\n    this.backgroundColor = '';\n    this.overlayColor = '';\n    this.clearContext(this.getContext());\n    this.fire('canvas:cleared');\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Renders the canvas\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    this.renderCanvas(this.getContext(), this._objects);\n  }\n\n  /**\n   * Function created to be instance bound at initialization\n   * used in requestAnimationFrame rendering\n   * Let the fabricJS call it. If you call it manually you could have more\n   * animationFrame stacking on to of each other\n   * for an imperative rendering, use canvas.renderAll\n   * @private\n   */\n  renderAndReset() {\n    this.nextRenderHandle = 0;\n    this.renderAll();\n  }\n\n  /**\n   * Append a renderAll request to next animation frame.\n   * unless one is already in progress, in that case nothing is done\n   * a boolean flag will avoid appending more.\n   */\n  requestRenderAll() {\n    if (!this.nextRenderHandle && !this.disposed && !this.destroyed) {\n      this.nextRenderHandle = requestAnimFrame(() => this.renderAndReset());\n    }\n  }\n\n  /**\n   * Calculate the position of the 4 corner of canvas with current viewportTransform.\n   * helps to determinate when an object is in the current rendering viewport\n   */\n  calcViewportBoundaries(): TCornerPoint {\n    const width = this.width,\n      height = this.height,\n      iVpt = invertTransform(this.viewportTransform),\n      a = transformPoint({ x: 0, y: 0 }, iVpt),\n      b = transformPoint({ x: width, y: height }, iVpt),\n      // we don't support vpt flipping\n      // but the code is robust enough to mostly work with flipping\n      min = a.min(b),\n      max = a.max(b);\n    return (this.vptCoords = {\n      tl: min,\n      tr: new Point(max.x, min.y),\n      bl: new Point(min.x, max.y),\n      br: max,\n    });\n  }\n\n  cancelRequestedRender() {\n    if (this.nextRenderHandle) {\n      cancelAnimFrame(this.nextRenderHandle);\n      this.nextRenderHandle = 0;\n    }\n  }\n\n  drawControls(_ctx: CanvasRenderingContext2D) {\n    // Static canvas has no controls\n  }\n\n  /**\n   * Renders background, objects, overlay and controls.\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Array} objects to render\n   */\n  renderCanvas(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    if (this.destroyed) {\n      return;\n    }\n\n    const v = this.viewportTransform,\n      path = this.clipPath;\n    this.calcViewportBoundaries();\n    this.clearContext(ctx);\n    ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    // @ts-expect-error node-canvas stuff\n    ctx.patternQuality = 'best';\n    this.fire('before:render', { ctx });\n    this._renderBackground(ctx);\n\n    ctx.save();\n    //apply viewport transform once for all rendering process\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this._renderObjects(ctx, objects);\n    ctx.restore();\n    if (!this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    if (path) {\n      path._set('canvas', this);\n      // needed to setup a couple of variables\n      // todo migrate to the newer one\n      path.shouldCache();\n      path._transformDone = true;\n      (path as TCachedFabricObject).renderCache({ forClipping: true });\n      this.drawClipPathOnCanvas(ctx, path as TCachedFabricObject);\n    }\n    this._renderOverlay(ctx);\n    if (this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    this.fire('after:render', { ctx });\n\n    if (this.__cleanupTask) {\n      this.__cleanupTask();\n      this.__cleanupTask = undefined;\n    }\n  }\n\n  /**\n   * Paint the cached clipPath on the lowerCanvasEl\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawClipPathOnCanvas(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject,\n  ) {\n    const v = this.viewportTransform;\n    ctx.save();\n    ctx.transform(...v);\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4;\n    ctx.globalCompositeOperation = 'destination-in';\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY,\n    );\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} objects to render\n   */\n  _renderObjects(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    for (let i = 0, len = objects.length; i < len; ++i) {\n      objects[i] && objects[i].render(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {string} property 'background' or 'overlay'\n   */\n  _renderBackgroundOrOverlay(\n    ctx: CanvasRenderingContext2D,\n    property: 'background' | 'overlay',\n  ) {\n    const fill = this[`${property}Color`],\n      object = this[`${property}Image`],\n      v = this.viewportTransform,\n      needsVpt = this[`${property}Vpt`];\n    if (!fill && !object) {\n      return;\n    }\n    const isAFiller = isFiller(fill);\n    if (fill) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(this.width, 0);\n      ctx.lineTo(this.width, this.height);\n      ctx.lineTo(0, this.height);\n      ctx.closePath();\n      ctx.fillStyle = isAFiller ? fill.toLive(ctx /* this */)! : fill;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      if (isAFiller) {\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n        const m = ((fill as Gradient<'linear'>).gradientTransform ||\n          (fill as Pattern).patternTransform) as TMat2D;\n        m && ctx.transform(...m);\n      }\n      ctx.fill();\n      ctx.restore();\n    }\n    if (object) {\n      ctx.save();\n      const { skipOffscreen } = this;\n      // if the object doesn't move with the viewport,\n      // the offscreen concept does not apply;\n      this.skipOffscreen = needsVpt;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      object.render(ctx);\n      this.skipOffscreen = skipOffscreen;\n      ctx.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'background');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderOverlay(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'overlay');\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * @return {Point}\n   */\n  getCenterPoint() {\n    return new Point(this.width / 2, this.height / 2);\n  }\n\n  /**\n   * Centers object horizontally in the canvas\n   */\n  centerObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getCenterPoint().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically in the canvas\n   * @param {FabricObject} object Object to center vertically\n   */\n  centerObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically and horizontally in the canvas\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  centerObject(object: FabricObject) {\n    return this._centerObject(object, this.getCenterPoint());\n  }\n\n  /**\n   * Centers object vertically and horizontally in the viewport\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObject(object: FabricObject) {\n    return this._centerObject(object, this.getVpCenter());\n  }\n\n  /**\n   * Centers object horizontally in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getVpCenter().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object Vertically in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getVpCenter().y),\n    );\n  }\n\n  /**\n   * Calculate the point in canvas that correspond to the center of actual viewport.\n   * @return {Point} vpCenter, viewport center\n   */\n  getVpCenter(): Point {\n    return transformPoint(\n      this.getCenterPoint(),\n      invertTransform(this.viewportTransform),\n    );\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object Object to center\n   * @param {Point} center Center point\n   */\n  _centerObject(object: FabricObject, center: Point) {\n    object.setXY(center, CENTER, CENTER);\n    object.setCoords();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Returns dataless JSON representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} json string\n   */\n  toDatalessJSON(propertiesToInclude?: string[]) {\n    return this.toDatalessObject(propertiesToInclude);\n  }\n\n  /**\n   * Returns object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toObject', propertiesToInclude);\n  }\n\n  /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * JSON does not support additional properties because toJSON has its own signature\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON representation of canvas </caption>\n   * const json = canvas.toJSON();\n   * @example <caption>JSON representation of canvas </caption>\n   * const json = JSON.stringify(canvas);\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Returns dataless object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n  }\n\n  /**\n   * @private\n   */\n  _toObjectMethod(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const clipPath = this.clipPath;\n    const clipPathData =\n      clipPath && !clipPath.excludeFromExport\n        ? this._toObject(clipPath, methodName, propertiesToInclude)\n        : null;\n    return {\n      version: VERSION,\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      objects: this._objects\n        .filter((object) => !object.excludeFromExport)\n        .map((instance) =>\n          this._toObject(instance, methodName, propertiesToInclude),\n        ),\n      ...this.__serializeBgOverlay(methodName, propertiesToInclude),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    let originalValue;\n\n    if (!this.includeDefaultValues) {\n      originalValue = instance.includeDefaultValues;\n      instance.includeDefaultValues = false;\n    }\n\n    const object = instance[methodName](propertiesToInclude);\n    if (!this.includeDefaultValues) {\n      instance.includeDefaultValues = !!originalValue;\n    }\n    return object;\n  }\n\n  /**\n   * @private\n   */\n  __serializeBgOverlay(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const data: any = {},\n      bgImage = this.backgroundImage,\n      overlayImage = this.overlayImage,\n      bgColor = this.backgroundColor,\n      overlayColor = this.overlayColor;\n\n    if (isFiller(bgColor)) {\n      if (!bgColor.excludeFromExport) {\n        data.background = bgColor.toObject(propertiesToInclude);\n      }\n    } else if (bgColor) {\n      data.background = bgColor;\n    }\n\n    if (isFiller(overlayColor)) {\n      if (!overlayColor.excludeFromExport) {\n        data.overlay = overlayColor.toObject(propertiesToInclude);\n      }\n    } else if (overlayColor) {\n      data.overlay = overlayColor;\n    }\n\n    if (bgImage && !bgImage.excludeFromExport) {\n      data.backgroundImage = this._toObject(\n        bgImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n    if (overlayImage && !overlayImage.excludeFromExport) {\n      data.overlayImage = this._toObject(\n        overlayImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n\n    return data;\n  }\n\n  /* _TO_SVG_START_ */\n\n  declare svgViewportTransformation: boolean;\n\n  /**\n   * Returns SVG representation of canvas\n   * @function\n   * @param {Object} [options] Options object for SVG output\n   * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n   * @param {Object} [options.viewBox] SVG viewbox object\n   * @param {Number} [options.viewBox.x] x-coordinate of viewbox\n   * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n   * @param {Number} [options.viewBox.width] Width of viewbox\n   * @param {Number} [options.viewBox.height] Height of viewbox\n   * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n   * @param {String} [options.width] desired width of svg with or without units\n   * @param {String} [options.height] desired height of svg with or without units\n   * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n   * @return {String} SVG string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n   * @example <caption>Normal SVG output</caption>\n   * var svg = canvas.toSVG();\n   * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n   * var svg = canvas.toSVG({suppressPreamble: true});\n   * @example <caption>SVG output with viewBox attribute</caption>\n   * var svg = canvas.toSVG({\n   *   viewBox: {\n   *     x: 100,\n   *     y: 100,\n   *     width: 200,\n   *     height: 300\n   *   }\n   * });\n   * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n   * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n   * @example <caption>Modify SVG output with reviver function</caption>\n   * var svg = canvas.toSVG(null, function(svg) {\n   *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n   * });\n   */\n  toSVG(options: TSVGExportOptions = {}, reviver?: TSVGReviver) {\n    options.reviver = reviver;\n    const markup: string[] = [];\n\n    this._setSVGPreamble(markup, options);\n    this._setSVGHeader(markup, options);\n    if (this.clipPath) {\n      markup.push(`<g clip-path=\"url(#${this.clipPath.clipPathId})\" >\\n`);\n    }\n    this._setSVGBgOverlayColor(markup, 'background');\n    this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n    this._setSVGObjects(markup, reviver);\n    if (this.clipPath) {\n      markup.push('</g>\\n');\n    }\n    this._setSVGBgOverlayColor(markup, 'overlay');\n    this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n    markup.push('</svg>');\n\n    return markup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _setSVGPreamble(markup: string[], options: TSVGExportOptions): void {\n    if (options.suppressPreamble) {\n      return;\n    }\n    markup.push(\n      '<?xml version=\"1.0\" encoding=\"',\n      options.encoding || 'UTF-8',\n      '\" standalone=\"no\" ?>\\n',\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n      '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n',\n    );\n  }\n\n  /**\n   * @private\n   */\n  _setSVGHeader(markup: string[], options: TSVGExportOptions): void {\n    const width = options.width || `${this.width}`,\n      height = options.height || `${this.height}`,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      optViewBox = options.viewBox;\n    let viewBox: string;\n    if (optViewBox) {\n      viewBox = `viewBox=\"${optViewBox.x} ${optViewBox.y} ${optViewBox.width} ${optViewBox.height}\" `;\n    } else if (this.svgViewportTransformation) {\n      const vpt = this.viewportTransform;\n      viewBox = `viewBox=\"${toFixed(\n        -vpt[4] / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS)} ${toFixed(\n        this.width / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS)}\" `;\n    } else {\n      viewBox = `viewBox=\"0 0 ${this.width} ${this.height}\" `;\n    }\n\n    markup.push(\n      '<svg ',\n      'xmlns=\"http://www.w3.org/2000/svg\" ',\n      'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n      'version=\"1.1\" ',\n      'width=\"',\n      width,\n      '\" ',\n      'height=\"',\n      height,\n      '\" ',\n      viewBox,\n      'xml:space=\"preserve\">\\n',\n      '<desc>Created with Tetap  qingfengfuyun1@gmail.com version:',\n      VERSION,\n      '</desc>\\n',\n      '<defs>\\n',\n      this.createSVGFontFacesMarkup(),\n      this.createSVGRefElementsMarkup(),\n      this.createSVGClipPathMarkup(options),\n      '</defs>\\n',\n    );\n  }\n\n  createSVGClipPathMarkup(options: TSVGExportOptions): string {\n    const clipPath = this.clipPath;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      return `<clipPath id=\"${clipPath.clipPathId}\" >\\n${clipPath.toClipPathSVG(\n        options.reviver,\n      )}</clipPath>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Creates markup containing SVG referenced elements like patterns, gradients etc.\n   * @return {String}\n   */\n  createSVGRefElementsMarkup(): string {\n    return (['background', 'overlay'] as const)\n      .map((prop) => {\n        const fill = this[`${prop}Color`];\n        if (isFiller(fill)) {\n          const shouldTransform = this[`${prop}Vpt`],\n            vpt = this.viewportTransform,\n            object = {\n              // otherwise circular dependency\n              isType: () => false,\n              width: this.width / (shouldTransform ? vpt[0] : 1),\n              height: this.height / (shouldTransform ? vpt[3] : 1),\n            };\n          return fill.toSVG(object as FabricObject, {\n            additionalTransform: shouldTransform ? matrixToSVG(vpt) : '',\n          });\n        }\n      })\n      .join('');\n  }\n\n  /**\n   * Creates markup containing SVG font faces,\n   * font URLs for font faces must be collected by developers\n   * and are not extracted from the DOM by fabricjs\n   * @param {Array} objects Array of fabric objects\n   * @return {String}\n   */\n  createSVGFontFacesMarkup(): string {\n    const objects: FabricObject[] = [],\n      fontList: Record<string, boolean> = {},\n      fontPaths = config.fontPaths;\n\n    this._objects.forEach(function add(object) {\n      objects.push(object);\n      if (isCollection(object)) {\n        object._objects.forEach(add);\n      }\n    });\n\n    objects.forEach((obj) => {\n      if (!isTextObject(obj)) {\n        return;\n      }\n      const { styles, fontFamily } = obj;\n      if (fontList[fontFamily] || !fontPaths[fontFamily]) {\n        return;\n      }\n      fontList[fontFamily] = true;\n      if (!styles) {\n        return;\n      }\n      Object.values(styles).forEach((styleRow) => {\n        Object.values(styleRow).forEach(({ fontFamily = '' }) => {\n          if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n            fontList[fontFamily] = true;\n          }\n        });\n      });\n    });\n\n    const fontListMarkup = Object.keys(fontList)\n      .map(\n        (fontFamily) =>\n          `\\t\\t@font-face {\\n\\t\\t\\tfont-family: '${fontFamily}';\\n\\t\\t\\tsrc: url('${fontPaths[fontFamily]}');\\n\\t\\t}\\n`,\n      )\n      .join('');\n\n    if (fontListMarkup) {\n      return `\\t<style type=\"text/css\"><![CDATA[\\n${fontListMarkup}]]></style>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObjects(markup: string[], reviver?: TSVGReviver) {\n    this.forEachObject((fabricObject) => {\n      if (fabricObject.excludeFromExport) {\n        return;\n      }\n      this._setSVGObject(markup, fabricObject, reviver);\n    });\n  }\n\n  /**\n   * This is its own function because the Canvas ( non static ) requires extra code here\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    markup.push(instance.toSVG(reviver));\n  }\n\n  /**\n   * @private\n   */\n  _setSVGBgOverlayImage(\n    markup: string[],\n    property: 'overlayImage' | 'backgroundImage',\n    reviver?: TSVGReviver,\n  ) {\n    const bgOrOverlay = this[property];\n    if (bgOrOverlay && !bgOrOverlay.excludeFromExport && bgOrOverlay.toSVG) {\n      markup.push(bgOrOverlay.toSVG(reviver));\n    }\n  }\n\n  /**\n   * @TODO this seems to handle patterns but fail at gradients.\n   * @private\n   */\n  _setSVGBgOverlayColor(markup: string[], property: 'background' | 'overlay') {\n    const filler = this[`${property}Color`];\n    if (!filler) {\n      return;\n    }\n    if (isFiller(filler)) {\n      const repeat = (filler as Pattern).repeat || '',\n        finalWidth = this.width,\n        finalHeight = this.height,\n        shouldInvert = this[`${property}Vpt`],\n        additionalTransform = shouldInvert\n          ? matrixToSVG(invertTransform(this.viewportTransform))\n          : '';\n      markup.push(\n        `<rect transform=\"${additionalTransform} translate(${finalWidth / 2},${\n          finalHeight / 2\n        })\" x=\"${filler.offsetX - finalWidth / 2}\" y=\"${\n          filler.offsetY - finalHeight / 2\n        }\" width=\"${\n          (repeat === 'repeat-y' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).width\n            : finalWidth\n        }\" height=\"${\n          (repeat === 'repeat-x' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).height\n            : finalHeight\n        }\" fill=\"url(#SVGID_${filler.id})\"></rect>\\n`,\n      );\n    } else {\n      markup.push(\n        '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n        'fill=\"',\n        filler,\n        '\"',\n        '></rect>\\n',\n      );\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   *\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   *\n   * @param {String|Object} json JSON string or object\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @param {Object} [options] options\n   * @param {AbortSignal} [options.signal] see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @return {Promise<Canvas | StaticCanvas>} instance\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json).then((canvas) => canvas.requestRenderAll());\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * }).then((canvas) => {\n   *   ... canvas is restored, add your code.\n   * });\n   *\n   */\n  loadFromJSON(\n    json: string | Record<string, any>,\n    reviver?: EnlivenObjectOptions['reviver'],\n    { signal }: Abortable = {},\n  ): Promise<this> {\n    if (!json) {\n      return Promise.reject(new FabricError('`json` is undefined'));\n    }\n\n    // parse json if it wasn't already\n    const serialized = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n      objects = [],\n      backgroundImage,\n      background,\n      overlayImage,\n      overlay,\n      clipPath,\n    } = serialized;\n    const renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, {\n        reviver,\n        signal,\n      }),\n      enlivenObjectEnlivables(\n        {\n          backgroundImage,\n          backgroundColor: background,\n          overlayImage,\n          overlayColor: overlay,\n          clipPath,\n        },\n        { signal },\n      ),\n    ]).then(([enlived, enlivedMap]) => {\n      this.clear();\n      this.add(...enlived);\n      this.set(serialized);\n      this.set(enlivedMap);\n      this.renderOnAddRemove = renderOnAddRemove;\n      return this;\n    });\n  }\n\n  /**\n   * Clones canvas instance\n   * @param {string[]} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone(properties: string[]) {\n    const data = this.toObject(properties);\n    const canvas = this.cloneWithoutData();\n    return canvas.loadFromJSON(data);\n  }\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions since loadFromJSON does not affect canvas size.\n   */\n  cloneWithoutData() {\n    const el = createCanvasElementFor(this);\n    return new (this.constructor as Constructor<this>)(el);\n  }\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link https://jsfiddle.net/xsjua1rd/ demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   * @example <caption>Generate dataURL with objects that overlap a specified object</caption>\n   * var myObject;\n   * var dataURL = canvas.toDataURL({\n   *   filter: (object) => object.isContainedWithinObject(myObject) || object.intersectsWithObject(myObject)\n   * });\n   */\n  toDataURL(options = {} as TDataUrlOptions): string {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toDataURL(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n  toBlob(options = {} as TDataUrlOptions): Promise<Blob | null> {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toBlob(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n\n  /**\n   * Create a new HTMLCanvas element painted with the current canvas content.\n   * No need to resize the actual one or repaint it.\n   * Will transfer object ownership to a new canvas, paint it, and set everything back.\n   * This is an intermediary step used to get to a dataUrl but also it is useful to\n   * create quick image copies of a canvas without passing for the dataUrl string\n   * @param {Number} [multiplier] a zoom factor.\n   * @param {Object} [options] Cropping informations\n   * @param {Number} [options.left] Cropping left offset.\n   * @param {Number} [options.top] Cropping top offset.\n   * @param {Number} [options.width] Cropping width.\n   * @param {Number} [options.height] Cropping height.\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   */\n  toCanvasElement(\n    multiplier = 1,\n    { width, height, left, top, filter } = {} as TToCanvasElementOptions,\n  ): HTMLCanvasElement {\n    const scaledWidth = (width || this.width) * multiplier,\n      scaledHeight = (height || this.height) * multiplier,\n      zoom = this.getZoom(),\n      originalWidth = this.width,\n      originalHeight = this.height,\n      originalSkipControlsDrawing = this.skipControlsDrawing,\n      newZoom = zoom * multiplier,\n      vp = this.viewportTransform,\n      translateX = (vp[4] - (left || 0)) * multiplier,\n      translateY = (vp[5] - (top || 0)) * multiplier,\n      newVp = [newZoom, 0, 0, newZoom, translateX, translateY] as TMat2D,\n      originalRetina = this.enableRetinaScaling,\n      canvasEl = createCanvasElementFor({\n        width: scaledWidth,\n        height: scaledHeight,\n      }),\n      objectsToRender = filter\n        ? this._objects.filter((obj) => filter(obj))\n        : this._objects;\n    this.enableRetinaScaling = false;\n    this.viewportTransform = newVp;\n    this.width = scaledWidth;\n    this.height = scaledHeight;\n    this.skipControlsDrawing = true;\n    this.calcViewportBoundaries();\n    this.renderCanvas(canvasEl.getContext('2d')!, objectsToRender);\n    this.viewportTransform = vp;\n    this.width = originalWidth;\n    this.height = originalHeight;\n    this.calcViewportBoundaries();\n    this.enableRetinaScaling = originalRetina;\n    this.skipControlsDrawing = originalSkipControlsDrawing;\n    return canvasEl;\n  }\n\n  /**\n   * Waits until rendering has settled to destroy the canvas\n   * @returns {Promise<boolean>} a promise resolving to `true` once the canvas has been destroyed or to `false` if the canvas has was already destroyed\n   * @throws if aborted by a consequent call\n   */\n  dispose() {\n    !this.disposed &&\n      this.elements.cleanupDOM({ width: this.width, height: this.height });\n    runningAnimations.cancelByCanvas(this);\n    this.disposed = true;\n    return new Promise<boolean>((resolve, reject) => {\n      const task = () => {\n        this.destroy();\n        resolve(true);\n      };\n      task.kill = reject;\n      if (this.__cleanupTask) {\n        this.__cleanupTask.kill('aborted');\n      }\n\n      if (this.destroyed) {\n        resolve(false);\n      } else if (this.nextRenderHandle) {\n        this.__cleanupTask = task;\n      } else {\n        task();\n      }\n    });\n  }\n\n  /**\n   * Clears the canvas element, disposes objects and frees resources.\n   *\n   * Invoked as part of the **async** operation of {@link dispose}.\n   *\n   * **CAUTION**:\n   *\n   * This method is **UNSAFE**.\n   * You may encounter a race condition using it if there's a requested render.\n   * Call this method only if you are sure rendering has settled.\n   * Consider using {@link dispose} as it is **SAFE**\n   *\n   * @private\n   */\n  destroy() {\n    this.destroyed = true;\n    this.cancelRequestedRender();\n    this.forEachObject((object) => object.dispose());\n    this._objects = [];\n    if (this.backgroundImage) {\n      this.backgroundImage.dispose();\n    }\n    this.backgroundImage = undefined;\n    if (this.overlayImage) {\n      this.overlayImage.dispose();\n    }\n    this.overlayImage = undefined;\n    this.elements.dispose();\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String} string representation of an instance\n   */\n  toString() {\n    return `#<Canvas (${this.complexity()}): { objects: ${\n      this._objects.length\n    } }>`;\n  }\n}\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport { getScrollLeftTop } from './dom_misc';\n\nconst touchEvents = ['touchstart', 'touchmove', 'touchend'];\n\nfunction getTouchInfo(event: TouchEvent | MouseEvent): MouseEvent | Touch {\n  const touchProp = (event as TouchEvent).changedTouches;\n  if (touchProp && touchProp[0]) {\n    return touchProp[0];\n  }\n  return event as MouseEvent;\n}\n\nexport const getPointer = (event: TPointerEvent): Point => {\n  const element = event.target as HTMLElement,\n    scroll = getScrollLeftTop(element),\n    _evt = getTouchInfo(event);\n  return new Point(_evt.clientX + scroll.left, _evt.clientY + scroll.top);\n};\n\nexport const isTouchEvent = (event: TPointerEvent) =>\n  touchEvents.includes(event.type) ||\n  (event as PointerEvent).pointerType === 'touch';\n\nexport const stopEvent = (e: Event) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\n","import type { XY } from '../../Point';\nimport type { TBBox } from '../../typedefs';\n\n/**\n * Calculates bounding box (left, top, width, height) from given `points`\n * @param {XY[]} points\n * @return {Object} Object with left, top, width, height properties\n */\nexport const makeBoundingBoxFromPoints = (points: XY[]): TBBox => {\n  let left = 0,\n    top = 0,\n    width = 0,\n    height = 0;\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const { x, y } = points[i];\n    if (x > width || !i) width = x;\n    if (x < left || !i) left = x;\n    if (y > height || !i) height = y;\n    if (y < top || !i) top = y;\n  }\n\n  return {\n    left,\n    top,\n    width: width - left,\n    height: height - top,\n  };\n};\n","import { Point } from '../../Point';\nimport { CENTER } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { makeBoundingBoxFromPoints } from './boundingBoxFromPoints';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from './matrix';\n\n/**\n * given an object and a transform, apply the inverse transform to the object,\n * this is equivalent to remove from that object that transformation, so that\n * added in a space with the removed transform, the object will be the same as before.\n * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n * Removing from an object a transform that rotate by 30deg is like rotating by 30deg\n * in the opposite direction.\n * This util is used to add objects inside transformed groups or nested groups.\n * @param {FabricObject} object the object you want to transform\n * @param {TMat2D} transform the destination transform\n */\nexport const removeTransformFromObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const inverted = invertTransform(transform),\n    finalTransform = multiplyTransformMatrices(\n      inverted,\n      object.calcOwnMatrix(),\n    );\n  applyTransformToObject(object, finalTransform);\n};\n\n/**\n * given an object and a transform, apply the transform to the object.\n * this is equivalent to change the space where the object is drawn.\n * Adding to an object a transform that scale by 2 is like scaling it by 2.\n * This is used when removing an object from an active selection for example.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const addTransformToObject = (object: FabricObject, transform: TMat2D) =>\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(transform, object.calcOwnMatrix()),\n  );\n\n/**\n * discard an object transform state and apply the one from the matrix.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const applyTransformToObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const { translateX, translateY, scaleX, scaleY, ...otherOptions } =\n      qrDecompose(transform),\n    center = new Point(translateX, translateY);\n  object.flipX = false;\n  object.flipY = false;\n  Object.assign(object, otherOptions);\n  object.set({ scaleX, scaleY });\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n/**\n * reset an object transform state to neutral. Top and left are not accounted for\n * @param  {FabricObject} target object to transform\n */\nexport const resetObjectTransform = (target: FabricObject) => {\n  target.scaleX = 1;\n  target.scaleY = 1;\n  target.skewX = 0;\n  target.skewY = 0;\n  target.flipX = false;\n  target.flipY = false;\n  target.rotate(0);\n};\n\n/**\n * Extract Object transform values\n * @param  {FabricObject} target object to read from\n * @return {Object} Components of transform\n */\nexport const saveObjectTransform = (target: FabricObject) => ({\n  scaleX: target.scaleX,\n  scaleY: target.scaleY,\n  skewX: target.skewX,\n  skewY: target.skewY,\n  angle: target.angle,\n  left: target.left,\n  flipX: target.flipX,\n  flipY: target.flipY,\n  top: target.top,\n});\n\n/**\n * given a width and height, return the size of the bounding box\n * that can contains the box with width/height with applied transform.\n * Use to calculate the boxes around objects for controls.\n * @param {Number} width\n * @param {Number} height\n * @param {TMat2D} t\n * @returns {Point} size\n */\nexport const sizeAfterTransform = (\n  width: number,\n  height: number,\n  t: TMat2D,\n) => {\n  const dimX = width / 2,\n    dimY = height / 2,\n    points = [\n      new Point(-dimX, -dimY),\n      new Point(dimX, -dimY),\n      new Point(-dimX, dimY),\n      new Point(dimX, dimY),\n    ].map((p) => p.transform(t)),\n    bbox = makeBoundingBoxFromPoints(points);\n  return new Point(bbox.width, bbox.height);\n};\n","import { iMatrix } from '../../constants';\nimport type { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { invertTransform, multiplyTransformMatrices } from './matrix';\nimport { applyTransformToObject } from './objectTransforms';\n\n/**\n * We are actually looking for the transformation from the destination plane to the source plane (change of basis matrix)\\\n * The object will exist on the destination plane and we want it to seem unchanged by it so we invert the destination matrix (`to`) and then apply the source matrix (`from`)\n * @param [from]\n * @param [to]\n * @returns\n */\nexport const calcPlaneChangeMatrix = (\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n) => multiplyTransformMatrices(invertTransform(to), from);\n\n/**\n * Sends a point from the source coordinate plane to the destination coordinate plane.\\\n * From the canvas/viewer's perspective the point remains unchanged.\n *\n * @example <caption>Send point from canvas plane to group plane</caption>\n * var obj = new Rect({ left: 20, top: 20, width: 60, height: 60, strokeWidth: 0 });\n * var group = new Group([obj], { strokeWidth: 0 });\n * var sentPoint1 = sendPointToPlane(new Point(50, 50), undefined, group.calcTransformMatrix());\n * var sentPoint2 = sendPointToPlane(new Point(50, 50), iMatrix, group.calcTransformMatrix());\n * console.log(sentPoint1, sentPoint2) //  both points print (0,0) which is the center of group\n *\n * @param {Point} point\n * @param {TMat2D} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `point` exists in the canvas coordinate plane.\n * @param {TMat2D} [to] destination plane matrix to contain object. Passing `undefined` means `point` should be sent to the canvas coordinate plane.\n * @returns {Point} transformed point\n */\nexport const sendPointToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to));\n\n/**\n * See {@link sendPointToPlane}\n */\nexport const sendVectorToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to), true);\n\n/**\n *\n * A util that abstracts applying transform to objects.\\\n * Sends `object` to the destination coordinate plane by applying the relevant transformations.\\\n * Changes the space/plane where `object` is drawn.\\\n * From the canvas/viewer's perspective `object` remains unchanged.\n *\n * @example <caption>Move clip path from one object to another while preserving it's appearance as viewed by canvas/viewer</caption>\n * let obj, obj2;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * // render\n * sendObjectToPlane(clipPath, obj.calcTransformMatrix(), obj2.calcTransformMatrix());\n * obj.clipPath = undefined;\n * obj2.clipPath = clipPath;\n * // render, clipPath now clips obj2 but seems unchanged from the eyes of the viewer\n *\n * @example <caption>Clip an object's clip path with an existing object</caption>\n * let obj, existingObj;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * let transformTo = multiplyTransformMatrices(obj.calcTransformMatrix(), clipPath.calcTransformMatrix());\n * sendObjectToPlane(existingObj, existingObj.group?.calcTransformMatrix(), transformTo);\n * clipPath.clipPath = existingObj;\n *\n * @param {FabricObject} object\n * @param {Matrix} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `object` is a direct child of canvas.\n * @param {Matrix} [to] destination plane matrix to contain object. Passing `undefined` means `object` should be sent to the canvas coordinate plane.\n * @returns {Matrix} the transform matrix that was applied to `object`\n */\nexport const sendObjectToPlane = (\n  object: FabricObject,\n  from?: TMat2D,\n  to?: TMat2D,\n): TMat2D => {\n  const t = calcPlaneChangeMatrix(from, to);\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(t, object.calcOwnMatrix()),\n  );\n  return t;\n};\n","import type {\n  ObjectModificationEvents,\n  TModificationEvents,\n} from '../EventTypeDefs';\n\nexport const fireEvent = (\n  eventName: TModificationEvents,\n  options: ObjectModificationEvents[typeof eventName],\n) => {\n  const {\n    transform: { target },\n  } = options;\n  target.canvas?.fire(`object:${eventName}`, {\n    ...options,\n    target,\n  });\n  target.fire(eventName, options);\n};\n","import type { TOriginX, TOriginY } from '../../typedefs';\n\nconst originOffset = {\n  left: -0.5,\n  top: -0.5,\n  center: 0,\n  bottom: 0.5,\n  right: 0.5,\n};\n/**\n * Resolves origin value relative to center\n * @private\n * @param {TOriginX | TOriginY} originValue originX / originY\n * @returns number\n */\n\nexport const resolveOrigin = (\n  originValue: TOriginX | TOriginY | number,\n): number =>\n  typeof originValue === 'string'\n    ? originOffset[originValue]\n    : originValue - 0.5;\n","import type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n\nconst unitVectorX = new Point(1, 0);\nconst zero = new Point();\n\n/**\n * Rotates `vector` with `radians`\n * @param {Point} vector The vector to rotate (x and y)\n * @param {Number} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotateVector = (vector: Point, radians: TRadian) =>\n  vector.rotate(radians);\n\n/**\n * Creates a vector from points represented as a point\n *\n * @param {Point} from\n * @param {Point} to\n * @returns {Point} vector\n */\nexport const createVector = (from: XY, to: XY): Point =>\n  new Point(to).subtract(from);\n\n/**\n * return the magnitude of a vector\n * @return {number}\n */\nexport const magnitude = (point: Point) => point.distanceFrom(zero);\n\n/**\n * Calculates the angle between 2 vectors\n * @param {Point} a\n * @param {Point} b\n * @returns the angle in radians from `a` to `b`\n */\nexport const calcAngleBetweenVectors = (a: Point, b: Point): TRadian =>\n  Math.atan2(crossProduct(a, b), dotProduct(a, b)) as TRadian;\n\n/**\n * Calculates the angle between the x axis and the vector\n * @param {Point} v\n * @returns the angle in radians of `v`\n */\nexport const calcVectorRotation = (v: Point) =>\n  calcAngleBetweenVectors(unitVectorX, v);\n\n/**\n * @param {Point} v\n * @returns {Point} vector representing the unit vector pointing to the direction of `v`\n */\nexport const getUnitVector = (v: Point): Point =>\n  v.eq(zero) ? v : v.scalarDivide(magnitude(v));\n\n/**\n * @param {Point} v\n * @param {Boolean} [counterClockwise] the direction of the orthogonal vector, defaults to `true`\n * @returns {Point} the unit orthogonal vector\n */\nexport const getOrthonormalVector = (\n  v: Point,\n  counterClockwise = true,\n): Point =>\n  getUnitVector(new Point(-v.y, v.x).scalarMultiply(counterClockwise ? 1 : -1));\n\n/**\n * Cross product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number} the magnitude of Z vector\n */\nexport const crossProduct = (a: Point, b: Point): number =>\n  a.x * b.y - a.y * b.x;\n\n/**\n * Dot product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number}\n */\nexport const dotProduct = (a: Point, b: Point): number => a.x * b.x + a.y * b.y;\n\n/**\n * Checks if the vector is between two others. It is considered\n * to be inside when the vector to be tested is between the\n * initial vector and the final vector (included) in a counterclockwise direction.\n * @param {Point} t vector to be tested\n * @param {Point} a initial vector\n * @param {Point} b final vector\n * @returns {boolean} true if the vector is among the others\n */\nexport const isBetweenVectors = (t: Point, a: Point, b: Point): boolean => {\n  if (t.eq(a) || t.eq(b)) return true;\n  const AxB = crossProduct(a, b),\n    AxT = crossProduct(a, t),\n    BxT = crossProduct(b, t);\n  return AxB >= 0 ? AxT >= 0 && BxT <= 0 : !(AxT <= 0 && BxT >= 0);\n};\n","import type {\n  TPointerEvent,\n  Transform,\n  TransformAction,\n  BasicTransformEvent,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TOriginX, TOriginY } from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { CENTER, quarterPI, twoMathPi } from '../constants';\nimport { calcVectorRotation, createVector } from '../util/misc/vectors';\nimport type { TOCoord } from '../shapes/Object/InteractiveObject';\nimport { sendPointToPlane } from '../util/misc/planeChange';\n\nexport const NOT_ALLOWED_CURSOR = 'not-allowed';\n\n/**\n * @param {Boolean} alreadySelected true if target is already selected\n * @param {String} corner a string representing the corner ml, mr, tl ...\n * @param {Event} e Event object\n * @param {FabricObject} [target] inserted back to help overriding. Unused\n */\nexport const getActionFromCorner = (\n  alreadySelected: boolean,\n  corner: string | undefined,\n  e: TPointerEvent,\n  target: FabricObject,\n) => {\n  if (!corner || !alreadySelected) {\n    return 'drag';\n  }\n  const control = target.controls[corner];\n  return control.getActionName(e, control, target);\n};\n\n/**\n * Checks if transform is centered\n * @param {Object} transform transform data\n * @return {Boolean} true if transform is centered\n */\nexport function isTransformCentered(transform: Transform) {\n  return (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) &&\n    resolveOrigin(transform.originY) === resolveOrigin(CENTER)\n  );\n}\n\nexport function invertOrigin(origin: TOriginX | TOriginY) {\n  return -resolveOrigin(origin) + 0.5;\n}\n\nexport const isLocked = (\n  target: FabricObject,\n  lockingKey:\n    | 'lockMovementX'\n    | 'lockMovementY'\n    | 'lockRotation'\n    | 'lockScalingX'\n    | 'lockScalingY'\n    | 'lockSkewingX'\n    | 'lockSkewingY'\n    | 'lockScalingFlip',\n) => target[lockingKey];\n\nexport const commonEventInfo: TransformAction<\n  Transform,\n  BasicTransformEvent\n> = (eventData, transform, x, y) => {\n  return {\n    e: eventData,\n    transform,\n    pointer: new Point(x, y),\n  };\n};\n\n/**\n * Combine control position and object angle to find the control direction compared\n * to the object center.\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n * @param {Control} control the control class\n * @return {Number} 0 - 7 a quadrant number\n */\nexport function findCornerQuadrant(\n  fabricObject: FabricObject,\n  control: Control,\n  coord: TOCoord,\n): number {\n  const target = coord;\n  const center = sendPointToPlane(\n    fabricObject.getCenterPoint(),\n    fabricObject.canvas!.viewportTransform,\n    undefined,\n  );\n  const angle = calcVectorRotation(createVector(center, target)) + twoMathPi;\n  return Math.round((angle % twoMathPi) / quarterPI);\n}\n\n/**\n * @returns the normalized point (rotated relative to center) in local coordinates\n */\nfunction normalizePoint(\n  target: FabricObject,\n  point: Point,\n  originX: TOriginX,\n  originY: TOriginY,\n): Point {\n  const center = target.getRelativeCenterPoint(),\n    p =\n      typeof originX !== 'undefined' && typeof originY !== 'undefined'\n        ? target.translateToGivenOrigin(\n            center,\n            CENTER,\n            CENTER,\n            originX,\n            originY,\n          )\n        : new Point(target.left, target.top),\n    p2 = target.angle\n      ? point.rotate(-degreesToRadians(target.angle), center)\n      : point;\n  return p2.subtract(p);\n}\n\n/**\n * Transforms a point to the offset from the given origin\n * @param {Object} transform\n * @param {String} originX\n * @param {String} originY\n * @param {number} x\n * @param {number} y\n * @return {Fabric.Point} the normalized point\n */\nexport function getLocalPoint(\n  { target, corner }: Transform,\n  originX: TOriginX,\n  originY: TOriginY,\n  x: number,\n  y: number,\n) {\n  const control = target.controls[corner],\n    zoom = target.canvas?.getZoom() || 1,\n    padding = target.padding / zoom,\n    localPoint = normalizePoint(target, new Point(x, y), originX, originY);\n  if (localPoint.x >= padding) {\n    localPoint.x -= padding;\n  }\n  if (localPoint.x <= -padding) {\n    localPoint.x += padding;\n  }\n  if (localPoint.y >= padding) {\n    localPoint.y -= padding;\n  }\n  if (localPoint.y <= padding) {\n    localPoint.y += padding;\n  }\n  localPoint.x -= control.offsetX;\n  localPoint.y -= control.offsetY;\n  return localPoint;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { LEFT, TOP, MOVING } from '../constants';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo, isLocked } from './util';\n\n/**\n * Action handler\n * @private\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if the translation occurred\n */\nexport const dragHandler: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const { target, offsetX, offsetY } = transform,\n    newLeft = x - offsetX,\n    newTop = y - offsetY,\n    moveX = !isLocked(target, 'lockMovementX') && target.left !== newLeft,\n    moveY = !isLocked(target, 'lockMovementY') && target.top !== newTop;\n  moveX && target.set(LEFT, newLeft);\n  moveY && target.set(TOP, newTop);\n  if (moveX || moveY) {\n    fireEvent(MOVING, commonEventInfo(eventData, transform, x, y));\n  }\n  return moveX || moveY;\n};\n","/**\n * Map of the 148 color names with HEX code\n * @see: https://www.w3.org/TR/css3-color/#svg-color\n */\nexport const ColorNameMap = {\n  aliceblue: '#F0F8FF',\n  antiquewhite: '#FAEBD7',\n  aqua: '#0FF',\n  aquamarine: '#7FFFD4',\n  azure: '#F0FFFF',\n  beige: '#F5F5DC',\n  bisque: '#FFE4C4',\n  black: '#000',\n  blanchedalmond: '#FFEBCD',\n  blue: '#00F',\n  blueviolet: '#8A2BE2',\n  brown: '#A52A2A',\n  burlywood: '#DEB887',\n  cadetblue: '#5F9EA0',\n  chartreuse: '#7FFF00',\n  chocolate: '#D2691E',\n  coral: '#FF7F50',\n  cornflowerblue: '#6495ED',\n  cornsilk: '#FFF8DC',\n  crimson: '#DC143C',\n  cyan: '#0FF',\n  darkblue: '#00008B',\n  darkcyan: '#008B8B',\n  darkgoldenrod: '#B8860B',\n  darkgray: '#A9A9A9',\n  darkgrey: '#A9A9A9',\n  darkgreen: '#006400',\n  darkkhaki: '#BDB76B',\n  darkmagenta: '#8B008B',\n  darkolivegreen: '#556B2F',\n  darkorange: '#FF8C00',\n  darkorchid: '#9932CC',\n  darkred: '#8B0000',\n  darksalmon: '#E9967A',\n  darkseagreen: '#8FBC8F',\n  darkslateblue: '#483D8B',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  darkturquoise: '#00CED1',\n  darkviolet: '#9400D3',\n  deeppink: '#FF1493',\n  deepskyblue: '#00BFFF',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1E90FF',\n  firebrick: '#B22222',\n  floralwhite: '#FFFAF0',\n  forestgreen: '#228B22',\n  fuchsia: '#F0F',\n  gainsboro: '#DCDCDC',\n  ghostwhite: '#F8F8FF',\n  gold: '#FFD700',\n  goldenrod: '#DAA520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#ADFF2F',\n  honeydew: '#F0FFF0',\n  hotpink: '#FF69B4',\n  indianred: '#CD5C5C',\n  indigo: '#4B0082',\n  ivory: '#FFFFF0',\n  khaki: '#F0E68C',\n  lavender: '#E6E6FA',\n  lavenderblush: '#FFF0F5',\n  lawngreen: '#7CFC00',\n  lemonchiffon: '#FFFACD',\n  lightblue: '#ADD8E6',\n  lightcoral: '#F08080',\n  lightcyan: '#E0FFFF',\n  lightgoldenrodyellow: '#FAFAD2',\n  lightgray: '#D3D3D3',\n  lightgrey: '#D3D3D3',\n  lightgreen: '#90EE90',\n  lightpink: '#FFB6C1',\n  lightsalmon: '#FFA07A',\n  lightseagreen: '#20B2AA',\n  lightskyblue: '#87CEFA',\n  lightslategray: '#789',\n  lightslategrey: '#789',\n  lightsteelblue: '#B0C4DE',\n  lightyellow: '#FFFFE0',\n  lime: '#0F0',\n  limegreen: '#32CD32',\n  linen: '#FAF0E6',\n  magenta: '#F0F',\n  maroon: '#800000',\n  mediumaquamarine: '#66CDAA',\n  mediumblue: '#0000CD',\n  mediumorchid: '#BA55D3',\n  mediumpurple: '#9370DB',\n  mediumseagreen: '#3CB371',\n  mediumslateblue: '#7B68EE',\n  mediumspringgreen: '#00FA9A',\n  mediumturquoise: '#48D1CC',\n  mediumvioletred: '#C71585',\n  midnightblue: '#191970',\n  mintcream: '#F5FFFA',\n  mistyrose: '#FFE4E1',\n  moccasin: '#FFE4B5',\n  navajowhite: '#FFDEAD',\n  navy: '#000080',\n  oldlace: '#FDF5E6',\n  olive: '#808000',\n  olivedrab: '#6B8E23',\n  orange: '#FFA500',\n  orangered: '#FF4500',\n  orchid: '#DA70D6',\n  palegoldenrod: '#EEE8AA',\n  palegreen: '#98FB98',\n  paleturquoise: '#AFEEEE',\n  palevioletred: '#DB7093',\n  papayawhip: '#FFEFD5',\n  peachpuff: '#FFDAB9',\n  peru: '#CD853F',\n  pink: '#FFC0CB',\n  plum: '#DDA0DD',\n  powderblue: '#B0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#639',\n  red: '#F00',\n  rosybrown: '#BC8F8F',\n  royalblue: '#4169E1',\n  saddlebrown: '#8B4513',\n  salmon: '#FA8072',\n  sandybrown: '#F4A460',\n  seagreen: '#2E8B57',\n  seashell: '#FFF5EE',\n  sienna: '#A0522D',\n  silver: '#C0C0C0',\n  skyblue: '#87CEEB',\n  slateblue: '#6A5ACD',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#FFFAFA',\n  springgreen: '#00FF7F',\n  steelblue: '#4682B4',\n  tan: '#D2B48C',\n  teal: '#008080',\n  thistle: '#D8BFD8',\n  tomato: '#FF6347',\n  turquoise: '#40E0D0',\n  violet: '#EE82EE',\n  wheat: '#F5DEB3',\n  white: '#FFF',\n  whitesmoke: '#F5F5F5',\n  yellow: '#FF0',\n  yellowgreen: '#9ACD32',\n};\n","import type { TRGBAColorSource } from './typedefs';\n\n/**\n * @param {Number} p\n * @param {Number} q\n * @param {Number} t\n * @return {Number}\n */\nexport const hue2rgb = (p: number, q: number, t: number): number => {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n};\n\n/**\n * Adapted from {@link https://gist.github.com/mjackson/5311256 https://gist.github.com/mjackson}\n * @param {Number} r Red color value\n * @param {Number} g Green color value\n * @param {Number} b Blue color value\n * @param {Number} a Alpha color value pass through\n * @return {TRGBColorSource} Hsl color\n */\nexport const rgb2Hsl = (\n  r: number,\n  g: number,\n  b: number,\n  a: number,\n): TRGBAColorSource => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const maxValue = Math.max(r, g, b),\n    minValue = Math.min(r, g, b);\n\n  let h!: number, s: number;\n  const l = (maxValue + minValue) / 2;\n\n  if (maxValue === minValue) {\n    h = s = 0; // achromatic\n  } else {\n    const d = maxValue - minValue;\n    s = l > 0.5 ? d / (2 - maxValue - minValue) : d / (maxValue + minValue);\n    switch (maxValue) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100), a];\n};\n\nexport const fromAlphaToFloat = (value = '1') =>\n  parseFloat(value) / (value.endsWith('%') ? 100 : 1);\n\n/**\n * Convert a value in the inclusive range [0, 255] to hex\n */\nexport const hexify = (value: number) =>\n  Math.min(Math.round(value), 255).toString(16).toUpperCase().padStart(2, '0');\n\n/**\n * Calculate the grey average value for rgb and pass through alpha\n */\nexport const greyAverage = ([\n  r,\n  g,\n  b,\n  a = 1,\n]: TRGBAColorSource): TRGBAColorSource => {\n  const avg = Math.round(r * 0.3 + g * 0.59 + b * 0.11);\n  return [avg, avg, avg, a];\n};\n","import { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { ColorNameMap } from './color_map';\nimport { reHSLa, reHex, reRGBa } from './constants';\nimport type { TRGBAColorSource, TColorArg } from './typedefs';\nimport {\n  hue2rgb,\n  hexify,\n  rgb2Hsl,\n  fromAlphaToFloat,\n  greyAverage,\n} from './util';\n\n/**\n * @class Color common color operations\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors colors}\n */\nexport class Color {\n  declare private _source: TRGBAColorSource;\n  isUnrecognised = false;\n\n  /**\n   *\n   * @param {string} [color] optional in hex or rgb(a) or hsl format or from known color list\n   */\n  constructor(color?: TColorArg) {\n    if (!color) {\n      // we default to black as canvas does\n      this.setSource([0, 0, 0, 1]);\n    } else if (color instanceof Color) {\n      this.setSource([...color._source]);\n    } else if (Array.isArray(color)) {\n      const [r, g, b, a = 1] = color;\n      this.setSource([r, g, b, a]);\n    } else {\n      this.setSource(this._tryParsingColor(color));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} [color] Color value to parse\n   * @returns {TRGBAColorSource}\n   */\n  protected _tryParsingColor(color: string) {\n    color = color.toLowerCase();\n    if (color in ColorNameMap) {\n      color = ColorNameMap[color as keyof typeof ColorNameMap];\n    }\n    return color === 'transparent'\n      ? ([255, 255, 255, 0] as TRGBAColorSource)\n      : Color.sourceFromHex(color) ||\n          Color.sourceFromRgb(color) ||\n          Color.sourceFromHsl(color) ||\n          // color is not recognized\n          // we default to black as canvas does\n          // eslint-disable-next-line no-constant-binary-expression\n          ((this.isUnrecognised = true) && ([0, 0, 0, 1] as TRGBAColorSource));\n  }\n\n  /**\n   * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @return {TRGBAColorSource}\n   */\n  getSource() {\n    return this._source;\n  }\n\n  /**\n   * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @param {TRGBAColorSource} source\n   */\n  setSource(source: TRGBAColorSource) {\n    this._source = source;\n  }\n\n  /**\n   * Returns color representation in RGB format\n   * @return {String} ex: rgb(0-255,0-255,0-255)\n   */\n  toRgb() {\n    const [r, g, b] = this.getSource();\n    return `rgb(${r},${g},${b})`;\n  }\n\n  /**\n   * Returns color representation in RGBA format\n   * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n   */\n  toRgba() {\n    return `rgba(${this.getSource().join(',')})`;\n  }\n\n  /**\n   * Returns color representation in HSL format\n   * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n   */\n  toHsl() {\n    const [h, s, l] = rgb2Hsl(...this.getSource());\n    return `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /**\n   * Returns color representation in HSLA format\n   * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n   */\n  toHsla() {\n    const [h, s, l, a] = rgb2Hsl(...this.getSource());\n    return `hsla(${h},${s}%,${l}%,${a})`;\n  }\n\n  /**\n   * Returns color representation in HEX format\n   * @return {String} ex: FF5555\n   */\n  toHex() {\n    const fullHex = this.toHexa();\n    return fullHex.slice(0, 6);\n  }\n\n  /**\n   * Returns color representation in HEXA format\n   * @return {String} ex: FF5555CC\n   */\n  toHexa() {\n    const [r, g, b, a] = this.getSource();\n    return `${hexify(r)}${hexify(g)}${hexify(b)}${hexify(Math.round(a * 255))}`;\n  }\n\n  /**\n   * Gets value of alpha channel for this color\n   * @return {Number} 0-1\n   */\n  getAlpha() {\n    return this.getSource()[3];\n  }\n\n  /**\n   * Sets value of alpha channel for this color\n   * @param {Number} alpha Alpha value 0-1\n   * @return {Color} thisArg\n   */\n  setAlpha(alpha: number) {\n    this._source[3] = alpha;\n    return this;\n  }\n\n  /**\n   * Transforms color to its grayscale representation\n   * @return {Color} thisArg\n   */\n  toGrayscale() {\n    this.setSource(greyAverage(this.getSource()));\n    return this;\n  }\n\n  /**\n   * Transforms color to its black and white representation\n   * @param {Number} threshold\n   * @return {Color} thisArg\n   */\n  toBlackWhite(threshold: number) {\n    const [average, , , a] = greyAverage(this.getSource()),\n      bOrW = average < (threshold || 127) ? 0 : 255;\n    this.setSource([bOrW, bOrW, bOrW, a]);\n    return this;\n  }\n\n  /**\n   * Overlays color with another color\n   * @param {String|Color} otherColor\n   * @return {Color} thisArg\n   */\n  overlayWith(otherColor: string | Color) {\n    if (!(otherColor instanceof Color)) {\n      otherColor = new Color(otherColor);\n    }\n\n    const source = this.getSource(),\n      otherAlpha = 0.5,\n      otherSource = otherColor.getSource(),\n      [R, G, B] = source.map((value, index) =>\n        Math.round(value * (1 - otherAlpha) + otherSource[index] * otherAlpha),\n      );\n\n    this.setSource([R, G, B, source[3]]);\n    return this;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {Color}\n   */\n  static fromRgb(color: string): Color {\n    return Color.fromRgba(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromRgba(color: string): Color {\n    return new Color(Color.sourceFromRgb(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromRgb(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reRGBa());\n    if (match) {\n      const [r, g, b] = match.slice(1, 4).map((value) => {\n        const parsedValue = parseFloat(value);\n        return value.endsWith('%')\n          ? Math.round(parsedValue * 2.55)\n          : parsedValue;\n      });\n      return [r, g, b, fromAlphaToFloat(match[4])];\n    }\n  }\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf Color\n   * @return {Color}\n   */\n  static fromHsl(color: string): Color {\n    return Color.fromHsla(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromHsla(color: string): Color {\n    return new Color(Color.sourceFromHsl(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {TRGBAColorSource | undefined} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  static sourceFromHsl(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reHSLa());\n    if (!match) {\n      return;\n    }\n    const match1degrees = Color.parseAngletoDegrees(match[1]);\n\n    const h = (((match1degrees % 360) + 360) % 360) / 360,\n      s = parseFloat(match[2]) / 100,\n      l = parseFloat(match[3]) / 100;\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      const q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n        p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      fromAlphaToFloat(match[4]),\n    ];\n  }\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color Color value ex: FF5555\n   * @return {Color}\n   */\n  static fromHex(color: string): Color {\n    return new Color(Color.sourceFromHex(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromHex(color: string): TRGBAColorSource | undefined {\n    if (color.match(reHex())) {\n      const value = color.slice(color.indexOf('#') + 1),\n        isShortNotation = value.length <= 4;\n      let expandedValue: string[];\n      if (isShortNotation) {\n        expandedValue = value.split('').map((hex) => hex + hex);\n      } else {\n        expandedValue = value.match(/.{2}/g)!;\n      }\n      const [r, g, b, a = 255] = expandedValue.map((hexCouple) =>\n        parseInt(hexCouple, 16),\n      );\n      return [r, g, b, a / 255];\n    }\n  }\n\n  /**\n   * Converts a string that could be any angle notation (50deg, 0.5turn, 2rad)\n   * into degrees without the 'deg' suffix\n   * @static\n   * @memberOf Color\n   * @param {String} value ex: 0deg, 0.5turn, 2rad\n   * @return {Number} number in degrees or NaN if inputs are invalid\n   */\n  static parseAngletoDegrees(value: string): number {\n    const lowercase = value.toLowerCase();\n    const numeric = parseFloat(lowercase);\n\n    if (lowercase.includes('rad')) {\n      return radiansToDegrees(numeric);\n    }\n\n    if (lowercase.includes('turn')) {\n      return numeric * 360;\n    }\n\n    // Value is probably just a number already in degrees eg '50'\n    return numeric;\n  }\n}\n","/**\n * Regex matching color in RGB or RGBA formats (ex: `rgb(0, 0, 0)`, `rgba(255, 100, 10, 0.5)`, `rgba( 255 , 100 , 10 , 0.5 )`, `rgb(1,1,1)`, `rgba(100%, 60%, 10%, 0.5)`)\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb\n * Formal syntax at the time of writing:\n * <rgb()> =\n *  rgb( [ <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )  |\n *  rgb( [ <number> | none ]{3} [ / [ <alpha-value> | none ] ]? )\n * <alpha-value> = <number> | <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an rgba or rgb CSS color value\n *\n * /^          # Beginning of the string\n * rgba?       # \"rgb\" or \"rgba\"\n * \\(\\s*       # Opening parenthesis and optional whitespace\n * (\\d{0,3}    # 0 to three digits R channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the first color component\n * %?          # Optional percent sign after the first color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits G channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the second color component\n * %?          # Optional percent sign after the second color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits B channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the third color component\n * %?          # Optional percent sign after the third color component\n * \\s*         # Optional whitespace\n * (?:         # Beginning of non-capturing group for alpha value\n *  \\s*        # Optional whitespace\n *  [,/]       # Comma or slash separator for alpha value\n *  \\s*        # Optional whitespace\n *  (\\d{0,3}   # Zero to three digits\n *    (?:\\.\\d+)? # Optional decimal with one or more digits\n *  )          # End of capturing group for alpha value\n *  %?         # Optional percent sign after alpha value\n *  \\s*        # Optional whitespace\n * )?          # End of non-capturing group for alpha value (optional)\n * \\)          # Closing parenthesis\n * $           # End of the string\n *\n * The alpha channel can be in the format 0.4 .7 or 1 or 73%\n *\n * WARNING this regex doesn't fail on off spec colors. it matches everything that could be a color.\n * So the spec does not allow for `rgba(30 , 45%  35, 49%)` but this will work anyways for us\n */\nexport const reRGBa = () =>\n  /^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HSL or HSLA formats (ex: hsl(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl\n * Formal syntax at the time of writing:\n * <hsl()> =\n *   hsl( [ <hue> | none ] [ <percentage> | none ] [ <percentage> | none ] [ / [ <alpha-value> | none ] ]? )\n *\n * <hue> =\n *   <number>  |\n *   <angle>\n *\n * <alpha-value> =\n *   <number>      |\n *   <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an hsla or hsl CSS color value\n *\n * /^hsla?\\(         // Matches the beginning of the string and the opening parenthesis of \"hsl\" or \"hsla\"\n * \\s*               // Matches any whitespace characters (space, tab, etc.) zero or more times\n * (\\d{0,3}          // Hue: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Hue: Optional (non capture group) decimal with one or more digits.\n * (?:deg|turn|rad)? // Hue: Optionally include suffix deg or turn or rad\n * )                 // Hue: End capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Saturation: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Saturation: Optional decimal with one or more digits in a non-capturing group\n * %?)               // Saturation: match optional % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Lightness: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Lightness: Optional decimal with one or more digits in a non-capturing group\n * %?)                // Lightness: match % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * (?:               // Alpha: Begins a non-capturing group for the alpha value\n *   \\s*             // Matches any whitespace characters zero or more times\n *   [,/]            // Matches a comma or forward slash\n *   \\s*             // Matches any whitespace characters zero or more times\n *   (\\d*(?:\\.\\d+)?%?) // Matches zero or more digits, optionally followed by a decimal point and one or more digits, followed by an optional percentage sign and captures it in a group\n *   \\s*             // Matches any whitespace characters zero or more times\n * )?                // Makes the alpha value group optional\n * \\)                // Matches the closing parenthesis\n * $/i               // Matches the end of the string and sets the regular expression to case-insensitive mode\n *\n * WARNING this regex doesn't fail on off spec colors. It matches everything that could be a color.\n * So the spec does not allow `hsl(30 , 45%  35, 49%)` but this will work anyways for us.\n */\nexport const reHSLa = () =>\n  /^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n */\nexport const reHex = () => /^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i;\n","import { Color } from '../../color/Color';\nimport { config } from '../../config';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, NONE } from '../../constants';\nimport type { TBBox, SVGElementName, SupportedSVGUnit } from '../../typedefs';\nimport { toFixed } from './toFixed';\n\n/**\n * Returns array of attributes for given svg that fabric parses\n * @param {SVGElementName} type Type of svg element (eg. 'circle')\n * @return {Array} string names of supported attributes\n */\nexport const getSvgAttributes = (type: SVGElementName) => {\n  const commonAttributes = ['instantiated_by_use', 'style', 'id', 'class'];\n  switch (type) {\n    case 'linearGradient':\n      return commonAttributes.concat([\n        'x1',\n        'y1',\n        'x2',\n        'y2',\n        'gradientUnits',\n        'gradientTransform',\n      ]);\n    case 'radialGradient':\n      return commonAttributes.concat([\n        'gradientUnits',\n        'gradientTransform',\n        'cx',\n        'cy',\n        'r',\n        'fx',\n        'fy',\n        'fr',\n      ]);\n    case 'stop':\n      return commonAttributes.concat(['offset', 'stop-color', 'stop-opacity']);\n  }\n  return commonAttributes;\n};\n\n/**\n * Converts from attribute value to pixel value if applicable.\n * Returns converted pixels or original value not converted.\n * @param {string} value number to operate on\n * @param {number} fontSize\n * @return {number}\n */\nexport const parseUnit = (value: string, fontSize = DEFAULT_SVG_FONT_SIZE) => {\n  const unit = /\\D{0,2}$/.exec(value),\n    number = parseFloat(value);\n  const dpi = config.DPI;\n  switch (unit?.[0] as SupportedSVGUnit) {\n    case 'mm':\n      return (number * dpi) / 25.4;\n\n    case 'cm':\n      return (number * dpi) / 2.54;\n\n    case 'in':\n      return number * dpi;\n\n    case 'pt':\n      return (number * dpi) / 72; // or * 4 / 3\n\n    case 'pc':\n      return ((number * dpi) / 72) * 12; // or * 16\n\n    case 'em':\n      return number * fontSize;\n\n    default:\n      return number;\n  }\n};\n\nexport type MeetOrSlice = 'meet' | 'slice';\n\nexport type MinMidMax = 'Min' | 'Mid' | 'Max' | 'none';\n\nexport type TPreserveArParsed = {\n  meetOrSlice: MeetOrSlice;\n  alignX: MinMidMax;\n  alignY: MinMidMax;\n};\n\n// align can be either none or undefined or a combination of mid/max\nconst parseAlign = (align: string): MinMidMax[] => {\n  //divide align in alignX and alignY\n  if (align && align !== NONE) {\n    return [align.slice(1, 4) as MinMidMax, align.slice(5, 8) as MinMidMax];\n  } else if (align === NONE) {\n    return [align, align];\n  }\n  return ['Mid', 'Mid'];\n};\n\n/**\n * Parse preserveAspectRatio attribute from element\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n * @param {string} attribute to be parsed\n * @return {Object} an object containing align and meetOrSlice attribute\n */\nexport const parsePreserveAspectRatioAttribute = (\n  attribute: string,\n): TPreserveArParsed => {\n  const [firstPart, secondPart] = attribute.trim().split(' ') as [\n    MinMidMax,\n    MeetOrSlice | undefined,\n  ];\n  const [alignX, alignY] = parseAlign(firstPart);\n  return {\n    meetOrSlice: secondPart || 'meet',\n    alignX,\n    alignY,\n  };\n};\n\n/**\n * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n * @param prop\n * @param value\n * @param {boolean} inlineStyle The default is inline style, the separator used is \":\", The other is \"=\"\n * @returns\n */\nexport const colorPropToSVG = (\n  prop: string,\n  value?: any,\n  inlineStyle = true,\n) => {\n  let colorValue;\n  let opacityValue;\n  if (!value) {\n    colorValue = 'none';\n  } else if (value.toLive) {\n    colorValue = `url(#SVGID_${value.id})`;\n  } else {\n    const color = new Color(value),\n      opacity = color.getAlpha();\n\n    colorValue = color.toRgb();\n    if (opacity !== 1) {\n      opacityValue = opacity.toString();\n    }\n  }\n  if (inlineStyle) {\n    return `${prop}: ${colorValue}; ${\n      opacityValue ? `${prop}-opacity: ${opacityValue}; ` : ''\n    }`;\n  } else {\n    return `${prop}=\"${colorValue}\" ${\n      opacityValue ? `${prop}-opacity=\"${opacityValue}\" ` : ''\n    }`;\n  }\n};\n\nexport const createSVGRect = (\n  color: string,\n  { left, top, width, height }: TBBox,\n  precision = config.NUM_FRACTION_DIGITS,\n) => {\n  const svgColor = colorPropToSVG(FILL, color, false);\n  const [x, y, w, h] = [left, top, width, height].map((value) =>\n    toFixed(value, precision),\n  );\n  return `<rect ${svgColor} x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\"></rect>`;\n};\n","import type { TSVGReviver } from '../../typedefs';\nimport { uid } from '../../util/internals/uid';\nimport { colorPropToSVG } from '../../util/misc/svgParsing';\nimport { FILL, NONE, STROKE } from '../../constants';\nimport type { FabricObject } from './FabricObject';\nimport { isFiller } from '../../util/typeAssertions';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nexport class FabricObjectSVGExportMixin {\n  /**\n   * When an object is being exported as SVG as a clippath, a reference inside the SVG is needed.\n   * This reference is a UID in the fabric namespace and is temporary stored here.\n   * @type {String}\n   */\n  declare clipPathId?: string;\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    skipShadow?: boolean,\n  ) {\n    const fillRule = this.fillRule ? this.fillRule : 'nonzero',\n      strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n      strokeDashArray = this.strokeDashArray\n        ? this.strokeDashArray.join(' ')\n        : NONE,\n      strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n      strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n      strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n      strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n      opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n      visibility = this.visible ? '' : ' visibility: hidden;',\n      filter = skipShadow ? '' : this.getSvgFilter(),\n      fill = colorPropToSVG(FILL, this.fill),\n      stroke = colorPropToSVG(STROKE, this.stroke);\n\n    return [\n      stroke,\n      'stroke-width: ',\n      strokeWidth,\n      '; ',\n      'stroke-dasharray: ',\n      strokeDashArray,\n      '; ',\n      'stroke-linecap: ',\n      strokeLineCap,\n      '; ',\n      'stroke-dashoffset: ',\n      strokeDashOffset,\n      '; ',\n      'stroke-linejoin: ',\n      strokeLineJoin,\n      '; ',\n      'stroke-miterlimit: ',\n      strokeMiterLimit,\n      '; ',\n      fill,\n      'fill-rule: ',\n      fillRule,\n      '; ',\n      'opacity: ',\n      opacity,\n      ';',\n      filter,\n      visibility,\n    ].join('');\n  }\n\n  /**\n   * Returns filter for svg shadow\n   * @return {String}\n   */\n  getSvgFilter(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.shadow ? `filter: url(#SVGID_${this.shadow.id});` : '';\n  }\n\n  /**\n   * Returns id attribute for svg output\n   * @return {String}\n   */\n  getSvgCommons(\n    this: FabricObjectSVGExportMixin & FabricObject & { id?: string },\n  ) {\n    return [\n      this.id ? `id=\"${this.id}\" ` : '',\n      this.clipPath\n        ? `clip-path=\"url(#${\n            (this.clipPath as FabricObjectSVGExportMixin & FabricObject)\n              .clipPathId\n          })\" `\n        : '',\n    ].join('');\n  }\n\n  /**\n   * Returns transform-string for svg-export\n   * @param {Boolean} use the full transform or the single object one.\n   * @return {String}\n   */\n  getSvgTransform(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    full?: boolean,\n    additionalTransform = '',\n  ) {\n    const transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n      svgTransform = `transform=\"${matrixToSVG(transform)}`;\n    return `${svgTransform}${additionalTransform}\" `;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * This function is implemented in each subclass\n   * This is just because typescript otherwise cryies all the time\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(_reviver?: TSVGReviver): string[] {\n    return [''];\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return this._createBaseSVGMarkup(this._toSVG(reviver), {\n      reviver,\n    });\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {\n        reviver,\n      })\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createBaseClipPathSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      reviver,\n      additionalTransform = '',\n    }: { reviver?: TSVGReviver; additionalTransform?: string } = {},\n  ) {\n    const commonPieces = [\n        this.getSvgTransform(true, additionalTransform),\n        this.getSvgCommons(),\n      ].join(''),\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    objectMarkup[index] = commonPieces;\n    return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      noStyle,\n      reviver,\n      withShadow,\n      additionalTransform,\n    }: {\n      noStyle?: boolean;\n      reviver?: TSVGReviver;\n      withShadow?: boolean;\n      additionalTransform?: string;\n    } = {},\n  ): string {\n    const styleInfo = noStyle ? '' : `style=\"${this.getSvgStyles()}\" `,\n      shadowInfo = withShadow ? `style=\"${this.getSvgFilter()}\" ` : '',\n      clipPath = this.clipPath as FabricObjectSVGExportMixin & FabricObject,\n      vectorEffect = this.strokeUniform\n        ? 'vector-effect=\"non-scaling-stroke\" '\n        : '',\n      absoluteClipPath = clipPath && clipPath.absolutePositioned,\n      stroke = this.stroke,\n      fill = this.fill,\n      shadow = this.shadow,\n      markup = [],\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    let clipPathMarkup;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      clipPathMarkup = `<clipPath id=\"${\n        clipPath.clipPathId\n      }\" >\\n${clipPath.toClipPathSVG(reviver)}</clipPath>\\n`;\n    }\n    if (absoluteClipPath) {\n      markup.push('<g ', shadowInfo, this.getSvgCommons(), ' >\\n');\n    }\n    markup.push(\n      '<g ',\n      this.getSvgTransform(false),\n      !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n      ' >\\n',\n    );\n    const commonPieces = [\n      styleInfo,\n      vectorEffect,\n      noStyle ? '' : this.addPaintOrder(),\n      ' ',\n      additionalTransform ? `transform=\"${additionalTransform}\" ` : '',\n    ].join('');\n    objectMarkup[index] = commonPieces;\n    if (isFiller(fill)) {\n      markup.push(fill.toSVG(this));\n    }\n    if (isFiller(stroke)) {\n      markup.push(stroke.toSVG(this));\n    }\n    if (shadow) {\n      markup.push(shadow.toSVG(this));\n    }\n    if (clipPath) {\n      markup.push(clipPathMarkup);\n    }\n    markup.push(objectMarkup.join(''));\n    markup.push('</g>\\n');\n    absoluteClipPath && markup.push('</g>\\n');\n    return reviver ? reviver(markup.join('')) : markup.join('');\n  }\n\n  addPaintOrder(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.paintFirst !== FILL ? ` paint-order=\"${this.paintFirst}\" ` : '';\n  }\n}\n","export function getSvgRegex(arr: string[]) {\n  return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n}\n","import { FILL, LEFT, STROKE, reNewline } from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { FabricText } from './Text';\n\nexport const TEXT_DECORATION_THICKNESS = 'textDecorationThickness';\n\nconst fontProperties = [\n  'fontSize',\n  'fontWeight',\n  'fontFamily',\n  'fontStyle',\n] as const;\n\nexport const textDecorationProperties = [\n  'underline',\n  'overline',\n  'linethrough',\n] as const;\n\nexport const textLayoutProperties: string[] = [\n  ...fontProperties,\n  'lineHeight',\n  'text',\n  'charSpacing',\n  'textAlign',\n  'styles',\n  'path',\n  'pathStartOffset',\n  'pathSide',\n  'pathAlign',\n];\n\nexport const additionalProps = [\n  ...textLayoutProperties,\n  ...textDecorationProperties,\n  'textBackgroundColor',\n  'direction',\n  TEXT_DECORATION_THICKNESS,\n] as const;\n\nexport type StylePropertiesType =\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'fontSize'\n  | 'fontFamily'\n  | 'fontWeight'\n  | 'fontStyle'\n  | 'textBackgroundColor'\n  | 'deltaY'\n  | 'overline'\n  | 'underline'\n  | 'linethrough'\n  | typeof TEXT_DECORATION_THICKNESS;\n\nexport const styleProperties: Readonly<StylePropertiesType[]> = [\n  ...fontProperties,\n  ...textDecorationProperties,\n  STROKE,\n  'strokeWidth',\n  FILL,\n  'deltaY',\n  'textBackgroundColor',\n  TEXT_DECORATION_THICKNESS,\n] as const;\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textDefaultValues: Partial<TClassProperties<FabricText>> = {\n  _reNewline: reNewline,\n  _reSpacesAndTabs: /[ \\t\\r]/g,\n  _reSpaceAndTab: /[ \\t\\r]/,\n  _reWords: /\\S+/g,\n  fontSize: 40,\n  fontWeight: 'normal',\n  fontFamily: 'Times New Roman',\n  underline: false,\n  overline: false,\n  linethrough: false,\n  textAlign: LEFT,\n  fontStyle: 'normal',\n  lineHeight: 1.16,\n  textBackgroundColor: '',\n  stroke: null,\n  shadow: null,\n  path: undefined,\n  pathStartOffset: 0,\n  pathSide: LEFT,\n  pathAlign: 'baseline',\n  charSpacing: 0,\n  deltaY: 0,\n  direction: 'ltr',\n  CACHE_FONT_SIZE: 400,\n  MIN_TEXT_WIDTH: 2,\n  // Text magic numbers\n  superscript: {\n    size: 0.6, // fontSize factor\n    baseline: -0.35, // baseline-shift factor (upwards)\n  },\n  subscript: {\n    size: 0.6, // fontSize factor\n    baseline: 0.11, // baseline-shift factor (downwards)\n  },\n  _fontSizeFraction: 0.222,\n  offsets: {\n    underline: 0.1,\n    linethrough: -0.28167, // added 1/30 to original number\n    overline: -0.81333, // added 1/15 to original number\n  },\n  _fontSizeMult: 1.13,\n  [TEXT_DECORATION_THICKNESS]: 66.667, // before implementation was 1/15\n};\n\nexport const JUSTIFY = 'justify';\nexport const JUSTIFY_LEFT = 'justify-left';\nexport const JUSTIFY_RIGHT = 'justify-right';\nexport const JUSTIFY_CENTER = 'justify-center';\n","import { getSvgRegex } from './getSvgRegex';\nimport { LEFT, TOP } from '../constants';\nimport { TEXT_DECORATION_THICKNESS } from '../shapes/Text/constants';\n\n// matches, e.g.: +14.56e-12, etc.\nexport const reNum = String.raw`[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?`;\nexport const viewportSeparator = String.raw`(?:\\s*,?\\s+|\\s*,\\s*)`;\n\nexport const svgNS = 'http://www.w3.org/2000/svg';\n\nexport const reFontDeclaration = new RegExp(\n  '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n    reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' +\n    reNum +\n    '))?\\\\s+(.*)',\n);\n\nexport const svgValidTagNames = [\n    'path',\n    'circle',\n    'polygon',\n    'polyline',\n    'ellipse',\n    'rect',\n    'line',\n    'image',\n    'text',\n  ],\n  svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n  svgInvalidAncestors = [\n    'pattern',\n    'defs',\n    'symbol',\n    'metadata',\n    'clipPath',\n    'mask',\n    'desc',\n  ],\n  svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n  attributesMap = {\n    cx: LEFT,\n    x: LEFT,\n    r: 'radius',\n    cy: TOP,\n    y: TOP,\n    display: 'visible',\n    visibility: 'visible',\n    transform: 'transformMatrix',\n    'fill-opacity': 'fillOpacity',\n    'fill-rule': 'fillRule',\n    'font-family': 'fontFamily',\n    'font-size': 'fontSize',\n    'font-style': 'fontStyle',\n    'font-weight': 'fontWeight',\n    'letter-spacing': 'charSpacing',\n    'paint-order': 'paintFirst',\n    'stroke-dasharray': 'strokeDashArray',\n    'stroke-dashoffset': 'strokeDashOffset',\n    'stroke-linecap': 'strokeLineCap',\n    'stroke-linejoin': 'strokeLineJoin',\n    'stroke-miterlimit': 'strokeMiterLimit',\n    'stroke-opacity': 'strokeOpacity',\n    'stroke-width': 'strokeWidth',\n    'text-decoration': 'textDecoration',\n    'text-anchor': 'textAnchor',\n    opacity: 'opacity',\n    'clip-path': 'clipPath',\n    'clip-rule': 'clipRule',\n    'vector-effect': 'strokeUniform',\n    'image-rendering': 'imageSmoothing',\n    'text-decoration-thickness': TEXT_DECORATION_THICKNESS,\n  },\n  fSize = 'font-size',\n  cPath = 'clip-path';\n\nexport const svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n\nexport const svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n\nexport const svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n\nexport const reViewBoxAttrValue = new RegExp(\n  String.raw`^\\s*(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})\\s*$`,\n);\n","import { classRegistry } from './ClassRegistry';\nimport { Color } from './color/Color';\nimport { config } from './config';\nimport { reNum } from './parser/constants';\nimport { Point } from './Point';\nimport type { FabricObject } from './shapes/Object/FabricObject';\nimport type { TClassProperties } from './typedefs';\nimport { uid } from './util/internals/uid';\nimport { pickBy } from './util/misc/pick';\nimport { degreesToRadians } from './util/misc/radiansDegreesConversion';\nimport { toFixed } from './util/misc/toFixed';\nimport { rotateVector } from './util/misc/vectors';\n\n/**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * - (?:\\s|^): This part captures either a whitespace character (\\s) or the beginning of a line (^). It's non-capturing (due to (?:...)), meaning it doesn't create a capturing group.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: This captures the first component of the shadow, which is the horizontal offset. Breaking it down:\n   *   - (-?\\d+): Captures an optional minus sign followed by one or more digits (integer part of the number).\n   *   - (?:\\.\\d*)?: Optionally captures a decimal point followed by zero or more digits (decimal part of the number).\n   *   - (?:px)?: Optionally captures the \"px\" unit.\n   *   - (?:\\s?|$): Captures either an optional whitespace or the end of the line. This whole part is wrapped in a non-capturing group and marked as optional with ?.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: Similar to the previous step, this captures the vertical offset.\n\n(\\d+(?:\\.\\d*)?(?:px)?)?: This captures the blur radius. It's similar to the horizontal offset but without the optional minus sign.\n\n(?:\\s+(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?){0,1}: This captures an optional part for the color. It allows for whitespace followed by a component with an optional minus sign, digits, decimal point, and \"px\" unit.\n\n(?:$|\\s): This captures either the end of the line or a whitespace character. It ensures that the match ends either at the end of the string or with a whitespace character.\n   */\n// eslint-disable-next-line max-len\n\nconst shadowOffsetRegex = '(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?';\n\nconst reOffsetsAndBlur = new RegExp(\n  '(?:\\\\s|^)' +\n    shadowOffsetRegex +\n    shadowOffsetRegex +\n    '(' +\n    reNum +\n    '?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)',\n);\n\nexport const shadowDefaultValues: Partial<TClassProperties<Shadow>> = {\n  color: 'rgb(0,0,0)',\n  blur: 0,\n  offsetX: 0,\n  offsetY: 0,\n  affectStroke: false,\n  includeDefaultValues: true,\n  nonScaling: false,\n};\n\nexport type SerializedShadowOptions = {\n  color: string;\n  blur: number;\n  offsetX: number;\n  offsetY: number;\n  affectStroke: boolean;\n  nonScaling: boolean;\n  type: string;\n};\n\nexport class Shadow {\n  /**\n   * Shadow color\n   * @type String\n   * @default\n   */\n  declare color: string;\n\n  /**\n   * Shadow blur\n   * @type Number\n   */\n  declare blur: number;\n\n  /**\n   * Shadow horizontal offset\n   * @type Number\n   * @default\n   */\n  declare offsetX: number;\n\n  /**\n   * Shadow vertical offset\n   * @type Number\n   * @default\n   */\n  declare offsetY: number;\n\n  /**\n   * Whether the shadow should affect stroke operations\n   * @type Boolean\n   * @default\n   */\n  declare affectStroke: boolean;\n\n  /**\n   * Indicates whether toObject should include default values\n   * @type Boolean\n   * @default\n   */\n  declare includeDefaultValues: boolean;\n\n  /**\n   * When `false`, the shadow will scale with the object.\n   * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\n   * default to false\n   * @type Boolean\n   * @default\n   */\n  declare nonScaling: boolean;\n\n  declare id: number;\n\n  static ownDefaults = shadowDefaultValues;\n\n  static type = 'shadow';\n\n  /**\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n   */\n  constructor(options?: Partial<TClassProperties<Shadow>>);\n  constructor(svgAttribute: string);\n  constructor(arg0: string | Partial<TClassProperties<Shadow>> = {}) {\n    const options: Partial<TClassProperties<Shadow>> =\n      typeof arg0 === 'string' ? Shadow.parseShadow(arg0) : arg0;\n    Object.assign(this, Shadow.ownDefaults, options);\n    this.id = uid();\n  }\n\n  /**\n   * @param {String} value Shadow value to parse\n   * @return {Object} Shadow object with color, offsetX, offsetY and blur\n   */\n  static parseShadow(value: string) {\n    const shadowStr = value.trim(),\n      [, offsetX = 0, offsetY = 0, blur = 0] = (\n        reOffsetsAndBlur.exec(shadowStr) || []\n      ).map((value) => parseFloat(value) || 0),\n      color = (shadowStr.replace(reOffsetsAndBlur, '') || 'rgb(0,0,0)').trim();\n\n    return {\n      color,\n      offsetX,\n      offsetY,\n      blur,\n    };\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n   * @return {String} Returns CSS3 text-shadow declaration\n   */\n  toString() {\n    return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n  }\n\n  /**\n   * Returns SVG representation of a shadow\n   * @param {FabricObject} object\n   * @return {String} SVG representation of a shadow\n   */\n  toSVG(object: FabricObject) {\n    const offset = rotateVector(\n        new Point(this.offsetX, this.offsetY),\n        degreesToRadians(-object.angle),\n      ),\n      BLUR_BOX = 20,\n      color = new Color(this.color);\n    let fBoxX = 40,\n      fBoxY = 40;\n\n    if (object.width && object.height) {\n      //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n      // we add some extra space to filter box to contain the blur ( 20 )\n      fBoxX =\n        toFixed(\n          (Math.abs(offset.x) + this.blur) / object.width,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n      fBoxY =\n        toFixed(\n          (Math.abs(offset.y) + this.blur) / object.height,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n    }\n    if (object.flipX) {\n      offset.x *= -1;\n    }\n    if (object.flipY) {\n      offset.y *= -1;\n    }\n\n    return `<filter id=\"SVGID_${this.id}\" y=\"-${fBoxY}%\" height=\"${\n      100 + 2 * fBoxY\n    }%\" x=\"-${fBoxX}%\" width=\"${\n      100 + 2 * fBoxX\n    }%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${toFixed(\n      this.blur ? this.blur / 2 : 0,\n      config.NUM_FRACTION_DIGITS,\n    )}\"></feGaussianBlur>\\n\\t<feOffset dx=\"${toFixed(\n      offset.x,\n      config.NUM_FRACTION_DIGITS,\n    )}\" dy=\"${toFixed(\n      offset.y,\n      config.NUM_FRACTION_DIGITS,\n    )}\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"${color.toRgb()}\" flood-opacity=\"${color.getAlpha()}\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n`;\n  }\n\n  /**\n   * Returns object representation of a shadow\n   * @return {Object} Object representation of a shadow instance\n   */\n  toObject() {\n    const data: SerializedShadowOptions = {\n      color: this.color,\n      blur: this.blur,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      affectStroke: this.affectStroke,\n      nonScaling: this.nonScaling,\n      type: (this.constructor as typeof Shadow).type,\n    };\n    const defaults = Shadow.ownDefaults as SerializedShadowOptions;\n    return !this.includeDefaultValues\n      ? pickBy(data, (value, key) => value !== defaults[key])\n      : data;\n  }\n\n  static async fromObject(options: Partial<TClassProperties<Shadow>>) {\n    return new this(options);\n  }\n}\n\nclassRegistry.setClass(Shadow, 'shadow');\n","export const capValue = (min: number, value: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n","import {\n  TOP,\n  LEFT,\n  SCALE_Y,\n  SCALE_X,\n  SKEW_X,\n  SKEW_Y,\n  FILL,\n  STROKE,\n} from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { InteractiveFabricObject } from './InteractiveObject';\nimport type { FabricObject } from './Object';\n\nexport const stateProperties = [\n  TOP,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  'flipX',\n  'flipY',\n  'originX',\n  'originY',\n  'angle',\n  'opacity',\n  'globalCompositeOperation',\n  'shadow',\n  'visible',\n  SKEW_X,\n  SKEW_Y,\n];\n\nexport const cacheProperties = [\n  FILL,\n  STROKE,\n  'strokeWidth',\n  'strokeDashArray',\n  'width',\n  'height',\n  'paintFirst',\n  'strokeUniform',\n  'strokeLineCap',\n  'strokeDashOffset',\n  'strokeLineJoin',\n  'strokeMiterLimit',\n  'backgroundColor',\n  'clipPath',\n];\n\nexport const fabricObjectDefaultValues: Partial<\n  TClassProperties<FabricObject>\n> = {\n  // see composeMatrix() to see order of transforms. First defaults listed based on this\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  angle: 0,\n  flipX: false,\n  flipY: false,\n  scaleX: 1,\n  scaleY: 1,\n  minScaleLimit: 0,\n  skewX: 0,\n  skewY: 0,\n  originX: LEFT,\n  originY: TOP,\n  strokeWidth: 1,\n  strokeUniform: false,\n  padding: 0,\n  opacity: 1,\n  paintFirst: FILL,\n  fill: 'rgb(0,0,0)',\n  fillRule: 'nonzero',\n  stroke: null,\n  strokeDashArray: null,\n  strokeDashOffset: 0,\n  strokeLineCap: 'butt',\n  strokeLineJoin: 'miter',\n  strokeMiterLimit: 4,\n  globalCompositeOperation: 'source-over',\n  backgroundColor: '',\n  shadow: null,\n  visible: true,\n  includeDefaultValues: true,\n  excludeFromExport: false,\n  objectCaching: true,\n  clipPath: undefined,\n  inverted: false,\n  absolutePositioned: false,\n  centeredRotation: true,\n  centeredScaling: false,\n  dirty: true,\n} as const;\n\nexport const interactiveObjectDefaultValues: Partial<\n  TClassProperties<InteractiveFabricObject>\n> = {\n  noScaleCache: true,\n  lockMovementX: false,\n  lockMovementY: false,\n  lockRotation: false,\n  lockScalingX: false,\n  lockScalingY: false,\n  lockSkewingX: false,\n  lockSkewingY: false,\n  lockScalingFlip: false,\n  cornerSize: 13,\n  touchCornerSize: 24,\n  transparentCorners: true,\n  cornerColor: 'rgb(178,204,255)',\n  cornerStrokeColor: '',\n  cornerStyle: 'rect',\n  cornerDashArray: null,\n  hasControls: true,\n  borderColor: 'rgb(178,204,255)',\n  borderDashArray: null,\n  borderOpacityWhenMoving: 0.4,\n  borderScaleFactor: 1,\n  hasBorders: true,\n  selectionBackgroundColor: '',\n  selectable: true,\n  evented: true,\n  perPixelTargetFind: false,\n  activeOn: 'down',\n  hoverCursor: null,\n  moveCursor: null,\n};\n","/**\n * Easing functions\n * @see {@link http://gizma.com/easing/ Easing Equations by Robert Penner}\n */\n\nimport { twoMathPi, halfPI } from '../../constants';\nimport type { TEasingFunction } from './types';\n\nconst normalize = (a: number, c: number, p: number, s: number) => {\n  if (a < Math.abs(c)) {\n    a = c;\n    s = p / 4;\n  } else {\n    //handle the 0/0 case:\n    if (c === 0 && a === 0) {\n      s = (p / twoMathPi) * Math.asin(1);\n    } else {\n      s = (p / twoMathPi) * Math.asin(c / a);\n    }\n  }\n  return { a, c, p, s };\n};\n\nconst elastic = (\n  a: number,\n  s: number,\n  p: number,\n  t: number,\n  d: number,\n): number =>\n  a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * twoMathPi) / p);\n\n/**\n * Default sinusoidal easing\n */\nexport const defaultEasing: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Cubic easing in\n */\nexport const easeInCubic: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 3 + b;\n\n/**\n * Cubic easing out\n */\nexport const easeOutCubic: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 3 + 1) + b;\n\n/**\n * Cubic easing in and out\n */\nexport const easeInOutCubic: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 3 + b;\n  }\n  return (c / 2) * ((t - 2) ** 3 + 2) + b;\n};\n\n/**\n * Quartic easing in\n */\nexport const easeInQuart: TEasingFunction = (t, b, c, d) =>\n  c * (t /= d) * t ** 3 + b;\n\n/**\n * Quartic easing out\n */\nexport const easeOutQuart: TEasingFunction = (t, b, c, d) =>\n  -c * ((t = t / d - 1) * t ** 3 - 1) + b;\n\n/**\n * Quartic easing in and out\n */\nexport const easeInOutQuart: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 4 + b;\n  }\n  return (-c / 2) * ((t -= 2) * t ** 3 - 2) + b;\n};\n\n/**\n * Quintic easing in\n */\nexport const easeInQuint: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 5 + b;\n\n/**\n * Quintic easing out\n */\nexport const easeOutQuint: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 5 + 1) + b;\n\n/**\n * Quintic easing in and out\n */\nexport const easeInOutQuint: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 5 + b;\n  }\n  return (c / 2) * ((t - 2) ** 5 + 2) + b;\n};\n\n/**\n * Sinusoidal easing in\n */\nexport const easeInSine: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Sinusoidal easing out\n */\nexport const easeOutSine: TEasingFunction = (t, b, c, d) =>\n  c * Math.sin((t / d) * halfPI) + b;\n\n/**\n * Sinusoidal easing in and out\n */\nexport const easeInOutSine: TEasingFunction = (t, b, c, d) =>\n  (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;\n\n/**\n * Exponential easing in\n */\nexport const easeInExpo: TEasingFunction = (t, b, c, d) =>\n  t === 0 ? b : c * 2 ** (10 * (t / d - 1)) + b;\n\n/**\n * Exponential easing out\n */\nexport const easeOutExpo: TEasingFunction = (t, b, c, d) =>\n  t === d ? b + c : c * -(2 ** ((-10 * t) / d) + 1) + b;\n\n/**\n * Exponential easing in and out\n */\nexport const easeInOutExpo: TEasingFunction = (t, b, c, d) => {\n  if (t === 0) {\n    return b;\n  }\n  if (t === d) {\n    return b + c;\n  }\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * 2 ** (10 * (t - 1)) + b;\n  }\n  return (c / 2) * -(2 ** (-10 * --t) + 2) + b;\n};\n\n/**\n * Circular easing in\n */\nexport const easeInCirc: TEasingFunction = (t, b, c, d) =>\n  -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\n/**\n * Circular easing out\n */\nexport const easeOutCirc: TEasingFunction = (t, b, c, d) =>\n  c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\n/**\n * Circular easing in and out\n */\nexport const easeInOutCirc: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (-c / 2) * (Math.sqrt(1 - t ** 2) - 1) + b;\n  }\n  return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n};\n\n/**\n * Elastic easing in\n */\nexport const easeInElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP } = normalize(a, c, p, s);\n  return -elastic(normA, normS, normP, t, d) + b;\n};\n\n/**\n * Elastic easing out\n */\nexport const easeOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  return (\n    normA * 2 ** (-10 * t) * Math.sin(((t * d - normS) * twoMathPi) / normP) +\n    normC +\n    b\n  );\n};\n\n/**\n * Elastic easing in and out\n */\nexport const easeInOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d / 2;\n  if (t === 2) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * (0.3 * 1.5);\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  if (t < 1) {\n    return -0.5 * elastic(normA, normS, normP, t, d) + b;\n  }\n  return (\n    normA *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t * d - normS) * twoMathPi) / normP) *\n      0.5 +\n    normC +\n    b\n  );\n};\n\n/**\n * Backwards easing in\n */\nexport const easeInBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * (t /= d) * t * ((s + 1) * t - s) + b;\n\n/**\n * Backwards easing out\n */\nexport const easeOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\n/**\n * Backwards easing in and out\n */\nexport const easeInOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n  }\n  return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n};\n\n/**\n * Bouncing easing out\n */\nexport const easeOutBounce: TEasingFunction = (t, b, c, d) => {\n  if ((t /= d) < 1 / 2.75) {\n    return c * (7.5625 * t * t) + b;\n  } else if (t < 2 / 2.75) {\n    return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n  } else if (t < 2.5 / 2.75) {\n    return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n  } else {\n    return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n  }\n};\n\n/**\n * Bouncing easing in\n */\nexport const easeInBounce: TEasingFunction = (t, b, c, d) =>\n  c - easeOutBounce(d - t, 0, c, d) + b;\n\n/**\n * Bouncing easing in and out\n */\nexport const easeInOutBounce: TEasingFunction = (t, b, c, d) =>\n  t < d / 2\n    ? easeInBounce(t * 2, 0, c, d) * 0.5 + b\n    : easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\n/**\n * Quadratic easing in\n */\nexport const easeInQuad: TEasingFunction = (t, b, c, d) => c * (t /= d) * t + b;\n\n/**\n * Quadratic easing out\n */\nexport const easeOutQuad: TEasingFunction = (t, b, c, d) =>\n  -c * (t /= d) * (t - 2) + b;\n\n/**\n * Quadratic easing in and out\n */\nexport const easeInOutQuad: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 2 + b;\n  }\n  return (-c / 2) * (--t * (t - 2) - 1) + b;\n};\n","import { noop } from '../../constants';\nimport { requestAnimFrame } from './AnimationFrameProvider';\nimport { runningAnimations } from './AnimationRegistry';\nimport { defaultEasing } from './easing';\nimport type {\n  AnimationState,\n  TAbortCallback,\n  TBaseAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultAbort = () => false;\n\nexport abstract class AnimationBase<\n  T extends number | number[] = number | number[],\n> {\n  declare readonly startValue: T;\n  declare readonly endValue: T;\n  declare readonly duration: number;\n  declare readonly delay: number;\n\n  declare protected readonly byValue: T;\n  declare protected readonly easing: TEasingFunction<T>;\n\n  declare private readonly _onStart: VoidFunction;\n  declare private readonly _onChange: TOnAnimationChangeCallback<T>;\n  declare private readonly _onComplete: TOnAnimationChangeCallback<T>;\n  declare private readonly _abort: TAbortCallback<T>;\n\n  /**\n   * Used to register the animation to a target object\n   * so that it can be cancelled within the object context\n   */\n  declare readonly target?: unknown;\n\n  private _state: AnimationState = 'pending';\n  /**\n   * Time %, or the ratio of `timeElapsed / duration`\n   * @see tick\n   */\n  durationProgress = 0;\n  /**\n   * Value %, or the ratio of `(currentValue - startValue) / (endValue - startValue)`\n   */\n  valueProgress = 0;\n  /**\n   * Current value\n   */\n  declare value: T;\n  /**\n   * Animation start time ms\n   */\n  declare private startTime: number;\n\n  constructor({\n    startValue,\n    byValue,\n    duration = 500,\n    delay = 0,\n    easing = defaultEasing,\n    onStart = noop,\n    onChange = noop,\n    onComplete = noop,\n    abort = defaultAbort,\n    target,\n  }: TBaseAnimationOptions<T>) {\n    this.tick = this.tick.bind(this);\n\n    this.duration = duration;\n    this.delay = delay;\n    this.easing = easing;\n    this._onStart = onStart;\n    this._onChange = onChange;\n    this._onComplete = onComplete;\n    this._abort = abort;\n    this.target = target;\n\n    this.startValue = startValue;\n    this.byValue = byValue;\n    this.value = this.startValue;\n    this.endValue = Object.freeze(this.calculate(this.duration).value);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  isDone() {\n    return this._state === 'aborted' || this._state === 'completed';\n  }\n\n  /**\n   * Calculate the current value based on the easing parameters\n   * @param timeElapsed in ms\n   * @protected\n   */\n  protected abstract calculate(timeElapsed: number): {\n    value: T;\n    valueProgress: number;\n  };\n\n  start() {\n    const firstTick: FrameRequestCallback = (timestamp) => {\n      if (this._state !== 'pending') return;\n      this.startTime = timestamp || +new Date();\n      this._state = 'running';\n      this._onStart();\n      this.tick(this.startTime);\n    };\n\n    this.register();\n\n    // setTimeout(cb, 0) will run cb on the next frame, causing a delay\n    // we don't want that\n    if (this.delay > 0) {\n      setTimeout(() => requestAnimFrame(firstTick), this.delay);\n    } else {\n      requestAnimFrame(firstTick);\n    }\n  }\n\n  private tick(t: number) {\n    const durationMs = (t || +new Date()) - this.startTime;\n    const boundDurationMs = Math.min(durationMs, this.duration);\n    this.durationProgress = boundDurationMs / this.duration;\n    const { value, valueProgress } = this.calculate(boundDurationMs);\n    this.value = Object.freeze(value);\n    this.valueProgress = valueProgress;\n\n    if (this._state === 'aborted') {\n      return;\n    } else if (\n      this._abort(this.value, this.valueProgress, this.durationProgress)\n    ) {\n      this._state = 'aborted';\n      this.unregister();\n    } else if (durationMs >= this.duration) {\n      this.durationProgress = this.valueProgress = 1;\n      this._onChange(this.endValue, this.valueProgress, this.durationProgress);\n      this._state = 'completed';\n      this._onComplete(\n        this.endValue,\n        this.valueProgress,\n        this.durationProgress,\n      );\n      this.unregister();\n    } else {\n      this._onChange(this.value, this.valueProgress, this.durationProgress);\n      requestAnimFrame(this.tick);\n    }\n  }\n\n  private register() {\n    runningAnimations.push(this as unknown as AnimationBase);\n  }\n\n  private unregister() {\n    runningAnimations.remove(this as unknown as AnimationBase);\n  }\n\n  abort() {\n    this._state = 'aborted';\n    this.unregister();\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ValueAnimationOptions } from './types';\n\nexport class ValueAnimation extends AnimationBase<number> {\n  constructor({\n    startValue = 0,\n    endValue = 100,\n    ...otherOptions\n  }: ValueAnimationOptions) {\n    super({\n      ...otherOptions,\n      startValue,\n      byValue: endValue - startValue,\n    });\n  }\n\n  protected calculate(timeElapsed: number) {\n    const value = this.easing(\n      timeElapsed,\n      this.startValue,\n      this.byValue,\n      this.duration,\n    );\n    return {\n      value,\n      valueProgress: Math.abs((value - this.startValue) / this.byValue),\n    };\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ArrayAnimationOptions } from './types';\n\nexport class ArrayAnimation extends AnimationBase<number[]> {\n  constructor({\n    startValue = [0],\n    endValue = [100],\n    ...options\n  }: ArrayAnimationOptions) {\n    super({\n      ...options,\n      startValue,\n      byValue: endValue.map((value, i) => value - startValue[i]),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const values = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    );\n    return {\n      value: values,\n      valueProgress: Math.abs(\n        (values[0] - this.startValue[0]) / this.byValue[0],\n      ),\n    };\n  }\n}\n","import { Color } from '../../color/Color';\nimport type { TRGBAColorSource } from '../../color/typedefs';\nimport { halfPI } from '../../constants';\nimport { capValue } from '../misc/capValue';\nimport { AnimationBase } from './AnimationBase';\nimport type {\n  ColorAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultColorEasing: TEasingFunction = (\n  timeElapsed,\n  startValue,\n  byValue,\n  duration,\n) => {\n  const durationProgress = 1 - Math.cos((timeElapsed / duration) * halfPI);\n  return startValue + byValue * durationProgress;\n};\n\nconst wrapColorCallback = <R>(\n  callback?: TOnAnimationChangeCallback<string, R>,\n) =>\n  callback &&\n  ((rgba: TRGBAColorSource, valueProgress: number, durationProgress: number) =>\n    callback(new Color(rgba).toRgba(), valueProgress, durationProgress));\n\nexport class ColorAnimation extends AnimationBase<TRGBAColorSource> {\n  constructor({\n    startValue,\n    endValue,\n    easing = defaultColorEasing,\n    onChange,\n    onComplete,\n    abort,\n    ...options\n  }: ColorAnimationOptions) {\n    const startColor = new Color(startValue).getSource();\n    const endColor = new Color(endValue).getSource();\n    super({\n      ...options,\n      startValue: startColor,\n      byValue: endColor.map(\n        (value, i) => value - startColor[i],\n      ) as TRGBAColorSource,\n      easing,\n      onChange: wrapColorCallback(onChange),\n      onComplete: wrapColorCallback(onComplete),\n      abort: wrapColorCallback(abort),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const [r, g, b, a] = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    ) as TRGBAColorSource;\n    const value = [\n      ...[r, g, b].map(Math.round),\n      capValue(0, a, 1),\n    ] as TRGBAColorSource;\n    return {\n      value,\n      valueProgress:\n        // to correctly calculate the change ratio we must find a changed value\n        value\n          .map((p, i) =>\n            this.byValue[i] !== 0\n              ? Math.abs((p - this.startValue[i]) / this.byValue[i])\n              : 0,\n          )\n          .find((p) => p !== 0) || 0,\n    };\n  }\n}\n","import { ValueAnimation } from './ValueAnimation';\nimport { ArrayAnimation } from './ArrayAnimation';\nimport { ColorAnimation } from './ColorAnimation';\nimport type {\n  ValueAnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n} from './types';\nimport type { TColorArg } from '../../color/typedefs';\n\nexport type TAnimation<T extends number | number[] | TColorArg> =\n  T extends TColorArg\n    ? ColorAnimation\n    : T extends number[]\n      ? ArrayAnimation\n      : ValueAnimation;\n\nconst isArrayAnimation = (\n  options: ArrayAnimationOptions | ValueAnimationOptions,\n): options is ArrayAnimationOptions => {\n  return Array.isArray(options.startValue) || Array.isArray(options.endValue);\n};\n\n/**\n * Changes value(s) from startValue to endValue within a certain period of time,\n * invoking callbacks as the value(s) change.\n *\n * @example\n * animate({\n *   startValue: 1,\n *   endValue: 0,\n *   onChange: (v) => {\n *     obj.set('opacity', v);\n *     // since we are running in a requested frame we should call `renderAll` and not `requestRenderAll`\n *     canvas.renderAll();\n *   }\n * });\n *\n * @example Using lists:\n * animate({\n *   startValue: [1, 2, 3],\n *   endValue: [2, 4, 6],\n *   onChange: ([x, y, zoom]) => {\n *     canvas.zoomToPoint(new Point(x, y), zoom);\n *     canvas.renderAll();\n *   }\n * });\n *\n */\nexport function animate(options: ArrayAnimationOptions): ArrayAnimation;\nexport function animate(options: ValueAnimationOptions): ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n>(\n  options: T,\n): T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n  R extends T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation,\n>(options: T): R {\n  const animation = (\n    isArrayAnimation(options)\n      ? new ArrayAnimation(options)\n      : new ValueAnimation(options)\n  ) as R;\n  animation.start();\n  return animation;\n}\n\nexport function animateColor(options: ColorAnimationOptions) {\n  const animation = new ColorAnimation(options);\n  animation.start();\n  return animation;\n}\n","import { Point } from './Point';\nimport { createVector } from './util/misc/vectors';\n\n/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\nexport type IntersectionType = 'Intersection' | 'Coincident' | 'Parallel';\n\nexport class Intersection {\n  declare points: Point[];\n\n  declare status?: IntersectionType;\n\n  constructor(status?: IntersectionType) {\n    this.status = status;\n    this.points = [];\n  }\n\n  /**\n   * Used to verify if a point is alredy in the collection\n   * @param {Point} point\n   * @returns {boolean}\n   */\n  private includes(point: Point): boolean {\n    return this.points.some((p) => p.eq(point));\n  }\n\n  /**\n   * Appends points of intersection\n   * @param {...Point[]} points\n   * @return {Intersection} thisArg\n   * @chainable\n   */\n  private append(...points: Point[]): Intersection {\n    this.points = this.points.concat(\n      points.filter((point) => {\n        return !this.includes(point);\n      }),\n    );\n    return this;\n  }\n\n  /**\n   * check if point T is on the segment or line defined between A and B\n   *\n   * @param {Point} T the point we are checking for\n   * @param {Point} A one extremity of the segment\n   * @param {Point} B the other extremity of the segment\n   * @param [infinite] if true checks if `T` is on the line defined by `A` and `B`\n   * @returns true if `T` is contained\n   */\n  static isPointContained(T: Point, A: Point, B: Point, infinite = false) {\n    if (A.eq(B)) {\n      // Edge case: the segment is a point, we check for coincidence,\n      // infinite param has no meaning because there are infinite lines to consider\n      return T.eq(A);\n    } else if (A.x === B.x) {\n      // Edge case: horizontal line.\n      // we first check if T.x has the same value, and then if T.y is contained between A.y and B.y\n      return (\n        T.x === A.x &&\n        (infinite || (T.y >= Math.min(A.y, B.y) && T.y <= Math.max(A.y, B.y)))\n      );\n    } else if (A.y === B.y) {\n      // Edge case: vertical line.\n      // we first check if T.y has the same value, and then if T.x is contained between A.x and B.x\n      return (\n        T.y === A.y &&\n        (infinite || (T.x >= Math.min(A.x, B.x) && T.x <= Math.max(A.x, B.x)))\n      );\n    } else {\n      // Generic case: sloped line.\n      // we check that AT has the same slope as AB\n      // for the segment case we need both the vectors to have the same direction and for AT to be lte AB in size\n      // for the infinite case we check the absolute value of the slope, since direction is meaningless\n      const AB = createVector(A, B);\n      const AT = createVector(A, T);\n      const s = AT.divide(AB);\n      return infinite\n        ? Math.abs(s.x) === Math.abs(s.y)\n        : s.x === s.y && s.x >= 0 && s.x <= 1;\n    }\n  }\n\n  /**\n   * Use the ray casting algorithm to determine if {@link point} is in the polygon defined by {@link points}\n   * @see https://en.wikipedia.org/wiki/Point_in_polygon\n   * @param point\n   * @param points polygon points\n   * @returns\n   */\n  static isPointInPolygon(point: Point, points: Point[]) {\n    const other = new Point(point).setX(\n      Math.min(point.x - 1, ...points.map((p) => p.x)),\n    );\n    let hits = 0;\n    for (let index = 0; index < points.length; index++) {\n      const inter = this.intersectSegmentSegment(\n        // polygon side\n        points[index],\n        points[(index + 1) % points.length],\n        // ray\n        point,\n        other,\n      );\n      if (inter.includes(point)) {\n        // point is on the polygon side\n        return true;\n      }\n      hits += Number(inter.status === 'Intersection');\n    }\n    return hits % 2 === 1;\n  }\n\n  /**\n   * Checks if a line intersects another\n   * @see {@link https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection line intersection}\n   * @see {@link https://en.wikipedia.org/wiki/Cramer%27s_rule Cramer's rule}\n   * @static\n   * @param {Point} a1\n   * @param {Point} a2\n   * @param {Point} b1\n   * @param {Point} b2\n   * @param {boolean} [aInfinite=true] check segment intersection by passing `false`\n   * @param {boolean} [bInfinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLineLine(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n    aInfinite = true,\n    bInfinite = true,\n  ): Intersection {\n    const a2xa1x = a2.x - a1.x,\n      a2ya1y = a2.y - a1.y,\n      b2xb1x = b2.x - b1.x,\n      b2yb1y = b2.y - b1.y,\n      a1xb1x = a1.x - b1.x,\n      a1yb1y = a1.y - b1.y,\n      uaT = b2xb1x * a1yb1y - b2yb1y * a1xb1x,\n      ubT = a2xa1x * a1yb1y - a2ya1y * a1xb1x,\n      uB = b2yb1y * a2xa1x - b2xb1x * a2ya1y;\n    if (uB !== 0) {\n      const ua = uaT / uB,\n        ub = ubT / uB;\n      if (\n        (aInfinite || (0 <= ua && ua <= 1)) &&\n        (bInfinite || (0 <= ub && ub <= 1))\n      ) {\n        return new Intersection('Intersection').append(\n          new Point(a1.x + ua * a2xa1x, a1.y + ua * a2ya1y),\n        );\n      } else {\n        return new Intersection();\n      }\n    } else {\n      if (uaT === 0 || ubT === 0) {\n        const segmentsCoincide =\n          aInfinite ||\n          bInfinite ||\n          Intersection.isPointContained(a1, b1, b2) ||\n          Intersection.isPointContained(a2, b1, b2) ||\n          Intersection.isPointContained(b1, a1, a2) ||\n          Intersection.isPointContained(b2, a1, a2);\n        return new Intersection(segmentsCoincide ? 'Coincident' : undefined);\n      } else {\n        return new Intersection('Parallel');\n      }\n    }\n  }\n\n  /**\n   * Checks if a segment intersects a line\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} s1 boundary point of segment\n   * @param {Point} s2 other boundary point of segment\n   * @param {Point} l1 point on line\n   * @param {Point} l2 other point on line\n   * @return {Intersection}\n   */\n  static intersectSegmentLine(\n    s1: Point,\n    s2: Point,\n    l1: Point,\n    l2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(s1, s2, l1, l2, false, true);\n  }\n\n  /**\n   * Checks if a segment intersects another\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point} b1 boundary point of segment\n   * @param {Point} b2 other boundary point of segment\n   * @return {Intersection}\n   */\n  static intersectSegmentSegment(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(a1, a2, b1, b2, false, false);\n  }\n\n  /**\n   * Checks if line intersects polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @see {@link intersectSegmentPolygon} for segment intersection\n   * @param {Point} a1 point on line\n   * @param {Point} a2 other point on line\n   * @param {Point[]} points polygon points\n   * @param {boolean} [infinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLinePolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n    infinite = true,\n  ): Intersection {\n    const result = new Intersection();\n    const length = points.length;\n\n    for (let i = 0, b1, b2, inter; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2, infinite, false);\n      if (inter.status === 'Coincident') {\n        return inter;\n      }\n      result.append(...inter.points);\n    }\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if segment intersects polygon\n   * @static\n   * @see {@link intersectLinePolygon} for line intersection\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point[]} points polygon points\n   * @return {Intersection}\n   */\n  static intersectSegmentPolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n  ): Intersection {\n    return Intersection.intersectLinePolygon(a1, a2, points, false);\n  }\n\n  /**\n   * Checks if polygon intersects another polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @param {Point[]} points1\n   * @param {Point[]} points2\n   * @return {Intersection}\n   */\n  static intersectPolygonPolygon(\n    points1: Point[],\n    points2: Point[],\n  ): Intersection {\n    const result = new Intersection(),\n      length = points1.length;\n    const coincidences: Intersection[] = [];\n\n    for (let i = 0; i < length; i++) {\n      const a1 = points1[i],\n        a2 = points1[(i + 1) % length],\n        inter = Intersection.intersectSegmentPolygon(a1, a2, points2);\n      if (inter.status === 'Coincident') {\n        coincidences.push(inter);\n        result.append(a1, a2);\n      } else {\n        result.append(...inter.points);\n      }\n    }\n\n    if (coincidences.length > 0 && coincidences.length === points1.length) {\n      return new Intersection('Coincident');\n    } else if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @see {@link intersectPolygonPolygon} for polygon intersection\n   * @param {Point[]} points polygon points\n   * @param {Point} r1 top left point of rect\n   * @param {Point} r2 bottom right point of rect\n   * @return {Intersection}\n   */\n  static intersectPolygonRectangle(\n    points: Point[],\n    r1: Point,\n    r2: Point,\n  ): Intersection {\n    const min = r1.min(r2),\n      max = r1.max(r2),\n      topRight = new Point(max.x, min.y),\n      bottomLeft = new Point(min.x, max.y);\n\n    return Intersection.intersectPolygonPolygon(points, [\n      min,\n      topRight,\n      max,\n      bottomLeft,\n    ]);\n  }\n}\n","import type {\n  TBBox,\n  TCornerPoint,\n  TDegree,\n  TMat2D,\n  TOriginX,\n  TOriginY,\n} from '../../typedefs';\nimport { SCALE_X, SCALE_Y, iMatrix } from '../../constants';\nimport { Intersection } from '../../Intersection';\nimport { Point } from '../../Point';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  createRotateMatrix,\n  createTranslateMatrix,\n  composeMatrix,\n  invertTransform,\n  multiplyTransformMatrices,\n  transformPoint,\n  calcPlaneRotation,\n} from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { ControlProps } from './types/ControlProps';\nimport { resolveOrigin } from '../../util/misc/resolveOrigin';\nimport type { Group } from '../Group';\nimport { calcDimensionsMatrix } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport { CommonMethods } from '../../CommonMethods';\nimport type { BaseProps } from './types/BaseProps';\nimport type { FillStrokeProps } from './types/FillStrokeProps';\nimport { CENTER, LEFT, TOP } from '../../constants';\n\ntype TMatrixCache = {\n  key: number[];\n  value: TMat2D;\n};\n\ntype TACoords = TCornerPoint;\n\nexport class ObjectGeometry<EventSpec extends ObjectEvents = ObjectEvents>\n  extends CommonMethods<EventSpec>\n  implements\n    Pick<ControlProps, 'padding'>,\n    BaseProps,\n    Pick<FillStrokeProps, 'strokeWidth' | 'strokeUniform'>\n{\n  // #region Geometry\n\n  declare padding: number;\n\n  /**\n   * Describe object's corner position in scene coordinates.\n   * The coordinates are derived from the following:\n   * left, top, width, height, scaleX, scaleY, skewX, skewY, angle, strokeWidth.\n   * The coordinates do not depend on viewport changes.\n   * The coordinates get updated with {@link setCoords}.\n   * You can calculate them without updating with {@link calcACoords()}\n   */\n  declare aCoords: TACoords;\n\n  /**\n   * storage cache for object transform matrix\n   */\n  declare ownMatrixCache?: TMatrixCache;\n\n  /**\n   * storage cache for object full transform matrix\n   */\n  declare matrixCache?: TMatrixCache;\n\n  /**\n   * A Reference of the Canvas where the object is actually added\n   * @type StaticCanvas | Canvas;\n   * @default undefined\n   * @private\n   */\n  declare canvas?: StaticCanvas | Canvas;\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  getX(): number {\n    return this.getXY().x;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  setX(value: number) {\n    this.setXY(this.getXY().setX(value));\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  getY(): number {\n    return this.getXY().y;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  setY(value: number) {\n    this.setXY(this.getXY().setY(value));\n  }\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getX}\n   */\n  getRelativeX(): number {\n    return this.left;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this method is identical to {@link setX}\n   */\n  setRelativeX(value: number) {\n    this.left = value;\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getY}\n   */\n  getRelativeY(): number {\n    return this.top;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link setY}\n   */\n  setRelativeY(value: number) {\n    this.top = value;\n  }\n\n  /**\n   * @returns {Point} x position according to object's {@link originX} {@link originY} properties in canvas coordinate plane\n   */\n  getXY(): Point {\n    const relativePosition = this.getRelativeXY();\n    return this.group\n      ? transformPoint(relativePosition, this.group.calcTransformMatrix())\n      : relativePosition;\n  }\n\n  /**\n   * Set an object position to a particular point, the point is intended in absolute ( canvas ) coordinate.\n   * You can specify {@link originX} and {@link originY} values,\n   * that otherwise are the object's current values.\n   * @example <caption>Set object's bottom left corner to point (5,5) on canvas</caption>\n   * object.setXY(new Point(5, 5), 'left', 'bottom').\n   * @param {Point} point position in scene coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setXY(point: Point, originX?: TOriginX, originY?: TOriginY) {\n    if (this.group) {\n      point = transformPoint(\n        point,\n        invertTransform(this.group.calcTransformMatrix()),\n      );\n    }\n    this.setRelativeXY(point, originX, originY);\n  }\n\n  /**\n   * @returns {Point} x,y position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   */\n  getRelativeXY(): Point {\n    return new Point(this.left, this.top);\n  }\n\n  /**\n   * As {@link setXY}, but in current parent's coordinate plane (the current group if any or the canvas)\n   * @param {Point} point position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setRelativeXY(\n    point: Point,\n    originX: TOriginX = this.originX,\n    originY: TOriginY = this.originY,\n  ) {\n    this.setPositionByOrigin(point, originX, originY);\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return false;\n  }\n\n  /**\n   * @return {Point[]} [tl, tr, br, bl] in the scene plane\n   */\n  getCoords(): Point[] {\n    const { tl, tr, br, bl } =\n      this.aCoords || (this.aCoords = this.calcACoords());\n    const coords = [tl, tr, br, bl];\n    if (this.group) {\n      const t = this.group.calcTransformMatrix();\n      return coords.map((p) => transformPoint(p, t));\n    }\n    return coords;\n  }\n\n  /**\n   * Checks if object intersects with the scene rect formed by {@link tl} and {@link br}\n   */\n  intersectsWithRect(tl: Point, br: Point): boolean {\n    const intersection = Intersection.intersectPolygonRectangle(\n      this.getCoords(),\n      tl,\n      br,\n    );\n    return intersection.status === 'Intersection';\n  }\n\n  /**\n   * Checks if object intersects with another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object intersects with another object\n   */\n  intersectsWithObject(other: ObjectGeometry): boolean {\n    const intersection = Intersection.intersectPolygonPolygon(\n      this.getCoords(),\n      other.getCoords(),\n    );\n\n    return (\n      intersection.status === 'Intersection' ||\n      intersection.status === 'Coincident' ||\n      other.isContainedWithinObject(this) ||\n      this.isContainedWithinObject(other)\n    );\n  }\n\n  /**\n   * Checks if object is fully contained within area of another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object is fully contained within area of another object\n   */\n  isContainedWithinObject(other: ObjectGeometry): boolean {\n    const points = this.getCoords();\n    return points.every((point) => other.containsPoint(point));\n  }\n\n  /**\n   * Checks if object is fully contained within the scene rect formed by {@link tl} and {@link br}\n   */\n  isContainedWithinRect(tl: Point, br: Point): boolean {\n    const { left, top, width, height } = this.getBoundingRect();\n    return (\n      left >= tl.x &&\n      left + width <= br.x &&\n      top >= tl.y &&\n      top + height <= br.y\n    );\n  }\n\n  isOverlapping<T extends ObjectGeometry>(other: T): boolean {\n    return (\n      this.intersectsWithObject(other) ||\n      this.isContainedWithinObject(other) ||\n      other.isContainedWithinObject(this)\n    );\n  }\n\n  /**\n   * Checks if point is inside the object\n   * @param {Point} point Point to check against\n   * @return {Boolean} true if point is inside the object\n   */\n  containsPoint(point: Point): boolean {\n    return Intersection.isPointInPolygon(point, this.getCoords());\n  }\n\n  /**\n   * Checks if object is contained within the canvas with current viewportTransform\n   * the check is done stopping at first point that appears on screen\n   * @return {Boolean} true if object is fully or partially contained within canvas\n   */\n  isOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    const points = this.getCoords();\n    // if some point is on screen, the object is on screen.\n    if (\n      points.some(\n        (point) =>\n          point.x <= br.x &&\n          point.x >= tl.x &&\n          point.y <= br.y &&\n          point.y >= tl.y,\n      )\n    ) {\n      return true;\n    }\n    // no points on screen, check intersection with absolute coordinates\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    // check if the object is so big that it contains the entire viewport\n    return this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Checks if object is partially contained within the canvas with current viewportTransform\n   * @return {Boolean} true if object is partially contained within canvas\n   */\n  isPartiallyOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    const allPointsAreOutside = this.getCoords().every(\n      (point) =>\n        (point.x >= br.x || point.x <= tl.x) &&\n        (point.y >= br.y || point.y <= tl.y),\n    );\n    // check if the object is so big that it contains the entire viewport\n    return allPointsAreOutside && this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Returns coordinates of object's bounding rectangle (left, top, width, height)\n   * the box is intended as aligned to axis of canvas.\n   * @return {Object} Object with left, top, width, height properties\n   */\n  getBoundingRect(): TBBox {\n    return makeBoundingBoxFromPoints(this.getCoords());\n  }\n\n  /**\n   * Returns width of an object's bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} width value\n   */\n  getScaledWidth(): number {\n    return this._getTransformedDimensions().x;\n  }\n\n  /**\n   * Returns height of an object bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} height value\n   */\n  getScaledHeight(): number {\n    return this._getTransformedDimensions().y;\n  }\n\n  /**\n   * Scales an object (equally by x and y)\n   * @param {Number} value Scale factor\n   * @return {void}\n   */\n  scale(value: number): void {\n    this._set(SCALE_X, value);\n    this._set(SCALE_Y, value);\n    this.setCoords();\n  }\n\n  /**\n   * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New width value\n   * @return {void}\n   */\n  scaleToWidth(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().width / this.getScaledWidth();\n    return this.scale(value / this.width / boundingRectFactor);\n  }\n\n  /**\n   * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New height value\n   * @return {void}\n   */\n  scaleToHeight(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().height / this.getScaledHeight();\n    return this.scale(value / this.height / boundingRectFactor);\n  }\n\n  getCanvasRetinaScaling() {\n    return this.canvas?.getRetinaScaling() || 1;\n  }\n\n  /**\n   * Returns the object angle relative to canvas counting also the group property\n   * @returns {TDegree}\n   */\n  getTotalAngle(): TDegree {\n    return this.group\n      ? radiansToDegrees(calcPlaneRotation(this.calcTransformMatrix()))\n      : this.angle;\n  }\n\n  /**\n   * Retrieves viewportTransform from Object's canvas if available\n   * @return {TMat2D}\n   */\n  getViewportTransform(): TMat2D {\n    return this.canvas?.viewportTransform || (iMatrix.concat() as TMat2D);\n  }\n\n  /**\n   * Calculates the coordinates of the 4 corner of the bbox, in absolute coordinates.\n   * those never change with zoom or viewport changes.\n   * @return {TCornerPoint}\n   */\n  calcACoords(): TCornerPoint {\n    const rotateMatrix = createRotateMatrix({ angle: this.angle }),\n      { x, y } = this.getRelativeCenterPoint(),\n      tMatrix = createTranslateMatrix(x, y),\n      finalMatrix = multiplyTransformMatrices(tMatrix, rotateMatrix),\n      dim = this._getTransformedDimensions(),\n      w = dim.x / 2,\n      h = dim.y / 2;\n    return {\n      // corners\n      tl: transformPoint({ x: -w, y: -h }, finalMatrix),\n      tr: transformPoint({ x: w, y: -h }, finalMatrix),\n      bl: transformPoint({ x: -w, y: h }, finalMatrix),\n      br: transformPoint({ x: w, y: h }, finalMatrix),\n    };\n  }\n\n  /**\n   * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n   * aCoords are used to quickly find an object on the canvas.\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   */\n  setCoords(): void {\n    this.aCoords = this.calcACoords();\n  }\n\n  transformMatrixKey(skipGroup = false): number[] {\n    let prefix: number[] = [];\n    if (!skipGroup && this.group) {\n      prefix = this.group.transformMatrixKey(skipGroup);\n    }\n    prefix.push(\n      this.top,\n      this.left,\n      this.width,\n      this.height,\n      this.scaleX,\n      this.scaleY,\n      this.angle,\n      this.strokeWidth,\n      this.skewX,\n      this.skewY,\n      +this.flipX,\n      +this.flipY,\n      resolveOrigin(this.originX),\n      resolveOrigin(this.originY),\n    );\n\n    return prefix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties.\n   * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n   * There are some situation in which this is useful to avoid the fake rotation.\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcTransformMatrix(skipGroup = false): TMat2D {\n    let matrix = this.calcOwnMatrix();\n    if (skipGroup || !this.group) {\n      return matrix;\n    }\n    const key = this.transformMatrixKey(skipGroup),\n      cache = this.matrixCache;\n    if (cache && cache.key.every((x, i) => x === key[i])) {\n      return cache.value;\n    }\n    if (this.group) {\n      matrix = multiplyTransformMatrices(\n        this.group.calcTransformMatrix(false),\n        matrix,\n      );\n    }\n    this.matrixCache = {\n      key,\n      value: matrix,\n    };\n    return matrix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties, this matrix does not include the group transformation\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcOwnMatrix(): TMat2D {\n    const key = this.transformMatrixKey(true),\n      cache = this.ownMatrixCache;\n    if (cache && cache.key === key) {\n      return cache.value;\n    }\n    const center = this.getRelativeCenterPoint(),\n      options = {\n        angle: this.angle,\n        translateX: center.x,\n        translateY: center.y,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        flipX: this.flipX,\n        flipY: this.flipY,\n      },\n      value = composeMatrix(options);\n    this.ownMatrixCache = {\n      key,\n      value,\n    };\n    return value;\n  }\n\n  /**\n   * Calculate object dimensions from its properties\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getNonTransformedDimensions(): Point {\n    return new Point(this.width, this.height).scalarAdd(this.strokeWidth);\n  }\n\n  /**\n   * Calculate object dimensions for controls box, including padding and canvas zoom.\n   * and active selection\n   * @private\n   * @param {object} [options] transform options\n   * @returns {Point} dimensions\n   */\n  _calculateCurrentDimensions(options?: any): Point {\n    return this._getTransformedDimensions(options)\n      .transform(this.getViewportTransform(), true)\n      .scalarAdd(2 * this.padding);\n  }\n\n  // #region Origin\n\n  declare top: number;\n  declare left: number;\n  declare width: number;\n  declare height: number;\n  declare flipX: boolean;\n  declare flipY: boolean;\n  declare scaleX: number;\n  declare scaleY: number;\n  declare skewX: number;\n  declare skewY: number;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originX: TOriginX;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originY: TOriginY;\n  declare angle: TDegree;\n  declare strokeWidth: number;\n  declare strokeUniform: boolean;\n\n  /**\n   * Object containing this object.\n   * can influence its size and position\n   */\n  declare group?: Group;\n\n  /**\n   * Calculate object bounding box dimensions from its properties scale, skew.\n   * This bounding box is aligned with object angle and not with canvas axis or screen.\n   * @param {Object} [options]\n   * @param {Number} [options.scaleX]\n   * @param {Number} [options.scaleY]\n   * @param {Number} [options.skewX]\n   * @param {Number} [options.skewY]\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getTransformedDimensions(options: any = {}): Point {\n    const dimOptions = {\n      // if scaleX or scaleY are negative numbers,\n      // this will return dimensions that are negative.\n      // and this will break assumptions around the codebase\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      width: this.width,\n      height: this.height,\n      strokeWidth: this.strokeWidth,\n      // TODO remove this spread. is visible in the performance inspection\n      ...options,\n    };\n    // stroke is applied before/after transformations are applied according to `strokeUniform`\n    const strokeWidth = dimOptions.strokeWidth;\n    let preScalingStrokeValue = strokeWidth,\n      postScalingStrokeValue = 0;\n\n    if (this.strokeUniform) {\n      preScalingStrokeValue = 0;\n      postScalingStrokeValue = strokeWidth;\n    }\n    const dimX = dimOptions.width + preScalingStrokeValue,\n      dimY = dimOptions.height + preScalingStrokeValue,\n      noSkew = dimOptions.skewX === 0 && dimOptions.skewY === 0;\n    let finalDimensions;\n    if (noSkew) {\n      finalDimensions = new Point(\n        dimX * dimOptions.scaleX,\n        dimY * dimOptions.scaleY,\n      );\n    } else {\n      finalDimensions = sizeAfterTransform(\n        dimX,\n        dimY,\n        calcDimensionsMatrix(dimOptions),\n      );\n    }\n\n    return finalDimensions\n  }\n\n  /**\n   * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @param {TOriginX} toOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToGivenOrigin(\n    point: Point,\n    fromOriginX: TOriginX,\n    fromOriginY: TOriginY,\n    toOriginX: TOriginX,\n    toOriginY: TOriginY,\n  ): Point {\n    let x = point.x,\n      y = point.y;\n    const offsetX = resolveOrigin(toOriginX) - resolveOrigin(fromOriginX),\n      offsetY = resolveOrigin(toOriginY) - resolveOrigin(fromOriginY);\n\n    if (offsetX || offsetY) {\n      const dim = this._getTransformedDimensions();\n      x += offsetX * dim.x;\n      y += offsetY * dim.y;\n    }\n\n    return new Point(x, y);\n  }\n\n  /**\n   * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToCenterPoint(\n    point: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    if (originX === CENTER && originY === CENTER) {\n      return point;\n    }\n    const p = this.translateToGivenOrigin(\n      point,\n      originX,\n      originY,\n      CENTER,\n      CENTER,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), point);\n    }\n    return p;\n  }\n\n  /**\n   * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n   * @param {Point} center The point which corresponds to center of the object\n   * @param {OriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {OriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToOriginPoint(\n    center: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    const p = this.translateToGivenOrigin(\n      center,\n      CENTER,\n      CENTER,\n      originX,\n      originY,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), center);\n    }\n    return p;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to canvas\n   * @return {Point}\n   */\n  getCenterPoint(): Point {\n    const relCenter = this.getRelativeCenterPoint();\n    return this.group\n      ? transformPoint(relCenter, this.group.calcTransformMatrix())\n      : relCenter;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to it's parent\n   * @return {Point}\n   */\n  getRelativeCenterPoint(): Point {\n    return this.translateToCenterPoint(\n      new Point(this.left, this.top),\n      this.originX,\n      this.originY,\n    );\n  }\n\n  /**\n   * Returns the position of the object as if it has a different origin.\n   * Take an object that has left, top set to 100, 100 with origin 'left', 'top'.\n   * Return the values of left top ( wrapped in a point ) that you would need to keep\n   * the same position if origin where different.\n   * Alternatively you can use this to also find which point in the parent plane is a specific origin\n   * ( where is the bottom right corner of my object? )\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  getPointByOrigin(originX: TOriginX, originY: TOriginY): Point {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      originX,\n      originY,\n    );\n  }\n\n  /**\n   * Sets the position of the object taking into consideration the object's origin\n   * @param {Point} pos The new position of the object\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {void}\n   */\n  setPositionByOrigin(pos: Point, originX: TOriginX, originY: TOriginY) {\n    const center = this.translateToCenterPoint(pos, originX, originY),\n      position = this.translateToOriginPoint(\n        center,\n        this.originX,\n        this.originY,\n      );\n    this.set({ left: position.x, top: position.y });\n  }\n\n  /**\n   * @private\n   */\n  _getLeftTopCoords() {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      LEFT,\n      TOP,\n    );\n  }\n}\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  STROKE,\n  FILL,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { capValue } from '../../util/misc/capValue';\nimport {\n  createCanvasElement,\n  createCanvasElementFor,\n  toDataURL,\n  toBlob,\n} from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport { isFiller, isSerializableFiller } from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\nimport type { TColorArg } from '../../color/typedefs';\nimport type { TAnimation } from '../../util/animation/animate';\nimport { animate, animateColor } from '../../util/animation/animate';\nimport type {\n  AnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n  ValueAnimationOptions,\n} from '../../util/animation/types';\nimport { ObjectGeometry } from './ObjectGeometry';\n\ntype TAncestor = FabricObject;\ntype TCollection = Group;\n\nexport type Ancestors =\n  | [FabricObject | Group]\n  | [FabricObject | Group, ...Group[]]\n  | Group[];\n\nexport type AncestryComparison = {\n  /**\n   * common ancestors of `this` and`other`(may include`this` | `other`)\n   */\n  common: Ancestors;\n  /**\n   * ancestors that are of `this` only\n   */\n  fork: Ancestors;\n  /**\n   * ancestors that are of `other` only\n   */\n  otherFork: Ancestors;\n};\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\nexport type DrawContext =\n  | {\n      parentClipPaths: FabricObject[];\n      width: number;\n      height: number;\n      cacheTranslationX: number;\n      cacheTranslationY: number;\n      zoomX: number;\n      zoomY: number;\n    }\n  | Record<string, never>;\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends ObjectGeometry<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return FabricObject.ownDefaults;\n  }\n\n  /**\n   * The class type.\n   * This is used for serialization and deserialization purposes and internally it can be used\n   * to identify classes.\n   * When we transform a class in a plain JS object we need a way to recognize which class it was,\n   * and the type is the way we do that. It has no other purposes and you should not give one.\n   * Hard to reach on instances and please do not use to drive instance's logic (this.constructor.type).\n   * To idenfity a class use instanceof class ( instanceof Rect ).\n   * We do not do that in fabricJS code because we want to try to have code splitting possible.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists to avoid type errors in old code and possibly current deserialization code.\n   * DO NOT build new code around this type value\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, FabricObject.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any,\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: Math.ceil(neededX + ALIASING_LIMIT),\n      height: Math.ceil(neededY + ALIASING_LIMIT),\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas!,\n      context = this._cacheContext,\n      { width, height, zoomX, zoomY, x, y } = this._limitCacheSize(\n        this._getCacheCanvasDimensions(),\n      ),\n      dimensionsChanged = width !== canvas.width || height !== canvas.height,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    const shouldRedraw = dimensionsChanged || zoomChanged;\n\n    if (shouldRedraw) {\n      if (width !== canvas.width || height !== canvas.height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      const drawingWidth = x / 2;\n      const drawingHeight = y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (key === SCALE_X || key === SCALE_Y) {\n      value = this._constrainScale(value);\n    }\n    if (key === SCALE_X && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    }\n\n    const isChanged = this[key as keyof this] !== value;\n    this[key as keyof this] = value;\n\n    // invalidate caches\n    if (\n      isChanged &&\n      (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n    ) {\n      this.dirty = true;\n    }\n    // a dirty child makes the parent dirty.\n    // but a non dirty child does not make the parent not dirty.\n    // the parent could be dirty for some other reason.\n    this.parent &&\n      (this.dirty ||\n        (isChanged &&\n          (this.constructor as typeof FabricObject).stateProperties.includes(\n            key,\n          ))) &&\n      this.parent._set('dirty', true);\n\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      (this as TCachedFabricObject).renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx, false, {});\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(_ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(this: TCachedFabricObject, options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      const { zoomX, zoomY, cacheTranslationX, cacheTranslationY } = this;\n      const { width, height } = this._cacheCanvas;\n      this.drawObject(this._cacheContext, options.forClipping, {\n        zoomX,\n        zoomY,\n        cacheTranslationX,\n        cacheTranslationY,\n        width,\n        height,\n        parentClipPaths: [],\n      });\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke(): boolean {\n    return (\n      !!this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill(): boolean {\n    return !!this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When returns `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    // TODO re-evaluate this shadow condition\n    if (\n      this.paintFirst === STROKE &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      (this.objectCaching && (!this.parent || !this.parent.isOnACache())) ||\n      this.needsItsOwnCache();\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject,\n    canvasWithClipPath: HTMLCanvasElement,\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(canvasWithClipPath, 0, 0);\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   * @param {DrawContext} context additional context for rendering\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath, context);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  private createClipPathLayer(\n    this: TCachedFabricObject,\n    clipPath: FabricObject,\n    context: DrawContext,\n  ) {\n    const canvas = createCanvasElementFor(context as TSize);\n    const ctx = canvas.getContext('2d')!;\n    ctx.translate(context.cacheTranslationX, context.cacheTranslationY);\n    ctx.scale(context.zoomX, context.zoomY);\n    clipPath._cacheCanvas = canvas;\n    context.parentClipPaths.forEach((prevClipPath) => {\n      prevClipPath.transform(ctx);\n    });\n    context.parentClipPaths.push(clipPath);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    clipPath.drawObject(ctx, true, context);\n    return canvas;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject | undefined,\n    context: DrawContext,\n  ) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup _transformDone\n    // TODO find a better solution?\n    clipPath._transformDone = true;\n    const canvas = (this as TCachedFabricObject).createClipPathLayer(\n      clipPath,\n      context,\n    );\n    this.drawClipPathOnCache(ctx, clipPath, canvas);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY,\n    );\n  }\n\n  /**\n   * Check if cache is dirty and if is dirty clear the context.\n   * This check has a big side effect, it changes the underlying cache canvas if necessary.\n   * Do not call this method on your own to check if the cache is dirty, because if it is,\n   * it is also going to wipe the cache. This is badly designed and needs to be fixed.\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    const canvas = this._cacheCanvas;\n    const ctx = this._cacheContext;\n    if (canvas && ctx && !skipCanvas && this._updateCacheCanvas()) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (canvas && ctx && !skipCanvas) {\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    const dim = this._getNonTransformedDimensions();\n    ctx.fillStyle = this.backgroundColor;\n\n    ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >,\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = 1 / (this.canvas?.getZoom() ?? 1);\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} _ctx Context to render on\n   */\n  _render(_ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling,\n      pCanvas = createCanvasElementFor({\n        // in case width and height are less than 1px, we have to round up.\n        // since the pattern is no-repeat, this is fine\n        width: Math.ceil(width),\n        height: Math.ceil(height),\n      });\n\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling,\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2,\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY,\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm,\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER,\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n  toBlob(options: toDataURLOptions = {}) {\n    return toBlob(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY,\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  // #region Animation methods\n  /**\n   * List of properties to consider for animating colors.\n   * @type String[]\n   */\n  static colorProperties: string[] = [FILL, STROKE, 'backgroundColor'];\n\n  /**\n   * Animates object's properties\n   * @param {Record<string, number | number[] | TColorArg>} animatable map of keys and end values\n   * @param {Partial<AnimationOptions<T>>} options\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {Record<string, TAnimation<T>>} map of animation contexts\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   */\n  animate<T extends number | number[] | TColorArg>(\n    animatable: Record<string, T>,\n    options?: Partial<AnimationOptions<T>>,\n  ): Record<string, TAnimation<T>> {\n    return Object.entries(animatable).reduce(\n      (acc, [key, endValue]) => {\n        acc[key] = this._animate(key, endValue, options);\n        return acc;\n      },\n      {} as Record<string, TAnimation<T>>,\n    );\n  }\n\n  /**\n   * @private\n   * @param {String} key Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   */\n  _animate<T extends number | number[] | TColorArg>(\n    key: string,\n    endValue: T,\n    options: Partial<AnimationOptions<T>> = {},\n  ): TAnimation<T> {\n    const path = key.split('.');\n    const propIsColor = (\n      this.constructor as typeof FabricObject\n    ).colorProperties.includes(path[path.length - 1]);\n    const { abort, startValue, onChange, onComplete } = options;\n    const animationOptions = {\n      ...options,\n      target: this,\n      // path.reduce... is the current value in case start value isn't provided\n      startValue:\n        startValue ?? path.reduce((deep: any, key) => deep[key], this),\n      endValue,\n      abort: abort?.bind(this),\n      onChange: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        path.reduce((deep: Record<string, any>, key, index) => {\n          if (index === path.length - 1) {\n            deep[key] = value;\n          }\n          return deep[key];\n        }, this);\n        onChange &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onChange(value, valueProgress, durationProgress);\n      },\n      onComplete: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        this.setCoords();\n        onComplete &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onComplete(value, valueProgress, durationProgress);\n      },\n    } as AnimationOptions<T>;\n\n    return (\n      propIsColor\n        ? animateColor(animationOptions as ColorAnimationOptions)\n        : animate(\n            animationOptions as ValueAnimationOptions | ArrayAnimationOptions,\n          )\n    ) as TAnimation<T>;\n  }\n\n  // #region Object stacking methods\n\n  /**\n   * A reference to the parent of the object\n   * Used to keep the original parent ref when the object has been added to an ActiveSelection, hence loosing the `group` ref\n   */\n  declare parent?: Group;\n\n  /**\n   * Checks if object is descendant of target\n   * Should be used instead of {@link Group.contains} or {@link StaticCanvas.contains} for performance reasons\n   * @param {TAncestor} target\n   * @returns {boolean}\n   */\n  isDescendantOf(target: TAncestor): boolean {\n    const { parent, group } = this;\n    return (\n      parent === target ||\n      group === target ||\n      // walk up\n      (!!parent && parent.isDescendantOf(target)) ||\n      (!!group && group !== parent && group.isDescendantOf(target))\n    );\n  }\n\n  /**\n   * @returns {Ancestors} ancestors (excluding `ActiveSelection`) from bottom to top\n   */\n  getAncestors(): Ancestors {\n    const ancestors: TAncestor[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let parent: TAncestor | undefined = this;\n    do {\n      parent = parent.parent;\n      parent && ancestors.push(parent);\n    } while (parent);\n    return ancestors as Ancestors;\n  }\n\n  /**\n   * Compare ancestors\n   *\n   * @param {StackedObject} other\n   * @returns {AncestryComparison} an object that represent the ancestry situation.\n   */\n  findCommonAncestors<T extends this>(other: T): AncestryComparison {\n    if (this === other) {\n      return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors()],\n      } as AncestryComparison;\n    }\n    const ancestors = this.getAncestors();\n    const otherAncestors = other.getAncestors();\n    //  if `this` has no ancestors and `this` is top ancestor of `other` we must handle the following case\n    if (\n      ancestors.length === 0 &&\n      otherAncestors.length > 0 &&\n      this === otherAncestors[otherAncestors.length - 1]\n    ) {\n      return {\n        fork: [],\n        otherFork: [\n          other,\n          ...otherAncestors.slice(0, otherAncestors.length - 1),\n        ],\n        common: [this],\n      } as AncestryComparison;\n    }\n    //  compare ancestors\n    for (let i = 0, ancestor; i < ancestors.length; i++) {\n      ancestor = ancestors[i];\n      if (ancestor === other) {\n        return {\n          fork: [this, ...ancestors.slice(0, i)],\n          otherFork: [],\n          common: ancestors.slice(i),\n        } as AncestryComparison;\n      }\n      for (let j = 0; j < otherAncestors.length; j++) {\n        if (this === otherAncestors[j]) {\n          return {\n            fork: [],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: [this, ...ancestors],\n          } as AncestryComparison;\n        }\n        if (ancestor === otherAncestors[j]) {\n          return {\n            fork: [this, ...ancestors.slice(0, i)],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: ancestors.slice(i),\n          } as AncestryComparison;\n        }\n      }\n    }\n    // nothing shared\n    return {\n      fork: [this, ...ancestors],\n      otherFork: [other, ...otherAncestors],\n      common: [],\n    } as AncestryComparison;\n  }\n\n  /**\n   *\n   * @param {StackedObject} other\n   * @returns {boolean}\n   */\n  hasCommonAncestors<T extends this>(other: T): boolean {\n    const commonAncestors = this.findCommonAncestors(other);\n    return commonAncestors && !!commonAncestors.common.length;\n  }\n\n  /**\n   *\n   * @param {FabricObject} other object to compare against\n   * @returns {boolean | undefined} if objects do not share a common ancestor or they are strictly equal it is impossible to determine which is in front of the other; in such cases the function returns `undefined`\n   */\n  isInFrontOf<T extends this>(other: T): boolean | undefined {\n    if (this === other) {\n      return undefined;\n    }\n    const ancestorData = this.findCommonAncestors(other);\n\n    if (ancestorData.fork.includes(other as any)) {\n      return true;\n    }\n    if (ancestorData.otherFork.includes(this as any)) {\n      return false;\n    }\n    // if there isn't a common ancestor, we take the canvas.\n    // if there is no canvas, there is nothing to compare\n    const firstCommonAncestor = ancestorData.common[0] || this.canvas;\n    if (!firstCommonAncestor) {\n      return undefined;\n    }\n    const headOfFork = ancestorData.fork.pop(),\n      headOfOtherFork = ancestorData.otherFork.pop(),\n      thisIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfFork as any,\n      ),\n      otherIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfOtherFork as any,\n      );\n    return thisIndex > -1 && thisIndex > otherIndex;\n  }\n\n  // #region Serialization\n  /**\n   * Define a list of custom properties that will be serialized when\n   * instance.toObject() gets called\n   */\n  static customProperties: string[] = [];\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const propertiesToSerialize = propertiesToInclude.concat(\n      FabricObject.customProperties,\n      (this.constructor as typeof FabricObject).customProperties || [],\n    );\n    let clipPathData: Partial<SerializedObjectProps> | undefined;\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n    const {\n      clipPath,\n      fill,\n      stroke,\n      shadow,\n      strokeDashArray,\n      left,\n      top,\n      originX,\n      originY,\n      width,\n      height,\n      strokeWidth,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit,\n      scaleX,\n      scaleY,\n      angle,\n      flipX,\n      flipY,\n      opacity,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX,\n      skewY,\n    } = this;\n    if (clipPath && !clipPath.excludeFromExport) {\n      clipPathData = clipPath.toObject(\n        propertiesToSerialize.concat('inverted', 'absolutePositioned'),\n      );\n    }\n    const toFixedBound = (val: number) => toFixed(val, NUM_FRACTION_DIGITS);\n    const object = {\n      ...pick(this, propertiesToSerialize as (keyof this)[]),\n      type: (this.constructor as typeof FabricObject).type,\n      version: VERSION,\n      originX,\n      originY,\n      left: toFixedBound(left),\n      top: toFixedBound(top),\n      width: toFixedBound(width),\n      height: toFixedBound(height),\n      fill: isSerializableFiller(fill) ? fill.toObject() : fill,\n      stroke: isSerializableFiller(stroke) ? stroke.toObject() : stroke,\n      strokeWidth: toFixedBound(strokeWidth),\n      strokeDashArray: strokeDashArray\n        ? strokeDashArray.concat()\n        : strokeDashArray,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit: toFixedBound(strokeMiterLimit),\n      scaleX: toFixedBound(scaleX),\n      scaleY: toFixedBound(scaleY),\n      angle: toFixedBound(angle),\n      flipX,\n      flipY,\n      opacity: toFixedBound(opacity),\n      shadow: shadow ? shadow.toObject() : shadow,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX: toFixedBound(skewX),\n      skewY: toFixedBound(skewY),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...serializedObjectOptions }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {},\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(serializedObjectOptions, options).then(\n      (enlivedObjectOptions) => {\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          delete enlivedObjectOptions[extraParam];\n          return new this(\n            serializedObjectOptions[extraParam],\n            // @ts-expect-error different signature\n            enlivedObjectOptions,\n          );\n        } else {\n          return new this(enlivedObjectOptions);\n        }\n      },\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable,\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n","import type {\n  TModificationEvents,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\n/**\n * Wrap an action handler with firing an event if the action is performed\n * @param {TModificationEvents} eventName the event we want to fire\n * @param {TransformActionHandler<T>} actionHandler the function to wrap\n * @param {object} extraEventInfo extra information to pas to the event handler\n * @return {TransformActionHandler<T>} a function with an action handler signature\n */\nexport const wrapWithFireEvent = <\n  T extends Transform,\n  P extends object = Record<string, never>,\n>(\n  eventName: TModificationEvents,\n  actionHandler: TransformActionHandler<T>,\n  extraEventInfo?: P,\n) => {\n  return ((eventData, transform, x, y) => {\n    const actionPerformed = actionHandler(eventData, transform, x, y);\n    if (actionPerformed) {\n      fireEvent(eventName, {\n        ...commonEventInfo(eventData, transform, x, y),\n        ...extraEventInfo,\n      });\n    }\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n};\n","import type { Transform, TransformActionHandler } from '../EventTypeDefs';\n\n/**\n * Wrap an action handler with saving/restoring object position on the transform.\n * this is the code that permits to objects to keep their position while transforming.\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport function wrapWithFixedAnchor<T extends Transform>(\n  actionHandler: TransformActionHandler<T>,\n) {\n  return ((eventData, transform, x, y) => {\n    const { target, originX, originY } = transform,\n      centerPoint = target.getRelativeCenterPoint(),\n      constraint = target.translateToOriginPoint(centerPoint, originX, originY),\n      actionPerformed = actionHandler(eventData, transform, x, y);\n    // flipping requires to change the transform origin, so we read from the mutated transform\n    // instead of leveraging the one destructured before\n    target.setPositionByOrigin(\n      constraint,\n      transform.originX,\n      transform.originY,\n    );\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { CENTER, LEFT, RESIZING, RIGHT } from '../constants';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { getLocalPoint, isTransformCentered } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Action handler to change object's width\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const changeObjectWidth: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const localPoint = getLocalPoint(\n    transform,\n    transform.originX,\n    transform.originY,\n    x,\n    y,\n  );\n  //  make sure the control changes width ONLY from it's side of target\n  if (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(RIGHT) &&\n      localPoint.x < 0) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(LEFT) &&\n      localPoint.x > 0)\n  ) {\n    const { target } = transform,\n      strokePadding =\n        target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\n      multiplier = isTransformCentered(transform) ? 2 : 1,\n      oldWidth = target.width,\n      newWidth =\n        Math.abs((localPoint.x * multiplier) / target.scaleX) - strokePadding;\n    target.set('width', Math.max(newWidth, 1));\n    //  check against actual target width in case `newWidth` was rejected\n    return oldWidth !== target.width;\n  }\n  return false;\n};\n\nexport const changeWidth = wrapWithFireEvent(\n  RESIZING,\n  wrapWithFixedAnchor(changeObjectWidth),\n);\n","import { FILL, STROKE, twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners'\n  >\n>;\n\nexport type ControlRenderer<\n  O extends InteractiveFabricObject = InteractiveFabricObject,\n> = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: O,\n) => void;\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n}\n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  ControlActionHandler,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { Intersection } from '../Intersection';\nimport { Point } from '../Point';\nimport { SCALE } from '../constants';\nimport type {\n  InteractiveFabricObject,\n  TOCoord,\n} from '../shapes/Object/InteractiveObject';\nimport type { TCornerPoint, TDegree, TMat2D } from '../typedefs';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { renderCircleControl, renderSquareControl } from './controlRendering';\n\nexport class Control {\n  /**\n   * keep track of control visibility.\n   * mainly for backward compatibility.\n   * if you do not want to see a control, you can remove it\n   * from the control set.\n   * @type {Boolean}\n   * @default true\n   */\n  visible = true;\n\n  /**\n   * Name of the action that the control will likely execute.\n   * This is optional. FabricJS uses to identify what the user is doing for some\n   * extra optimizations. If you are writing a custom control and you want to know\n   * somewhere else in the code what is going on, you can use this string here.\n   * you can also provide a custom getActionName if your control run multiple actions\n   * depending on some external state.\n   * default to scale since is the most common, used on 4 corners by default\n   * @type {String}\n   * @default 'scale'\n   */\n  actionName = SCALE;\n\n  /**\n   * Drawing angle of the control.\n   * NOT used for now, but name marked as needed for internal logic\n   * example: to reuse the same drawing function for different rotated controls\n   * @type {Number}\n   * @default 0\n   */\n  angle = 0;\n\n  /**\n   * Relative position of the control. X\n   * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  x = 0;\n\n  /**\n   * Relative position of the control. Y\n   * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  y = 0;\n\n  /**\n   * Horizontal offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the right, negative to the left.\n   * It used when you want to have position of control that does not scale with\n   * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n   * the boundind box, with an offset of 30 pixels vertically. Those 30 pixels will\n   * stay 30 pixels no matter how the object is big. Another example is having 2\n   * controls in the corner, that stay in the same position when the object scale.\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  offsetX = 0;\n\n  /**\n   * Vertical offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the bottom, negative to the top.\n   * @type {Number}\n   * @default 0\n   */\n  offsetY = 0;\n\n  /**\n   * Sets the length of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeX = 0;\n\n  /**\n   * Sets the height of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeY = 0;\n\n  /**\n   * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeX = 0;\n\n  /**\n   * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeY = 0;\n\n  /**\n   * Css cursor style to display when the control is hovered.\n   * if the method `cursorStyleHandler` is provided, this property is ignored.\n   * @type {String}\n   * @default 'crosshair'\n   */\n  cursorStyle = 'crosshair';\n\n  /**\n   * If controls has an offsetY or offsetX, draw a line that connects\n   * the control to the bounding box\n   * @type {Boolean}\n   * @default false\n   */\n  withConnection = false;\n\n  constructor(options?: Partial<Control>) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * The control actionHandler, provide one to handle action ( control being moved )\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare actionHandler: TransformActionHandler;\n\n  /**\n   * The control handler for mouse down, provide one to handle mouse down on control\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseDownHandler?: ControlActionHandler;\n\n  /**\n   * The control mouseUpHandler, provide one to handle an effect on mouse up.\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseUpHandler?: ControlActionHandler;\n\n  shouldActivate(\n    controlKey: string,\n    fabricObject: InteractiveFabricObject,\n    pointer: Point,\n    { tl, tr, br, bl }: TCornerPoint,\n  ) {\n    // TODO: locking logic can be handled here instead of in the control handler logic\n    return (\n      fabricObject.canvas?.getActiveObject() === fabricObject &&\n      fabricObject.isControlVisible(controlKey) &&\n      Intersection.isPointInPolygon(pointer, [tl, tr, br, bl])\n    );\n  }\n\n  /**\n   * Returns control actionHandler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getActionHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): TransformActionHandler | undefined {\n    return this.actionHandler;\n  }\n\n  /**\n   * Returns control mouseDown handler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseDownHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseDownHandler;\n  }\n\n  /**\n   * Returns control mouseUp handler.\n   * During actions the fabricObject or the control can be of different obj\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseUpHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseUpHandler;\n  }\n\n  /**\n   * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n   * function you can pass one in the constructor\n   * the cursorStyle property\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  cursorStyleHandler(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n    coord: TOCoord,\n  ) {\n    return control.cursorStyle;\n  }\n\n  /**\n   * Returns the action name. The basic implementation just return the actionName property.\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  getActionName(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.actionName;\n  }\n\n  /**\n   * Returns controls visibility\n   * @param {FabricObject} object on which the control is displayed\n   * @param {String} controlKey key where the control is memorized on the\n   * @return {Boolean}\n   */\n  getVisibility(fabricObject: InteractiveFabricObject, controlKey: string) {\n    return fabricObject._controlsVisibility?.[controlKey] ?? this.visible;\n  }\n\n  /**\n   * Sets controls visibility\n   * @param {Boolean} visibility for the object\n   * @return {Void}\n   */\n  setVisibility(\n    visibility: boolean,\n    name?: string,\n    fabricObject?: InteractiveFabricObject,\n  ) {\n    this.visible = visibility;\n  }\n\n  positionHandler(\n    dim: Point,\n    finalMatrix: TMat2D,\n    fabricObject: InteractiveFabricObject,\n    currentControl: Control,\n  ) {\n    return new Point(\n      this.x * dim.x + this.offsetX,\n      this.y * dim.y + this.offsetY,\n    ).transform(finalMatrix);\n  }\n\n  /**\n   * Returns the coords for this control based on object values.\n   * @param {Number} objectAngle angle from the fabric object holding the control\n   * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n   *   isTouch is true)\n   * @param {Number} centerX x coordinate where the control center should be\n   * @param {Number} centerY y coordinate where the control center should be\n   * @param {boolean} isTouch true if touch corner, false if normal corner\n   */\n  calcCornerCoords(\n    angle: TDegree,\n    objectCornerSize: number,\n    centerX: number,\n    centerY: number,\n    isTouch: boolean,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    const t = multiplyTransformMatrixArray([\n      createTranslateMatrix(centerX, centerY),\n      createRotateMatrix({ angle }),\n      createScaleMatrix(\n        (isTouch ? this.touchSizeX : this.sizeX) || objectCornerSize,\n        (isTouch ? this.touchSizeY : this.sizeY) || objectCornerSize,\n      ),\n    ]);\n    return {\n      tl: new Point(-0.5, -0.5).transform(t),\n      tr: new Point(0.5, -0.5).transform(t),\n      br: new Point(0.5, 0.5).transform(t),\n      bl: new Point(-0.5, 0.5).transform(t),\n    };\n  }\n\n  /**\n   * Render function for the control.\n   * When this function runs the context is unscaled. unrotate. Just retina scaled.\n   * all the functions will have to translate to the point left,top before starting Drawing\n   * if they want to draw a control where the position is detected.\n   * left and top are the result of the positionHandler function\n   * @param {RenderingContext2D} ctx the context where the control will be drawn\n   * @param {Number} left position of the canvas where we are about to render the control.\n   * @param {Number} top position of the canvas where we are about to render the control.\n   * @param {Object} styleOverride\n   * @param {FabricObject} fabricObject the object where the control is about to be rendered\n   */\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    styleOverride = styleOverride || {};\n    switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\n      case 'circle':\n        renderCircleControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n        break;\n      default:\n        renderSquareControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n    }\n  }\n}\n","import type {\n  ControlCursorCallback,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { ROTATING } from '../constants';\nimport { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { isLocked, NOT_ALLOWED_CURSOR } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Find the correct style for the control that is used for rotation.\n * this function is very simple and it just take care of not-allowed or standard cursor\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const rotationStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (fabricObject.lockRotation) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  return control.cursorStyle;\n};\n\n/**\n * Action handler for rotation and snapping, without anchor point.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n * @private\n */\nconst rotateObjectWithSnapping: TransformActionHandler = (\n  eventData,\n  { target, ex, ey, theta, originX, originY },\n  x,\n  y,\n) => {\n  const pivotPoint = target.translateToOriginPoint(\n    target.getRelativeCenterPoint(),\n    originX,\n    originY,\n  );\n\n  if (isLocked(target, 'lockRotation')) {\n    return false;\n  }\n\n  const lastAngle = Math.atan2(ey - pivotPoint.y, ex - pivotPoint.x),\n    curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x);\n  let angle = radiansToDegrees(curAngle - lastAngle + theta);\n\n  if (target.snapAngle && target.snapAngle > 0) {\n    const snapAngle = target.snapAngle,\n      snapThreshold = target.snapThreshold || snapAngle,\n      rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n      leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n    if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n      angle = leftAngleLocked;\n    } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n      angle = rightAngleLocked;\n    }\n  }\n\n  // normalize angle to positive value\n  if (angle < 0) {\n    angle = 360 + angle;\n  }\n  angle %= 360;\n\n  const hasRotated = target.angle !== angle;\n  // TODO: why aren't we using set?\n  target.angle = angle;\n  return hasRotated;\n};\n\nexport const rotationWithSnapping = wrapWithFireEvent(\n  ROTATING,\n  wrapWithFixedAnchor(rotateObjectWithSnapping),\n);\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxis } from '../typedefs';\nimport type { Canvas } from '../canvas/Canvas';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  invertOrigin,\n  isLocked,\n  isTransformCentered,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport { SCALE_X, SCALE_Y, SCALING } from '../constants';\n\ntype ScaleTransform = Transform & {\n  gestureScale?: number;\n  signX?: number;\n  signY?: number;\n};\n\ntype ScaleBy = TAxis | 'equally' | '' | undefined;\n\n/**\n * Inspect event and fabricObject properties to understand if the scaling action\n * @param {Event} eventData from the user action\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @return {Boolean} true if scale is proportional\n */\nexport function scaleIsProportional(\n  eventData: TPointerEvent,\n  fabricObject: FabricObject,\n): boolean {\n  const canvas = fabricObject.canvas as Canvas;\n  const uniformIsToggled = !fabricObject.lockSize;\n  return (\n    (canvas.uniformScaling && !uniformIsToggled) ||\n    (!canvas.uniformScaling && uniformIsToggled)\n  );\n}\n\n/**\n * Inspect fabricObject to understand if the current scaling action is allowed\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @param {String} by 'x' or 'y' or ''\n * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n * @return {Boolean} true if scaling is not allowed at current conditions\n */\nexport function scalingIsForbidden(\n  fabricObject: FabricObject,\n  by: ScaleBy,\n  scaleProportionally: boolean,\n) {\n  const lockX = isLocked(fabricObject, 'lockScalingX'),\n    lockY = isLocked(fabricObject, 'lockScalingY');\n  if (lockX && lockY) {\n    return true;\n  }\n  if (!by && (lockX || lockY) && scaleProportionally) {\n    return true;\n  }\n  if (lockX && by === 'x') {\n    return true;\n  }\n  if (lockY && by === 'y') {\n    return true;\n  }\n  // code crashes because of a division by 0 if a 0 sized object is scaled\n  // forbid to prevent scaling to happen. ISSUE-9475\n  const { width, height, strokeWidth } = fabricObject;\n  if (width === 0 && strokeWidth === 0 && by !== 'y') {\n    return true;\n  }\n  if (height === 0 && strokeWidth === 0 && by !== 'x') {\n    return true;\n  }\n  return false;\n}\n\nconst scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n\n/**\n * return the correct cursor style for the scale action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n  coord,\n) => {\n  const scaleProportionally = scaleIsProportional(eventData, fabricObject),\n    by =\n      control.x !== 0 && control.y === 0\n        ? 'x'\n        : control.x === 0 && control.y !== 0\n          ? 'y'\n          : '';\n  if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control, coord);\n  return `${scaleMap[n]}-resize`;\n};\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObject(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, by, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    // use of sign: We use sign to detect change of direction of an action. sign usually change when\n    // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n    // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n    // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n    // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n    signX = by !== 'y' ? Math.sign(newPoint.x || transform.signX || 1) : 1;\n    signY = by !== 'x' ? Math.sign(newPoint.y || transform.signY || 1) : 1;\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      (transform.signX !== signX || transform.signY !== signY)\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // missing detection of flip and logic to switch the origin\n    if (scaleProportionally && !by) {\n      // uniform scaling\n      const distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\n        { original } = transform,\n        originalDistance =\n          Math.abs((dim.x * original.scaleX) / target.scaleX) +\n          Math.abs((dim.y * original.scaleY) / target.scaleY),\n        scale = distance / originalDistance;\n      scaleX = original.scaleX * scale;\n      scaleY = original.scaleY * scale;\n    } else {\n      scaleX = Math.abs((newPoint.x * target.scaleX) / dim.x);\n      scaleY = Math.abs((newPoint.y * target.scaleY) / dim.y);\n    }\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX && by !== 'y') {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    if (transform.signY !== signY && by !== 'x') {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  // minScale is taken care of in the setter.\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n\n  if (!by) {\n    !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n    !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  } else {\n    // forbidden cases already handled on top here.\n    by === 'x' && target.set(SCALE_X, scaleX);\n    by === 'y' && target.set(SCALE_Y, scaleY);\n  }\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObjectByX(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, undefined, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    signX = Math.sign(newPoint.x || transform.signX || 1);\n    signY = Math.sign(newPoint.y || transform.signY || 1);\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      // (transform.signX !== signX || transform.signY !== signY)\n      transform.signX !== signX\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // uniform scaling\n    const { original } = transform;\n    const distance = Math.sqrt(newPoint.x ** 2 + newPoint.x ** 2);\n    const originalDistance = Math.sqrt(\n      ((dim.x * transform.original.scaleX) / target.scaleX) ** 2 +\n        ((dim.x * transform.original.scaleX) / target.scaleX) ** 2,\n    );\n    const scale = distance / originalDistance;\n    scaleX = original.scaleX * scale;\n    scaleY = original.scaleY * scale;\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX) {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    // if (transform.signY !== signY) {\n    //   transform.originY = invertOrigin(transform.originY);\n    //   scaleY *= -1;\n    //   transform.signY = signY;\n    // }\n  }\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n  !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObjectByY(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, undefined, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    signX = Math.sign(newPoint.x || transform.signX || 1);\n    signY = Math.sign(newPoint.y || transform.signY || 1);\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      // (transform.signX !== signX || transform.signY !== signY)\n      transform.signY !== signY\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // uniform scaling\n    const { original } = transform;\n    const distance = Math.sqrt(newPoint.y ** 2 + newPoint.y ** 2);\n    const originalDistance = Math.sqrt(\n      ((dim.y * transform.original.scaleY) / target.scaleY) ** 2 +\n        ((dim.y * transform.original.scaleY) / target.scaleY) ** 2,\n    );\n    const scale = distance / originalDistance;\n    scaleX = original.scaleX * scale;\n    scaleY = original.scaleY * scale;\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    // if (transform.signX !== signX) {\n    //   transform.originX = invertOrigin(transform.originX);\n    //   scaleX *= -1;\n    //   transform.signX = signX;\n    // }\n    if (transform.signY !== signY) {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n  !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Generic scaling logic, to scale from corners either equally or freely.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scaleObjectFromCorner: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y);\n};\n\n/**\n * Scaling logic for the X axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectX: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const target = transform.target as never as FabricObject;\n  return target.lockSize\n    ? scaleObjectByX(eventData, transform, x, y, { by: 'x' })\n    : scaleObject(eventData, transform, x, y, { by: 'x' });\n};\n\n/**\n * Scaling logic for the Y axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectY: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const target = transform.target as never as FabricObject;\n  return target.lockSize\n    ? scaleObjectByY(eventData, transform, x, y, { by: 'y' })\n    : scaleObject(eventData, transform, x, y, { by: 'y' });\n};\n\nexport const scalingEqually = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectFromCorner),\n);\n\nexport const scalingX = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectX),\n);\n\nexport const scalingY = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectY),\n);\n","import type {\n  ControlCallback,\n  ControlCursorCallback,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { SCALE_X, SCALE_Y, SKEW_X, SKEW_Y } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxisKey } from '../typedefs';\nimport { scaleCursorStyleHandler, scalingX, scalingY } from './scale';\nimport { skewCursorStyleHandler, skewHandlerX, skewHandlerY } from './skew';\n\nfunction isAltAction(eventData: TPointerEvent, target: FabricObject) {\n  return eventData[target.canvas!.altActionKey!];\n}\n\n/**\n * Inspect event, control and fabricObject to return the correct action name\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} an action name\n */\nexport const scaleOrSkewActionName: ControlCallback<\n  TAxisKey<'skew' | 'scale'> | ''\n> = (eventData, control, fabricObject) => {\n  // const isAlternative = isAltAction(eventData, fabricObject);\n  const isAlternative = false;\n  if (control.x === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_X : SCALE_Y;\n  }\n  if (control.y === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_Y : SCALE_X;\n  }\n  return '';\n};\n\n/**\n * Combine skew and scale style handlers to cover fabric standard use case\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleSkewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n  coord,\n) => {\n  return scaleCursorStyleHandler(eventData, control, fabricObject, coord);\n};\n/**\n * Composed action handler to either scale X or skew Y\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingXOrSkewingY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scalingX(eventData, transform, x, y);\n};\n\n/**\n * Composed action handler to either scale Y or skew X\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingYOrSkewingX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scalingY(eventData, transform, x, y);\n};\n","import { RESIZING, ROTATE } from '../constants';\nimport { changeWidth } from './changeWidth';\nimport { Control } from './Control';\nimport { rotationStyleHandler, rotationWithSnapping } from './rotate';\nimport { scaleCursorStyleHandler, scalingEqually } from './scale';\nimport {\n  scaleOrSkewActionName,\n  scaleSkewCursorStyleHandler,\n  scalingXOrSkewingY,\n  scalingYOrSkewingX,\n} from './scaleSkew';\n\n// use this function if you want to generate new controls for every instance\nexport const createObjectDefaultControls = () => ({\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mb: new Control({\n    x: 0,\n    y: 0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mt: new Control({\n    x: 0,\n    y: -0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  tl: new Control({\n    x: -0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  tr: new Control({\n    x: 0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  bl: new Control({\n    x: -0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  br: new Control({\n    x: 0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  mtr: new Control({\n    x: 0,\n    y: -0.5,\n    actionHandler: rotationWithSnapping,\n    cursorStyleHandler: rotationStyleHandler,\n    offsetY: -40,\n    withConnection: true,\n    actionName: ROTATE,\n  }),\n});\n\nexport const createResizeControls = () => ({\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n});\n\nexport const createTextboxDefaultControls = () => ({\n  ...createObjectDefaultControls(),\n  ...createResizeControls(),\n});\n","import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\nimport { SCALE } from '../../constants';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof InteractiveFabricObject).createControls(),\n      InteractiveFabricObject.ownDefaults,\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults\n   * @param {Object} [options] Options object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createObjectDefaultControls() };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith(SCALE)\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  findControl(\n    pointer: Point,\n    forTouch = false,\n  ): { key: string; control: Control; coord: TOCoord } | undefined {\n    if (!this.hasControls || !this.canvas) {\n      return undefined;\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      const control = this.controls[key];\n\n      if (\n        control.shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner,\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        this.__corner = key;\n\n        return { key, control, coord: this.oCoords[key] };\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined;\n    // decomposing could bring negative scaling and `_calculateCurrentDimensions` can't take it\n    if (transformOptions) {\n      transformOptions.scaleX = Math.abs(transformOptions.scaleX);\n      transformOptions.scaleY = Math.abs(transformOptions.scaleY);\n    }\n    const dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position),\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this,\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this,\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject,\n    ) => any,\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {},\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {},\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = this.borderScaleFactor; // 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride,\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options),\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor,\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY,\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * Be aware that since fabric 6.0 this function does not call setCoords anymore.\n   * setCoords needs to be called manually if the object of which we are rendering controls\n   * is outside the standard selection and transform process.\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {},\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility),\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean,\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(_options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {Event} [_options.e] event if the process is generated by an event\n   */\n  onSelect(_options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging(_e: TPointerEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(_e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} _e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(_e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDragSourceEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDropTargetEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  setScaleX(value: number) {\n    this.scaleX = value;\n  }\n\n  setScaleY(value: number) {\n    this.scaleY = value;\n  }\n}\n","import type { Constructor } from '../typedefs';\n\n/***\n * https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern\n */\nexport function applyMixins<T extends Constructor, S extends Constructor>(\n  derivedCtor: T,\n  constructors: S[],\n) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      name !== 'constructor' &&\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n            Object.create(null),\n        );\n    });\n  });\n  return derivedCtor as T & { prototype: InstanceType<T & S> };\n}\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport { FabricObjectSVGExportMixin } from './FabricObjectSVGExportMixin';\nimport { InteractiveFabricObject } from './InteractiveObject';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { classRegistry } from '../../ClassRegistry';\n\n// TODO somehow we have to make a tree-shakeable import\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface FabricObject<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObjectSVGExportMixin {}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class FabricObject<\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends InteractiveFabricObject<Props, SProps, EventSpec> {\n  lockSize: boolean;\n}\n\napplyMixins(FabricObject, [FabricObjectSVGExportMixin]);\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n\nexport { cacheProperties } from './defaultValues';\n","/**\n * Returns true if context has transparent pixel\n * at specified location (taking tolerance into account)\n * @param {CanvasRenderingContext2D} ctx context\n * @param {Number} x x coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} y y coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} tolerance Tolerance pixels around the point, not alpha tolerance, integer\n * @return {boolean} true if transparent\n */\nexport const isTransparent = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  tolerance: number,\n): boolean => {\n  tolerance = Math.round(tolerance);\n  const size = tolerance * 2 + 1;\n  const { data } = ctx.getImageData(x - tolerance, y - tolerance, size, size);\n\n  // Split image data - for tolerance > 1, pixelDataSize = 4;\n  for (let i = 3; i < data.length; i += 4) {\n    const alphaChannel = data[i];\n    if (alphaChannel > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport { createVector } from '../vectors';\nimport type { TProjectStrokeOnPointsOptions, TProjection } from './types';\n\n/**\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n * @todo consider removing skewing from points before calculating stroke projection,\n * see https://github.com/fabricjs/fabric.js/commit/494a10ee2f8c2278ae9a55b20bf50cf6ee25b064#commitcomment-94751537\n */\nexport abstract class StrokeProjectionsBase {\n  declare options: TProjectStrokeOnPointsOptions;\n  declare scale: Point;\n  declare strokeUniformScalar: Point;\n  declare strokeProjectionMagnitude: number;\n\n  constructor(options: TProjectStrokeOnPointsOptions) {\n    this.options = options;\n    this.strokeProjectionMagnitude = this.options.strokeWidth / 2;\n    this.scale = new Point(this.options.scaleX, this.options.scaleY);\n    this.strokeUniformScalar = this.options.strokeUniform\n      ? new Point(1 / this.options.scaleX, 1 / this.options.scaleY)\n      : new Point(1, 1);\n  }\n\n  /**\n   * When the stroke is uniform, scaling affects the arrangement of points. So we must take it into account.\n   */\n  protected createSideVector(from: XY, to: XY) {\n    const v = createVector(from, to);\n    return this.options.strokeUniform ? v.multiply(this.scale) : v;\n  }\n\n  protected abstract calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude?: number,\n  ): Point;\n\n  protected projectOrthogonally(from: Point, to: Point, magnitude?: number) {\n    return this.applySkew(\n      from.add(this.calcOrthogonalProjection(from, to, magnitude)),\n    );\n  }\n\n  protected isSkewed() {\n    return this.options.skewX !== 0 || this.options.skewY !== 0;\n  }\n\n  protected applySkew(point: Point) {\n    const p = new Point(point);\n    // skewY must be applied before skewX as this distortion affects skewX calculation\n    p.y += p.x * Math.tan(degreesToRadians(this.options.skewY));\n    p.x += p.y * Math.tan(degreesToRadians(this.options.skewX));\n    return p;\n  }\n\n  protected scaleUnitVector(unitVector: Point, scalar: number) {\n    return unitVector.multiply(this.strokeUniformScalar).scalarMultiply(scalar);\n  }\n\n  protected abstract projectPoints(): Point[];\n\n  public abstract project(): TProjection[];\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { halfPI, twoMathPi } from '../../../constants';\nimport type { TRadian } from '../../../typedefs';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport {\n  calcAngleBetweenVectors,\n  calcVectorRotation,\n  crossProduct,\n  getOrthonormalVector,\n  getUnitVector,\n  isBetweenVectors,\n  magnitude,\n  rotateVector,\n} from '../vectors';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nconst zeroVector = new Point();\n\n/**\n * class in charge of finding projections for each type of line join\n * @see {@link [Closed path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#2-closed-path)}\n *\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin\n * - Spec: https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n *\n */\nexport class StrokeLineJoinProjections extends StrokeProjectionsBase {\n  /**\n   * The point being projected (the angle ∠BAC)\n   */\n  declare A: Point;\n  /**\n   * The point before A\n   */\n  declare B: Point;\n  /**\n   * The point after A\n   */\n  declare C: Point;\n  /**\n   * The AB vector\n   */\n  AB: Point;\n  /**\n   * The AC vector\n   */\n  AC: Point;\n  /**\n   * The angle of A (∠BAC)\n   */\n  alpha: TRadian;\n  /**\n   * The bisector of A (∠BAC)\n   */\n  bisector: Point;\n\n  static getOrthogonalRotationFactor(vector1: Point, vector2?: Point) {\n    const angle = vector2\n      ? calcAngleBetweenVectors(vector1, vector2)\n      : calcVectorRotation(vector1);\n    return Math.abs(angle) < halfPI ? -1 : 1;\n  }\n\n  constructor(A: XY, B: XY, C: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.B = new Point(B);\n    this.C = new Point(C);\n    this.AB = this.createSideVector(this.A, this.B);\n    this.AC = this.createSideVector(this.A, this.C);\n    this.alpha = calcAngleBetweenVectors(this.AB, this.AC);\n    this.bisector = getUnitVector(\n      // if AC is also the zero vector nothing will be projected\n      // in that case the next point will handle the projection\n      rotateVector(this.AB.eq(zeroVector) ? this.AC : this.AB, this.alpha / 2),\n    );\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    const orthogonalProjection = getOrthonormalVector(vector);\n    const correctSide = StrokeLineJoinProjections.getOrthogonalRotationFactor(\n      orthogonalProjection,\n      this.bisector,\n    );\n    return this.scaleUnitVector(orthogonalProjection, magnitude * correctSide);\n  }\n\n  /**\n   * BEVEL\n   * Calculation: the projection points are formed by the vector orthogonal to the vertex.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-2-bevel\n   */\n  projectBevel() {\n    const projections: Point[] = [];\n    // if `alpha` equals 0 or 2*PI, the projections are the same for `B` and `C`\n    (this.alpha % twoMathPi === 0 ? [this.B] : [this.B, this.C]).forEach(\n      (to) => {\n        projections.push(this.projectOrthogonally(this.A, to));\n        projections.push(\n          this.projectOrthogonally(this.A, to, -this.strokeProjectionMagnitude),\n        );\n      },\n    );\n    return projections;\n  }\n\n  /**\n   * MITER\n   * Calculation: the corner is formed by extending the outer edges of the stroke\n   * at the tangents of the path segments until they intersect.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-1-miter\n   */\n  projectMiter() {\n    const projections: Point[] = [],\n      alpha = Math.abs(this.alpha),\n      hypotUnitScalar = 1 / Math.sin(alpha / 2),\n      miterVector = this.scaleUnitVector(\n        this.bisector,\n        -this.strokeProjectionMagnitude * hypotUnitScalar,\n      );\n\n    // When two line segments meet at a sharp angle, it is possible for the join to extend,\n    // far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes\n    // a limit on the extent of the line join.\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n    // When the stroke is uniform, scaling changes the arrangement of points, this changes the miter-limit\n    const strokeMiterLimit = this.options.strokeUniform\n      ? magnitude(\n          this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit),\n        )\n      : this.options.strokeMiterLimit;\n\n    if (\n      magnitude(miterVector) / this.strokeProjectionMagnitude <=\n      strokeMiterLimit\n    ) {\n      projections.push(this.applySkew(this.A.add(miterVector)));\n    }\n    /* when the miter-limit is reached, the stroke line join becomes of type bevel.\n      We always need two orthogonal projections which are basically bevel-type projections,\n      so regardless of whether the miter-limit was reached or not, we include these projections.\n    */\n    projections.push(...this.projectBevel());\n\n    return projections;\n  }\n\n  /**\n   * ROUND (without skew)\n   * Calculation: the projections are the two vectors parallel to X and Y axes\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-1-round-without-skew\n   */\n  private projectRoundNoSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [],\n      // correctSide is used to only consider projecting for the outer side\n      correctSide = new Point(\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(this.bisector),\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(\n          new Point(this.bisector.y, this.bisector.x),\n        ),\n      ),\n      radiusOnAxisX = new Point(1, 0)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide),\n      radiusOnAxisY = new Point(0, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide);\n\n    [radiusOnAxisX, radiusOnAxisY].forEach((vector) => {\n      if (isBetweenVectors(vector, startCircle, endCircle)) {\n        projections.push(this.A.add(vector));\n      }\n    });\n    return projections;\n  }\n\n  /**\n   * ROUND (with skew)\n   * Calculation: the projections are the points furthest from the vertex in\n   * the direction of the X and Y axes after distortion.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-2-round-skew\n   */\n  private projectRoundWithSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [];\n\n    const { skewX, skewY, scaleX, scaleY, strokeUniform } = this.options,\n      shearing = new Point(\n        Math.tan(degreesToRadians(skewX)),\n        Math.tan(degreesToRadians(skewY)),\n      );\n    // The points furthest from the vertex in the direction of the X and Y axes after distortion\n    const circleRadius = this.strokeProjectionMagnitude,\n      newY = strokeUniform\n        ? circleRadius /\n          scaleY /\n          Math.sqrt(1 / scaleY ** 2 + (1 / scaleX ** 2) * shearing.y ** 2)\n        : circleRadius / Math.sqrt(1 + shearing.y ** 2),\n      furthestY = new Point(\n        // Safe guard due to floating point precision. In some situations the square root\n        // was returning NaN because of a negative number close to zero.\n        Math.sqrt(Math.max(circleRadius ** 2 - newY ** 2, 0)),\n        newY,\n      ),\n      newX = strokeUniform\n        ? circleRadius /\n          Math.sqrt(\n            1 +\n              (shearing.x ** 2 * (1 / scaleY) ** 2) /\n                (1 / scaleX + (1 / scaleX) * shearing.x * shearing.y) ** 2,\n          )\n        : circleRadius /\n          Math.sqrt(1 + shearing.x ** 2 / (1 + shearing.x * shearing.y) ** 2),\n      furthestX = new Point(\n        newX,\n        Math.sqrt(Math.max(circleRadius ** 2 - newX ** 2, 0)),\n      );\n\n    [\n      furthestX,\n      furthestX.scalarMultiply(-1),\n      furthestY,\n      furthestY.scalarMultiply(-1),\n    ]\n      // We need to skew the vector here as this information is used to check if\n      // it is between the start and end of the circle segment\n      .map((vector) =>\n        this.applySkew(\n          strokeUniform ? vector.multiply(this.strokeUniformScalar) : vector,\n        ),\n      )\n      .forEach((vector) => {\n        if (isBetweenVectors(vector, startCircle, endCircle)) {\n          projections.push(this.applySkew(this.A).add(vector));\n        }\n      });\n\n    return projections;\n  }\n\n  projectRound() {\n    const projections: Point[] = [];\n    /* Include the start and end points of the circle segment, so that only\n      the projections contained within it are included */\n    // add the orthogonal projections (start and end points of circle segment)\n    projections.push(...this.projectBevel());\n    // let's determines which one of the orthogonal projection is the beginning and end of the circle segment.\n    // when `alpha` equals 0 or 2*PI, we have a straight line, so the way to find the start/end is different.\n    const isStraightLine = this.alpha % twoMathPi === 0,\n      // change the origin of the projections to point A\n      // so that the cross product calculation is correct\n      newOrigin = this.applySkew(this.A),\n      proj0 = projections[isStraightLine ? 0 : 2].subtract(newOrigin),\n      proj1 = projections[isStraightLine ? 1 : 0].subtract(newOrigin),\n      // when `isStraightLine` === true, we compare with the vector opposite AB, otherwise we compare with the bisector.\n      comparisonVector = isStraightLine\n        ? this.applySkew(this.AB.scalarMultiply(-1))\n        : this.applySkew(\n            this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1),\n          ),\n      // the beginning of the circle segment is always to the right of the comparison vector (cross product > 0)\n      isProj0Start = crossProduct(proj0, comparisonVector) > 0,\n      startCircle = isProj0Start ? proj0 : proj1,\n      endCircle = isProj0Start ? proj1 : proj0;\n    if (!this.isSkewed()) {\n      projections.push(...this.projectRoundNoSkew(startCircle, endCircle));\n    } else {\n      projections.push(...this.projectRoundWithSkew(startCircle, endCircle));\n    }\n    return projections;\n  }\n\n  /**\n   * Project stroke width on points returning projections for each point as follows:\n   * - `miter`: 1 point corresponding to the outer boundary. If the miter limit is exceeded, it will be 2 points (becomes bevel)\n   * - `bevel`: 2 points corresponding to the bevel possible boundaries, orthogonal to the stroke.\n   * - `round`: same as `bevel` when it has no skew, with skew are 4 points.\n   */\n  protected projectPoints() {\n    switch (this.options.strokeLineJoin) {\n      case 'miter':\n        return this.projectMiter();\n      case 'round':\n        return this.projectRound();\n      default:\n        return this.projectBevel();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n      angle: this.alpha,\n      bisector: this.bisector,\n    }));\n  }\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { getOrthonormalVector, getUnitVector } from '../vectors';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\n/**\n * class in charge of finding projections for each type of line cap for start/end of an open path\n * @see {@link [Open path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#1-open-path)}\n *\n * Reference:\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n * - Spec: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-linecap-dev\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n */\nexport class StrokeLineCapProjections extends StrokeProjectionsBase {\n  /**\n   * edge point\n   */\n  declare A: Point;\n  /**\n   * point next to edge point\n   */\n  declare T: Point;\n\n  constructor(A: XY, T: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.T = new Point(T);\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    return this.scaleUnitVector(getOrthonormalVector(vector), magnitude);\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Butt\n   * Calculation: to find the projections, just find the points orthogonal to the stroke\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-1-butt\n   */\n  projectButt() {\n    return [\n      this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude),\n      this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude),\n    ];\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Round\n   * Calculation: same as stroke line join `round`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-2-round\n   */\n  projectRound() {\n    const projections: Point[] = [];\n\n    if (!this.isSkewed() && this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(\n        this.applySkew(this.A.add(projection)),\n        this.applySkew(this.A.subtract(projection)),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(\n          this.A,\n          this.T,\n          this.T,\n          this.options,\n        ).projectRound(),\n      );\n    }\n\n    return projections;\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Square\n   * Calculation: project a rectangle of points on the stroke in the opposite direction of the vector `AT`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-3-square\n   */\n  projectSquare() {\n    const projections: Point[] = [];\n\n    if (this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(this.A.add(projection), this.A.subtract(projection));\n    } else {\n      const orthogonalProjection = this.calcOrthogonalProjection(\n        this.A,\n        this.T,\n        this.strokeProjectionMagnitude,\n      );\n      const strokePointingOut = this.scaleUnitVector(\n        getUnitVector(this.createSideVector(this.A, this.T)),\n        -this.strokeProjectionMagnitude,\n      );\n      const projectedA = this.A.add(strokePointingOut);\n      projections.push(\n        projectedA.add(orthogonalProjection),\n        projectedA.subtract(orthogonalProjection),\n      );\n    }\n\n    return projections.map((p) => this.applySkew(p));\n  }\n\n  protected projectPoints() {\n    switch (this.options.strokeLineCap) {\n      case 'round':\n        return this.projectRound();\n      case 'square':\n        return this.projectSquare();\n      default:\n        return this.projectButt();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n    }));\n  }\n}\n","import { Point, type XY } from '../../../Point';\nimport { findIndexRight } from '../../internals/findRight';\nimport { StrokeLineCapProjections } from './StrokeLineCapProjections';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nexport type * from './types';\n\n/**\n *\n * Used to calculate object's bounding box\n *\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n *\n */\nexport const projectStrokeOnPoints = (\n  points: XY[],\n  options: TProjectStrokeOnPointsOptions,\n  openPath = false,\n): TProjection[] => {\n  const projections: TProjection[] = [];\n\n  if (points.length === 0) {\n    return projections;\n  }\n\n  // first we remove duplicate neighboring points\n  const reduced = points.reduce(\n    (reduced, point) => {\n      if (!reduced[reduced.length - 1].eq(point)) {\n        reduced.push(new Point(point));\n      }\n      return reduced;\n    },\n    [new Point(points[0])],\n  );\n\n  if (reduced.length === 1) {\n    openPath = true;\n  } else if (!openPath) {\n    // remove points from end in case they equal the first point\n    // in order to correctly project the first point\n    const start = reduced[0];\n    const index = findIndexRight(reduced, (point) => !point.eq(start));\n    reduced.splice(index + 1);\n  }\n\n  reduced.forEach((A, index, points) => {\n    let B: XY, C: XY;\n    if (index === 0) {\n      C = points[1];\n      B = openPath ? A : points[points.length - 1];\n    } else if (index === points.length - 1) {\n      B = points[index - 1];\n      C = openPath ? A : points[0];\n    } else {\n      B = points[index - 1];\n      C = points[index + 1];\n    }\n\n    if (openPath && points.length === 1) {\n      projections.push(\n        ...new StrokeLineCapProjections(A, A, options).project(),\n      );\n    } else if (openPath && (index === 0 || index === points.length - 1)) {\n      projections.push(\n        ...new StrokeLineCapProjections(\n          A,\n          index === 0 ? C : B,\n          options,\n        ).project(),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(A, B, C, options).project(),\n      );\n    }\n  });\n\n  return projections;\n};\n","export const findIndexRight = <T>(\n  array: T[],\n  predicate: (value: T, index: number, array: T[]) => boolean,\n) => {\n  for (let index = array.length - 1; index >= 0; index--) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n","import type { TextStyle } from '../../shapes/Text/StyledText';\n\nexport const cloneStyles = (style: TextStyle): TextStyle => {\n  const newObj: TextStyle = {};\n  Object.keys(style).forEach((key) => {\n    newObj[key] = {};\n    Object.keys(style[key]).forEach((keyInner) => {\n      newObj[key][keyInner] = { ...style[key][keyInner] };\n    });\n  });\n  return newObj;\n};\n","import { getFabricWindow } from '../env';\n\n/**\n * Capitalizes a string\n * @param {String} string String to capitalize\n * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n * and other letters stay untouched, if false first letter is capitalized\n * and other letters are converted to lowercase.\n * @return {String} Capitalized version of a string\n */\nexport const capitalize = (string: string, firstLetterOnly = false): string =>\n  `${string.charAt(0).toUpperCase()}${\n    firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase()\n  }`;\n\n/**\n * Escapes XML in a string\n * @param {String} string String to escape\n * @return {String} Escaped version of a string\n */\nexport const escapeXml = (string: string): string =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n\nlet segmenter: Intl.Segmenter | false;\n\nconst getSegmenter = () => {\n  if (!segmenter) {\n    segmenter =\n      'Intl' in getFabricWindow() &&\n      'Segmenter' in Intl &&\n      new Intl.Segmenter(undefined, {\n        granularity: 'grapheme',\n      });\n  }\n  return segmenter;\n};\n\n/**\n * Divide a string in the user perceived single units\n * @param {String} textstring String to escape\n * @return {Array} array containing the graphemes\n */\nexport const graphemeSplit = (textstring: string): string[] => {\n  segmenter || getSegmenter();\n  if (segmenter) {\n    const segments = segmenter.segment(textstring);\n    return Array.from(segments).map(({ segment }) => segment);\n  }\n\n  //Fallback\n  return graphemeSplitImpl(textstring);\n};\n\nconst graphemeSplitImpl = (textstring: string): string[] => {\n  const graphemes: string[] = [];\n  for (let i = 0, chr; i < textstring.length; i++) {\n    if ((chr = getWholeChar(textstring, i)) === false) {\n      continue;\n    }\n    graphemes.push(chr);\n  }\n  return graphemes;\n};\n\n// taken from mdn in the charAt doc page.\nconst getWholeChar = (str: string, i: number): string | false => {\n  const code = str.charCodeAt(i);\n  if (isNaN(code)) {\n    return ''; // Position not found\n  }\n  if (code < 0xd800 || code > 0xdfff) {\n    return str.charAt(i);\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 <= code && code <= 0xdbff) {\n    if (str.length <= i + 1) {\n      throw 'High surrogate without following low surrogate';\n    }\n    const next = str.charCodeAt(i + 1);\n    if (0xdc00 > next || next > 0xdfff) {\n      throw 'High surrogate without following low surrogate';\n    }\n    return str.charAt(i) + str.charAt(i + 1);\n  }\n  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n  if (i === 0) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  const prev = str.charCodeAt(i - 1);\n\n  // (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 > prev || prev > 0xdbff) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  // We can pass over low surrogates now as the second component\n  // in a pair which we have already processed\n  return false;\n};\n","import { reNewline } from '../../constants';\nimport type {\n  TextStyle,\n  TextStyleDeclaration,\n} from '../../shapes/Text/StyledText';\nimport { cloneStyles } from '../internals/cloneStyles';\nimport { graphemeSplit } from '../lang_string';\n\nexport type TextStyleArray = {\n  start: number;\n  end: number;\n  style: TextStyleDeclaration;\n}[];\n\n/**\n * @param {Object} prevStyle first style to compare\n * @param {Object} thisStyle second style to compare\n * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n * @return {boolean} true if the style changed\n */\nexport const hasStyleChanged = (\n  prevStyle: TextStyleDeclaration,\n  thisStyle: TextStyleDeclaration,\n  forTextSpans = false,\n) =>\n  prevStyle.fill !== thisStyle.fill ||\n  prevStyle.stroke !== thisStyle.stroke ||\n  prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n  prevStyle.fontSize !== thisStyle.fontSize ||\n  prevStyle.fontFamily !== thisStyle.fontFamily ||\n  prevStyle.fontWeight !== thisStyle.fontWeight ||\n  prevStyle.fontStyle !== thisStyle.fontStyle ||\n  prevStyle.textDecorationThickness !== thisStyle.textDecorationThickness ||\n  prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n  prevStyle.deltaY !== thisStyle.deltaY ||\n  (forTextSpans &&\n    (prevStyle.overline !== thisStyle.overline ||\n      prevStyle.underline !== thisStyle.underline ||\n      prevStyle.linethrough !== thisStyle.linethrough));\n\n/**\n * Returns the array form of a text object's inline styles property with styles grouped in ranges\n * rather than per character. This format is less verbose, and is better suited for storage\n * so it is used in serialization (not during runtime).\n * @param {object} styles per character styles for a text object\n * @param {String} text the text string that the styles are applied to\n * @return {{start: number, end: number, style: object}[]}\n */\nexport const stylesToArray = (\n  styles: TextStyle,\n  text: string,\n): TextStyleArray => {\n  const textLines = text.split('\\n'),\n    stylesArray = [];\n  let charIndex = -1,\n    prevStyle = {};\n  // clone style structure to prevent mutation\n  styles = cloneStyles(styles);\n\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n    if (!styles[i]) {\n      //no styles exist for this line, so add the line's length to the charIndex total and reset prevStyle\n      charIndex += chars.length;\n      prevStyle = {};\n      continue;\n    }\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      const thisStyle = styles[i][c];\n      //check if style exists for this character\n      if (thisStyle && Object.keys(thisStyle).length > 0) {\n        if (hasStyleChanged(prevStyle, thisStyle, true)) {\n          stylesArray.push({\n            start: charIndex,\n            end: charIndex + 1,\n            style: thisStyle,\n          });\n        } else {\n          //if style is the same as previous character, increase end index\n          stylesArray[stylesArray.length - 1].end++;\n        }\n      }\n      prevStyle = thisStyle || {};\n    }\n  }\n  return stylesArray;\n};\n\n/**\n * Returns the object form of the styles property with styles that are assigned per\n * character rather than grouped by range. This format is more verbose, and is\n * only used during runtime (not for serialization/storage)\n * @param {Array} styles the serialized form of a text object's styles\n * @param {String} text the text string that the styles are applied to\n * @return {Object}\n */\nexport const stylesFromArray = (\n  styles: TextStyleArray | TextStyle,\n  text: string,\n): TextStyle => {\n  if (!Array.isArray(styles)) {\n    // clone to prevent mutation\n    return cloneStyles(styles);\n  }\n  const textLines = text.split(reNewline),\n    stylesObject: TextStyle = {};\n  let charIndex = -1,\n    styleIndex = 0;\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      //check if there's a style collection that includes the current character\n      if (\n        styles[styleIndex] &&\n        styles[styleIndex].start <= charIndex &&\n        charIndex < styles[styleIndex].end\n      ) {\n        //create object for line index if it doesn't exist\n        stylesObject[i] = stylesObject[i] || {};\n        //assign a style at this character's index\n        stylesObject[i][c] = { ...styles[styleIndex].style };\n        //if character is at the end of the current style collection, move to the next\n        if (charIndex === styles[styleIndex].end - 1) {\n          styleIndex++;\n        }\n      }\n    }\n  }\n  return stylesObject;\n};\n","import { FILL, STROKE } from '../constants';\n\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nexport const SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  FILL,\n  'fill-opacity',\n  'fill-rule',\n  'opacity',\n  STROKE,\n  'stroke-dasharray',\n  'stroke-linecap',\n  'stroke-dashoffset',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke-width',\n  'id',\n  'paint-order',\n  'vector-effect',\n  'instantiated_by_use',\n  'clip-path',\n];\n","export function selectorMatches(\n  element: HTMLElement | SVGElement,\n  selector: string,\n) {\n  const nodeName = element.nodeName;\n  const classNames = element.getAttribute('class');\n  const id = element.getAttribute('id');\n  const azAz = '(?![a-zA-Z\\\\-]+)';\n  let matcher;\n  // i check if a selector matches slicing away part from it.\n  // if i get empty string i should match\n  matcher = new RegExp('^' + nodeName, 'i');\n  selector = selector.replace(matcher, '');\n  if (id && selector.length) {\n    matcher = new RegExp('#' + id + azAz, 'i');\n    selector = selector.replace(matcher, '');\n  }\n  if (classNames && selector.length) {\n    const splitClassNames = classNames.split(' ');\n    for (let i = splitClassNames.length; i--; ) {\n      matcher = new RegExp('\\\\.' + splitClassNames[i] + azAz, 'i');\n      selector = selector.replace(matcher, '');\n    }\n  }\n  return selector.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\nimport { doesSomeParentMatch } from './doesSomeParentMatch';\n\n/**\n * @private\n */\n\nexport function elementMatchesRule(\n  element: HTMLElement | SVGElement,\n  selectors: string[],\n) {\n  let parentMatching = true;\n  // start from rightmost selector.\n  const firstMatching = selectorMatches(element, selectors.pop()!);\n  if (firstMatching && selectors.length) {\n    parentMatching = doesSomeParentMatch(element, selectors);\n  }\n  return firstMatching && parentMatching && selectors.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\n\nexport function doesSomeParentMatch(\n  element: HTMLElement | SVGElement,\n  selectors: string[],\n) {\n  let selector: string,\n    parentMatching = true;\n  while (\n    element.parentElement &&\n    element.parentElement.nodeType === 1 &&\n    selectors.length\n  ) {\n    if (parentMatching) {\n      selector = selectors.pop()!;\n    }\n    element = element.parentElement;\n    parentMatching = selectorMatches(element, selector!);\n  }\n  return selectors.length === 0;\n}\n","import { elementMatchesRule } from './elementMatchesRule';\nimport type { CSSRules } from './typedefs';\n\n/**\n * @private\n */\n\nexport function getGlobalStylesForElement(\n  element: HTMLElement | SVGElement,\n  cssRules: CSSRules = {},\n) {\n  let styles: Record<string, string> = {};\n  for (const rule in cssRules) {\n    if (elementMatchesRule(element, rule.split(' '))) {\n      styles = {\n        ...styles,\n        ...cssRules[rule],\n      };\n    }\n  }\n  return styles;\n}\n","import { attributesMap } from './constants';\n\nexport const normalizeAttr = (\n  attr: keyof typeof attributesMap | string,\n): string => attributesMap[attr as keyof typeof attributesMap] ?? attr;\n","import { reNum } from '../../parser/constants';\n\nconst regex = new RegExp(`(${reNum})`, 'gi');\n\nexport const cleanupSvgAttribute = (attributeValue: string) =>\n  attributeValue\n    .replace(regex, ' $1 ')\n    // replace annoying commas and arbitrary whitespace with single spaces\n    .replace(/,/gi, ' ')\n    .replace(/\\s+/gi, ' ');\n","import { ROTATE, SCALE, SKEW_X, SKEW_Y, iMatrix } from '../constants';\nimport { reNum } from './constants';\nimport type { TMat2D } from '../typedefs';\nimport { cleanupSvgAttribute } from '../util/internals/cleanupSvgAttribute';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createSkewXMatrix,\n  createSkewYMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\n\n// == begin transform regexp\nconst p = `(${reNum})`;\nconst skewX = String.raw`(skewX)\\(${p}\\)`;\nconst skewY = String.raw`(skewY)\\(${p}\\)`;\nconst rotate = String.raw`(rotate)\\(${p}(?: ${p} ${p})?\\)`;\nconst scale = String.raw`(scale)\\(${p}(?: ${p})?\\)`;\nconst translate = String.raw`(translate)\\(${p}(?: ${p})?\\)`;\nconst matrix = String.raw`(matrix)\\(${p} ${p} ${p} ${p} ${p} ${p}\\)`;\nconst transform = `(?:${matrix}|${translate}|${rotate}|${scale}|${skewX}|${skewY})`;\nconst transforms = `(?:${transform}*)`;\nconst transformList = String.raw`^\\s*(?:${transforms}?)\\s*$`;\n// http://www.w3.org/TR/SVG/coords.html#TransformAttribute\nconst reTransformList = new RegExp(transformList);\nconst reTransform = new RegExp(transform);\nconst reTransformAll = new RegExp(transform, 'g');\n// == end transform regexp\n\n/**\n * Parses \"transform\" attribute, returning an array of values\n * @static\n * @function\n * @memberOf fabric\n * @param {String} attributeValue String containing attribute value\n * @return {TTransformMatrix} Array of 6 elements representing transformation matrix\n */\nexport function parseTransformAttribute(attributeValue: string): TMat2D {\n  // first we clean the string\n  attributeValue = cleanupSvgAttribute(attributeValue)\n    // remove spaces around front parentheses\n    .replace(/\\s*([()])\\s*/gi, '$1');\n\n  // start with identity matrix\n  const matrices: TMat2D[] = [];\n\n  // return if no argument was given or\n  // an argument does not match transform attribute regexp\n  if (\n    !attributeValue ||\n    (attributeValue && !reTransformList.test(attributeValue))\n  ) {\n    return [...iMatrix];\n  }\n\n  for (const match of attributeValue.matchAll(reTransformAll)) {\n    const transformMatch = reTransform.exec(match[0]);\n    if (!transformMatch) {\n      continue;\n    }\n    let matrix: TMat2D = iMatrix;\n    const matchedParams = transformMatch.filter((m) => !!m);\n    const [, operation, ...rawArgs] = matchedParams;\n    const [arg0, arg1, arg2, arg3, arg4, arg5] = rawArgs.map((arg) =>\n      parseFloat(arg),\n    );\n\n    switch (operation) {\n      case 'translate':\n        matrix = createTranslateMatrix(arg0, arg1);\n        break;\n      case ROTATE:\n        matrix = createRotateMatrix({ angle: arg0 }, { x: arg1, y: arg2 });\n        break;\n      case SCALE:\n        matrix = createScaleMatrix(arg0, arg1);\n        break;\n      case SKEW_X:\n        matrix = createSkewXMatrix(arg0);\n        break;\n      case SKEW_Y:\n        matrix = createSkewYMatrix(arg0);\n        break;\n      case 'matrix':\n        matrix = [arg0, arg1, arg2, arg3, arg4, arg5];\n        break;\n    }\n\n    // snapshot current matrix into matrices array\n    matrices.push(matrix);\n  }\n\n  return multiplyTransformMatrixArray(matrices);\n}\n","import { multiplyTransformMatrices } from '../util/misc/matrix';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { parseTransformAttribute } from './parseTransformAttribute';\nimport { CENTER, LEFT, RIGHT, NONE, FILL, STROKE } from '../constants';\nimport { TEXT_DECORATION_THICKNESS } from '../shapes/Text/constants';\n\nexport function normalizeValue(\n  attr: string,\n  value: any,\n  parentAttributes: Record<string, any>,\n  fontSize: number,\n): string | null | boolean | number[] | number {\n  const isArray = Array.isArray(value);\n  let parsed: number | number[];\n  let ouputValue: string | null | boolean | number[] | number = value;\n  if ((attr === FILL || attr === STROKE) && value === NONE) {\n    ouputValue = '';\n  } else if (attr === 'strokeUniform') {\n    return value === 'non-scaling-stroke';\n  } else if (attr === 'strokeDashArray') {\n    if (value === NONE) {\n      ouputValue = null;\n    } else {\n      ouputValue = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n    }\n  } else if (attr === 'transformMatrix') {\n    if (parentAttributes && parentAttributes.transformMatrix) {\n      ouputValue = multiplyTransformMatrices(\n        parentAttributes.transformMatrix,\n        parseTransformAttribute(value),\n      );\n    } else {\n      ouputValue = parseTransformAttribute(value);\n    }\n  } else if (attr === 'visible') {\n    ouputValue = value !== NONE && value !== 'hidden';\n    // display=none on parent element always takes precedence over child element\n    if (parentAttributes && parentAttributes.visible === false) {\n      ouputValue = false;\n    }\n  } else if (attr === 'opacity') {\n    ouputValue = parseFloat(value);\n    if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n      ouputValue *= parentAttributes.opacity as number;\n    }\n  } else if (attr === 'textAnchor' /* text-anchor */) {\n    ouputValue = value === 'start' ? LEFT : value === 'end' ? RIGHT : CENTER;\n  } else if (attr === 'charSpacing' || attr === TEXT_DECORATION_THICKNESS) {\n    // parseUnit returns px and we convert it to em\n    parsed = (parseUnit(value, fontSize) / fontSize) * 1000;\n  } else if (attr === 'paintFirst') {\n    const fillIndex = value.indexOf(FILL);\n    const strokeIndex = value.indexOf(STROKE);\n    ouputValue = FILL;\n    if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n      ouputValue = STROKE;\n    } else if (fillIndex === -1 && strokeIndex > -1) {\n      ouputValue = STROKE;\n    }\n  } else if (\n    attr === 'href' ||\n    attr === 'xlink:href' ||\n    attr === 'font' ||\n    attr === 'id'\n  ) {\n    return value;\n  } else if (attr === 'imageSmoothing') {\n    return value === 'optimizeQuality';\n  } else {\n    parsed = isArray\n      ? (value as string[]).map(parseUnit)\n      : parseUnit(value, fontSize);\n  }\n\n  return !isArray && isNaN(parsed! as number) ? ouputValue : parsed!;\n}\n","/**\n * Takes a style string and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleString(\n  style: string,\n  oStyle: Record<string, any>,\n): void {\n  style\n    .replace(/;\\s*$/, '')\n    .split(';')\n    .forEach((chunk) => {\n      if (!chunk) return;\n      const [attr, value] = chunk.split(':');\n      oStyle[attr.trim().toLowerCase()] = value.trim();\n    });\n}\n","import { parseStyleObject } from './parseStyleObject';\nimport { parseStyleString } from './parseStyleString';\n\n/**\n * Parses \"style\" attribute, retuning an object with values\n * @static\n * @memberOf fabric\n * @param {SVGElement} element Element to parse\n * @return {Object} Objects with values parsed from style attribute of an element\n */\nexport function parseStyleAttribute(\n  element: HTMLElement | SVGElement,\n): Record<string, any> {\n  const oStyle: Record<string, any> = {},\n    style = element.getAttribute('style');\n\n  if (!style) {\n    return oStyle;\n  }\n\n  if (typeof style === 'string') {\n    parseStyleString(style, oStyle);\n  } else {\n    parseStyleObject(style, oStyle);\n  }\n\n  return oStyle;\n}\n","/**\n * Takes a style object and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleObject(\n  style: Record<string, any>,\n  oStyle: Record<string, any>,\n): void {\n  Object.entries(style).forEach(([prop, value]) => {\n    if (value === undefined) {\n      return;\n    }\n    oStyle[prop.toLowerCase()] = value;\n  });\n}\n","import { Color } from '../color/Color';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject } from '../shapes/Object/FabricObject';\n\nconst colorAttributesMap = {\n  stroke: 'strokeOpacity',\n  fill: 'fillOpacity',\n};\n\n/**\n * @private\n * @param {Object} attributes Array of attributes to parse\n */\n\nexport function setStrokeFillOpacity(\n  attributes: Record<string, any>,\n): Record<string, any> {\n  const defaults = FabricObject.getDefaults();\n  Object.entries(colorAttributesMap).forEach(([attr, colorAttr]) => {\n    if (\n      typeof attributes[colorAttr] === 'undefined' ||\n      attributes[attr] === ''\n    ) {\n      return;\n    }\n    if (typeof attributes[attr] === 'undefined') {\n      if (!defaults[attr]) {\n        return;\n      }\n      attributes[attr] = defaults[attr];\n    }\n    if (attributes[attr].indexOf('url(') === 0) {\n      return;\n    }\n    const color = new Color(attributes[attr]);\n    attributes[attr] = color\n      .setAlpha(toFixed(color.getAlpha() * attributes[colorAttr], 2))\n      .toRgba();\n  });\n  return attributes;\n}\n","import { DEFAULT_SVG_FONT_SIZE } from '../constants';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { cPath, fSize, svgValidParentsRegEx } from './constants';\nimport { getGlobalStylesForElement } from './getGlobalStylesForElement';\nimport { normalizeAttr } from './normalizeAttr';\nimport { normalizeValue } from './normalizeValue';\nimport { parseFontDeclaration } from './parseFontDeclaration';\nimport { parseStyleAttribute } from './parseStyleAttribute';\nimport { setStrokeFillOpacity } from './setStrokeFillOpacity';\nimport type { CSSRules } from './typedefs';\n\n/**\n * Returns an object of attributes' name/value, given element and an array of attribute names;\n * Parses parent \"g\" nodes recursively upwards.\n * @param {SVGElement | HTMLElement} element Element to parse\n * @param {Array} attributes Array of attributes to parse\n * @return {Object} object containing parsed attributes' names/values\n */\nexport function parseAttributes(\n  element: HTMLElement | SVGElement | null,\n  attributes: string[],\n  cssRules?: CSSRules,\n): Record<string, any> {\n  if (!element) {\n    return {};\n  }\n\n  let parentAttributes: Record<string, string> = {},\n    fontSize: number,\n    parentFontSize = DEFAULT_SVG_FONT_SIZE;\n\n  // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n  if (\n    element.parentNode &&\n    svgValidParentsRegEx.test(element.parentNode.nodeName)\n  ) {\n    parentAttributes = parseAttributes(\n      element.parentElement,\n      attributes,\n      cssRules,\n    );\n    if (parentAttributes.fontSize) {\n      fontSize = parentFontSize = parseUnit(parentAttributes.fontSize);\n    }\n  }\n\n  const ownAttributes: Record<string, string> = {\n    ...attributes.reduce<Record<string, string>>((memo, attr) => {\n      const value = element.getAttribute(attr);\n      if (value) {\n        memo[attr] = value;\n      }\n      return memo;\n    }, {}),\n    // add values parsed from style, which take precedence over attributes\n    // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n    ...getGlobalStylesForElement(element, cssRules),\n    ...parseStyleAttribute(element),\n  };\n\n  if (ownAttributes[cPath]) {\n    element.setAttribute(cPath, ownAttributes[cPath]);\n  }\n  if (ownAttributes[fSize]) {\n    // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n    fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\n    ownAttributes[fSize] = `${fontSize}`;\n  }\n\n  // this should have its own complex type\n  const normalizedStyle: Record<\n    string,\n    string | boolean | number | number[] | null\n  > = {};\n  for (const attr in ownAttributes) {\n    const normalizedAttr = normalizeAttr(attr);\n    const normalizedValue = normalizeValue(\n      normalizedAttr,\n      ownAttributes[attr],\n      parentAttributes,\n      fontSize!,\n    );\n    normalizedStyle[normalizedAttr] = normalizedValue;\n  }\n  if (normalizedStyle && normalizedStyle.font) {\n    parseFontDeclaration(normalizedStyle.font as string, normalizedStyle);\n  }\n  const mergedAttrs = { ...parentAttributes, ...normalizedStyle };\n  return svgValidParentsRegEx.test(element.nodeName)\n    ? mergedAttrs\n    : setStrokeFillOpacity(mergedAttrs);\n}\n","import { parseUnit } from '../util/misc/svgParsing';\nimport { reFontDeclaration } from './constants';\n\n/**\n * Parses a short font declaration, building adding its properties to a style object\n * @static\n * @function\n * @memberOf fabric\n * @param {String} value font declaration\n * @param {Object} oStyle definition\n */\nexport function parseFontDeclaration(\n  value: string,\n  oStyle: Record<string, any>,\n): void {\n  const match = value.match(reFontDeclaration);\n\n  if (!match) {\n    return;\n  }\n  const fontStyle = match[1],\n    // font variant is not used\n    // fontVariant = match[2],\n    fontWeight = match[3],\n    fontSize = match[4],\n    lineHeight = match[5],\n    fontFamily = match[6];\n\n  if (fontStyle) {\n    oStyle.fontStyle = fontStyle;\n  }\n  if (fontWeight) {\n    oStyle.fontWeight = isNaN(parseFloat(fontWeight))\n      ? fontWeight\n      : parseFloat(fontWeight);\n  }\n  if (fontSize) {\n    oStyle.fontSize = parseUnit(fontSize);\n  }\n  if (fontFamily) {\n    oStyle.fontFamily = fontFamily;\n  }\n  if (lineHeight) {\n    oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n  }\n}\n","import { kRect } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const rectDefaultValues: Partial<TClassProperties<Rect>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueRectProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedRectProps\n  extends SerializedObjectProps,\n    UniqueRectProps {}\n\nexport interface RectProps extends FabricObjectProps, UniqueRectProps {}\n\nconst RECT_PROPS = ['rx', 'ry'] as const;\n\nexport class Rect<\n    Props extends TOptions<RectProps> = Partial<RectProps>,\n    SProps extends SerializedRectProps = SerializedRectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements RectProps\n{\n  /**\n   * Horizontal border radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical border radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Rect';\n\n  static cacheProperties = [...cacheProperties, ...RECT_PROPS];\n\n  static ownDefaults = rectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Rect.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Rect.ownDefaults);\n    this.setOptions(options);\n    this._initRxRy();\n  }\n  /**\n   * Initializes rx/ry attributes\n   * @private\n   */\n  _initRxRy() {\n    const { rx, ry } = this;\n    if (rx && !ry) {\n      this.ry = rx;\n    } else if (ry && !rx) {\n      this.rx = ry;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const { width: w, height: h } = this;\n    const x = -w / 2;\n    const y = -h / 2;\n    const rx = this.rx ? Math.min(this.rx, w / 2) : 0;\n    const ry = this.ry ? Math.min(this.ry, h / 2) : 0;\n    const isRounded = rx !== 0 || ry !== 0;\n\n    ctx.beginPath();\n\n    ctx.moveTo(x + rx, y);\n\n    ctx.lineTo(x + w - rx, y);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w - kRect * rx,\n        y,\n        x + w,\n        y + kRect * ry,\n        x + w,\n        y + ry,\n      );\n\n    ctx.lineTo(x + w, y + h - ry);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w,\n        y + h - kRect * ry,\n        x + w - kRect * rx,\n        y + h,\n        x + w - rx,\n        y + h,\n      );\n\n    ctx.lineTo(x + rx, y + h);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + kRect * rx,\n        y + h,\n        x,\n        y + h - kRect * ry,\n        x,\n        y + h - ry,\n      );\n\n    ctx.lineTo(x, y + ry);\n    isRounded &&\n      ctx.bezierCurveTo(x, y + kRect * ry, x + kRect * rx, y, x + rx, y);\n\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...RECT_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { width, height, rx, ry } = this;\n    return [\n      '<rect ',\n      'COMMON_PARTS',\n      `x=\"${-width / 2}\" y=\"${\n        -height / 2\n      }\" rx=\"${rx}\" ry=\"${ry}\" width=\"${width}\" height=\"${height}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Rect.fromElement`)\n   * @static\n   * @memberOf Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'rx',\n    'ry',\n    'width',\n    'height',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns {@link Rect} instance from an SVG element\n   * @static\n   * @memberOf Rect\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement | SVGElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      left = 0,\n      top = 0,\n      width = 0,\n      height = 0,\n      visible = true,\n      ...restOfparsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n\n    return new this({\n      ...options,\n      ...restOfparsedAttributes,\n      left,\n      top,\n      width,\n      height,\n      visible: Boolean(visible && width && height),\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Rect);\nclassRegistry.setSVGClass(Rect);\n","export const LAYOUT_TYPE_INITIALIZATION = 'initialization';\nexport const LAYOUT_TYPE_ADDED = 'added';\nexport const LAYOUT_TYPE_REMOVED = 'removed';\nexport const LAYOUT_TYPE_IMPERATIVE = 'imperative';\nexport const LAYOUT_TYPE_OBJECT_MODIFIED = 'object_modified';\nexport const LAYOUT_TYPE_OBJECT_MODIFYING = 'object_modifying';\n","import { Point, ZERO } from '../../Point';\nimport type { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { multiplyTransformMatrixArray } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport {\n  calcPlaneChangeMatrix,\n  sendVectorToPlane,\n} from '../../util/misc/planeChange';\n\n/**\n * @returns 2 points, the tl and br corners of the non rotated bounding box of an object\n * in the {@link group} plane, taking into account objects that {@link group} is their parent\n * but also belong to the active selection.\n */\nexport const getObjectBounds = (\n  destinationGroup: Group,\n  object: FabricObject,\n): Point[] => {\n  const {\n    strokeUniform,\n    strokeWidth,\n    width,\n    height,\n    group: currentGroup,\n  } = object;\n  const t =\n    currentGroup && currentGroup !== destinationGroup\n      ? calcPlaneChangeMatrix(\n          currentGroup.calcTransformMatrix(),\n          destinationGroup.calcTransformMatrix(),\n        )\n      : null;\n  const objectCenter = t\n    ? object.getRelativeCenterPoint().transform(t)\n    : object.getRelativeCenterPoint();\n  const accountForStroke = !object['isStrokeAccountedForInDimensions']();\n  const strokeUniformVector =\n    strokeUniform && accountForStroke\n      ? sendVectorToPlane(\n          new Point(strokeWidth, strokeWidth),\n          undefined,\n          destinationGroup.calcTransformMatrix(),\n        )\n      : ZERO;\n  const scalingStrokeWidth =\n    !strokeUniform && accountForStroke ? strokeWidth : 0;\n  const sizeVector = sizeAfterTransform(\n    width + scalingStrokeWidth,\n    height + scalingStrokeWidth,\n    multiplyTransformMatrixArray([t, object.calcOwnMatrix()], true),\n  )\n    .add(strokeUniformVector)\n    .scalarDivide(2);\n  return [objectCenter.subtract(sizeVector), objectCenter.add(sizeVector)];\n};\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_IMPERATIVE,\n} from '../constants';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { getObjectBounds } from './utils';\n\n/**\n * Exposes a main public method {@link calcLayoutResult} that is used by the `LayoutManager` to perform layout.\n * Returning `undefined` signals the `LayoutManager` to skip the layout.\n *\n * In charge of calculating the bounding box of the passed objects.\n */\nexport abstract class LayoutStrategy {\n  /**\n   * override by subclass for persistence (TS does not support `static abstract`)\n   */\n  static type = 'strategy';\n\n  /**\n   * Used by the `LayoutManager` to perform layout\n   * @TODO/fix: if this method is calcResult, should calc unconditionally.\n   * the condition to not calc should be evaluated by the layoutManager.\n   * @returns layout result **OR** `undefined` to skip layout\n   */\n  public calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    if (this.shouldPerformLayout(context)) {\n      return this.calcBoundingBox(objects, context);\n    }\n  }\n\n  shouldPerformLayout({ type, prevStrategy, strategy }: StrictLayoutContext) {\n    return (\n      type === LAYOUT_TYPE_INITIALIZATION ||\n      type === LAYOUT_TYPE_IMPERATIVE ||\n      (!!prevStrategy && strategy !== prevStrategy)\n    );\n  }\n\n  shouldLayoutClipPath({ type, target: { clipPath } }: StrictLayoutContext) {\n    return (\n      type !== LAYOUT_TYPE_INITIALIZATION &&\n      clipPath &&\n      !clipPath.absolutePositioned\n    );\n  }\n\n  getInitialSize(\n    context: StrictLayoutContext & InitializationLayoutContext,\n    result: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ) {\n    return result.size;\n  }\n\n  /**\n   * Override this method to customize layout.\n   */\n  calcBoundingBox(\n    objects: FabricObject[],\n    context: StrictLayoutContext,\n  ): LayoutStrategyResult | undefined {\n    const { type, target } = context;\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.overrides) {\n      return context.overrides;\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    const { left, top, width, height } = makeBoundingBoxFromPoints(\n      objects\n        .map((object) => getObjectBounds(target, object))\n        .reduce<Point[]>((coords, curr) => coords.concat(curr), []),\n    );\n    const bboxSize = new Point(width, height);\n    const bboxLeftTop = new Point(left, top);\n    const bboxCenter = bboxLeftTop.add(bboxSize.scalarDivide(2));\n\n    if (type === LAYOUT_TYPE_INITIALIZATION) {\n      const actualSize = this.getInitialSize(context, {\n        size: bboxSize,\n        center: bboxCenter,\n      });\n      return {\n        // in `initialization` we do not account for target's transformation matrix\n        center: bboxCenter,\n        // TODO: investigate if this is still necessary\n        relativeCorrection: new Point(0, 0),\n        size: actualSize,\n      };\n    } else {\n      //  we send `relativeCenter` up to group's containing plane\n      const center = bboxCenter.transform(target.calcOwnMatrix());\n      return {\n        center,\n        size: bboxSize,\n      };\n    }\n  }\n}\n","import type { StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to fit target's objects.\n */\nexport class FitContentLayout extends LayoutStrategy {\n  static readonly type = 'fit-content';\n\n  /**\n   * @override layout on all triggers\n   * Override at will\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldPerformLayout(context: StrictLayoutContext) {\n    return true;\n  }\n}\n\nclassRegistry.setClass(FitContentLayout);\n","import { Point } from '../Point';\nimport {\n  CENTER,\n  CHANGED,\n  MODIFIED,\n  MODIFY_PATH,\n  MODIFY_POLY,\n  MOVING,\n  RESIZING,\n  ROTATING,\n  SCALING,\n  SKEWING,\n  iMatrix,\n} from '../constants';\nimport type { Group } from '../shapes/Group';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { invertTransform } from '../util/misc/matrix';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { FitContentLayout } from './LayoutStrategies/FitContentLayout';\nimport type { LayoutStrategy } from './LayoutStrategies/LayoutStrategy';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_OBJECT_MODIFIED,\n  LAYOUT_TYPE_OBJECT_MODIFYING,\n} from './constants';\nimport type {\n  LayoutContext,\n  LayoutResult,\n  RegistrationContext,\n  StrictLayoutContext,\n} from './types';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TModificationEvents } from '../EventTypeDefs';\n\nconst LAYOUT_MANAGER = 'layoutManager';\n\nexport type SerializedLayoutManager = {\n  type: string;\n  strategy: string;\n};\n\nexport class LayoutManager {\n  declare private _prevLayoutStrategy?: LayoutStrategy;\n  declare protected _subscriptions: Map<FabricObject, VoidFunction[]>;\n\n  strategy: LayoutStrategy;\n\n  constructor(strategy: LayoutStrategy = new FitContentLayout()) {\n    this.strategy = strategy;\n    this._subscriptions = new Map();\n  }\n\n  public performLayout(context: LayoutContext) {\n    const strictContext: StrictLayoutContext = {\n      bubbles: true,\n      strategy: this.strategy,\n      ...context,\n      prevStrategy: this._prevLayoutStrategy,\n      stopPropagation() {\n        this.bubbles = false;\n      },\n    };\n\n    this.onBeforeLayout(strictContext);\n\n    const layoutResult = this.getLayoutResult(strictContext);\n    if (layoutResult) {\n      this.commitLayout(strictContext, layoutResult);\n    }\n\n    this.onAfterLayout(strictContext, layoutResult);\n    this._prevLayoutStrategy = strictContext.strategy;\n  }\n\n  /**\n   * Attach handlers for events that we know will invalidate the layout when\n   * performed on child objects ( general transforms ).\n   * Returns the disposers for later unsubscribing and cleanup\n   * @param {FabricObject} object\n   * @param {RegistrationContext & Partial<StrictLayoutContext>} context\n   * @returns {VoidFunction[]} disposers remove the handlers\n   */\n  protected attachHandlers(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): VoidFunction[] {\n    const { target } = context;\n    return (\n      [\n        MODIFIED,\n        MOVING,\n        RESIZING,\n        ROTATING,\n        SCALING,\n        SKEWING,\n        CHANGED,\n        MODIFY_POLY,\n        MODIFY_PATH,\n      ] as (TModificationEvents & 'modified')[]\n    ).map((key) =>\n      object.on(key, (e) =>\n        this.performLayout(\n          key === MODIFIED\n            ? {\n                type: LAYOUT_TYPE_OBJECT_MODIFIED,\n                trigger: key,\n                e,\n                target,\n              }\n            : {\n                type: LAYOUT_TYPE_OBJECT_MODIFYING,\n                trigger: key,\n                e,\n                target,\n              },\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Subscribe an object to transform events that will trigger a layout change on the parent\n   * This is important only for interactive groups.\n   * @param object\n   * @param context\n   */\n  protected subscribe(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    this.unsubscribe(object, context);\n    const disposers = this.attachHandlers(object, context);\n    this._subscriptions.set(object, disposers);\n  }\n\n  /**\n   * unsubscribe object layout triggers\n   */\n  protected unsubscribe(\n    object: FabricObject,\n    _context?: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    (this._subscriptions.get(object) || []).forEach((d) => d());\n    this._subscriptions.delete(object);\n  }\n\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.unsubscribe(object, context));\n  }\n\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.subscribe(object, context));\n  }\n\n  protected onBeforeLayout(context: StrictLayoutContext) {\n    const { target, type } = context;\n    const { canvas } = target;\n    // handle layout triggers subscription\n    // @TODO: gate the registration when the group is interactive\n    if (type === LAYOUT_TYPE_INITIALIZATION || type === LAYOUT_TYPE_ADDED) {\n      this.subscribeTargets(context);\n    } else if (type === LAYOUT_TYPE_REMOVED) {\n      this.unsubscribeTargets(context);\n    }\n    // fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:before', {\n      context,\n    });\n    canvas &&\n      canvas.fire('object:layout:before', {\n        target,\n        context,\n      });\n\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.deep) {\n      const { strategy: _, ...tricklingContext } = context;\n      // traverse the tree\n      target.forEachObject(\n        (object) =>\n          (object as Group).layoutManager &&\n          (object as Group).layoutManager.performLayout({\n            ...tricklingContext,\n            bubbles: false,\n            target: object as Group,\n          }),\n      );\n    }\n  }\n\n  protected getLayoutResult(\n    context: StrictLayoutContext,\n  ): Required<LayoutResult> | undefined {\n    const { target, strategy, type } = context;\n\n    const result = strategy.calcLayoutResult(context, target.getObjects());\n\n    if (!result) {\n      return;\n    }\n\n    const prevCenter =\n      type === LAYOUT_TYPE_INITIALIZATION\n        ? new Point()\n        : target.getRelativeCenterPoint();\n\n    const {\n      center: nextCenter,\n      correction = new Point(),\n      relativeCorrection = new Point(),\n    } = result;\n    const offset = prevCenter\n      .subtract(nextCenter)\n      .add(correction)\n      .transform(\n        // in `initialization` we do not account for target's transformation matrix\n        type === LAYOUT_TYPE_INITIALIZATION\n          ? iMatrix\n          : invertTransform(target.calcOwnMatrix()),\n        true,\n      )\n      .add(relativeCorrection);\n\n    return {\n      result,\n      prevCenter,\n      nextCenter,\n      offset,\n    };\n  }\n\n  protected commitLayout(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    const {\n      result: { size },\n      nextCenter,\n    } = layoutResult;\n    // set dimensions\n    target.set({ width: size.x, height: size.y });\n    // layout descendants\n    this.layoutObjects(context, layoutResult);\n    //  set position\n    // in `initialization` we do not account for target's transformation matrix\n    if (context.type === LAYOUT_TYPE_INITIALIZATION) {\n      // TODO: what about strokeWidth?\n      target.set({\n        left:\n          context.x ?? nextCenter.x + size.x * resolveOrigin(target.originX),\n        top: context.y ?? nextCenter.y + size.y * resolveOrigin(target.originY),\n      });\n    } else {\n      target.setPositionByOrigin(nextCenter, CENTER, CENTER);\n      // invalidate\n      target.setCoords();\n      target.set('dirty', true);\n    }\n  }\n\n  protected layoutObjects(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    //  adjust objects to account for new center\n    target.forEachObject((object) => {\n      object.group === target &&\n        this.layoutObject(context, layoutResult, object);\n    });\n    // adjust clip path to account for new center\n    context.strategy.shouldLayoutClipPath(context) &&\n      this.layoutObject(context, layoutResult, target.clipPath as FabricObject);\n  }\n\n  /**\n   * @param {FabricObject} object\n   * @param {Point} offset\n   */\n  protected layoutObject(\n    context: StrictLayoutContext,\n    { offset }: Required<LayoutResult>,\n    object: FabricObject,\n  ) {\n    // TODO: this is here for cache invalidation.\n    // verify if this is necessary since we have explicit\n    // cache invalidation at the end of commitLayout\n    object.set({\n      left: object.left + offset.x,\n      top: object.top + offset.y,\n    });\n  }\n\n  protected onAfterLayout(\n    context: StrictLayoutContext,\n    layoutResult?: LayoutResult,\n  ) {\n    const {\n      target,\n      strategy,\n      bubbles,\n      prevStrategy: _,\n      ...bubblingContext\n    } = context;\n    const { canvas } = target;\n\n    //  fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:after', {\n      context,\n      result: layoutResult,\n    });\n    canvas &&\n      canvas.fire('object:layout:after', {\n        context,\n        result: layoutResult,\n        target,\n      });\n\n    //  bubble\n    const parent = target.parent;\n    if (bubbles && parent?.layoutManager) {\n      //  add target to context#path\n      (bubblingContext.path || (bubblingContext.path = [])).push(target);\n      //  all parents should invalidate their layout\n      parent.layoutManager.performLayout({\n        ...bubblingContext,\n        target: parent,\n      });\n    }\n    target.set('dirty', true);\n  }\n\n  dispose() {\n    const { _subscriptions } = this;\n    _subscriptions.forEach((disposers) => disposers.forEach((d) => d()));\n    _subscriptions.clear();\n  }\n\n  toObject() {\n    return {\n      type: LAYOUT_MANAGER,\n      strategy: (this.strategy.constructor as typeof LayoutStrategy).type,\n    };\n  }\n\n  toJSON() {\n    return this.toObject();\n  }\n}\n\nclassRegistry.setClass(LayoutManager, LAYOUT_MANAGER);\n","import type { CollectionEvents, ObjectEvents } from '../EventTypeDefs';\nimport { createCollectionMixin } from '../Collection';\nimport type {\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n  Abortable,\n} from '../typedefs';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n} from '../util/misc/matrix';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { applyTransformToObject } from '../util/misc/objectTransforms';\nimport { FabricObject } from './Object/FabricObject';\nimport { Rect } from './Rect';\nimport { classRegistry } from '../ClassRegistry';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport { log } from '../util/internals/console';\nimport type {\n  ImperativeLayoutOptions,\n  LayoutBeforeEvent,\n  LayoutAfterEvent,\n} from '../LayoutManager/types';\nimport { LayoutManager } from '../LayoutManager/LayoutManager';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { SerializedLayoutManager } from '../LayoutManager/LayoutManager';\nimport type { FitContentLayout } from '../LayoutManager';\nimport type { DrawContext } from './Object/Object';\n\n/**\n * This class handles the specific case of creating a group using {@link Group#fromObject} and is not meant to be used in any other case.\n * We could have used a boolean in the constructor, as we did previously, but we think the boolean\n * would stay in the group's constructor interface and create confusion, therefore it was removed.\n * This layout manager doesn't do anything and therefore keeps the exact layout the group had when {@link Group#toObject} was called.\n */\nclass NoopLayoutManager extends LayoutManager {\n  performLayout() {}\n}\n\nexport interface GroupEvents extends ObjectEvents, CollectionEvents {\n  'layout:before': LayoutBeforeEvent;\n  'layout:after': LayoutAfterEvent;\n}\n\nexport interface GroupOwnProps {\n  subTargetCheck: boolean;\n  interactive: boolean;\n}\n\nexport interface SerializedGroupProps\n  extends SerializedObjectProps,\n    GroupOwnProps {\n  objects: SerializedObjectProps[];\n  layoutManager: SerializedLayoutManager;\n}\n\nexport interface GroupProps extends FabricObjectProps, GroupOwnProps {\n  layoutManager: LayoutManager;\n}\n\nexport const groupDefaultValues: Partial<TClassProperties<Group>> = {\n  strokeWidth: 0,\n  subTargetCheck: false,\n  interactive: false,\n};\n\n/**\n * @fires object:added\n * @fires object:removed\n * @fires layout:before\n * @fires layout:after\n */\nexport class Group\n  extends createCollectionMixin(\n    FabricObject<GroupProps, SerializedGroupProps, GroupEvents>,\n  )\n  implements GroupProps\n{\n  /**\n   * Used to optimize performance\n   * set to `false` if you don't need contained objects to be targets of events\n   * @default\n   * @type boolean\n   */\n  declare subTargetCheck: boolean;\n\n  /**\n   * Used to allow targeting of object inside groups.\n   * set to true if you want to select an object inside a group.\\\n   * **REQUIRES** `subTargetCheck` set to true\n   * This will be not removed but slowly replaced with a method setInteractive\n   * that will take care of enabling subTargetCheck and necessary object events.\n   * There is too much attached to group interactivity to just be evaluated by a\n   * boolean in the code\n   * @default\n   * @deprecated\n   * @type boolean\n   */\n  declare interactive: boolean;\n\n  declare layoutManager: LayoutManager;\n\n  /**\n   * Used internally to optimize performance\n   * Once an object is selected, instance is rendered without the selected object.\n   * This way instance is cached only once for the entire interaction with the selected object.\n   * @private\n   */\n  protected _activeObjects: FabricObject[] = [];\n\n  static type = 'Group';\n\n  static ownDefaults: Record<string, any> = groupDefaultValues;\n  private __objectSelectionTracker: (ev: ObjectEvents['selected']) => void;\n  private __objectSelectionDisposer: (ev: ObjectEvents['deselected']) => void;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Group.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {FabricObject[]} [objects] instance objects\n   * @param {Object} [options] Options object\n   */\n  constructor(objects: FabricObject[] = [], options: Partial<GroupProps> = {}) {\n    super();\n    Object.assign(this, Group.ownDefaults);\n    this.setOptions(options);\n    this.groupInit(objects, options);\n  }\n\n  /**\n   * Shared code between group and active selection\n   * Meant to be used by the constructor.\n   */\n  protected groupInit(\n    objects: FabricObject[],\n    options: {\n      layoutManager?: LayoutManager;\n      top?: number;\n      left?: number;\n    },\n  ) {\n    this._objects = [...objects]; // Avoid unwanted mutations of Collection to affect the caller\n\n    this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(\n      this,\n      true,\n    );\n    this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(\n      this,\n      false,\n    );\n\n    this.forEachObject((object) => {\n      this.enterGroup(object, false);\n    });\n\n    // perform initial layout\n    this.layoutManager = options.layoutManager ?? new LayoutManager();\n    this.layoutManager.performLayout({\n      type: LAYOUT_TYPE_INITIALIZATION,\n      target: this,\n      targets: [...objects],\n      // @TODO remove this concept from the layout manager.\n      // Layout manager will calculate the correct position,\n      // group options can override it later.\n      x: options.left,\n      y: options.top,\n    });\n  }\n\n  /**\n   * Checks if object can enter group and logs relevant warnings\n   * @private\n   * @param {FabricObject} object\n   * @returns\n   */\n  canEnterGroup(object: FabricObject) {\n    if (object === this || this.isDescendantOf(object)) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'Group: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    } else if (this._objects.indexOf(object) !== -1) {\n      // is already in the objects array\n      log(\n        'error',\n        'Group: duplicate objects are not supported inside group, this call has no effect',\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Override this method to enhance performance (for groups with a lot of objects).\n   * If Overriding, be sure not pass illegal objects to group - it will break your app.\n   * @private\n   */\n  protected _filterObjectsBeforeEnteringGroup(objects: FabricObject[]) {\n    return objects.filter((object, index, array) => {\n      // can enter AND is the first occurrence of the object in the passed args (to prevent adding duplicates)\n      return this.canEnterGroup(object) && array.indexOf(object) === index;\n    });\n  }\n\n  /**\n   * Add objects\n   * @param {...FabricObject[]} objects\n   */\n  add(...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.add(...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Inserts an object into collection at specified index\n   * @param {FabricObject[]} objects Object to insert\n   * @param {Number} index Index to insert object at\n   */\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.insertAt(index, ...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Remove objects\n   * @param {...FabricObject[]} objects\n   * @returns {FabricObject[]} removed objects\n   */\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_REMOVED, removed);\n    return removed;\n  }\n\n  _onObjectAdded(object: FabricObject) {\n    this.enterGroup(object, true);\n    this.fire('object:added', { target: object });\n    object.fire('added', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _onObjectRemoved(object: FabricObject, removeParentTransform?: boolean) {\n    this.exitGroup(object, removeParentTransform);\n    this.fire('object:removed', { target: object });\n    object.fire('removed', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    this.layoutManager.performLayout({\n      type,\n      targets,\n      target: this,\n    });\n  }\n\n  _onStackOrderChanged() {\n    this._set('dirty', true);\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    const prev = this[key as keyof this];\n    super._set(key, value);\n    if (key === 'canvas' && prev !== value) {\n      (this._objects || []).forEach((object) => {\n        object._set(key, value);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return this.subTargetCheck;\n  }\n\n  /**\n   * Remove all objects\n   * @returns {FabricObject[]} removed objects\n   */\n  removeAll() {\n    this._activeObjects = [];\n    return this.remove(...this._objects);\n  }\n\n  /**\n   * keeps track of the selected objects\n   * @private\n   */\n  __objectSelectionMonitor<T extends boolean>(\n    selected: T,\n    {\n      target: object,\n    }: ObjectEvents[T extends true ? 'selected' : 'deselected'],\n  ) {\n    const activeObjects = this._activeObjects;\n    if (selected) {\n      activeObjects.push(object);\n      this._set('dirty', true);\n    } else if (activeObjects.length > 0) {\n      const index = activeObjects.indexOf(object);\n      if (index > -1) {\n        activeObjects.splice(index, 1);\n        this._set('dirty', true);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {boolean} watch\n   * @param {FabricObject} object\n   */\n  _watchObject(watch: boolean, object: FabricObject) {\n    //  make sure we listen only once\n    watch && this._watchObject(false, object);\n    if (watch) {\n      object.on('selected', this.__objectSelectionTracker);\n      object.on('deselected', this.__objectSelectionDisposer);\n    } else {\n      object.off('selected', this.__objectSelectionTracker);\n      object.off('deselected', this.__objectSelectionDisposer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object.group && object.group.remove(object);\n    object._set('parent', this);\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  _enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    if (removeParentTransform) {\n      // can this be converted to utils (sendObjectToPlane)?\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          invertTransform(this.calcTransformMatrix()),\n          object.calcTransformMatrix(),\n        ),\n      );\n    }\n    this._shouldSetNestedCoords() && object.setCoords();\n    object._set('group', this);\n    object._set('canvas', this.canvas);\n    this._watchObject(true, object);\n    const activeObject =\n      this.canvas &&\n      this.canvas.getActiveObject &&\n      this.canvas.getActiveObject();\n    // if we are adding the activeObject in a group\n    if (\n      activeObject &&\n      (activeObject === object || object.isDescendantOf(activeObject))\n    ) {\n      this._activeObjects.push(object);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    object._set('parent', undefined);\n    object._set('canvas', undefined);\n  }\n\n  /**\n   * Executes the inner fabric logic of exiting a group.\n   * - Stop watching the object\n   * - Remove the object from the optimization map this._activeObjects\n   * - unset the group property of the object\n   * @protected\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object._set('group', undefined);\n    if (!removeParentTransform) {\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          this.calcTransformMatrix(),\n          object.calcTransformMatrix(),\n        ),\n      );\n      object.setCoords();\n    }\n    this._watchObject(false, object);\n    const index =\n      this._activeObjects.length > 0 ? this._activeObjects.indexOf(object) : -1;\n    if (index > -1) {\n      this._activeObjects.splice(index, 1);\n    }\n  }\n\n  /**\n   * Decide if the group should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group is already cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    const ownCache = FabricObject.prototype.shouldCache.call(this);\n    if (ownCache) {\n      for (let i = 0; i < this._objects.length; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          this.ownCaching = false;\n          return false;\n        }\n      }\n    }\n    return ownCache;\n  }\n\n  /**\n   * Check if this object or a child object will cast a shadow\n   * @return {Boolean}\n   */\n  willDrawShadow() {\n    if (super.willDrawShadow()) {\n      return true;\n    }\n    for (let i = 0; i < this._objects.length; i++) {\n      if (this._objects[i].willDrawShadow()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if instance or its group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache(): boolean {\n    return this.ownCaching || (!!this.parent && this.parent.isOnACache());\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    this._renderBackground(ctx);\n    for (let i = 0; i < this._objects.length; i++) {\n      const obj = this._objects[i];\n      // TODO: handle rendering edge case somehow\n      if (this.canvas?.preserveObjectStacking && obj.group !== this) {\n        ctx.save();\n        ctx.transform(...invertTransform(this.calcTransformMatrix()));\n        obj.render(ctx);\n        ctx.restore();\n      } else if (obj.group === this) {\n        obj.render(ctx);\n      }\n    }\n    this._drawClipPath(ctx, this.clipPath, context);\n  }\n\n  /**\n   * @override\n   * @return {Boolean}\n   */\n  setCoords() {\n    super.setCoords();\n    this._shouldSetNestedCoords() &&\n      this.forEachObject((object) => object.setCoords());\n  }\n\n  triggerLayout(options: ImperativeLayoutOptions = {}) {\n    this.layoutManager.performLayout({\n      target: this,\n      type: LAYOUT_TYPE_IMPERATIVE,\n      ...options,\n    });\n  }\n\n  /**\n   * Renders instance on a given context\n   * @param {CanvasRenderingContext2D} ctx context to render instance on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    this._transformDone = true;\n    super.render(ctx);\n    this._transformDone = false;\n  }\n\n  /**\n   *\n   * @private\n   * @param {'toObject'|'toDatalessObject'} [method]\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {FabricObject[]} serialized objects\n   */\n  __serializeObjects(\n    method: 'toObject' | 'toDatalessObject',\n    propertiesToInclude?: string[],\n  ) {\n    const _includeDefaultValues = this.includeDefaultValues;\n    return this._objects\n      .filter(function (obj) {\n        return !obj.excludeFromExport;\n      })\n      .map(function (obj) {\n        const originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        const data = obj[method || 'toObject'](propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        // delete data.version;\n        return data;\n      });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<\n      GroupProps & TClassProperties<this>,\n      keyof SerializedGroupProps\n    >,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SerializedGroupProps {\n    const layoutManager = this.layoutManager.toObject();\n\n    return {\n      ...super.toObject([\n        'subTargetCheck',\n        'interactive',\n        ...propertiesToInclude,\n      ]),\n      ...(layoutManager.strategy !== 'fit-content' || this.includeDefaultValues\n        ? { layoutManager }\n        : {}),\n      objects: this.__serializeObjects(\n        'toObject',\n        propertiesToInclude as string[],\n      ),\n    };\n  }\n\n  toString() {\n    return `#<Group: (${this.complexity()})>`;\n  }\n\n  dispose() {\n    this.layoutManager.unsubscribeTargets({\n      targets: this.getObjects(),\n      target: this,\n    });\n    this._activeObjects = [];\n    this.forEachObject((object) => {\n      this._watchObject(false, object);\n      object.dispose();\n    });\n    super.dispose();\n  }\n\n  /**\n   * @private\n   */\n  _createSVGBgRect(reviver?: TSVGReviver) {\n    if (!this.backgroundColor) {\n      return '';\n    }\n    const fillStroke = Rect.prototype._toSVG.call(this);\n    const commons = fillStroke.indexOf('COMMON_PARTS');\n    fillStroke[commons] = 'for=\"group\" ';\n    const markup = fillStroke.join('');\n    return reviver ? reviver(markup) : markup;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  _toSVG(reviver?: TSVGReviver) {\n    const svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\n    }\n    svgString.push('</g>\\n');\n    return svgString;\n  }\n\n  /**\n   * Returns styles-string for svg-export, specific version for group\n   * @return {String}\n   */\n  getSvgStyles(): string {\n    const opacity =\n        typeof this.opacity !== 'undefined' && this.opacity !== 1\n          ? `opacity: ${this.opacity};`\n          : '',\n      visibility = this.visible ? '' : ' visibility: hidden;';\n    return [opacity, this.getSvgFilter(), visibility].join('');\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const svgString = [];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n    }\n    return this._createBaseClipPathSVGMarkup(svgString, {\n      reviver,\n    });\n  }\n\n  /**\n   * @todo support loading from svg\n   * @private\n   * @static\n   * @memberOf Group\n   * @param {Object} object Object to create a group from\n   * @returns {Promise<Group>}\n   */\n  static fromObject<T extends TOptions<SerializedGroupProps>>(\n    { type, objects = [], layoutManager, ...options }: T,\n    abortable?: Abortable,\n  ) {\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, abortable),\n      enlivenObjectEnlivables(options, abortable),\n    ]).then(([objects, hydratedOptions]) => {\n      const group = new this(objects, {\n        ...options,\n        ...hydratedOptions,\n        layoutManager: new NoopLayoutManager(),\n      });\n      if (layoutManager) {\n        const layoutClass = classRegistry.getClass<typeof LayoutManager>(\n          layoutManager.type,\n        );\n        const strategyClass = classRegistry.getClass<typeof FitContentLayout>(\n          layoutManager.strategy,\n        );\n        group.layoutManager = new layoutClass(new strategyClass());\n      } else {\n        group.layoutManager = new LayoutManager();\n      }\n      group.layoutManager.subscribeTargets({\n        type: LAYOUT_TYPE_INITIALIZATION,\n        target: group,\n        targets: group.getObjects(),\n      });\n      group.setCoords();\n      return group;\n    });\n  }\n}\n\nclassRegistry.setClass(Group);\n","import type { GroupProps } from '../../shapes/Group';\nimport { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\n\n/**\n * TODO experiment with different layout manager and svg results ( fixed fit content )\n * Groups SVG elements (usually those retrieved from SVG document)\n * @static\n * @param {FabricObject[]} elements FabricObject(s) parsed from svg, to group\n * @return {FabricObject | Group}\n */\nexport const groupSVGElements = (\n  elements: FabricObject[],\n  options?: Partial<GroupProps>,\n) => {\n  if (elements && elements.length === 1) {\n    return elements[0];\n  }\n  return new Group(elements, options);\n};\n","import type { TSize } from '../../typedefs';\n\n/**\n * Finds the scale for the object source to fit inside the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to fit into destination\n */\nexport const findScaleToFit = (source: TSize, destination: TSize) =>\n  Math.min(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n\n/**\n * Finds the scale for the object source to cover entirely the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to cover destination\n */\nexport const findScaleToCover = (source: TSize, destination: TSize) =>\n  Math.max(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n","import { reNum } from '../../parser/constants';\n\nconst commaWsp = `\\\\s*,?\\\\s*`;\n\n/**\n * p for param\n * using \"bad naming\" here because it makes the regex much easier to read\n * p is a number that is preceded by an arbitary number of spaces, maybe 0,\n * a comma or not, and then possibly more spaces or not.\n */\nconst p = `${commaWsp}(${reNum})`;\n\n// const reMoveToCommand = `(M) ?(?:${p}${p} ?)+`;\n\n// const reLineCommand = `(L) ?(?:${p}${p} ?)+`;\n\n// const reHorizontalLineCommand = `(H) ?(?:${p} ?)+`;\n\n// const reVerticalLineCommand = `(V) ?(?:${p} ?)+`;\n\n// const reClosePathCommand = String.raw`(Z)\\s*`;\n\n// const reCubicCurveCommand = `(C) ?(?:${p}${p}${p}${p}${p}${p} ?)+`;\n\n// const reCubicCurveShortcutCommand = `(S) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveCommand = `(Q) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveShortcutCommand = `(T) ?(?:${p}${p} ?)+`;\n\nexport const reArcCommandPoints = `${p}${p}${p}${commaWsp}([01])${commaWsp}([01])${p}${p}`;\n// const reArcCommand = `(A) ?(?:${reArcCommandPoints} ?)+`;\n\n// export const rePathCommandGroups =\n//   `(?:(?:${reMoveToCommand})` +\n//   `|(?:${reLineCommand})` +\n//   `|(?:${reHorizontalLineCommand})` +\n//   `|(?:${reVerticalLineCommand})` +\n//   `|(?:${reClosePathCommand})` +\n//   `|(?:${reCubicCurveCommand})` +\n//   `|(?:${reCubicCurveShortcutCommand})` +\n//   `|(?:${reQuadraticCurveCommand})` +\n//   `|(?:${reQuadraticCurveShortcutCommand})` +\n//   `|(?:${reArcCommand}))`;\n\nexport const rePathCommand = '[mzlhvcsqta][^mzlhvcsqta]*';\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport { halfPI, PiBy180 } from '../../constants';\nimport type { TMat2D, TRadian, TRectBounds } from '../../typedefs';\nimport { cos } from '../misc/cos';\nimport { multiplyTransformMatrices, transformPoint } from '../misc/matrix';\nimport { sin } from '../misc/sin';\nimport { toFixed } from '../misc/toFixed';\nimport type {\n  TCurveInfo,\n  TComplexPathData,\n  TParsedAbsoluteCubicCurveCommand,\n  TPathSegmentInfo,\n  TPointAngle,\n  TSimpleParsedCommand,\n  TSimplePathData,\n  TPathSegmentCommandInfo,\n  TComplexParsedCommand,\n  TPathSegmentInfoCommon,\n  TEndPathInfo,\n  TParsedArcCommand,\n  TComplexParsedCommandType,\n} from './typedefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { reArcCommandPoints, rePathCommand } from './regex';\nimport { reNum } from '../../parser/constants';\n\n/**\n * Commands that may be repeated\n */\nconst repeatedCommands: Record<string, 'l' | 'L'> = {\n  m: 'l',\n  M: 'L',\n};\n\n/**\n * Convert an arc of a rotated ellipse to a Bezier Curve\n * @param {TRadian} theta1 start of the arc\n * @param {TRadian} theta2 end of the arc\n * @param cosTh cosine of the angle of rotation\n * @param sinTh sine of the angle of rotation\n * @param rx x-axis radius (before rotation)\n * @param ry y-axis radius (before rotation)\n * @param cx1 center x of the ellipse\n * @param cy1 center y of the ellipse\n * @param mT\n * @param fromX starting point of arc x\n * @param fromY starting point of arc y\n */\nconst segmentToBezier = (\n  theta1: TRadian,\n  theta2: TRadian,\n  cosTh: number,\n  sinTh: number,\n  rx: number,\n  ry: number,\n  cx1: number,\n  cy1: number,\n  mT: number,\n  fromX: number,\n  fromY: number,\n): TParsedAbsoluteCubicCurveCommand => {\n  const costh1 = cos(theta1),\n    sinth1 = sin(theta1),\n    costh2 = cos(theta2),\n    sinth2 = sin(theta2),\n    toX = cosTh * rx * costh2 - sinTh * ry * sinth2 + cx1,\n    toY = sinTh * rx * costh2 + cosTh * ry * sinth2 + cy1,\n    cp1X = fromX + mT * (-cosTh * rx * sinth1 - sinTh * ry * costh1),\n    cp1Y = fromY + mT * (-sinTh * rx * sinth1 + cosTh * ry * costh1),\n    cp2X = toX + mT * (cosTh * rx * sinth2 + sinTh * ry * costh2),\n    cp2Y = toY + mT * (sinTh * rx * sinth2 - cosTh * ry * costh2);\n\n  return ['C', cp1X, cp1Y, cp2X, cp2Y, toX, toY];\n};\n\n/**\n * Adapted from {@link http://dxr.mozilla.org/mozilla-central/source/dom/svg/SVGPathDataParser.cpp}\n * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n * http://mozilla.org/MPL/2.0/\n * @param toX\n * @param toY\n * @param rx\n * @param ry\n * @param {number} large 0 or 1 flag\n * @param {number} sweep 0 or 1 flag\n * @param rotateX\n */\nconst arcToSegments = (\n  toX: number,\n  toY: number,\n  rx: number,\n  ry: number,\n  large: number,\n  sweep: number,\n  rotateX: TRadian,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n  let fromX = 0,\n    fromY = 0,\n    root = 0;\n  const PI = Math.PI,\n    theta = rotateX * PiBy180,\n    sinTheta = sin(theta),\n    cosTh = cos(theta),\n    px = 0.5 * (-cosTh * toX - sinTheta * toY),\n    py = 0.5 * (-cosTh * toY + sinTheta * toX),\n    rx2 = rx ** 2,\n    ry2 = ry ** 2,\n    py2 = py ** 2,\n    px2 = px ** 2,\n    pl = rx2 * ry2 - rx2 * py2 - ry2 * px2;\n  let _rx = Math.abs(rx);\n  let _ry = Math.abs(ry);\n\n  if (pl < 0) {\n    const s = Math.sqrt(1 - pl / (rx2 * ry2));\n    _rx *= s;\n    _ry *= s;\n  } else {\n    root =\n      (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n  }\n\n  const cx = (root * _rx * py) / _ry,\n    cy = (-root * _ry * px) / _rx,\n    cx1 = cosTh * cx - sinTheta * cy + toX * 0.5,\n    cy1 = sinTheta * cx + cosTh * cy + toY * 0.5;\n  let mTheta = calcVectorAngle(1, 0, (px - cx) / _rx, (py - cy) / _ry);\n  let dtheta = calcVectorAngle(\n    (px - cx) / _rx,\n    (py - cy) / _ry,\n    (-px - cx) / _rx,\n    (-py - cy) / _ry,\n  );\n\n  if (sweep === 0 && dtheta > 0) {\n    dtheta -= 2 * PI;\n  } else if (sweep === 1 && dtheta < 0) {\n    dtheta += 2 * PI;\n  }\n\n  // Convert into cubic bezier segments <= 90deg\n  const segments = Math.ceil(Math.abs((dtheta / PI) * 2)),\n    result = [],\n    mDelta = dtheta / segments,\n    mT =\n      ((8 / 3) * Math.sin(mDelta / 4) * Math.sin(mDelta / 4)) /\n      Math.sin(mDelta / 2);\n  let th3 = mTheta + mDelta;\n\n  for (let i = 0; i < segments; i++) {\n    result[i] = segmentToBezier(\n      mTheta,\n      th3,\n      cosTh,\n      sinTheta,\n      _rx,\n      _ry,\n      cx1,\n      cy1,\n      mT,\n      fromX,\n      fromY,\n    );\n    fromX = result[i][5];\n    fromY = result[i][6];\n    mTheta = th3;\n    th3 += mDelta;\n  }\n  return result;\n};\n\n/**\n * @private\n * Calculate the angle between two vectors\n * @param ux u endpoint x\n * @param uy u endpoint y\n * @param vx v endpoint x\n * @param vy v endpoint y\n */\nconst calcVectorAngle = (\n  ux: number,\n  uy: number,\n  vx: number,\n  vy: number,\n): TRadian => {\n  const ta = Math.atan2(uy, ux),\n    tb = Math.atan2(vy, vx);\n  if (tb >= ta) {\n    return tb - ta;\n  } else {\n    return 2 * Math.PI - (ta - tb);\n  }\n};\n\n// functions for the Cubic beizer\n// taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\nconst CB1 = (t: number) => t ** 3;\nconst CB2 = (t: number) => 3 * t ** 2 * (1 - t);\nconst CB3 = (t: number) => 3 * t * (1 - t) ** 2;\nconst CB4 = (t: number) => (1 - t) ** 3;\n\n/**\n * Calculate bounding box of a cubic Bezier curve\n * Taken from http://jsbin.com/ivomiq/56/edit (no credits available)\n * TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n * @param {number} begx starting point\n * @param {number} begy\n * @param {number} cp1x first control point\n * @param {number} cp1y\n * @param {number} cp2x second control point\n * @param {number} cp2y\n * @param {number} endx end of bezier\n * @param {number} endy\n * @return {TRectBounds} the rectangular bounds\n */\nexport function getBoundsOfCurve(\n  begx: number,\n  begy: number,\n  cp1x: number,\n  cp1y: number,\n  cp2x: number,\n  cp2y: number,\n  endx: number,\n  endy: number,\n): TRectBounds {\n  let argsString: string;\n  if (config.cachesBoundsOfCurve) {\n    // eslint-disable-next-line\n    argsString = [...arguments].join();\n    if (cache.boundsOfCurveCache[argsString]) {\n      return cache.boundsOfCurveCache[argsString];\n    }\n  }\n\n  const sqrt = Math.sqrt,\n    abs = Math.abs,\n    tvalues = [],\n    bounds: [[x: number, y: number], [x: number, y: number]] = [\n      [0, 0],\n      [0, 0],\n    ];\n\n  let b = 6 * begx - 12 * cp1x + 6 * cp2x;\n  let a = -3 * begx + 9 * cp1x - 9 * cp2x + 3 * endx;\n  let c = 3 * cp1x - 3 * begx;\n\n  for (let i = 0; i < 2; ++i) {\n    if (i > 0) {\n      b = 6 * begy - 12 * cp1y + 6 * cp2y;\n      a = -3 * begy + 9 * cp1y - 9 * cp2y + 3 * endy;\n      c = 3 * cp1y - 3 * begy;\n    }\n\n    if (abs(a) < 1e-12) {\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n      const t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    const b2ac = b * b - 4 * c * a;\n    if (b2ac < 0) {\n      continue;\n    }\n    const sqrtb2ac = sqrt(b2ac);\n    const t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    const t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  let j = tvalues.length;\n  const jlen = j;\n  const iterator = getPointOnCubicBezierIterator(\n    begx,\n    begy,\n    cp1x,\n    cp1y,\n    cp2x,\n    cp2y,\n    endx,\n    endy,\n  );\n  while (j--) {\n    const { x, y } = iterator(tvalues[j]);\n    bounds[0][j] = x;\n    bounds[1][j] = y;\n  }\n\n  bounds[0][jlen] = begx;\n  bounds[1][jlen] = begy;\n  bounds[0][jlen + 1] = endx;\n  bounds[1][jlen + 1] = endy;\n  const result: TRectBounds = [\n    new Point(Math.min(...bounds[0]), Math.min(...bounds[1])),\n    new Point(Math.max(...bounds[0]), Math.max(...bounds[1])),\n  ];\n  if (config.cachesBoundsOfCurve) {\n    cache.boundsOfCurveCache[argsString!] = result;\n  }\n  return result;\n}\n\n/**\n * Converts arc to a bunch of cubic Bezier curves\n * @param {number} fx starting point x\n * @param {number} fy starting point y\n * @param {TParsedArcCommand} coords Arc command\n */\nexport const fromArcToBeziers = (\n  fx: number,\n  fy: number,\n  [_, rx, ry, rot, large, sweep, tx, ty]: TParsedArcCommand,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  const segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n  for (let i = 0, len = segsNorm.length; i < len; i++) {\n    segsNorm[i][1] += fx;\n    segsNorm[i][2] += fy;\n    segsNorm[i][3] += fx;\n    segsNorm[i][4] += fy;\n    segsNorm[i][5] += fx;\n    segsNorm[i][6] += fy;\n  }\n  return segsNorm;\n};\n\n/**\n * This function takes a parsed SVG path and makes it simpler for fabricJS logic.\n * Simplification consist of:\n * - All commands converted to absolute (lowercase to uppercase)\n * - S converted to C\n * - T converted to Q\n * - A converted to C\n * @param {TComplexPathData} path the array of commands of a parsed SVG path for `Path`\n * @return {TSimplePathData} the simplified array of commands of a parsed SVG path for `Path`\n * TODO: figure out how to remove the type assertions in a nice way\n */\nexport const makePathSimpler = (path: TComplexPathData): TSimplePathData => {\n  // x and y represent the last point of the path, AKA the previous command point.\n  // we add them to each relative command to make it an absolute comment.\n  // we also swap the v V h H with L, because are easier to transform.\n  let x = 0,\n    y = 0;\n  // x1 and y1 represent the last point of the subpath. the subpath is started with\n  // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n  // the last x1 and y1.\n  let x1 = 0,\n    y1 = 0;\n  // previous will host the letter of the previous command, to handle S and T.\n  // controlX and controlY will host the previous reflected control point\n  const destinationPath: TSimplePathData = [];\n  let previous,\n    // placeholders\n    controlX = 0,\n    controlY = 0;\n  for (const parsedCommand of path) {\n    const current: TComplexParsedCommand = [...parsedCommand];\n    let converted: TSimpleParsedCommand | undefined;\n    switch (\n      current[0] // first letter\n    ) {\n      case 'l': // lineto, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'L':\n        x = current[1];\n        y = current[2];\n        converted = ['L', x, y];\n        break;\n      case 'h': // horizontal lineto, relative\n        current[1] += x;\n      // falls through\n      case 'H':\n        x = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'v': // vertical lineto, relative\n        current[1] += y;\n      // falls through\n      case 'V':\n        y = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'm': // moveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'M':\n        x = current[1];\n        y = current[2];\n        x1 = current[1];\n        y1 = current[2];\n        converted = ['M', x, y];\n        break;\n      case 'c': // bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n        current[5] += x;\n        current[6] += y;\n      // falls through\n      case 'C':\n        controlX = current[3];\n        controlY = current[4];\n        x = current[5];\n        y = current[6];\n        converted = ['C', current[1], current[2], controlX, controlY, x, y];\n        break;\n      case 's': // shorthand cubic bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'S':\n        // would be sScC but since we are swapping sSc for C, we check just that.\n        if (previous === 'C') {\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a C, c, S, or s,\n          // the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[3];\n        y = current[4];\n        converted = ['C', controlX, controlY, current[1], current[2], x, y];\n        // converted[3] and converted[4] are NOW the second control point.\n        // we keep it for the next reflection.\n        controlX = converted[3];\n        controlY = converted[4];\n        break;\n      case 'q': // quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'Q':\n        controlX = current[1];\n        controlY = current[2];\n        x = current[3];\n        y = current[4];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 't': // shorthand quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'T':\n        if (previous === 'Q') {\n          // calculate reflection of previous control point\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a Q, q, T or t,\n          // assume the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[1];\n        y = current[2];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 'a':\n        current[6] += x;\n        current[7] += y;\n      // falls through\n      case 'A':\n        fromArcToBeziers(x, y, current).forEach((b) => destinationPath.push(b));\n        x = current[6];\n        y = current[7];\n        break;\n      case 'z':\n      case 'Z':\n        x = x1;\n        y = y1;\n        converted = ['Z'];\n        break;\n      default:\n    }\n    if (converted) {\n      destinationPath.push(converted);\n      previous = converted[0];\n    } else {\n      previous = '';\n    }\n  }\n  return destinationPath;\n};\n\n// todo verify if we can just use the point class here\n/**\n * Calc length from point x1,y1 to x2,y2\n * @param {number} x1 starting point x\n * @param {number} y1 starting point y\n * @param {number} x2 starting point x\n * @param {number} y2 starting point y\n * @return {number} length of segment\n */\nconst calcLineLength = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n): number => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n/**\n * Get an iterator that takes a percentage and returns a point\n * @param {number} begx\n * @param {number} begy\n * @param {number} cp1x\n * @param {number} cp1y\n * @param {number} cp2x\n * @param {number} cp2y\n * @param {number} endx\n * @param {number} endy\n */\nconst getPointOnCubicBezierIterator =\n  (\n    begx: number,\n    begy: number,\n    cp1x: number,\n    cp1y: number,\n    cp2x: number,\n    cp2y: number,\n    endx: number,\n    endy: number,\n  ) =>\n  (pct: number) => {\n    const c1 = CB1(pct),\n      c2 = CB2(pct),\n      c3 = CB3(pct),\n      c4 = CB4(pct);\n    return new Point(\n      endx * c1 + cp2x * c2 + cp1x * c3 + begx * c4,\n      endy * c1 + cp2y * c2 + cp1y * c3 + begy * c4,\n    );\n  };\n\nconst QB1 = (t: number) => t ** 2;\nconst QB2 = (t: number) => 2 * t * (1 - t);\nconst QB3 = (t: number) => (1 - t) ** 2;\n\nconst getTangentCubicIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n    p4x: number,\n    p4y: number,\n  ) =>\n  (pct: number) => {\n    const qb1 = QB1(pct),\n      qb2 = QB2(pct),\n      qb3 = QB3(pct),\n      tangentX =\n        3 * (qb3 * (p2x - p1x) + qb2 * (p3x - p2x) + qb1 * (p4x - p3x)),\n      tangentY =\n        3 * (qb3 * (p2y - p1y) + qb2 * (p3y - p2y) + qb1 * (p4y - p3y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\nconst getPointOnQuadraticBezierIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const c1 = QB1(pct),\n      c2 = QB2(pct),\n      c3 = QB3(pct);\n    return new Point(\n      p3x * c1 + p2x * c2 + p1x * c3,\n      p3y * c1 + p2y * c2 + p1y * c3,\n    );\n  };\n\nconst getTangentQuadraticIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const invT = 1 - pct,\n      tangentX = 2 * (invT * (p2x - p1x) + pct * (p3x - p2x)),\n      tangentY = 2 * (invT * (p2y - p1y) + pct * (p3y - p2y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\n// this will run over a path segment (a cubic or quadratic segment) and approximate it\n// with 100 segments. This will good enough to calculate the length of the curve\nconst pathIterator = (\n  iterator: (pct: number) => Point,\n  x1: number,\n  y1: number,\n) => {\n  let tempP = new Point(x1, y1),\n    tmpLen = 0;\n  for (let perc = 1; perc <= 100; perc += 1) {\n    const p = iterator(perc / 100);\n    tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    tempP = p;\n  }\n  return tmpLen;\n};\n\n/**\n * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n * that correspond to that pixels run over the path.\n * The percentage will be then used to find the correct point on the canvas for the path.\n * @param {Array} segInfo fabricJS collection of information on a parsed path\n * @param {number} distance from starting point, in pixels.\n * @return {TPointAngle} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n */\nconst findPercentageForDistance = (\n  segInfo: TCurveInfo<'Q' | 'C'>,\n  distance: number,\n): TPointAngle => {\n  let perc = 0,\n    tmpLen = 0,\n    tempP: XY = { x: segInfo.x, y: segInfo.y },\n    p: XY = { ...tempP },\n    nextLen: number,\n    nextStep = 0.01,\n    lastPerc = 0;\n  // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n  // the path\n  const iterator = segInfo.iterator,\n    angleFinder = segInfo.angleFinder;\n  while (tmpLen < distance && nextStep > 0.0001) {\n    p = iterator(perc);\n    lastPerc = perc;\n    nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    // compare tmpLen each cycle with distance, decide next perc to test.\n    if (nextLen + tmpLen > distance) {\n      // we discard this step and we make smaller steps.\n      perc -= nextStep;\n      nextStep /= 2;\n    } else {\n      tempP = p;\n      perc += nextStep;\n      tmpLen += nextLen;\n    }\n  }\n  return { ...p, angle: angleFinder(lastPerc) };\n};\n\n/**\n * Run over a parsed and simplified path and extract some information (length of each command and starting point)\n * @param {TSimplePathData} path parsed path commands\n * @return {TPathSegmentInfo[]} path commands information\n */\nexport const getPathSegmentsInfo = (\n  path: TSimplePathData,\n): TPathSegmentInfo[] => {\n  let totalLength = 0,\n    //x2 and y2 are the coords of segment start\n    //x1 and y1 are the coords of the current point\n    x1 = 0,\n    y1 = 0,\n    x2 = 0,\n    y2 = 0,\n    iterator,\n    tempInfo: TPathSegmentInfo;\n  const info: TPathSegmentInfo[] = [];\n  for (const current of path) {\n    const basicInfo: TPathSegmentInfoCommon<keyof TPathSegmentCommandInfo> = {\n      x: x1,\n      y: y1,\n      command: current[0],\n      length: 0,\n    };\n    switch (\n      current[0] //first letter\n    ) {\n      case 'M':\n        tempInfo = <TPathSegmentInfoCommon<'M'>>basicInfo;\n        tempInfo.x = x2 = x1 = current[1];\n        tempInfo.y = y2 = y1 = current[2];\n        break;\n      case 'L':\n        tempInfo = <TPathSegmentInfoCommon<'L'>>basicInfo;\n        tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n        x1 = current[1];\n        y1 = current[2];\n        break;\n      case 'C':\n        iterator = getPointOnCubicBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo = <TCurveInfo<'C'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentCubicIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n\n        x1 = current[5];\n        y1 = current[6];\n        break;\n      case 'Q':\n        iterator = getPointOnQuadraticBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo = <TCurveInfo<'Q'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentQuadraticIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n        x1 = current[3];\n        y1 = current[4];\n        break;\n      case 'Z':\n        // we add those in order to ease calculations later\n        tempInfo = <TEndPathInfo>basicInfo;\n        tempInfo.destX = x2;\n        tempInfo.destY = y2;\n        tempInfo.length = calcLineLength(x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        break;\n    }\n    totalLength += tempInfo.length;\n    info.push(tempInfo);\n  }\n  info.push({ length: totalLength, x: x1, y: y1 });\n  return info;\n};\n\n/**\n * Get the point on the path that is distance along the path\n * @param path\n * @param distance\n * @param infos\n */\nexport const getPointOnPath = (\n  path: TSimplePathData,\n  distance: number,\n  infos: TPathSegmentInfo[] = getPathSegmentsInfo(path),\n): TPointAngle | undefined => {\n  let i = 0;\n  while (distance - infos[i].length > 0 && i < infos.length - 2) {\n    distance -= infos[i].length;\n    i++;\n  }\n  const segInfo = infos[i],\n    segPercent = distance / segInfo.length,\n    segment = path[i];\n\n  switch (segInfo.command) {\n    case 'M':\n      return { x: segInfo.x, y: segInfo.y, angle: 0 };\n    case 'Z':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segInfo.destX, segInfo.destY),\n          segPercent,\n        ),\n        angle: Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x),\n      };\n    case 'L':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segment[1]!, segment[2]!),\n          segPercent,\n        ),\n        angle: Math.atan2(segment[2]! - segInfo.y, segment[1]! - segInfo.x),\n      };\n    case 'C':\n      return findPercentageForDistance(segInfo, distance);\n    case 'Q':\n      return findPercentageForDistance(segInfo, distance);\n    default:\n    // throw Error('Invalid command');\n  }\n};\n\nconst rePathCmdAll = new RegExp(rePathCommand, 'gi');\nconst regExpArcCommandPoints = new RegExp(reArcCommandPoints, 'g');\nconst reMyNum = new RegExp(reNum, 'gi');\nconst commandLengths = {\n  m: 2,\n  l: 2,\n  h: 1,\n  v: 1,\n  c: 6,\n  s: 4,\n  q: 4,\n  t: 2,\n  a: 7,\n} as const;\n/**\n *\n * @param {string} pathString\n * @return {TComplexPathData} An array of SVG path commands\n * @example <caption>Usage</caption>\n * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n *   ['M', 3, 4],\n *   ['Q', 3, 5, 2, 1, 4, 0],\n *   ['Q', 9, 12, 2, 1, 4, 0],\n * ];\n */\nexport const parsePath = (pathString: string): TComplexPathData => {\n  const chain: TComplexPathData = [];\n  const all = pathString.match(rePathCmdAll) ?? [];\n  for (const matchStr of all) {\n    // take match string and save the first letter as the command\n    const commandLetter = matchStr[0] as TComplexParsedCommandType;\n    // in case of Z we have very little to do\n    if (commandLetter === 'z' || commandLetter === 'Z') {\n      chain.push([commandLetter]);\n      continue;\n    }\n    const commandLength =\n      commandLengths[\n        commandLetter.toLowerCase() as keyof typeof commandLengths\n      ];\n\n    let paramArr = [];\n    if (commandLetter === 'a' || commandLetter === 'A') {\n      // the arc command ha some peculariaties that requires a special regex other than numbers\n      // it is possible to avoid using a space between the sweep and large arc flags, making them either\n      // 00, 01, 10 or 11, making them identical to a plain number for the regex reMyNum\n      // reset the regexp\n      regExpArcCommandPoints.lastIndex = 0;\n      for (let out = null; (out = regExpArcCommandPoints.exec(matchStr)); ) {\n        paramArr.push(...out.slice(1));\n      }\n    } else {\n      paramArr = matchStr.match(reMyNum) || [];\n    }\n\n    // inspect the length of paramArr, if is longer than commandLength\n    // we are dealing with repeated commands\n    for (let i = 0; i < paramArr.length; i += commandLength) {\n      const newCommand = new Array(commandLength) as TComplexParsedCommand;\n      const transformedCommand = repeatedCommands[commandLetter];\n      newCommand[0] =\n        i > 0 && transformedCommand ? transformedCommand : commandLetter;\n      for (let j = 0; j < commandLength; j++) {\n        newCommand[j + 1] = parseFloat(paramArr[i + j]);\n      }\n      chain.push(newCommand);\n    }\n  }\n  return chain;\n};\n\n/**\n *\n * Converts points to a smooth SVG path\n * @param {XY[]} points Array of points\n * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n * @return {(string|number)[][]} An array of SVG path commands\n */\nexport const getSmoothPathFromPoints = (\n  points: Point[],\n  correction = 0,\n): TSimplePathData => {\n  let p1 = new Point(points[0]),\n    p2 = new Point(points[1]),\n    multSignX = 1,\n    multSignY = 0;\n  const path: TSimplePathData = [],\n    len = points.length,\n    manyPoints = len > 2;\n\n  if (manyPoints) {\n    multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n    multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n  }\n  path.push([\n    'M',\n    p1.x - multSignX * correction,\n    p1.y - multSignY * correction,\n  ]);\n  let i;\n  for (i = 1; i < len; i++) {\n    if (!p1.eq(p2)) {\n      const midPoint = p1.midPointFrom(p2);\n      // p1 is our bezier control point\n      // midpoint is our endpoint\n      // start point is p(i-1) value.\n      path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\n    }\n    p1 = points[i];\n    if (i + 1 < points.length) {\n      p2 = points[i + 1];\n    }\n  }\n  if (manyPoints) {\n    multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n    multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n  }\n  path.push([\n    'L',\n    p1.x + multSignX * correction,\n    p1.y + multSignY * correction,\n  ]);\n  return path;\n};\n\n/**\n * Transform a path by transforming each segment.\n * it has to be a simplified path or it won't work.\n * WARNING: this depends from pathOffset for correct operation\n * @param {TSimplePathData} path fabricJS parsed and simplified path commands\n * @param {TMat2D} transform matrix that represent the transformation\n * @param {Point} [pathOffset] `Path.pathOffset`\n * @returns {TSimplePathData} the transformed path\n */\nexport const transformPath = (\n  path: TSimplePathData,\n  transform: TMat2D,\n  pathOffset: Point,\n): TSimplePathData => {\n  if (pathOffset) {\n    transform = multiplyTransformMatrices(transform, [\n      1,\n      0,\n      0,\n      1,\n      -pathOffset.x,\n      -pathOffset.y,\n    ]);\n  }\n  return path.map((pathSegment) => {\n    const newSegment: TSimpleParsedCommand = [...pathSegment];\n    for (let i = 1; i < pathSegment.length - 1; i += 2) {\n      // TODO: is there a way to get around casting to any?\n      const { x, y } = transformPoint(\n        {\n          x: pathSegment[i] as number,\n          y: pathSegment[i + 1] as number,\n        },\n        transform,\n      );\n      newSegment[i] = x;\n      newSegment[i + 1] = y;\n    }\n    return newSegment;\n  });\n};\n\n/**\n * Returns an array of path commands to create a regular polygon\n * @param {number} numVertexes\n * @param {number} radius\n * @returns {TSimplePathData} An array of SVG path commands\n */\nexport const getRegularPolygonPath = (\n  numVertexes: number,\n  radius: number,\n): TSimplePathData => {\n  const interiorAngle = (Math.PI * 2) / numVertexes;\n  // rotationAdjustment rotates the path by 1/2 the interior angle so that the polygon always has a flat side on the bottom\n  // This isn't strictly necessary, but it's how we tend to think of and expect polygons to be drawn\n  let rotationAdjustment = -halfPI;\n  if (numVertexes % 2 === 0) {\n    rotationAdjustment += interiorAngle / 2;\n  }\n  const d = new Array(numVertexes + 1);\n  for (let i = 0; i < numVertexes; i++) {\n    const rad = i * interiorAngle + rotationAdjustment;\n    const { x, y } = new Point(cos(rad), sin(rad)).scalarMultiply(radius);\n    d[i] = [i === 0 ? 'M' : 'L', x, y];\n  }\n  d[numVertexes] = ['Z'];\n  return d;\n};\n\n/**\n * Join path commands to go back to svg format\n * @param {TSimplePathData} pathData fabricJS parsed path commands\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {String} joined path 'M 0 0 L 20 30'\n */\nexport const joinPath = (pathData: TSimplePathData, fractionDigits?: number) =>\n  pathData\n    .map((segment) => {\n      return segment\n        .map((arg, i) => {\n          if (i === 0) return arg;\n          return fractionDigits === undefined\n            ? arg\n            : toFixed(arg, fractionDigits);\n        })\n        .join(' ');\n    })\n    .join(' ');\n","/**\n * Returns random number between 2 specified ones.\n * @param {Number} min lower limit\n * @param {Number} max upper limit\n * @return {Number} random value (between min and max)\n */\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n","import { getFabricWindow } from '../../env';\nimport { noop } from '../../constants';\nimport type { Abortable } from '../../typedefs';\nimport { SignalAbortedError } from './console';\n\ntype requestOptions = Abortable & {\n  onComplete?: (xhr: XMLHttpRequest) => void;\n};\n\n/**\n * Cross-browser abstraction for sending XMLHttpRequest\n * @deprecated this has to go away, we can use a modern browser method to do the same.\n * @param {String} url URL to send XMLHttpRequest to\n * @param {Object} [options] Options object\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @param {Function} options.onComplete Callback to invoke when request is completed\n * @return {XMLHttpRequest} request\n */\n\nexport function request(url: string, options: requestOptions = {}) {\n  const onComplete = options.onComplete || noop,\n    xhr = new (getFabricWindow().XMLHttpRequest)(),\n    signal = options.signal,\n    abort = function () {\n      xhr.abort();\n    },\n    removeListener = function () {\n      signal && signal.removeEventListener('abort', abort);\n      xhr.onerror = xhr.ontimeout = noop;\n    };\n\n  if (signal && signal.aborted) {\n    throw new SignalAbortedError('request');\n  } else if (signal) {\n    signal.addEventListener('abort', abort, { once: true });\n  }\n\n  /** @ignore */\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      removeListener();\n      onComplete(xhr);\n      xhr.onreadystatechange = noop;\n    }\n  };\n\n  xhr.onerror = xhr.ontimeout = removeListener;\n\n  xhr.open('get', url, true);\n\n  xhr.send();\n  return xhr;\n}\n","import { CENTER, SCALE_X, SCALE_Y } from '../constants';\nimport type { FabricImage } from '../shapes/Image';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { qrDecompose } from './misc/matrix';\n\ntype FabricObjectWithTransformMatrix = FabricObject & {\n  transformMatrix?: TMat2D;\n};\n\n/**\n * This function is an helper for svg import. it decompose the transformMatrix\n * and assign properties to object.\n * untransformed coordinates\n * @private\n */\nexport const _assignTransformMatrixProps = (\n  object: FabricObjectWithTransformMatrix,\n) => {\n  if (object.transformMatrix) {\n    const { scaleX, scaleY, angle, skewX } = qrDecompose(\n      object.transformMatrix,\n    );\n    object.flipX = false;\n    object.flipY = false;\n    object.set(SCALE_X, scaleX);\n    object.set(SCALE_Y, scaleY);\n    object.angle = angle;\n    object.skewX = skewX;\n    object.skewY = 0;\n  }\n};\n\n/**\n * This function is an helper for svg import. it removes the transform matrix\n * and set to object properties that fabricjs can handle\n * @private\n * @param {Object} preserveAspectRatioOptions\n */\nexport const removeTransformMatrixForSvgParsing = (\n  object: FabricObjectWithTransformMatrix,\n  preserveAspectRatioOptions?: any,\n) => {\n  let center = object._findCenterFromElement();\n  if (object.transformMatrix) {\n    _assignTransformMatrixProps(object);\n    center = center.transform(object.transformMatrix);\n  }\n  delete object.transformMatrix;\n  if (preserveAspectRatioOptions) {\n    object.scaleX *= preserveAspectRatioOptions.scaleX;\n    object.scaleY *= preserveAspectRatioOptions.scaleY;\n    (object as FabricImage).cropX = preserveAspectRatioOptions.cropX;\n    (object as FabricImage).cropY = preserveAspectRatioOptions.cropY;\n    center.x += preserveAspectRatioOptions.offsetLeft;\n    center.y += preserveAspectRatioOptions.offsetTop;\n    object.width = preserveAspectRatioOptions.width;\n    object.height = preserveAspectRatioOptions.height;\n  }\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n","import type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { sendObjectToPlane } from './planeChange';\nimport { Group } from '../../shapes/Group';\n/**\n * Merges 2 clip paths into one visually equal clip path\n *\n * **IMPORTANT**:\\\n * Does **NOT** clone the arguments, clone them proir if necessary.\n *\n * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n *\n * In order to handle the `inverted` property we follow logic described in the following cases:\\\n * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n *\n * @memberOf fabric.util\n * @param {fabric.Object} c1\n * @param {fabric.Object} c2\n * @returns {fabric.Object} merged clip path\n */\nexport const mergeClipPaths = (c1: FabricObject, c2: FabricObject) => {\n  let a = c1,\n    b = c2;\n  if (a.inverted && !b.inverted) {\n    //  case (2)\n    a = c2;\n    b = c1;\n  }\n  //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n  sendObjectToPlane(b, b.group?.calcTransformMatrix(), a.calcTransformMatrix());\n  //  assign the `inverted` prop to the wrapping group\n  const inverted = a.inverted && b.inverted;\n  if (inverted) {\n    //  case (1)\n    a.inverted = b.inverted = false;\n  }\n  return new Group([a], { clipPath: b, inverted });\n};\n","// TODO this file needs to go away, cross browser style support is not fabricjs domain.\n\n/**\n * wrapper for setting element's style\n * @param {HTMLElement} element an HTMLElement\n * @param {Object} styles to apply to element\n */\nexport function setStyle(element: HTMLElement, styles: Record<string, string>) {\n  const elementStyle = element.style;\n  if (!elementStyle) {\n    return;\n  }\n  Object.entries(styles).forEach(([property, value]) =>\n    elementStyle.setProperty(property, value),\n  );\n}\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport { createCanvasElement } from '../../util/misc/dom';\nimport { setStyle } from '../../util/internals/dom_style';\nimport type { CSSDimensions } from './util';\nimport { makeElementUnselectable, setCSSDimensions } from './util';\nimport type { CanvasItem } from './StaticCanvasDOMManager';\nimport { StaticCanvasDOMManager } from './StaticCanvasDOMManager';\nimport { setCanvasDimensions } from './util';\nimport { NONE } from '../../constants';\n\nexport class CanvasDOMManager extends StaticCanvasDOMManager {\n  upper: CanvasItem;\n  container: HTMLDivElement;\n\n  constructor(\n    arg0?: string | HTMLCanvasElement,\n    {\n      allowTouchScrolling = false,\n      containerClass = '',\n    }: {\n      allowTouchScrolling?: boolean;\n      /**\n       * @deprecated here only for backward compatibility\n       */\n      containerClass?: string;\n    } = {},\n  ) {\n    super(arg0);\n    const { el: lowerCanvasEl } = this.lower;\n    const upperCanvasEl = this.createUpperCanvas();\n    this.upper = { el: upperCanvasEl, ctx: upperCanvasEl.getContext('2d')! };\n    this.applyCanvasStyle(lowerCanvasEl, {\n      allowTouchScrolling,\n    });\n    this.applyCanvasStyle(upperCanvasEl, {\n      allowTouchScrolling,\n      styles: {\n        position: 'absolute',\n        left: '0',\n        top: '0',\n      },\n    });\n    const container = this.createContainerElement();\n    container.classList.add(containerClass);\n    if (lowerCanvasEl.parentNode) {\n      lowerCanvasEl.parentNode.replaceChild(container, lowerCanvasEl);\n    }\n    container.append(lowerCanvasEl, upperCanvasEl);\n    this.container = container;\n  }\n\n  protected createUpperCanvas() {\n    const { el: lowerCanvasEl } = this.lower;\n    const el = createCanvasElement();\n    // we assign the same classname of the lowerCanvas\n    el.className = lowerCanvasEl.className;\n    // but then we remove the lower-canvas specific className\n    el.classList.remove('lower-canvas');\n    // we add the specific upper-canvas class\n    el.classList.add('upper-canvas');\n    el.setAttribute('data-fabric', 'top');\n    el.style.cssText = lowerCanvasEl.style.cssText;\n    el.setAttribute('draggable', 'true');\n    return el;\n  }\n\n  protected createContainerElement() {\n    const container = getFabricDocument().createElement('div');\n    container.setAttribute('data-fabric', 'wrapper');\n    setStyle(container, {\n      position: 'relative',\n    });\n    makeElementUnselectable(container);\n    return container;\n  }\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} element canvas element to apply styles on\n   */\n  protected applyCanvasStyle(\n    element: HTMLCanvasElement,\n    options: {\n      allowTouchScrolling?: boolean;\n      styles?: Record<string, string>;\n    },\n  ) {\n    const { styles, allowTouchScrolling } = options;\n    setStyle(element, {\n      ...styles,\n      'touch-action': allowTouchScrolling ? 'manipulation' : NONE,\n    });\n    makeElementUnselectable(element);\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    super.setDimensions(size, retinaScaling);\n    const { el, ctx } = this.upper;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>): void {\n    super.setCSSDimensions(size);\n    setCSSDimensions(this.upper.el, size);\n    setCSSDimensions(this.container, size);\n  }\n\n  cleanupDOM(size: TSize) {\n    const container = this.container,\n      { el: lowerCanvasEl } = this.lower,\n      { el: upperCanvasEl } = this.upper;\n    super.cleanupDOM(size);\n    container.removeChild(upperCanvasEl);\n    container.removeChild(lowerCanvasEl);\n    if (container.parentNode) {\n      container.parentNode.replaceChild(lowerCanvasEl, container);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    getEnv().dispose(this.upper.el);\n    // @ts-expect-error disposing\n    delete this.upper;\n    // @ts-expect-error disposing\n    delete this.container;\n  }\n}\n","import { dragHandler } from '../controls/drag';\nimport { getActionFromCorner } from '../controls/util';\nimport { Point } from '../Point';\nimport { FabricObject } from '../shapes/Object/FabricObject';\nimport type {\n  CanvasEvents,\n  ModifierKey,\n  TOptionalModifierKey,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport {\n  addTransformToObject,\n  saveObjectTransform,\n} from '../util/misc/objectTransforms';\nimport type { TCanvasSizeOptions } from './StaticCanvas';\nimport { StaticCanvas } from './StaticCanvas';\nimport { isCollection } from '../Collection';\nimport { isTransparent } from '../util/misc/isTransparent';\nimport type {\n  TMat2D,\n  TOriginX,\n  TOriginY,\n  TSize,\n  TSVGReviver,\n} from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { getPointer, isTouchEvent } from '../util/dom_event';\nimport type { IText } from '../shapes/IText/IText';\nimport type { BaseBrush } from '../brushes/BaseBrush';\nimport { pick } from '../util/misc/pick';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { cos, createCanvasElement, sin } from '../util';\nimport { CanvasDOMManager } from './DOMManagers/CanvasDOMManager';\nimport {\n  BOTTOM,\n  CENTER,\n  LEFT,\n  MODIFIED,\n  RESIZING,\n  RIGHT,\n  ROTATE,\n  SCALE,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CanvasOptions } from './CanvasOptions';\nimport { canvasDefaults } from './CanvasOptions';\nimport { Intersection } from '../Intersection';\nimport { isActiveSelection } from '../util/typeAssertions';\n\n/**\n * Canvas class\n * @class Canvas\n * @extends StaticCanvas\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n *\n * @fires object:modified at the end of a transform\n * @fires object:rotating while an object is being rotated from the control\n * @fires object:scaling while an object is being scaled by controls\n * @fires object:moving while an object is being dragged\n * @fires object:skewing while an object is being skewed from the controls\n *\n * @fires before:transform before a transform is is started\n * @fires before:selection:cleared\n * @fires selection:cleared\n * @fires selection:updated\n * @fires selection:created\n *\n * @fires path:created after a drawing operation ends and the path is added\n * @fires mouse:down\n * @fires mouse:move\n * @fires mouse:up\n * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n * @fires mouse:over\n * @fires mouse:out\n * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drag:enter object drag enter\n * @fires drag:leave object drag leave\n * @fires drop:before before drop event. Prepare for the drop event (same native event).\n * @fires drop\n * @fires drop:after after drop event. Run logic on canvas after event has been accepted/declined (same native event).\n * @example\n * let a: fabric.Object, b: fabric.Object;\n * let flag = false;\n * canvas.add(a, b);\n * a.on('drop:before', opt => {\n *  //  we want a to accept the drop even though it's below b in the stack\n *  flag = this.canDrop(opt.e);\n * });\n * b.canDrop = function(e) {\n *  !flag && this.draggableTextDelegate.canDrop(e);\n * }\n * b.on('dragover', opt => b.set('fill', opt.dropTarget === b ? 'pink' : 'black'));\n * a.on('drop', opt => {\n *  opt.e.defaultPrevented  //  drop occurred\n *  opt.didDrop             //  drop occurred on canvas\n *  opt.target              //  drop target\n *  opt.target !== a && a.set('text', 'I lost');\n * });\n * canvas.on('drop:after', opt => {\n *  //  inform user who won\n *  if(!opt.e.defaultPrevented) {\n *    // no winners\n *  }\n *  else if(!opt.didDrop) {\n *    //  my objects didn't win, some other lucky object\n *  }\n *  else {\n *    //  we have a winner it's opt.target!!\n *  }\n * })\n *\n * @fires after:render at the end of the render process, receives the context in the callback\n * @fires before:render at start the render process, receives the context in the callback\n *\n * @fires contextmenu:before\n * @fires contextmenu\n * @example\n * let handler;\n * targets.forEach(target => {\n *   target.on('contextmenu:before', opt => {\n *     //  decide which target should handle the event before canvas hijacks it\n *     if (someCaseHappens && opt.targets.includes(target)) {\n *       handler = target;\n *     }\n *   });\n *   target.on('contextmenu', opt => {\n *     //  do something fantastic\n *   });\n * });\n * canvas.on('contextmenu', opt => {\n *   if (!handler) {\n *     //  no one takes responsibility, it's always left to me\n *     //  let's show them how it's done!\n *   }\n * });\n *\n */\nexport class SelectableCanvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends StaticCanvas<EventSpec>\n  implements Omit<CanvasOptions, 'enablePointerEvents'>\n{\n  declare _objects: FabricObject[];\n\n  // transform config\n  declare uniformScaling: boolean;\n  declare uniScaleKey: TOptionalModifierKey;\n  declare centeredScaling: boolean;\n  declare centeredRotation: boolean;\n  declare centeredKey: TOptionalModifierKey;\n  declare altActionKey: TOptionalModifierKey;\n\n  // selection config\n  declare selection: boolean;\n  declare selectionKey: TOptionalModifierKey | ModifierKey[];\n  declare altSelectionKey: TOptionalModifierKey;\n  declare selectionColor: string;\n  declare selectionDashArray: number[];\n  declare selectionBorderColor: string;\n  declare selectionLineWidth: number;\n  declare selectionFullyContained: boolean;\n\n  // cursors\n  declare hoverCursor: CSSStyleDeclaration['cursor'];\n  declare moveCursor: CSSStyleDeclaration['cursor'];\n  declare defaultCursor: CSSStyleDeclaration['cursor'];\n  declare freeDrawingCursor: CSSStyleDeclaration['cursor'];\n  declare notAllowedCursor: CSSStyleDeclaration['cursor'];\n\n  declare containerClass: string;\n\n  // target find config\n  declare perPixelTargetFind: boolean;\n  declare targetFindTolerance: number;\n  declare skipTargetFind: boolean;\n\n  /**\n   * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n   * After mousedown, mousemove creates a shape,\n   * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n   * @type Boolean\n   * @default\n   */\n  declare isDrawingMode: boolean;\n\n  declare preserveObjectStacking: boolean;\n\n  // event config\n  declare stopContextMenu: boolean;\n  declare fireRightClick: boolean;\n  declare fireMiddleClick: boolean;\n\n  /**\n   * Keep track of the subTargets for Mouse Events, ordered bottom up from innermost nested subTarget\n   * @type FabricObject[]\n   */\n  targets: FabricObject[] = [];\n\n  /**\n   * Keep track of the hovered target\n   * @type FabricObject | null\n   * @private\n   */\n  declare _hoveredTarget?: FabricObject;\n\n  /**\n   * hold the list of nested targets hovered\n   * @type FabricObject[]\n   * @private\n   */\n  _hoveredTargets: FabricObject[] = [];\n\n  /**\n   * hold the list of objects to render\n   * @type FabricObject[]\n   * @private\n   */\n  _objectsToRender?: FabricObject[];\n\n  /**\n   * hold a reference to a data structure that contains information\n   * on the current on going transform\n   * @type\n   * @private\n   */\n  _currentTransform: Transform | null = null;\n\n  /**\n   * hold a reference to a data structure used to track the selection\n   * box on canvas drag\n   * on the current on going transform\n   * x, y, deltaX and deltaY are in scene plane\n   * @type\n   * @private\n   */\n  protected _groupSelector: {\n    x: number;\n    y: number;\n    deltaX: number;\n    deltaY: number;\n  } | null = null;\n\n  /**\n   * internal flag used to understand if the context top requires a cleanup\n   * in case this is true, the contextTop will be cleared at the next render\n   * @type boolean\n   * @private\n   */\n  contextTopDirty = false;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _scenePoint holds a reference to the pointer in fabricCanvas/design coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  declare protected _scenePoint?: Point;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _viewportPoint holds a reference to the pointer in html coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  declare protected _viewportPoint?: Point;\n\n  /**\n   * During a mouse event we may need the target multiple times in multiple functions.\n   * _target holds a reference to the target that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * @type {FabricObject}\n   */\n  declare protected _target?: FabricObject;\n\n  static ownDefaults = canvasDefaults;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...SelectableCanvas.ownDefaults };\n  }\n\n  declare elements: CanvasDOMManager;\n  get upperCanvasEl() {\n    return this.elements.upper?.el;\n  }\n  get contextTop() {\n    return this.elements.upper?.ctx;\n  }\n  get wrapperEl() {\n    return this.elements.container;\n  }\n  declare private pixelFindCanvasEl: HTMLCanvasElement;\n  declare private pixelFindContext: CanvasRenderingContext2D;\n\n  declare protected _isCurrentlyDrawing: boolean;\n  declare freeDrawingBrush?: BaseBrush;\n  declare _activeObject?: FabricObject;\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new CanvasDOMManager(el, {\n      allowTouchScrolling: this.allowTouchScrolling,\n      containerClass: this.containerClass,\n    });\n    this._createCacheCanvas();\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was added\n   */\n  _onObjectAdded(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    super._onObjectAdded(obj);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was removed\n   */\n  _onObjectRemoved(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    // removing active object should fire \"selection:cleared\" events\n    if (obj === this._activeObject) {\n      this.fire('before:selection:cleared', { deselected: [obj] });\n      this._discardActiveObject();\n      this.fire('selection:cleared', { deselected: [obj] });\n      obj.fire('deselected', {\n        target: obj,\n      });\n    }\n    if (obj === this._hoveredTarget) {\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n    super._onObjectRemoved(obj);\n  }\n\n  _onStackOrderChanged() {\n    this._objectsToRender = undefined;\n    super._onStackOrderChanged();\n  }\n\n  /**\n   * Divides objects in two groups, one to render immediately\n   * and one to render as activeGroup.\n   * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n   */\n  _chooseObjectsToRender(): FabricObject[] {\n    const activeObject = this._activeObject;\n    return !this.preserveObjectStacking && activeObject\n      ? this._objects\n          .filter((object) => !object.group && object !== activeObject)\n          .concat(activeObject)\n      : this._objects;\n  }\n\n  /**\n   * Renders both the top canvas and the secondary container canvas.\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n      this.clearContext(this.contextTop);\n      this.contextTopDirty = false;\n    }\n    if (this.hasLostContext) {\n      this.renderTopLayer(this.contextTop);\n      this.hasLostContext = false;\n    }\n    !this._objectsToRender &&\n      (this._objectsToRender = this._chooseObjectsToRender());\n    this.renderCanvas(this.getContext(), this._objectsToRender);\n  }\n\n  /**\n   * text selection is rendered by the active text instance during the rendering cycle\n   */\n  renderTopLayer(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this.freeDrawingBrush && this.freeDrawingBrush._render();\n      this.contextTopDirty = true;\n    }\n    // we render the top context - last object\n    if (this.selection && this._groupSelector) {\n      this._drawSelection(ctx);\n      this.contextTopDirty = true;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Method to render only the top canvas.\n   * Also used to render the group selection box.\n   * Does not render text selection.\n   */\n  renderTop() {\n    const ctx = this.contextTop;\n    this.clearContext(ctx);\n    this.renderTopLayer(ctx);\n    // todo: how do i know if the after:render is for the top or normal contex?\n    this.fire('after:render', { ctx });\n  }\n\n  /**\n   * Set the canvas tolerance value for pixel taret find.\n   * Use only integer numbers.\n   * @private\n   */\n  setTargetFindTolerance(value: number) {\n    value = Math.round(value);\n    this.targetFindTolerance = value;\n    const retina = this.getRetinaScaling();\n    const size = Math.ceil((value * 2 + 1) * retina);\n    this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = size;\n    this.pixelFindContext.scale(retina, retina);\n  }\n\n  /**\n   * Returns true if object is transparent at a certain location\n   * Clarification: this is `is target transparent at location X or are controls there`\n   * @TODO this seems dumb that we treat controls with transparency. we can find controls\n   * programmatically without painting them, the cache canvas optimization is always valid\n   * @param {FabricObject} target Object to check\n   * @param {Number} x Left coordinate in viewport space\n   * @param {Number} y Top coordinate in viewport space\n   * @return {Boolean}\n   */\n  isTargetTransparent(target: FabricObject, x: number, y: number): boolean {\n    const tolerance = this.targetFindTolerance;\n    const ctx = this.pixelFindContext;\n    this.clearContext(ctx);\n    ctx.save();\n    ctx.translate(-x + tolerance, -y + tolerance);\n    ctx.transform(...this.viewportTransform);\n    const selectionBgc = target.selectionBackgroundColor;\n    target.selectionBackgroundColor = '';\n    target.render(ctx);\n    target.selectionBackgroundColor = selectionBgc;\n    ctx.restore();\n    // our canvas is square, and made around tolerance.\n    // so tolerance in this case also represent the center of the canvas.\n    const enhancedTolerance = Math.round(tolerance * this.getRetinaScaling());\n    return isTransparent(\n      ctx,\n      enhancedTolerance,\n      enhancedTolerance,\n      enhancedTolerance,\n    );\n  }\n\n  /**\n   * takes an event and determines if selection key has been pressed\n   * @private\n   * @param {TPointerEvent} e Event object\n   */\n  _isSelectionKeyPressed(e: TPointerEvent): boolean {\n    const sKey = this.selectionKey;\n    if (!sKey) {\n      return false;\n    }\n    if (Array.isArray(sKey)) {\n      return !!sKey.find((key) => !!key && e[key] === true);\n    } else {\n      return e[sKey];\n    }\n  }\n\n  /**\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target\n   */\n  _shouldClearSelection(\n    e: TPointerEvent,\n    target?: FabricObject,\n  ): target is undefined {\n    const activeObjects = this.getActiveObjects(),\n      activeObject = this._activeObject;\n\n    return !!(\n      !target ||\n      (target &&\n        activeObject &&\n        activeObjects.length > 1 &&\n        activeObjects.indexOf(target) === -1 &&\n        activeObject !== target &&\n        !this._isSelectionKeyPressed(e)) ||\n      (target && !target.evented) ||\n      (target && !target.selectable && activeObject && activeObject !== target)\n    );\n  }\n\n  /**\n   * This method will take in consideration a modifier key pressed and the control we are\n   * about to drag, and try to guess the anchor point ( origin ) of the transormation.\n   * This should be really in the realm of controls, and we should remove specific code for legacy\n   * embedded actions.\n   * @TODO this probably deserve discussion/rediscovery and change/refactor\n   * @private\n   * @deprecated\n   * @param {FabricObject} target\n   * @param {string} action\n   * @param {boolean} altKey\n   * @returns {boolean} true if the transformation should be centered\n   */\n  private _shouldCenterTransform(\n    target: FabricObject,\n    action: string,\n    modifierKeyPressed: boolean,\n  ) {\n    if (!target) {\n      return;\n    }\n\n    let centerTransform;\n\n    if (\n      action === SCALE ||\n      action === SCALE_X ||\n      action === SCALE_Y ||\n      action === RESIZING\n    ) {\n      centerTransform = this.centeredScaling || target.centeredScaling;\n    } else if (action === ROTATE) {\n      centerTransform = this.centeredRotation || target.centeredRotation;\n    }\n\n    return centerTransform ? !modifierKeyPressed : modifierKeyPressed;\n  }\n\n  /**\n   * Given the control clicked, determine the origin of the transform.\n   * This is bad because controls can totally have custom names\n   * should disappear before release 4.0\n   * @private\n   * @deprecated\n   */\n  _getOriginFromCorner(\n    target: FabricObject,\n    controlName: string,\n  ): { x: TOriginX; y: TOriginY } {\n    const origin = {\n      x: target.originX,\n      y: target.originY,\n    };\n\n    if (!controlName) {\n      return origin;\n    }\n\n    // is a left control ?\n    if (['ml', 'tl', 'bl'].includes(controlName)) {\n      origin.x = RIGHT;\n      // is a right control ?\n    } else if (['mr', 'tr', 'br'].includes(controlName)) {\n      origin.x = LEFT;\n    }\n    // is a top control ?\n    if (['tl', 'mt', 'tr'].includes(controlName)) {\n      origin.y = BOTTOM;\n      // is a bottom control ?\n    } else if (['bl', 'mb', 'br'].includes(controlName)) {\n      origin.y = TOP;\n    }\n    return origin;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @param {FabricObject} target\n   * @param {boolean} [alreadySelected] pass true to setup the active control\n   */\n  _setupCurrentTransform(\n    e: TPointerEvent,\n    target: FabricObject,\n    alreadySelected: boolean,\n  ): void {\n    const pointer = target.group\n      ? // transform pointer to target's containing coordinate plane\n        sendPointToPlane(\n          this.getScenePoint(e),\n          undefined,\n          target.group.calcTransformMatrix(),\n        )\n      : this.getScenePoint(e);\n    const { key: corner = '', control } = target.getActiveControl() || {},\n      actionHandler =\n        alreadySelected && control\n          ? control.getActionHandler(e, target, control)?.bind(control)\n          : dragHandler,\n      action = getActionFromCorner(alreadySelected, corner, e, target),\n      altKey = e[this.centeredKey as ModifierKey],\n      origin = this._shouldCenterTransform(target, action, altKey)\n        ? ({ x: CENTER, y: CENTER } as const)\n        : this._getOriginFromCorner(target, corner),\n      /**\n       * relative to target's containing coordinate plane\n       * both agree on every point\n       **/\n      transform: Transform = {\n        target: target,\n        action,\n        actionHandler,\n        actionPerformed: false,\n        corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        theta: degreesToRadians(target.angle),\n        width: target.width,\n        height: target.height,\n        shiftKey: e.shiftKey,\n        altKey,\n        original: {\n          ...saveObjectTransform(target),\n          originX: origin.x,\n          originY: origin.y,\n        },\n      };\n\n    this._currentTransform = transform;\n\n    this.fire('before:transform', {\n      e,\n      transform,\n    });\n  }\n\n  /**\n   * Set the cursor type of the canvas element\n   * @param {String} value Cursor type of the canvas element.\n   * @see http://www.w3.org/TR/css3-ui/#cursor\n   */\n  setCursor(value: CSSStyleDeclaration['cursor']): void {\n    this.upperCanvasEl.style.cursor = value;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx to draw the selection on\n   */\n  _drawSelection(ctx: CanvasRenderingContext2D): void {\n    const { x, y, deltaX, deltaY } = this._groupSelector!,\n      start = new Point(x, y).transform(this.viewportTransform),\n      extent = new Point(x + deltaX, y + deltaY).transform(\n        this.viewportTransform,\n      ),\n      strokeOffset = this.selectionLineWidth / 2;\n    let minX = Math.min(start.x, extent.x),\n      minY = Math.min(start.y, extent.y),\n      maxX = Math.max(start.x, extent.x),\n      maxY = Math.max(start.y, extent.y);\n\n    if (this.selectionColor) {\n      ctx.fillStyle = this.selectionColor;\n      ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n    }\n\n    if (!this.selectionLineWidth || !this.selectionBorderColor) {\n      return;\n    }\n    ctx.lineWidth = this.selectionLineWidth;\n    ctx.strokeStyle = this.selectionBorderColor;\n\n    minX += strokeOffset;\n    minY += strokeOffset;\n    maxX -= strokeOffset;\n    maxY -= strokeOffset;\n    // selection border\n    // @TODO: is _setLineDash still necessary on modern canvas?\n    FabricObject.prototype._setLineDash.call(\n      this,\n      ctx,\n      this.selectionDashArray,\n    );\n    ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  /**\n   * Method that determines what object we are clicking on\n   * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n   * or the outside part of the corner.\n   * @param {Event} e mouse event\n   * @return {FabricObject | null} the target found\n   */\n  findTarget(e: TPointerEvent): FabricObject | undefined {\n    if (this.skipTargetFind) {\n      return undefined;\n    }\n\n    const pointer = this.getViewportPoint(e),\n      activeObject = this._activeObject,\n      aObjects = this.getActiveObjects();\n\n    this.targets = [];\n\n    if (activeObject && aObjects.length >= 1) {\n      if (activeObject.findControl(pointer, isTouchEvent(e))) {\n        // if we hit the corner of the active object, let's return that.\n        return activeObject;\n      } else if (\n        aObjects.length > 1 &&\n        // check pointer is over active selection and possibly perform `subTargetCheck`\n        this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active selection does not select sub targets like normal groups\n        return activeObject;\n      } else if (\n        activeObject === this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active object is not an active selection\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        } else {\n          const subTargets = this.targets;\n          this.targets = [];\n          const target = this.searchPossibleTargets(this._objects, pointer);\n          if (\n            e[this.altSelectionKey as ModifierKey] &&\n            target &&\n            target !== activeObject\n          ) {\n            // alt selection: select active object even though it is not the top most target\n            // restore targets\n            this.targets = subTargets;\n            return activeObject;\n          }\n          return target;\n        }\n      }\n    }\n\n    return this.searchPossibleTargets(this._objects, pointer);\n  }\n\n  /**\n   * Checks if the point is inside the object selection area including padding\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point in scene coordinates\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  private _pointIsInObjectSelectionArea(obj: FabricObject, point: Point) {\n    // getCoords will already take care of group de-nesting\n    let coords = obj.getCoords();\n    const viewportZoom = this.getZoom();\n    const padding = obj.padding / viewportZoom;\n    if (padding) {\n      const [tl, tr, br, bl] = coords;\n      // what is the angle of the object?\n      // we could use getTotalAngle, but is way easier to look at it\n      // from how coords are oriented, since if something went wrong\n      // at least we are consistent.\n      const angleRadians = Math.atan2(tr.y - tl.y, tr.x - tl.x),\n        cosP = cos(angleRadians) * padding,\n        sinP = sin(angleRadians) * padding,\n        cosPSinP = cosP + sinP,\n        cosPMinusSinP = cosP - sinP;\n\n      coords = [\n        new Point(tl.x - cosPMinusSinP, tl.y - cosPSinP),\n        new Point(tr.x + cosPSinP, tr.y - cosPMinusSinP),\n        new Point(br.x + cosPMinusSinP, br.y + cosPSinP),\n        new Point(bl.x - cosPSinP, bl.y + cosPMinusSinP),\n      ];\n      // in case of padding we calculate the new coords on the fly.\n      // otherwise we have to maintain 2 sets of coordinates for everything.\n      // we can reiterate on storing them.\n      // if this is slow, for now the semplification is large and doesn't impact\n      // rendering.\n      // the idea behind this is that outside target check we don't need ot know\n      // where those coords are\n    }\n    return Intersection.isPointInPolygon(point, coords);\n  }\n\n  /**\n   * Checks point is inside the object selection condition. Either area with padding\n   * or over pixels if perPixelTargetFind is enabled\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point from viewport.\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  _checkTarget(obj: FabricObject, pointer: Point): boolean {\n    if (\n      obj &&\n      obj.visible &&\n      obj.evented &&\n      this._pointIsInObjectSelectionArea(\n        obj,\n        sendPointToPlane(pointer, undefined, this.viewportTransform),\n      )\n    ) {\n      if (\n        (this.perPixelTargetFind || obj.perPixelTargetFind) &&\n        !(obj as unknown as IText).isEditing\n      ) {\n        if (!this.isTargetTransparent(obj, pointer.x, pointer.y)) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Internal Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @param {Array} [objects] objects array to look into\n   * @param {Object} [pointer] x,y object of point coordinates we want to check.\n   * @return {FabricObject} **top most object from given `objects`** that contains pointer\n   * @private\n   */\n  _searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    // Cache all targets where their bounding box contains point.\n    let i = objects.length;\n    // Do not check for currently grouped objects, since we check the parent group itself.\n    // until we call this function specifically to search inside the activeGroup\n    while (i--) {\n      const target = objects[i];\n      if (this._checkTarget(target, pointer)) {\n        if (isCollection(target) && target.subTargetCheck) {\n          const subTarget = this._searchPossibleTargets(\n            target._objects,\n            pointer,\n          );\n          subTarget && this.targets.push(subTarget);\n        }\n        return target;\n      }\n    }\n  }\n\n  /**\n   * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @see {@link _searchPossibleTargets}\n   * @param {FabricObject[]} [objects] objects array to look into\n   * @param {Point} [pointer] coordinates from viewport to check.\n   * @return {FabricObject} **top most object on screen** that contains pointer\n   */\n  searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    const target = this._searchPossibleTargets(objects, pointer);\n\n    // if we found something in this.targets, and the group is interactive, return the innermost subTarget\n    // that is still interactive\n    // TODO: reverify why interactive. the target should be returned always, but selected only\n    // if interactive.\n    if (\n      target &&\n      isCollection(target) &&\n      target.interactive &&\n      this.targets[0]\n    ) {\n      /** targets[0] is the innermost nested target, but it could be inside non interactive groups and so not a selection target */\n      const targets = this.targets;\n      for (let i = targets.length - 1; i > 0; i--) {\n        const t = targets[i];\n        if (!(isCollection(t) && t.interactive)) {\n          // one of the subtargets was not interactive. that is the last subtarget we can return.\n          // we can't dig more deep;\n          return t;\n        }\n      }\n      return targets[0];\n    }\n\n    return target;\n  }\n\n  /**\n   * @returns point existing in the same plane as the {@link HTMLCanvasElement},\n   * `(0, 0)` being the top left corner of the {@link HTMLCanvasElement}.\n   * This means that changes to the {@link viewportTransform} do not change the values of the point\n   * and it remains unchanged from the viewer's perspective.\n   *\n   * @example\n   * const scenePoint = sendPointToPlane(\n   *  this.getViewportPoint(e),\n   *  undefined,\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getViewportPoint(e: TPointerEvent) {\n    if (this._viewportPoint) {\n      return this._viewportPoint;\n    }\n    return this._getPointerImpl(e, true);\n  }\n\n  /**\n   * @returns point existing in the scene (the same plane as the plane {@link FabricObject#getCenterPoint} exists in).\n   * This means that changes to the {@link viewportTransform} do not change the values of the point,\n   * however, from the viewer's perspective, the point is changed.\n   *\n   * @example\n   * const viewportPoint = sendPointToPlane(\n   *  this.getScenePoint(e),\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getScenePoint(e: TPointerEvent) {\n    if (this._scenePoint) {\n      return this._scenePoint;\n    }\n    return this._getPointerImpl(e);\n  }\n\n  /**\n   * Returns pointer relative to canvas.\n   *\n   * Use {@link getViewportPoint} or {@link getScenePoint} instead.\n   *\n   * @param {Event} e\n   * @param {Boolean} [fromViewport] whether to return the point from the viewport or in the scene\n   * @return {Point}\n   */\n  protected _getPointerImpl(e: TPointerEvent, fromViewport = false): Point {\n    const upperCanvasEl = this.upperCanvasEl,\n      bounds = upperCanvasEl.getBoundingClientRect();\n    let pointer = getPointer(e),\n      boundsWidth = bounds.width || 0,\n      boundsHeight = bounds.height || 0;\n\n    if (!boundsWidth || !boundsHeight) {\n      if (TOP in bounds && BOTTOM in bounds) {\n        boundsHeight = Math.abs(bounds.top - bounds.bottom);\n      }\n      if (RIGHT in bounds && LEFT in bounds) {\n        boundsWidth = Math.abs(bounds.right - bounds.left);\n      }\n    }\n\n    this.calcOffset();\n    pointer.x = pointer.x - this._offset.left;\n    pointer.y = pointer.y - this._offset.top;\n    if (!fromViewport) {\n      pointer = sendPointToPlane(pointer, undefined, this.viewportTransform);\n    }\n\n    const retinaScaling = this.getRetinaScaling();\n    if (retinaScaling !== 1) {\n      pointer.x /= retinaScaling;\n      pointer.y /= retinaScaling;\n    }\n\n    // If bounds are not available (i.e. not visible), do not apply scale.\n    const cssScale =\n      boundsWidth === 0 || boundsHeight === 0\n        ? new Point(1, 1)\n        : new Point(\n            upperCanvasEl.width / boundsWidth,\n            upperCanvasEl.height / boundsHeight,\n          );\n\n    return pointer.multiply(cssScale);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: TSize,\n    options?: TCanvasSizeOptions,\n  ) {\n    // @ts-expect-error this method exists in the subclass - should be moved or declared as abstract\n    this._resetTransformEventData();\n    super._setDimensionsImpl(dimensions, options);\n    if (this._isCurrentlyDrawing) {\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n  }\n\n  protected _createCacheCanvas() {\n    this.pixelFindCanvasEl = createCanvasElement();\n    this.pixelFindContext = this.pixelFindCanvasEl.getContext('2d', {\n      willReadFrequently: true,\n    })!;\n    this.setTargetFindTolerance(this.targetFindTolerance);\n  }\n\n  /**\n   * Returns context of top canvas where interactions are drawn\n   * @returns {CanvasRenderingContext2D}\n   */\n  getTopContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns context of canvas where object selection is drawn\n   * @alias\n   * @return {CanvasRenderingContext2D}\n   */\n  getSelectionContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns &lt;canvas> element on which object selection is drawn\n   * @return {HTMLCanvasElement}\n   */\n  getSelectionElement(): HTMLCanvasElement {\n    return this.elements.upper.el;\n  }\n\n  /**\n   * Returns currently active object\n   * @return {FabricObject | null} active object\n   */\n  getActiveObject(): FabricObject | undefined {\n    return this._activeObject;\n  }\n\n  /**\n   * Returns an array with the current selected objects\n   * @return {FabricObject[]} active objects array\n   */\n  getActiveObjects(): FabricObject[] {\n    const active = this._activeObject;\n    return isActiveSelection(active)\n      ? active.getObjects()\n      : active\n        ? [active]\n        : [];\n  }\n\n  /**\n   * @private\n   * Compares the old activeObject with the current one and fires correct events\n   * @param {FabricObject[]} oldObjects old activeObject\n   * @param {TPointerEvent} e mouse event triggering the selection events\n   */\n  _fireSelectionEvents(oldObjects: FabricObject[], e?: TPointerEvent) {\n    let somethingChanged = false,\n      invalidate = false;\n    const objects = this.getActiveObjects(),\n      added: FabricObject[] = [],\n      removed: FabricObject[] = [];\n\n    oldObjects.forEach((target) => {\n      if (!objects.includes(target)) {\n        somethingChanged = true;\n        target.fire('deselected', {\n          e,\n          target,\n        });\n        removed.push(target);\n      }\n    });\n\n    objects.forEach((target) => {\n      if (!oldObjects.includes(target)) {\n        somethingChanged = true;\n        target.fire('selected', {\n          e,\n          target,\n        });\n        added.push(target);\n      }\n    });\n\n    if (oldObjects.length > 0 && objects.length > 0) {\n      invalidate = true;\n      somethingChanged &&\n        this.fire('selection:updated', {\n          e,\n          selected: added,\n          deselected: removed,\n        });\n    } else if (objects.length > 0) {\n      invalidate = true;\n      this.fire('selection:created', {\n        e,\n        selected: added,\n      });\n    } else if (oldObjects.length > 0) {\n      invalidate = true;\n      this.fire('selection:cleared', {\n        e,\n        deselected: removed,\n      });\n    }\n    invalidate && (this._objectsToRender = undefined);\n  }\n\n  /**\n   * Sets given object as the only active object on canvas\n   * @param {FabricObject} object Object to set as an active one\n   * @param {TPointerEvent} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    // we can't inline this, since _setActiveObject will change what getActiveObjects returns\n    const currentActives = this.getActiveObjects();\n    const selected = this._setActiveObject(object, e);\n    this._fireSelectionEvents(currentActives, e);\n    return selected;\n  }\n\n  /**\n   * This is supposed to be equivalent to setActiveObject but without firing\n   * any event. There is commitment to have this stay this way.\n   * This is the functional part of setActiveObject.\n   * @param {Object} object to set as active\n   * @param {Event} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  _setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    const prevActiveObject = this._activeObject;\n    if (prevActiveObject === object) {\n      return false;\n    }\n    // after calling this._discardActiveObject, this,_activeObject could be undefined\n    if (!this._discardActiveObject(e, object) && this._activeObject) {\n      // refused to deselect\n      return false;\n    }\n    if (object.onSelect({ e })) {\n      return false;\n    }\n\n    this._activeObject = object;\n\n    if (isActiveSelection(object) && prevActiveObject !== object) {\n      object.set('canvas', this);\n    }\n    object.setCoords();\n\n    return true;\n  }\n\n  /**\n   * This is supposed to be equivalent to discardActiveObject but without firing\n   * any selection events ( can still fire object transformation events ). There is commitment to have this stay this way.\n   * This is the functional part of discardActiveObject.\n   * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n   * @param {Object} object the next object to set as active, reason why we are discarding this\n   * @return {Boolean} true if the active object has been discarded\n   */\n  _discardActiveObject(\n    e?: TPointerEvent,\n    object?: FabricObject,\n  ): this is { _activeObject: undefined } {\n    const obj = this._activeObject;\n    if (obj) {\n      // onDeselect return TRUE to cancel selection;\n      if (obj.onDeselect({ e, object })) {\n        return false;\n      }\n      if (this._currentTransform && this._currentTransform.target === obj) {\n        this.endCurrentTransform(e);\n      }\n      if (isActiveSelection(obj) && obj === this._hoveredTarget) {\n        this._hoveredTarget = undefined;\n      }\n      this._activeObject = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Discards currently active object and fire events. If the function is called by fabric\n   * as a consequence of a mouse event, the event is passed as a parameter and\n   * sent to the fire function for the custom events. When used as a method the\n   * e param does not have any application.\n   * @param {event} e\n   * @return {Boolean} true if the active object has been discarded\n   */\n  discardActiveObject(e?: TPointerEvent): this is { _activeObject: undefined } {\n    const currentActives = this.getActiveObjects(),\n      activeObject = this.getActiveObject();\n    if (currentActives.length) {\n      this.fire('before:selection:cleared', {\n        e,\n        deselected: [activeObject!],\n      });\n    }\n    const discarded = this._discardActiveObject(e);\n    this._fireSelectionEvents(currentActives, e);\n    return discarded;\n  }\n\n  /**\n   * End the current transform.\n   * You don't usually need to call this method unless you are interrupting a user initiated transform\n   * because of some other event ( a press of key combination, or something that block the user UX )\n   * @param {Event} [e] send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  endCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform;\n    this._finalizeCurrentTransform(e);\n    if (transform && transform.target) {\n      // this could probably go inside _finalizeCurrentTransform\n      transform.target.isMoving = false;\n    }\n    this._currentTransform = null;\n  }\n\n  /**\n   * @private\n   * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  _finalizeCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform!,\n      target = transform.target,\n      options = {\n        e,\n        target,\n        transform,\n        action: transform.action,\n      };\n\n    if (target._scaling) {\n      target._scaling = false;\n    }\n\n    target.setCoords();\n\n    if (transform.actionPerformed) {\n      this.fire('object:modified', options);\n      target.fire(MODIFIED, options);\n    }\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    super.setViewportTransform(vpt);\n    const activeObject = this._activeObject;\n    if (activeObject) {\n      activeObject.setCoords();\n    }\n  }\n\n  /**\n   * @override clears active selection ref and interactive canvas elements and contexts\n   */\n  destroy() {\n    // dispose of active selection\n    const activeObject = this._activeObject;\n    if (isActiveSelection(activeObject)) {\n      activeObject.removeAll();\n      activeObject.dispose();\n    }\n\n    delete this._activeObject;\n\n    super.destroy();\n\n    // free resources\n\n    // pixel find canvas\n    // @ts-expect-error disposing\n    this.pixelFindContext = null;\n    // @ts-expect-error disposing\n    this.pixelFindCanvasEl = undefined;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    // discard active object and fire events\n    this.discardActiveObject();\n    // make sure we clear the active object in case it refused to be discarded\n    this._activeObject = undefined;\n    this.clearContext(this.contextTop);\n    super.clear();\n  }\n\n  /**\n   * Draws objects' controls (borders/controls)\n   * @param {CanvasRenderingContext2D} ctx Context to render controls on\n   */\n  drawControls(ctx: CanvasRenderingContext2D) {\n    const activeObject = this._activeObject;\n\n    if (activeObject) {\n      activeObject._renderControls(ctx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: 'toObject' | 'toDatalessObject',\n    propertiesToInclude: string[],\n  ): Record<string, any> {\n    // If the object is part of the current selection group, it should\n    // be transformed appropriately\n    // i.e. it should be serialised as it would appear if the selection group\n    // were to be destroyed.\n    const originalProperties = this._realizeGroupTransformOnObject(instance),\n      object = super._toObject(instance, methodName, propertiesToInclude);\n    //Undo the damage we did by changing all of its properties\n    instance.set(originalProperties);\n    return object;\n  }\n\n  /**\n   * Realizes an object's group transformation on it\n   * @private\n   * @param {FabricObject} [instance] the object to transform (gets mutated)\n   * @returns the original values of instance which were changed\n   */\n  private _realizeGroupTransformOnObject(\n    instance: FabricObject,\n  ): Partial<typeof instance> {\n    const { group } = instance;\n    if (group && isActiveSelection(group) && this._activeObject === group) {\n      const layoutProps = [\n        'angle',\n        'flipX',\n        'flipY',\n        LEFT,\n        SCALE_X,\n        SCALE_Y,\n        SKEW_X,\n        SKEW_Y,\n        TOP,\n      ] as (keyof typeof instance)[];\n      const originalValues = pick<typeof instance>(instance, layoutProps);\n      addTransformToObject(instance, group.calcOwnMatrix());\n      return originalValues;\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    // If the object is in a selection group, simulate what would happen to that\n    // object when the group is deselected\n    const originalProperties = this._realizeGroupTransformOnObject(instance);\n    super._setSVGObject(markup, instance, reviver);\n    instance.set(originalProperties);\n  }\n}\n","import type { ModifierKey, TOptionalModifierKey } from '../EventTypeDefs';\nimport type { TOptions } from '../typedefs';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\n\nexport interface CanvasTransformOptions {\n  /**\n   * When true, objects can be transformed by one side (unproportionately)\n   * when dragged on the corners that normally would not do that.\n   * @type Boolean\n   * @default\n   * @since fabric 4.0 // changed name and default value\n   */\n  uniformScaling: boolean;\n\n  /**\n   * Indicates which key switches uniform scaling.\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * totally wrong named. this sounds like `uniform scaling`\n   * if Canvas.uniformScaling is true, pressing this will set it to false\n   * and viceversa.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  uniScaleKey: TOptionalModifierKey;\n\n  /**\n   * When true, objects use center point as the origin of scale transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredScaling: boolean;\n\n  /**\n   * When true, objects use center point as the origin of rotate transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredRotation: boolean;\n\n  /**\n   * Indicates which key enable centered Transform\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  centeredKey: TOptionalModifierKey;\n\n  /**\n   * Indicates which key enable alternate action on corner\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  altActionKey: TOptionalModifierKey;\n}\n\nexport interface CanvasSelectionOptions {\n  /**\n   * Indicates whether group selection should be enabled\n   * @type Boolean\n   * @default\n   */\n  selection: boolean;\n\n  /**\n   * Indicates which key or keys enable multiple click selection\n   * Pass value as a string or array of strings\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or empty or containing any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.2\n   * @type ModifierKey|ModifierKey[]\n   * @default\n   */\n  selectionKey: TOptionalModifierKey | ModifierKey[];\n\n  /**\n   * Indicates which key enable alternative selection\n   * in case of target overlapping with active object\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * For a series of reason that come from the general expectations on how\n   * things should work, this feature works only for preserveObjectStacking true.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.5\n   * @type null|ModifierKey\n   * @default\n   */\n  altSelectionKey: TOptionalModifierKey;\n\n  /**\n   * Color of selection\n   * @type String\n   * @default\n   */\n  selectionColor: string;\n\n  /**\n   * Default dash array pattern\n   * If not empty the selection border is dashed\n   * @type Array\n   */\n  selectionDashArray: number[];\n\n  /**\n   * Color of the border of selection (usually slightly darker than color of selection itself)\n   * @type String\n   * @default\n   */\n  selectionBorderColor: string;\n\n  /**\n   * Width of a line used in object/group selection\n   * @type Number\n   * @default\n   */\n  selectionLineWidth: number;\n\n  /**\n   * Select only shapes that are fully contained in the dragged selection rectangle.\n   * @type Boolean\n   * @default\n   */\n  selectionFullyContained: boolean;\n}\n\nexport interface CanvasCursorOptions {\n  /**\n   * Default cursor value used when hovering over an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  hoverCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used when moving an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  moveCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used for the entire canvas\n   * @type String\n   * @default default\n   */\n  defaultCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used during free drawing\n   * @type String\n   * @default crosshair\n   */\n  freeDrawingCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used for disabled elements ( corners with disabled action )\n   * @type String\n   * @since 2.0.0\n   * @default not-allowed\n   */\n  notAllowedCursor: CSSStyleDeclaration['cursor'];\n}\n\nexport interface TargetFindOptions {\n  /**\n   * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n   * @type Boolean\n   * @default\n   */\n  perPixelTargetFind: boolean;\n\n  /**\n   * Number of pixels around target pixel to tolerate (consider active) during object detection\n   * @type Number\n   * @default\n   */\n  targetFindTolerance: number;\n\n  /**\n   * When true, target detection is skipped. Target detection will return always undefined.\n   * click selection won't work anymore, events will fire with no targets.\n   * if something is selected before setting it to true, it will be deselected at the first click.\n   * area selection will still work. check the `selection` property too.\n   * if you deactivate both, you should look into staticCanvas.\n   * @type Boolean\n   * @default\n   */\n  skipTargetFind: boolean;\n}\n\nexport interface CanvasEventsOptions {\n  /**\n   * Indicates if the right click on canvas can output the context menu or not\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  stopContextMenu: boolean;\n\n  /**\n   * Indicates if the canvas can fire right click events\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  fireRightClick: boolean;\n\n  /**\n   * Indicates if the canvas can fire middle click events\n   * @type Boolean\n   * @since 1.7.8\n   * @default\n   */\n  fireMiddleClick: boolean;\n\n  /**\n   * When the option is enabled, PointerEvent is used instead of TPointerEvent.\n   * @type Boolean\n   * @default\n   */\n  enablePointerEvents: boolean;\n}\n\nexport interface CanvasOptions\n  extends StaticCanvasOptions,\n    CanvasTransformOptions,\n    CanvasSelectionOptions,\n    CanvasCursorOptions,\n    TargetFindOptions,\n    CanvasEventsOptions {\n  /**\n   * Default element class that's given to wrapper (div) element of canvas\n   * @type String\n   * @default\n   * @deprecated customize {@link CanvasDOMManager} instead or access {@link elements} directly\n   */\n  containerClass: string;\n\n  /**\n   * Indicates whether objects should remain in current stack position when selected.\n   * When false objects are brought to top and rendered as part of the selection group\n   * @type Boolean\n   * @default true\n   */\n  preserveObjectStacking: boolean;\n}\n\nexport type TCanvasOptions = TOptions<CanvasOptions>;\n\nexport const canvasDefaults: TOptions<CanvasOptions> = {\n  uniformScaling: true,\n  uniScaleKey: 'shiftKey',\n  centeredScaling: false,\n  centeredRotation: false,\n  centeredKey: 'altKey',\n  altActionKey: 'shiftKey',\n\n  selection: true,\n  selectionKey: 'shiftKey',\n  selectionColor: 'rgba(100, 100, 255, 0.3)',\n  selectionDashArray: [],\n  selectionBorderColor: 'rgba(255, 255, 255, 0.3)',\n  selectionLineWidth: 1,\n  selectionFullyContained: false,\n\n  hoverCursor: 'move',\n  moveCursor: 'move',\n  defaultCursor: 'default',\n  freeDrawingCursor: 'crosshair',\n  notAllowedCursor: 'not-allowed',\n\n  perPixelTargetFind: false,\n  targetFindTolerance: 0,\n  skipTargetFind: false,\n\n  stopContextMenu: false,\n  fireRightClick: false,\n  fireMiddleClick: false,\n  enablePointerEvents: false,\n\n  containerClass: 'canvas-container',\n  preserveObjectStacking: true,\n};\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport type { ITextBehavior } from '../shapes/IText/ITextBehavior';\nimport { removeFromArray } from '../util/internals/removeFromArray';\nimport type { Canvas } from './Canvas';\n\n/**\n * In charge of synchronizing all interactive text instances of a canvas\n */\nexport class TextEditingManager {\n  private targets: ITextBehavior[] = [];\n  declare private target?: ITextBehavior;\n  private __disposer: VoidFunction;\n\n  constructor(canvas: Canvas) {\n    const cb = () => {\n      const { hiddenTextarea } =\n        (canvas.getActiveObject() as ITextBehavior) || {};\n      hiddenTextarea && hiddenTextarea.focus();\n    };\n    const el = canvas.upperCanvasEl;\n    el.addEventListener('click', cb);\n    this.__disposer = () => el.removeEventListener('click', cb);\n  }\n\n  exitTextEditing() {\n    this.target = undefined;\n    this.targets.forEach((target) => {\n      if (target.isEditing) {\n        target.exitEditing();\n      }\n    });\n  }\n\n  add(target: ITextBehavior) {\n    this.targets.push(target);\n  }\n\n  remove(target: ITextBehavior) {\n    this.unregister(target);\n    removeFromArray(this.targets, target);\n  }\n\n  register(target: ITextBehavior) {\n    this.target = target;\n  }\n\n  unregister(target: ITextBehavior) {\n    if (target === this.target) {\n      this.target = undefined;\n    }\n  }\n\n  onMouseMove(e: TPointerEvent) {\n    this.target?.isEditing && this.target.updateSelectionOnMouseMove(e);\n  }\n\n  clear() {\n    this.targets = [];\n    this.target = undefined;\n  }\n\n  dispose() {\n    this.clear();\n    this.__disposer();\n    // @ts-expect-error disposing\n    delete this.__disposer;\n  }\n}\n","import { classRegistry } from '../ClassRegistry';\nimport { NONE } from '../constants';\nimport type {\n  CanvasEvents,\n  DragEventData,\n  ObjectEvents,\n  TEventsExtraData,\n  TPointerEvent,\n  TPointerEventNames,\n  Transform,\n} from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\nimport type { Group } from '../shapes/Group';\nimport type { IText } from '../shapes/IText/IText';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { isTouchEvent, stopEvent } from '../util/dom_event';\nimport { getDocumentFromElement, getWindowFromElement } from '../util/dom_misc';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { isActiveSelection } from '../util/typeAssertions';\nimport type { CanvasOptions, TCanvasOptions } from './CanvasOptions';\nimport { SelectableCanvas } from './SelectableCanvas';\nimport { TextEditingManager } from './TextEditingManager';\n\nconst addEventOptions = { passive: false } as EventListenerOptions;\n\nconst getEventPoints = (canvas: Canvas, e: TPointerEvent) => {\n  const viewportPoint = canvas.getViewportPoint(e);\n  const scenePoint = canvas.getScenePoint(e);\n  return {\n    viewportPoint,\n    scenePoint,\n  };\n};\n\n// just to be clear, the utils are now deprecated and those are here exactly as minifier helpers\n// because el.addEventListener can't me be minified while a const yes and we use it 47 times in this file.\n// few bytes but why give it away.\nconst addListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['addEventListener']>\n) => el.addEventListener(...args);\nconst removeListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['removeEventListener']>\n) => el.removeEventListener(...args);\n\nconst syntheticEventConfig = {\n  mouse: {\n    in: 'over',\n    out: 'out',\n    targetIn: 'mouseover',\n    targetOut: 'mouseout',\n    canvasIn: 'mouse:over',\n    canvasOut: 'mouse:out',\n  },\n  drag: {\n    in: 'enter',\n    out: 'leave',\n    targetIn: 'dragenter',\n    targetOut: 'dragleave',\n    canvasIn: 'drag:enter',\n    canvasOut: 'drag:leave',\n  },\n} as const;\n\ntype TSyntheticEventContext = {\n  mouse: { e: TPointerEvent };\n  drag: DragEventData;\n};\n\nexport class Canvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends SelectableCanvas<EventSpec>\n  implements CanvasOptions\n{\n  /**\n   * Contains the id of the touch event that owns the fabric transform\n   * @type Number\n   * @private\n   */\n  declare mainTouchId?: number;\n\n  declare enablePointerEvents: boolean;\n\n  /**\n   * Holds a reference to a setTimeout timer for event synchronization\n   * @type number\n   * @private\n   */\n  declare private _willAddMouseDown: number;\n\n  /**\n   * Holds a reference to an object on the canvas that is receiving the drag over event.\n   * @type FabricObject\n   * @private\n   */\n  declare private _draggedoverTarget?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas from where the drag operation started\n   * @type FabricObject\n   * @private\n   */\n  declare private _dragSource?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas that is the current drop target\n   * May differ from {@link _draggedoverTarget}\n   * @todo inspect whether {@link _draggedoverTarget} and {@link _dropTarget} should be merged somehow\n   * @type FabricObject\n   * @private\n   */\n  declare private _dropTarget: FabricObject<ObjectEvents> | undefined;\n\n  /**\n   * a boolean that keeps track of the click state during a cycle of mouse down/up.\n   * If a mouse move occurs it becomes false.\n   * Is true by default, turns false on mouse move.\n   * Used to determine if a mouseUp is a click\n   */\n  private _isClick: boolean;\n\n  textEditingManager = new TextEditingManager(this);\n\n  constructor(el?: string | HTMLCanvasElement, options: TCanvasOptions = {}) {\n    super(el, options);\n    // bind event handlers\n    (\n      [\n        '_onMouseDown',\n        '_onTouchStart',\n        '_onMouseMove',\n        '_onMouseUp',\n        '_onTouchEnd',\n        '_onResize',\n        // '_onGesture',\n        // '_onDrag',\n        // '_onShake',\n        // '_onLongPress',\n        // '_onOrientationChange',\n        '_onMouseWheel',\n        '_onMouseOut',\n        '_onMouseEnter',\n        '_onContextMenu',\n        '_onClick',\n        '_onDragStart',\n        '_onDragEnd',\n        '_onDragProgress',\n        '_onDragOver',\n        '_onDragEnter',\n        '_onDragLeave',\n        '_onDrop',\n      ] as (keyof this)[]\n    ).forEach((eventHandler) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n      this[eventHandler] = (this[eventHandler] as Function).bind(this);\n    });\n    // register event handlers\n    this.addOrRemove(addListener, 'add');\n  }\n\n  /**\n   * return an event prefix pointer or mouse.\n   * @private\n   */\n  private _getEventPrefix() {\n    return this.enablePointerEvents ? 'pointer' : 'mouse';\n  }\n\n  addOrRemove(functor: any, _eventjsFunctor: 'add' | 'remove') {\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    functor(getWindowFromElement(canvasElement), 'resize', this._onResize);\n    functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n    functor(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove,\n      addEventOptions,\n    );\n    functor(canvasElement, `${eventTypePrefix}out`, this._onMouseOut);\n    functor(canvasElement, `${eventTypePrefix}enter`, this._onMouseEnter);\n    functor(canvasElement, 'wheel', this._onMouseWheel);\n    functor(canvasElement, 'contextmenu', this._onContextMenu);\n    functor(canvasElement, 'click', this._onClick);\n    // decide if to remove in fabric 7.0\n    functor(canvasElement, 'dblclick', this._onClick);\n    functor(canvasElement, 'dragstart', this._onDragStart);\n    functor(canvasElement, 'dragend', this._onDragEnd);\n    functor(canvasElement, 'dragover', this._onDragOver);\n    functor(canvasElement, 'dragenter', this._onDragEnter);\n    functor(canvasElement, 'dragleave', this._onDragLeave);\n    functor(canvasElement, 'drop', this._onDrop);\n    if (!this.enablePointerEvents) {\n      functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\n    }\n    // if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n    //   eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\n    //   eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\n    //   eventjs[eventjsFunctor](\n    //     canvasElement,\n    //     'orientation',\n    //     this._onOrientationChange\n    //   );\n    //   eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\n    //   eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\n    // }\n  }\n\n  /**\n   * Removes all event listeners, used when disposing the instance\n   */\n  removeListeners() {\n    this.addOrRemove(removeListener, 'remove');\n    // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      `${eventTypePrefix}up`,\n      this._onMouseUp as EventListener,\n    );\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    clearTimeout(this._willAddMouseDown);\n  }\n\n  /**\n   * @private\n   * @param {Event} [e] Event object fired on wheel event\n   */\n  private _onMouseWheel(e: MouseEvent) {\n    this.__onMouseWheel(e);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onMouseOut(e: TPointerEvent) {\n    const target = this._hoveredTarget;\n    const shared = {\n      e,\n      ...getEventPoints(this, e),\n    };\n    this.fire('mouse:out', { ...shared, target });\n    this._hoveredTarget = undefined;\n    target && target.fire('mouseout', { ...shared });\n    this._hoveredTargets.forEach((nestedTarget) => {\n      this.fire('mouse:out', { ...shared, target: nestedTarget });\n      nestedTarget && nestedTarget.fire('mouseout', { ...shared });\n    });\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseenter\n   */\n  private _onMouseEnter(e: TPointerEvent) {\n    // This find target and consequent 'mouse:over' is used to\n    // clear old instances on hovered target.\n    // calling findTarget has the side effect of killing target.__corner.\n    // as a short term fix we are not firing this if we are currently transforming.\n    // as a long term fix we need to separate the action of finding a target with the\n    // side effects we added to it.\n    if (!this._currentTransform && !this.findTarget(e)) {\n      this.fire('mouse:over', {\n        e,\n        ...getEventPoints(this, e),\n      });\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n  }\n\n  /**\n   * supports native like text dragging\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragStart(e: DragEvent) {\n    this._isClick = false;\n    const activeObject = this.getActiveObject();\n    if (activeObject && activeObject.onDragStart(e)) {\n      this._dragSource = activeObject;\n      const options = { e, target: activeObject };\n      this.fire('dragstart', options);\n      activeObject.fire('dragstart', options);\n      addListener(\n        this.upperCanvasEl,\n        'drag',\n        this._onDragProgress as EventListener,\n      );\n      return;\n    }\n    stopEvent(e);\n  }\n\n  /**\n   * First we clear top context where the effects are being rendered.\n   * Then we render the effects.\n   * Doing so will render the correct effect for all cases including an overlap between `source` and `target`.\n   * @private\n   */\n  private _renderDragEffects(\n    e: DragEvent,\n    source?: FabricObject,\n    target?: FabricObject,\n  ) {\n    let dirty = false;\n    // clear top context\n    const dropTarget = this._dropTarget;\n    if (dropTarget && dropTarget !== source && dropTarget !== target) {\n      dropTarget.clearContextTop();\n      dirty = true;\n    }\n    source?.clearContextTop();\n    target !== source && target?.clearContextTop();\n    // render effects\n    const ctx = this.contextTop;\n    ctx.save();\n    ctx.transform(...this.viewportTransform);\n    if (source) {\n      ctx.save();\n      source.transform(ctx);\n      source.renderDragSourceEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    if (target) {\n      ctx.save();\n      target.transform(ctx);\n      target.renderDropTargetEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    ctx.restore();\n    dirty && (this.contextTopDirty = true);\n  }\n\n  /**\n   * supports native like text dragging\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragEnd(e: DragEvent) {\n    const didDrop = !!e.dataTransfer && e.dataTransfer.dropEffect !== NONE,\n      dropTarget = didDrop ? this._activeObject : undefined,\n      options = {\n        e,\n        target: this._dragSource as FabricObject,\n        subTargets: this.targets,\n        dragSource: this._dragSource as FabricObject,\n        didDrop,\n        dropTarget: dropTarget as FabricObject,\n      };\n    removeListener(\n      this.upperCanvasEl,\n      'drag',\n      this._onDragProgress as EventListener,\n    );\n    this.fire('dragend', options);\n    this._dragSource && this._dragSource.fire('dragend', options);\n    delete this._dragSource;\n    // we need to call mouse up synthetically because the browser won't\n    this._onMouseUp(e);\n  }\n\n  /**\n   * fire `drag` event on canvas and drag source\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragProgress(e: DragEvent) {\n    const options = {\n      e,\n      target: this._dragSource,\n      dragSource: this._dragSource,\n      dropTarget: this._draggedoverTarget as FabricObject,\n    };\n    this.fire('drag', options);\n    this._dragSource && this._dragSource.fire('drag', options);\n  }\n\n  /**\n   * As opposed to {@link findTarget} we want the top most object to be returned w/o the active object cutting in line.\n   * Override at will\n   */\n  protected findDragTargets(e: DragEvent) {\n    this.targets = [];\n    const target = this._searchPossibleTargets(\n      this._objects,\n      this.getViewportPoint(e),\n    );\n    return {\n      target,\n      targets: [...this.targets],\n    };\n  }\n\n  /**\n   * prevent default to allow drop event to be fired\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#specifying_drop_targets\n   * @private\n   * @param {DragEvent} [e] Event object fired on Event.js shake\n   */\n  private _onDragOver(e: DragEvent) {\n    const eventType = 'dragover';\n    const { target, targets } = this.findDragTargets(e);\n    const dragSource = this._dragSource as FabricObject;\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource,\n      canDrop: false,\n      dropTarget: undefined,\n    };\n    let dropTarget;\n    //  fire on canvas\n    this.fire(eventType, options);\n    //  make sure we fire dragenter events before dragover\n    //  if dragleave is needed, object will not fire dragover so we don't need to trouble ourselves with it\n    this._fireEnterLeaveEvents(target, options);\n    if (target) {\n      if (target.canDrop(e)) {\n        dropTarget = target;\n      }\n      target.fire(eventType, options);\n    }\n    //  propagate the event to subtargets\n    for (let i = 0; i < targets.length; i++) {\n      const subTarget = targets[i];\n      // accept event only if previous targets didn't (the accepting target calls `preventDefault` to inform that the event is taken)\n      // TODO: verify if those should loop in inverse order then?\n      // what is the order of subtargets?\n      if (subTarget.canDrop(e)) {\n        dropTarget = subTarget;\n      }\n      subTarget.fire(eventType, options);\n    }\n    //  render drag effects now that relations between source and target is clear\n    this._renderDragEffects(e, dragSource, dropTarget);\n    this._dropTarget = dropTarget;\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragEnter(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragenter', options);\n    //  fire dragenter on targets\n    this._fireEnterLeaveEvents(target, options);\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragLeave(e: DragEvent) {\n    const options = {\n      e,\n      target: this._draggedoverTarget,\n      subTargets: this.targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragleave', options);\n\n    //  fire dragleave on targets\n    this._fireEnterLeaveEvents(undefined, options);\n    this._renderDragEffects(e, this._dragSource);\n    this._dropTarget = undefined;\n    //  clear targets\n    this.targets = [];\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * `drop:before` is a an event that allows you to schedule logic\n   * before the `drop` event. Prefer `drop` event always, but if you need\n   * to run some drop-disabling logic on an event, since there is no way\n   * to handle event handlers ordering, use `drop:before`\n   * @private\n   * @param {Event} e\n   */\n  private _onDrop(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = this._basicEventHandler('drop:before', {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n      ...getEventPoints(this, e),\n    });\n    //  will be set by the drop target\n    options.didDrop = false;\n    //  will be set by the drop target, used in case options.target refuses the drop\n    options.dropTarget = undefined;\n    //  fire `drop`\n    this._basicEventHandler('drop', options);\n    //  inform canvas of the drop\n    //  we do this because canvas was unaware of what happened at the time the `drop` event was fired on it\n    //  use for side effects\n    this.fire('drop:after', options);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onContextMenu(e: TPointerEvent): false {\n    const target = this.findTarget(e),\n      subTargets = this.targets || [];\n    const options = this._basicEventHandler('contextmenu:before', {\n      e,\n      target,\n      subTargets,\n    });\n    // TODO: this line is silly because the dev can subscribe to the event and prevent it themselves\n    this.stopContextMenu && stopEvent(e);\n    this._basicEventHandler('contextmenu', options);\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onClick(e: TPointerEvent) {\n    const clicks = e.detail;\n    if (clicks > 3 || clicks < 2) return;\n    this._cacheTransformEventData(e);\n    clicks == 2 && e.type === 'dblclick' && this._handleEvent(e, 'dblclick');\n    clicks == 3 && this._handleEvent(e, 'tripleclick');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Return a the id of an event.\n   * returns either the pointerId or the identifier or 0 for the mouse event\n   * @private\n   * @param {Event} evt Event object\n   */\n  getPointerId(evt: TouchEvent | PointerEvent): number {\n    const changedTouches = (evt as TouchEvent).changedTouches;\n\n    if (changedTouches) {\n      return changedTouches[0] && changedTouches[0].identifier;\n    }\n\n    if (this.enablePointerEvents) {\n      return (evt as PointerEvent).pointerId;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines if an event has the id of the event that is considered main\n   * @private\n   * @param {evt} event Event object\n   */\n  _isMainEvent(evt: TPointerEvent): boolean {\n    if ((evt as PointerEvent).isPrimary === true) {\n      return true;\n    }\n    if ((evt as PointerEvent).isPrimary === false) {\n      return false;\n    }\n    if (evt.type === 'touchend' && (evt as TouchEvent).touches.length === 0) {\n      return true;\n    }\n    if ((evt as TouchEvent).changedTouches) {\n      return (\n        (evt as TouchEvent).changedTouches[0].identifier === this.mainTouchId\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchStart(e: TouchEvent) {\n    // we will prevent scrolling if allowTouchScrolling is not enabled and\n    let shouldPreventScrolling = !this.allowTouchScrolling;\n    const currentActiveObject = this._activeObject;\n    if (this.mainTouchId === undefined) {\n      this.mainTouchId = this.getPointerId(e);\n    }\n    this.__onMouseDown(e);\n    // after executing fabric logic for mouse down let's see\n    // if we didn't change target or if we are drawing\n    // we want to prevent scrolling anyway\n    if (\n      this.isDrawingMode ||\n      (currentActiveObject && this._target === currentActiveObject)\n    ) {\n      shouldPreventScrolling = true;\n    }\n    // prevent default, will block scrolling from start\n    shouldPreventScrolling && e.preventDefault();\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    // if we scroll don't register the touch move event\n    shouldPreventScrolling &&\n      addListener(\n        doc,\n        'touchmove',\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    // Unbind mousedown to prevent double triggers from touch devices\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}down`,\n      this._onMouseDown as EventListener,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDown(e: TPointerEvent) {\n    this.__onMouseDown(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(doc, `${eventTypePrefix}up`, this._onMouseUp as EventListener);\n    addListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchEnd(e: TouchEvent) {\n    if (e.touches.length > 0) {\n      // if there are still touches stop here\n      return;\n    }\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    delete this.mainTouchId;\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    if (this._willAddMouseDown) {\n      clearTimeout(this._willAddMouseDown);\n    }\n    this._willAddMouseDown = setTimeout(() => {\n      // Wait 400ms before rebinding mousedown to prevent double triggers\n      // from touch devices\n      addListener(\n        this.upperCanvasEl,\n        `${eventTypePrefix}down`,\n        this._onMouseDown as EventListener,\n      );\n      this._willAddMouseDown = 0;\n    }, 400) as unknown as number;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUp(e: TPointerEvent) {\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    if (this._isMainEvent(e)) {\n      const doc = getDocumentFromElement(this.upperCanvasEl);\n      removeListener(\n        doc,\n        `${eventTypePrefix}up`,\n        this._onMouseUp as EventListener,\n      );\n      removeListener(\n        doc,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n      addListener(\n        canvasElement,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMove(e: TPointerEvent) {\n    const activeObject = this.getActiveObject();\n    !this.allowTouchScrolling &&\n      (!activeObject ||\n        // a drag event sequence is started by the active object flagging itself on mousedown / mousedown:before\n        // we must not prevent the event's default behavior in order for the window to start dragging\n        !activeObject.shouldStartDragging(e)) &&\n      e.preventDefault &&\n      e.preventDefault();\n    this.__onMouseMove(e);\n  }\n\n  /**\n   * @private\n   */\n  _onResize() {\n    this.calcOffset();\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n   * @private\n   * @param {Object} target\n   */\n  _shouldRender(target: FabricObject | undefined) {\n    const activeObject = this.getActiveObject();\n    // if just one of them is available or if they are both but are different objects\n    // this covers: switch of target, from target to no target, selection of target\n    // multiSelection with key and mouse\n    return (\n      !!activeObject !== !!target ||\n      (activeObject && target && activeObject !== target)\n    );\n  }\n\n  /**\n   * Method that defines the actions when mouse is released on canvas.\n   * The method resets the currentTransform parameters, store the image corner\n   * position in the image object and render the canvas on top.\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseUp(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'up:before');\n\n    const transform = this._currentTransform;\n    const isClick = this._isClick;\n    const target = this._target;\n\n    // if right/middle click just fire events and return\n    // target undefined will make the _handleEvent search the target\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'up');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this._onMouseUpInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n    let shouldRender = false;\n    if (transform) {\n      this._finalizeCurrentTransform(e);\n      shouldRender = transform.actionPerformed;\n    }\n    if (!isClick) {\n      const targetWasActive = target === this._activeObject;\n      this.handleSelection(e);\n      if (!shouldRender) {\n        shouldRender =\n          this._shouldRender(target) ||\n          (!targetWasActive && target === this._activeObject);\n      }\n    }\n    let pointer, corner;\n    if (target) {\n      const found = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      const { key, control } = found || {};\n      corner = key;\n      if (\n        target.selectable &&\n        target !== this._activeObject &&\n        target.activeOn === 'up'\n      ) {\n        this.setActiveObject(target, e);\n        shouldRender = true;\n      } else if (control) {\n        const mouseUpHandler = control.getMouseUpHandler(e, target, control);\n        if (mouseUpHandler) {\n          pointer = this.getScenePoint(e);\n          mouseUpHandler.call(control, e, transform!, pointer.x, pointer.y);\n        }\n      }\n      target.isMoving = false;\n    }\n    // if we are ending up a transform on a different control or a new object\n    // fire the original mouse up from the corner that started the transform\n    if (\n      transform &&\n      (transform.target !== target || transform.corner !== corner)\n    ) {\n      const originalControl =\n          transform.target && transform.target.controls[transform.corner],\n        originalMouseUpHandler =\n          originalControl &&\n          originalControl.getMouseUpHandler(\n            e,\n            transform.target,\n            originalControl,\n          );\n      pointer = pointer || this.getScenePoint(e);\n      originalMouseUpHandler &&\n        originalMouseUpHandler.call(\n          originalControl,\n          e,\n          transform,\n          pointer.x,\n          pointer.y,\n        );\n    }\n    this._setCursorFromEvent(e, target);\n    this._handleEvent(e, 'up');\n    this._groupSelector = null;\n    this._currentTransform = null;\n    // reset the target information about which corner is selected\n    target && (target.__corner = undefined);\n    if (shouldRender) {\n      this.requestRenderAll();\n    } else if (!isClick && !(this._activeObject as IText)?.isEditing) {\n      this.renderTop();\n    }\n  }\n\n  _basicEventHandler<T extends keyof (CanvasEvents | ObjectEvents)>(\n    eventType: T,\n    options: (CanvasEvents & ObjectEvents)[T],\n  ) {\n    const { target, subTargets = [] } = options as {\n      target?: FabricObject;\n      subTargets: FabricObject[];\n    };\n    this.fire(eventType, options);\n    target && target.fire(eventType, options);\n    for (let i = 0; i < subTargets.length; i++) {\n      subTargets[i] !== target && subTargets[i].fire(eventType, options);\n    }\n    return options;\n  }\n\n  /**\n   * @private\n   * Handle event firing for target and subtargets\n   * @param {TPointerEvent} e event from mouse\n   * @param {TPointerEventNames} eventType\n   */\n  _handleEvent<T extends TPointerEventNames>(\n    e: TPointerEvent,\n    eventType: T,\n    extraData?: TEventsExtraData[T],\n  ) {\n    const target = this._target,\n      targets = this.targets || [],\n      options: CanvasEvents[`mouse:${T}`] = {\n        e,\n        target,\n        subTargets: targets,\n        ...getEventPoints(this, e),\n        transform: this._currentTransform,\n        ...(eventType === 'up:before' || eventType === 'up'\n          ? {\n              isClick: this._isClick,\n              currentTarget: this.findTarget(e),\n              // set by the preceding `findTarget` call\n              currentSubTargets: this.targets,\n            }\n          : {}),\n        ...(eventType === 'down:before' || eventType === 'down'\n          ? extraData\n          : {}),\n      } as CanvasEvents[`mouse:${T}`];\n    this.fire(`mouse:${eventType}`, options);\n    // this may be a little be more complicated of what we want to handle\n    target && target.fire(`mouse${eventType}`, options);\n    for (let i = 0; i < targets.length; i++) {\n      targets[i] !== target && targets[i].fire(`mouse${eventType}`, options);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDownInDrawingMode(e: TPointerEvent) {\n    this._isCurrentlyDrawing = true;\n    if (this.getActiveObject()) {\n      this.discardActiveObject(e);\n      this.requestRenderAll();\n    }\n    // TODO: this is a scene point so it should be renamed\n    const pointer = this.getScenePoint(e);\n    this.freeDrawingBrush &&\n      this.freeDrawingBrush.onMouseDown(pointer, { e, pointer });\n    this._handleEvent(e, 'down', { alreadySelected: false });\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMoveInDrawingMode(e: TPointerEvent) {\n    if (this._isCurrentlyDrawing) {\n      const pointer = this.getScenePoint(e);\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush.onMouseMove(pointer, {\n          e,\n          // this is an absolute pointer, the naming is wrong\n          pointer,\n        });\n    }\n    this.setCursor(this.freeDrawingCursor);\n    this._handleEvent(e, 'move');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUpInDrawingMode(e: TPointerEvent) {\n    const pointer = this.getScenePoint(e);\n    if (this.freeDrawingBrush) {\n      this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n        e: e,\n        // this is an absolute pointer, the naming is wrong\n        pointer,\n      });\n    } else {\n      this._isCurrentlyDrawing = false;\n    }\n    this._handleEvent(e, 'up');\n  }\n\n  /**\n   * Method that defines the actions when mouse is clicked on canvas.\n   * The method inits the currentTransform parameters and renders all the\n   * canvas so the current image can be placed on the top canvas and the rest\n   * in on the container one.\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  __onMouseDown(e: TPointerEvent) {\n    this._isClick = true;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'down:before');\n\n    let target: FabricObject | undefined = this._target;\n    let alreadySelected = !!target && target === this._activeObject;\n    // if right/middle click just fire events\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'down', {\n          alreadySelected,\n        });\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode) {\n      this._onMouseDownInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    // ignore if some object is being transformed at this moment\n    if (this._currentTransform) {\n      return;\n    }\n\n    let shouldRender = this._shouldRender(target);\n    let grouped = false;\n    if (this.handleMultiSelection(e, target)) {\n      // active object might have changed while grouping\n      target = this._activeObject;\n      grouped = true;\n      shouldRender = true;\n    } else if (this._shouldClearSelection(e, target)) {\n      this.discardActiveObject(e);\n    }\n    // we start a group selector rectangle if\n    // selection is enabled\n    // and there is no target, or the following 3 conditions are satisfied:\n    // target is not selectable ( otherwise we selected it )\n    // target is not editing\n    // target is not already selected ( otherwise we drag )\n    if (\n      this.selection &&\n      (!target ||\n        (!target.selectable &&\n          !(target as IText).isEditing &&\n          target !== this._activeObject))\n    ) {\n      const p = this.getScenePoint(e);\n      this._groupSelector = {\n        x: p.x,\n        y: p.y,\n        deltaY: 0,\n        deltaX: 0,\n      };\n    }\n\n    // check again because things could have changed\n    alreadySelected = !!target && target === this._activeObject;\n    if (target) {\n      if (target.selectable && target.activeOn === 'down') {\n        this.setActiveObject(target, e);\n      }\n      const handle = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      if (target === this._activeObject && (handle || !grouped)) {\n        this._setupCurrentTransform(e, target, alreadySelected);\n        const control = handle ? handle.control : undefined,\n          pointer = this.getScenePoint(e),\n          mouseDownHandler =\n            control && control.getMouseDownHandler(e, target, control);\n        mouseDownHandler &&\n          mouseDownHandler.call(\n            control,\n            e,\n            this._currentTransform!,\n            pointer.x,\n            pointer.y,\n          );\n      }\n    }\n    //  we clear `_objectsToRender` in case of a change in order to repopulate it at rendering\n    //  run before firing the `down` event to give the dev a chance to populate it themselves\n    shouldRender && (this._objectsToRender = undefined);\n    this._handleEvent(e, 'down', { alreadySelected: alreadySelected });\n    // we must renderAll so that we update the visuals\n    shouldRender && this.requestRenderAll();\n  }\n\n  /**\n   * reset cache form common information needed during event processing\n   * @private\n   */\n  _resetTransformEventData() {\n    this._target = this._viewportPoint = this._scenePoint = undefined;\n  }\n\n  /**\n   * Cache common information needed during event processing\n   * @private\n   * @param {Event} e Event object fired on event\n   */\n  _cacheTransformEventData(e: TPointerEvent) {\n    // reset in order to avoid stale caching\n    this._resetTransformEventData();\n    this._viewportPoint = this.getViewportPoint(e);\n    this._scenePoint = sendPointToPlane(\n      this._viewportPoint,\n      undefined,\n      this.viewportTransform,\n    );\n    this._target = this._currentTransform\n      ? this._currentTransform.target\n      : this.findTarget(e);\n  }\n\n  /**\n   * Method that defines the actions when mouse is hovering the canvas.\n   * The currentTransform parameter will define whether the user is rotating/scaling/translating\n   * an image or neither of them (only hovering). A group selection is also possible and would cancel\n   * all any other type of action.\n   * In case of an image transformation only the top canvas will be rendered.\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  __onMouseMove(e: TPointerEvent) {\n    this._isClick = false;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'move:before');\n\n    if (this.isDrawingMode) {\n      this._onMouseMoveInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    const groupSelector = this._groupSelector;\n\n    // We initially clicked in an empty area, so we draw a box for multiple selection\n    if (groupSelector) {\n      const pointer = this.getScenePoint(e);\n\n      groupSelector.deltaX = pointer.x - groupSelector.x;\n      groupSelector.deltaY = pointer.y - groupSelector.y;\n\n      this.renderTop();\n    } else if (!this._currentTransform) {\n      const target = this.findTarget(e);\n      this._setCursorFromEvent(e, target);\n      this._fireOverOutEvents(e, target);\n    } else {\n      this._transformObject(e);\n    }\n    this.textEditingManager.onMouseMove(e);\n    this._handleEvent(e, 'move');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Manage the mouseout, mouseover events for the fabric object on the canvas\n   * @param {Fabric.Object} target the target where the target from the mousemove event\n   * @param {Event} e Event object fired on mousemove\n   * @private\n   */\n  _fireOverOutEvents(e: TPointerEvent, target?: FabricObject) {\n    const _hoveredTarget = this._hoveredTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('mouse', {\n      e,\n      target,\n      oldTarget: _hoveredTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('mouse', {\n        e,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._hoveredTarget = target;\n    this._hoveredTargets = this.targets.concat();\n  }\n\n  /**\n   * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the onDrag event\n   * @param {Object} data Event object fired on dragover\n   * @private\n   */\n  _fireEnterLeaveEvents(target: FabricObject | undefined, data: DragEventData) {\n    const draggedoverTarget = this._draggedoverTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('drag', {\n      ...data,\n      target,\n      oldTarget: draggedoverTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('drag', {\n        ...data,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._draggedoverTarget = target;\n  }\n\n  /**\n   * Manage the synthetic in/out events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the supported events\n   * @param {Object} data Event object fired\n   * @param {Object} config configuration for the function to work\n   * @param {String} config.targetName property on the canvas where the old target is stored\n   * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n   * @param {String} config.evtOut name of the event to fire for out\n   * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n   * @param {String} config.evtIn name of the event to fire for in\n   * @private\n   */\n  fireSyntheticInOutEvents<T extends keyof TSyntheticEventContext>(\n    type: T,\n    {\n      target,\n      oldTarget,\n      fireCanvas,\n      e,\n      ...data\n    }: TSyntheticEventContext[T] & {\n      target?: FabricObject;\n      oldTarget?: FabricObject;\n      fireCanvas?: boolean;\n    },\n  ) {\n    const { targetIn, targetOut, canvasIn, canvasOut } =\n      syntheticEventConfig[type];\n    const targetChanged = oldTarget !== target;\n\n    if (oldTarget && targetChanged) {\n      const outOpt: CanvasEvents[typeof canvasOut] = {\n        ...data,\n        e,\n        target: oldTarget,\n        nextTarget: target,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasOut, outOpt);\n      oldTarget.fire(targetOut, outOpt);\n    }\n    if (target && targetChanged) {\n      const inOpt: CanvasEvents[typeof canvasIn] = {\n        ...data,\n        e,\n        target,\n        previousTarget: oldTarget,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasIn, inOpt);\n      target.fire(targetIn, inOpt);\n    }\n  }\n\n  /**\n   * Method that defines actions when an Event Mouse Wheel\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseWheel(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'wheel');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event fired on mousemove\n   */\n  _transformObject(e: TPointerEvent) {\n    const scenePoint = this.getScenePoint(e),\n      transform = this._currentTransform!,\n      target = transform.target,\n      //  transform pointer to target's containing coordinate plane\n      //  both pointer and object should agree on every point\n      localPointer = target.group\n        ? sendPointToPlane(\n            scenePoint,\n            undefined,\n            target.group.calcTransformMatrix(),\n          )\n        : scenePoint;\n    transform.shiftKey = e.shiftKey;\n    transform.altKey = !!this.centeredKey && e[this.centeredKey];\n\n    this._performTransformAction(e, transform, localPointer);\n    transform.actionPerformed && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   */\n  _performTransformAction(\n    e: TPointerEvent,\n    transform: Transform,\n    pointer: Point,\n  ) {\n    const { action, actionHandler, target } = transform;\n\n    const actionPerformed =\n      !!actionHandler && actionHandler(e, transform, pointer.x, pointer.y);\n    actionPerformed && target.setCoords();\n\n    // this object could be created from the function in the control handlers\n    if (action === 'drag' && actionPerformed) {\n      transform.target.isMoving = true;\n      this.setCursor(transform.target.moveCursor || this.moveCursor);\n    }\n    transform.actionPerformed = transform.actionPerformed || actionPerformed;\n  }\n\n  /**\n   * Sets the cursor depending on where the canvas is being hovered.\n   * Note: very buggy in Opera\n   * @param {Event} e Event object\n   * @param {Object} target Object that the mouse is hovering, if so.\n   */\n  _setCursorFromEvent(e: TPointerEvent, target?: FabricObject) {\n    if (!target) {\n      this.setCursor(this.defaultCursor);\n      return;\n    }\n    let hoverCursor = target.hoverCursor || this.hoverCursor;\n    const activeSelection = isActiveSelection(this._activeObject)\n        ? this._activeObject\n        : null,\n      // only show proper corner when group selection is not active\n      corner =\n        (!activeSelection || target.group !== activeSelection) &&\n        // here we call findTargetCorner always with undefined for the touch parameter.\n        // we assume that if you are using a cursor you do not need to interact with\n        // the bigger touch area.\n        target.findControl(this.getViewportPoint(e));\n\n    if (!corner) {\n      if ((target as Group).subTargetCheck) {\n        // hoverCursor should come from top-most subTarget,\n        // so we walk the array backwards\n        this.targets\n          .concat()\n          .reverse()\n          .map((_target) => {\n            hoverCursor = _target.hoverCursor || hoverCursor;\n          });\n      }\n      this.setCursor(hoverCursor);\n    } else {\n      const { control, coord } = corner;\n      this.setCursor(control.cursorStyleHandler(e, control, target, coord));\n    }\n  }\n\n  /**\n   * ## Handles multiple selection\n   * - toggles `target` selection (selects/deselects `target` if it isn't/is selected respectively)\n   * - sets the active object in case it is not set or in case there is a single active object left under active selection.\n   * ---\n   * - If the active object is the active selection we add/remove `target` from it\n   * - If not, add the active object and `target` to the active selection and make it the active object.\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target target of event to select/deselect\n   * @returns true if grouping occurred\n   */\n  protected handleMultiSelection(e: TPointerEvent, target?: FabricObject) {\n    const activeObject = this._activeObject;\n    const isAS = isActiveSelection(activeObject);\n    if (\n      // check if an active object exists on canvas and if the user is pressing the `selectionKey` while canvas supports multi selection.\n      !!activeObject &&\n      this._isSelectionKeyPressed(e) &&\n      this.selection &&\n      // on top of that the user also has to hit a target that is selectable.\n      !!target &&\n      target.selectable &&\n      // group target and active object only if they are different objects\n      // else we try to find a subtarget of `ActiveSelection`\n      (activeObject !== target || isAS) &&\n      //  make sure `activeObject` and `target` aren't ancestors of each other in case `activeObject` is not `ActiveSelection`\n      // if it is then we want to remove `target` from it\n      (isAS ||\n        (!target.isDescendantOf(activeObject) &&\n          !activeObject.isDescendantOf(target))) &&\n      //  target accepts selection\n      !target.onSelect({ e }) &&\n      // make sure we are not on top of a control\n      !activeObject.getActiveControl()\n    ) {\n      if (isAS) {\n        const prevActiveObjects = activeObject.getObjects();\n        if (target === activeObject) {\n          const pointer = this.getViewportPoint(e);\n          target =\n            // first search active objects for a target to remove\n            this.searchPossibleTargets(prevActiveObjects, pointer) ||\n            //  if not found, search under active selection for a target to add\n            // `prevActiveObjects` will be searched but we already know they will not be found\n            this.searchPossibleTargets(this._objects, pointer);\n          // if nothing is found bail out\n          if (!target || !target.selectable) {\n            return false;\n          }\n        }\n        if (target.group === activeObject) {\n          // `target` is part of active selection => remove it\n          activeObject.remove(target);\n          this._hoveredTarget = target;\n          this._hoveredTargets = [...this.targets];\n          // if after removing an object we are left with one only...\n          if (activeObject.size() === 1) {\n            // activate last remaining object\n            // deselecting the active selection will remove the remaining object from it\n            this._setActiveObject(activeObject.item(0), e);\n          }\n        } else {\n          // `target` isn't part of active selection => add it\n          activeObject.multiSelectAdd(target);\n          this._hoveredTarget = activeObject;\n          this._hoveredTargets = [...this.targets];\n        }\n        this._fireSelectionEvents(prevActiveObjects, e);\n      } else {\n        (activeObject as IText).isEditing &&\n          (activeObject as IText).exitEditing();\n        // add the active object and the target to the active selection and set it as the active object\n        const klass =\n          classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n        const newActiveSelection = new klass([], {\n          /**\n           * it is crucial to pass the canvas ref before calling {@link ActiveSelection#multiSelectAdd}\n           * since it uses {@link FabricObject#isInFrontOf} which relies on the canvas ref\n           */\n          canvas: this,\n        });\n        newActiveSelection.multiSelectAdd(activeObject, target);\n        this._hoveredTarget = newActiveSelection;\n        // ISSUE 4115: should we consider subTargets here?\n        // this._hoveredTargets = [];\n        // this._hoveredTargets = this.targets.concat();\n        this._setActiveObject(newActiveSelection, e);\n        this._fireSelectionEvents([activeObject], e);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ## Handles selection\n   * - selects objects that are contained in (and possibly intersecting) the selection bounding box\n   * - sets the active object\n   * ---\n   * runs on mouse up after a mouse move\n   */\n  protected handleSelection(e: TPointerEvent) {\n    if (!this.selection || !this._groupSelector) {\n      return false;\n    }\n    const { x, y, deltaX, deltaY } = this._groupSelector,\n      point1 = new Point(x, y),\n      point2 = point1.add(new Point(deltaX, deltaY)),\n      tl = point1.min(point2),\n      br = point1.max(point2),\n      size = br.subtract(tl);\n\n    const collectedObjects = this.collectObjects(\n      {\n        left: tl.x,\n        top: tl.y,\n        width: size.x,\n        height: size.y,\n      },\n      { includeIntersecting: !this.selectionFullyContained },\n    ) as FabricObject[];\n\n    const objects =\n      // though this method runs only after mouse move the pointer could do a mouse up on the same position as mouse down\n      // should it be handled as is?\n      point1.eq(point2)\n        ? collectedObjects[0]\n          ? [collectedObjects[0]]\n          : []\n        : collectedObjects.length > 1\n          ? collectedObjects\n              .filter((object) => !object.onSelect({ e }))\n              .reverse()\n          : // `setActiveObject` will call `onSelect(collectedObjects[0])` in this case\n            collectedObjects;\n\n    // set active object\n    if (objects.length === 1) {\n      // set as active object\n      this.setActiveObject(objects[0], e);\n    } else if (objects.length > 1) {\n      // add to active selection and make it the active object\n      const klass =\n        classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n      this.setActiveObject(new klass(objects, { canvas: this }), e);\n    }\n\n    // cleanup\n    this._groupSelector = null;\n    return true;\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  clear() {\n    this.textEditingManager.clear();\n    super.clear();\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  destroy() {\n    this.removeListeners();\n    this.textEditingManager.dispose();\n    super.destroy();\n  }\n}\n","export const linearDefaultCoords = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n};\n\nexport const radialDefaultCoords = {\n  ...linearDefaultCoords,\n  r1: 0,\n  r2: 0,\n};\n","/**\n *\n * @param value value to check if NaN\n * @param [valueIfNaN]\n * @returns `fallback` is `value is NaN\n */\nexport const ifNaN = (value: number, valueIfNaN?: number) => {\n  return isNaN(value) && typeof valueIfNaN === 'number' ? valueIfNaN : value;\n};\n","import { ifNaN } from '../util/internals/ifNaN';\nimport { capValue } from '../util/misc/capValue';\n\nconst RE_PERCENT = /^(\\d+\\.\\d+)%|(\\d+)%$/;\n\nexport function isPercent(value: string | null) {\n  return value && RE_PERCENT.test(value);\n}\n\n/**\n *\n * @param value\n * @param valueIfNaN\n * @returns ∈ [0, 1]\n */\nexport function parsePercent(\n  value: string | number | null | undefined,\n  valueIfNaN?: number,\n) {\n  const parsed =\n    typeof value === 'number'\n      ? value\n      : typeof value === 'string'\n        ? parseFloat(value) / (isPercent(value) ? 100 : 1)\n        : NaN;\n  return capValue(0, ifNaN(parsed, valueIfNaN), 1);\n}\n","import { Color } from '../../color/Color';\nimport { parsePercent } from '../../parser/percent';\nimport { ifNaN } from '../../util/internals/ifNaN';\nimport type { ColorStop } from '../typedefs';\n\nconst RE_KEY_VALUE_PAIRS = /\\s*;\\s*/;\nconst RE_KEY_VALUE = /\\s*:\\s*/;\n\nfunction parseColorStop(el: SVGStopElement, opacityMultiplier: number) {\n  let colorValue, opacityValue;\n  const style = el.getAttribute('style');\n  if (style) {\n    const keyValuePairs = style.split(RE_KEY_VALUE_PAIRS);\n\n    if (keyValuePairs[keyValuePairs.length - 1] === '') {\n      keyValuePairs.pop();\n    }\n\n    for (let i = keyValuePairs.length; i--; ) {\n      const [key, value] = keyValuePairs[i]\n        .split(RE_KEY_VALUE)\n        .map((s) => s.trim());\n      if (key === 'stop-color') {\n        colorValue = value;\n      } else if (key === 'stop-opacity') {\n        opacityValue = value;\n      }\n    }\n  }\n\n  colorValue = colorValue || el.getAttribute('stop-color') || 'rgb(0,0,0)';\n  opacityValue = ifNaN(\n    parseFloat(opacityValue || el.getAttribute('stop-opacity') || ''),\n    1,\n  );\n\n  const color = new Color(colorValue);\n\n  color.setAlpha(color.getAlpha() * opacityValue * opacityMultiplier);\n\n  return {\n    offset: parsePercent(el.getAttribute('offset'), 0),\n    color: color.toRgba(),\n  };\n}\n\nexport function parseColorStops(\n  el: SVGGradientElement,\n  opacityAttr: string | null,\n) {\n  const colorStops: ColorStop[] = [],\n    colorStopEls = el.getElementsByTagName('stop'),\n    multiplier = parsePercent(opacityAttr, 1);\n  for (let i = colorStopEls.length; i--; ) {\n    colorStops.push(parseColorStop(colorStopEls[i], multiplier));\n  }\n  return colorStops;\n}\n","import type { GradientType, GradientUnits } from '../typedefs';\n\nexport function parseType(el: SVGGradientElement): GradientType {\n  return el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT'\n    ? 'linear'\n    : 'radial';\n}\n\nexport function parseGradientUnits(el: SVGGradientElement): GradientUnits {\n  return el.getAttribute('gradientUnits') === 'userSpaceOnUse'\n    ? 'pixels'\n    : 'percentage';\n}\n","import { isPercent } from '../../parser/percent';\nimport type { TSize } from '../../typedefs';\nimport type { GradientCoords, GradientType, GradientUnits } from '../typedefs';\nimport { parseGradientUnits, parseType } from './misc';\n\nfunction convertPercentUnitsToValues<\n  T extends GradientType,\n  K extends keyof GradientCoords<T>,\n>(\n  valuesToConvert: Record<K, string | number>,\n  { width, height, gradientUnits }: TSize & { gradientUnits: GradientUnits },\n) {\n  let finalValue;\n  return (Object.keys(valuesToConvert) as K[]).reduce(\n    (acc, prop) => {\n      const propValue = valuesToConvert[prop];\n      if (propValue === 'Infinity') {\n        finalValue = 1;\n      } else if (propValue === '-Infinity') {\n        finalValue = 0;\n      } else {\n        finalValue =\n          typeof propValue === 'string' ? parseFloat(propValue) : propValue;\n        if (typeof propValue === 'string' && isPercent(propValue)) {\n          finalValue *= 0.01;\n          if (gradientUnits === 'pixels') {\n            // then we need to fix those percentages here in svg parsing\n            if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n              finalValue *= width;\n            }\n            if (prop === 'y1' || prop === 'y2') {\n              finalValue *= height;\n            }\n          }\n        }\n      }\n      acc[prop] = finalValue;\n      return acc;\n    },\n    {} as Record<K, number>,\n  );\n}\n\nfunction getValue(el: SVGGradientElement, key: string) {\n  return el.getAttribute(key);\n}\n\nexport function parseLinearCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'x1') || 0,\n    y1: getValue(el, 'y1') || 0,\n    x2: getValue(el, 'x2') || '100%',\n    y2: getValue(el, 'y2') || 0,\n  };\n}\n\nexport function parseRadialCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'fx') || getValue(el, 'cx') || '50%',\n    y1: getValue(el, 'fy') || getValue(el, 'cy') || '50%',\n    r1: 0,\n    x2: getValue(el, 'cx') || '50%',\n    y2: getValue(el, 'cy') || '50%',\n    r2: getValue(el, 'r') || '50%',\n  };\n}\n\nexport function parseCoords(el: SVGGradientElement, size: TSize) {\n  return convertPercentUnitsToValues(\n    parseType(el) === 'linear' ? parseLinearCoords(el) : parseRadialCoords(el),\n    {\n      ...size,\n      gradientUnits: parseGradientUnits(el),\n    },\n  );\n}\n","import { iMatrix } from '../constants';\nimport { parseTransformAttribute } from '../parser/parseTransformAttribute';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { linearDefaultCoords, radialDefaultCoords } from './constants';\nimport { parseColorStops } from './parser/parseColorStops';\nimport { parseCoords } from './parser/parseCoords';\nimport { parseType, parseGradientUnits } from './parser/misc';\nimport type {\n  ColorStop,\n  GradientCoords,\n  GradientOptions,\n  GradientType,\n  GradientUnits,\n  SVGOptions,\n  SerializedGradientProps,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { isPath } from '../util/typeAssertions';\n\n/**\n * Gradient class\n * @class Gradient\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n */\nexport class Gradient<\n  S,\n  T extends GradientType = S extends GradientType ? S : 'linear',\n> {\n  /**\n   * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetX: number;\n\n  /**\n   * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetY: number;\n\n  /**\n   * A transform matrix to apply to the gradient before painting.\n   * Imported from svg gradients, is not applied with the current transform in the center.\n   * Before this transform is applied, the origin point is at the top left corner of the object\n   * plus the addition of offsetY and offsetX.\n   * @type Number[]\n   * @default null\n   */\n  declare gradientTransform?: TMat2D;\n\n  /**\n   * coordinates units for coords.\n   * If `pixels`, the number of coords are in the same unit of width / height.\n   * If set as `percentage` the coords are still a number, but 1 means 100% of width\n   * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\n   * allowed values pixels or percentage.\n   * @type GradientUnits\n   * @default 'pixels'\n   */\n  declare gradientUnits: GradientUnits;\n\n  /**\n   * Gradient type linear or radial\n   * @type GradientType\n   * @default 'linear'\n   */\n  declare type: T;\n\n  /**\n   * Defines how the gradient is located in space and spread\n   * @type GradientCoords\n   */\n  declare coords: GradientCoords<T>;\n\n  /**\n   * Defines how many colors a gradient has and how they are located on the axis\n   * defined by coords\n   * @type GradientCoords\n   */\n  declare colorStops: ColorStop[];\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number | string\n   */\n  declare readonly id: string | number;\n\n  static type = 'Gradient';\n\n  constructor(options: GradientOptions<T>) {\n    const {\n      type = 'linear' as T,\n      gradientUnits = 'pixels',\n      coords = {},\n      colorStops = [],\n      offsetX = 0,\n      offsetY = 0,\n      gradientTransform,\n      id,\n    } = options || {};\n    Object.assign(this, {\n      type,\n      gradientUnits,\n      coords: {\n        ...(type === 'radial' ? radialDefaultCoords : linearDefaultCoords),\n        ...coords,\n      },\n      colorStops,\n      offsetX,\n      offsetY,\n      gradientTransform,\n      id: id ? `${id}_${uid()}` : uid(),\n    });\n  }\n\n  /**\n   * Adds another colorStop\n   * @param {Record<string, string>} colorStop Object with offset and color\n   * @return {Gradient} thisArg\n   */\n  addColorStop(colorStops: Record<string, string>) {\n    for (const position in colorStops) {\n      this.colorStops.push({\n        offset: parseFloat(position),\n        color: colorStops[position],\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Returns object representation of a gradient\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object}\n   */\n  toObject(\n    propertiesToInclude?: (keyof this | string)[],\n  ): SerializedGradientProps<T> {\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: this.type,\n      coords: { ...this.coords },\n      colorStops: this.colorStops.map((colorStop) => ({ ...colorStop })),\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      gradientUnits: this.gradientUnits,\n      gradientTransform: this.gradientTransform\n        ? [...this.gradientTransform]\n        : undefined,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of an gradient\n   * @param {FabricObject} object Object to create a gradient for\n   * @return {String} SVG representation of an gradient (linear/radial)\n   */\n  toSVG(\n    object: FabricObject,\n    {\n      additionalTransform: preTransform,\n    }: { additionalTransform?: string } = {},\n  ) {\n    const markup = [],\n      transform = (\n        this.gradientTransform\n          ? this.gradientTransform.concat()\n          : iMatrix.concat()\n      ) as TMat2D,\n      gradientUnits =\n        this.gradientUnits === 'pixels'\n          ? 'userSpaceOnUse'\n          : 'objectBoundingBox';\n    // colorStops must be sorted ascending, and guarded against deep mutations\n    const colorStops = this.colorStops\n      .map((colorStop) => ({ ...colorStop }))\n      .sort((a, b) => {\n        return a.offset - b.offset;\n      });\n\n    let offsetX = -this.offsetX,\n      offsetY = -this.offsetY;\n    if (gradientUnits === 'objectBoundingBox') {\n      offsetX /= object.width;\n      offsetY /= object.height;\n    } else {\n      offsetX += object.width / 2;\n      offsetY += object.height / 2;\n    }\n    // todo what about polygon/polyline?\n    if (isPath(object) && this.gradientUnits !== 'percentage') {\n      offsetX -= object.pathOffset.x;\n      offsetY -= object.pathOffset.y;\n    }\n    transform[4] -= offsetX;\n    transform[5] -= offsetY;\n\n    const commonAttributes = [\n      `id=\"SVGID_${this.id}\"`,\n      `gradientUnits=\"${gradientUnits}\"`,\n      `gradientTransform=\"${\n        preTransform ? preTransform + ' ' : ''\n      }${matrixToSVG(transform)}\"`,\n      '',\n    ].join(' ');\n\n    if (this.type === 'linear') {\n      const { x1, y1, x2, y2 } = this.coords;\n      markup.push(\n        '<linearGradient ',\n        commonAttributes,\n        ' x1=\"',\n        x1,\n        '\" y1=\"',\n        y1,\n        '\" x2=\"',\n        x2,\n        '\" y2=\"',\n        y2,\n        '\">\\n',\n      );\n    } else if (this.type === 'radial') {\n      const { x1, y1, x2, y2, r1, r2 } = this\n        .coords as GradientCoords<'radial'>;\n      const needsSwap = r1 > r2;\n      // svg radial gradient has just 1 radius. the biggest.\n      markup.push(\n        '<radialGradient ',\n        commonAttributes,\n        ' cx=\"',\n        needsSwap ? x1 : x2,\n        '\" cy=\"',\n        needsSwap ? y1 : y2,\n        '\" r=\"',\n        needsSwap ? r1 : r2,\n        '\" fx=\"',\n        needsSwap ? x2 : x1,\n        '\" fy=\"',\n        needsSwap ? y2 : y1,\n        '\">\\n',\n      );\n      if (needsSwap) {\n        // svg goes from internal to external radius. if radius are inverted, swap color stops.\n        colorStops.reverse(); //  mutates array\n        colorStops.forEach((colorStop) => {\n          colorStop.offset = 1 - colorStop.offset;\n        });\n      }\n      const minRadius = Math.min(r1, r2);\n      if (minRadius > 0) {\n        // i have to shift all colorStops and add new one in 0.\n        const maxRadius = Math.max(r1, r2),\n          percentageShift = minRadius / maxRadius;\n        colorStops.forEach((colorStop) => {\n          colorStop.offset += percentageShift * (1 - colorStop.offset);\n        });\n      }\n    }\n\n    colorStops.forEach(({ color, offset }) => {\n      markup.push(\n        `<stop offset=\"${offset * 100}%\" style=\"stop-color:${color};\"/>\\n`,\n      );\n    });\n\n    markup.push(\n      this.type === 'linear' ? '</linearGradient>' : '</radialGradient>',\n      '\\n',\n    );\n\n    return markup.join('');\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasGradient\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {CanvasGradient}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasGradient {\n    const { x1, y1, x2, y2, r1, r2 } = this.coords as GradientCoords<'radial'>;\n    const gradient =\n      this.type === 'linear'\n        ? ctx.createLinearGradient(x1, y1, x2, y2)\n        : ctx.createRadialGradient(x1, y1, r1, x2, y2, r2);\n\n    this.colorStops.forEach(({ color, offset }) => {\n      gradient.addColorStop(offset, color);\n    });\n\n    return gradient;\n  }\n\n  static async fromObject(\n    options: GradientOptions<'linear'>,\n  ): Promise<Gradient<'linear'>>;\n  static async fromObject(\n    options: GradientOptions<'radial'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'linear'> | GradientOptions<'radial'>,\n  ) {\n    const { colorStops, gradientTransform } = options;\n    return new this({\n      ...options,\n      colorStops: colorStops\n        ? colorStops.map((colorStop) => ({ ...colorStop }))\n        : undefined,\n      gradientTransform: gradientTransform ? [...gradientTransform] : undefined,\n    });\n  }\n\n  /* _FROM_SVG_START_ */\n  /**\n   * Returns {@link Gradient} instance from an SVG element\n   * @static\n   * @memberOf Gradient\n   * @param {SVGGradientElement} el SVG gradient element\n   * @param {FabricObject} instance\n   * @param {String} opacity A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\n   * @param {SVGOptions} svgOptions an object containing the size of the SVG in order to parse correctly gradients\n   * that uses gradientUnits as 'userSpaceOnUse' and percentages.\n   * @return {Gradient} Gradient instance\n   * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n   * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n   *\n   *  @example\n   *\n   *  <linearGradient id=\"linearGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\"/>\n   *    <stop offset=\"100%\" stop-color=\"black\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <linearGradient id=\"linearGrad2\">\n   *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n   *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n   *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *  </radialGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad2\">\n   *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n   *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n   *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n   *  </radialGradient>\n   *\n   */\n  static fromElement(\n    el: SVGGradientElement,\n    instance: FabricObject,\n    svgOptions: SVGOptions,\n  ): Gradient<GradientType> {\n    const gradientUnits = parseGradientUnits(el);\n    const center = instance._findCenterFromElement();\n    return new this({\n      id: el.getAttribute('id') || undefined,\n      type: parseType(el),\n      coords: parseCoords(el, {\n        width: svgOptions.viewBoxWidth || svgOptions.width,\n        height: svgOptions.viewBoxHeight || svgOptions.height,\n      }),\n      colorStops: parseColorStops(el, svgOptions.opacity),\n      gradientUnits,\n      gradientTransform: parseTransformAttribute(\n        el.getAttribute('gradientTransform') || '',\n      ),\n      ...(gradientUnits === 'pixels'\n        ? {\n            offsetX: instance.width / 2 - center.x,\n            offsetY: instance.height / 2 - center.y,\n          }\n        : {\n            offsetX: 0,\n            offsetY: 0,\n          }),\n    });\n  }\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Gradient, 'gradient');\nclassRegistry.setClass(Gradient, 'linear');\nclassRegistry.setClass(Gradient, 'radial');\n","import { config } from '../config';\nimport type { Abortable, TCrossOrigin, TMat2D, TSize } from '../typedefs';\nimport { ifNaN } from '../util/internals/ifNaN';\nimport { uid } from '../util/internals/uid';\nimport { loadImage } from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { toFixed } from '../util/misc/toFixed';\nimport { classRegistry } from '../ClassRegistry';\nimport type {\n  PatternRepeat,\n  PatternOptions,\n  SerializedPatternOptions,\n} from './types';\nimport { log } from '../util/internals/console';\n\n/**\n * @see {@link http://fabricjs.com/patterns demo}\n * @see {@link http://fabricjs.com/dynamic-patterns demo}\n */\nexport class Pattern {\n  static type = 'Pattern';\n\n  /**\n   * Legacy identifier of the class. Prefer using this.constructor.type 'Pattern'\n   * or utils like isPattern, or instance of to indentify a pattern in your code.\n   * Will be removed in future versiones\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    return 'pattern';\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * @type PatternRepeat\n   * @defaults\n   */\n  repeat: PatternRepeat = 'repeat';\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX = 0;\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY = 0;\n\n  /**\n   * @type TCrossOrigin\n   * @default\n   */\n  crossOrigin: TCrossOrigin = '';\n\n  /**\n   * transform matrix to change the pattern, imported from svgs.\n   * @todo verify if using the identity matrix as default makes the rest of the code more easy\n   * @type Array\n   * @default\n   */\n  declare patternTransform?: TMat2D;\n\n  /**\n   * The actual pixel source of the pattern\n   */\n  declare source: CanvasImageSource;\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number\n   */\n  declare readonly id: number;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @param {option.source} [source] the pattern source, eventually empty or a drawable\n   */\n  constructor(options: PatternOptions) {\n    this.id = uid();\n    Object.assign(this, options);\n  }\n\n  /**\n   * @returns true if {@link source} is an <img> element\n   */\n  isImageSource(): this is { source: HTMLImageElement } {\n    return (\n      !!this.source && typeof (this.source as HTMLImageElement).src === 'string'\n    );\n  }\n\n  /**\n   * @returns true if {@link source} is a <canvas> element\n   */\n  isCanvasSource(): this is { source: HTMLCanvasElement } {\n    return !!this.source && !!(this.source as HTMLCanvasElement).toDataURL;\n  }\n\n  sourceToString(): string {\n    return this.isImageSource()\n      ? this.source.src\n      : this.isCanvasSource()\n        ? this.source.toDataURL()\n        : '';\n  }\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasPattern | null {\n    if (\n      // if the image failed to load, return, and allow rest to continue loading\n      !this.source ||\n      // if an image\n      (this.isImageSource() &&\n        (!this.source.complete ||\n          this.source.naturalWidth === 0 ||\n          this.source.naturalHeight === 0))\n    ) {\n      return null;\n    }\n\n    return ctx.createPattern(this.source, this.repeat)!;\n  }\n\n  /**\n   * Returns object representation of a pattern\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object} Object representation of a pattern instance\n   */\n  toObject(propertiesToInclude: string[] = []): Record<string, any> {\n    const { repeat, crossOrigin } = this;\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: 'pattern',\n      source: this.sourceToString(),\n      repeat,\n      crossOrigin,\n      offsetX: toFixed(this.offsetX, config.NUM_FRACTION_DIGITS),\n      offsetY: toFixed(this.offsetY, config.NUM_FRACTION_DIGITS),\n      patternTransform: this.patternTransform\n        ? [...this.patternTransform]\n        : null,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   */\n  toSVG({ width, height }: TSize): string {\n    const { source: patternSource, repeat, id } = this,\n      patternOffsetX = ifNaN(this.offsetX / width, 0),\n      patternOffsetY = ifNaN(this.offsetY / height, 0),\n      patternWidth =\n        repeat === 'repeat-y' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetX || 0)\n          : ifNaN((patternSource as HTMLImageElement).width / width, 0),\n      patternHeight =\n        repeat === 'repeat-x' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetY || 0)\n          : ifNaN((patternSource as HTMLImageElement).height / height, 0);\n\n    return [\n      `<pattern id=\"SVGID_${id}\" x=\"${patternOffsetX}\" y=\"${patternOffsetY}\" width=\"${patternWidth}\" height=\"${patternHeight}\">`,\n      `<image x=\"0\" y=\"0\" width=\"${\n        (patternSource as HTMLImageElement).width\n      }\" height=\"${\n        (patternSource as HTMLImageElement).height\n      }\" xlink:href=\"${this.sourceToString()}\"></image>`,\n      `</pattern>`,\n      '',\n    ].join('\\n');\n  }\n  /* _TO_SVG_END_ */\n\n  static async fromObject(\n    {\n      type,\n      source,\n      patternTransform,\n      ...otherOptions\n    }: SerializedPatternOptions,\n    options?: Abortable,\n  ): Promise<Pattern> {\n    const img = await loadImage(source, {\n      ...options,\n      crossOrigin: otherOptions.crossOrigin,\n    });\n    return new this({\n      ...otherOptions,\n      patternTransform:\n        patternTransform && (patternTransform.slice(0) as TMat2D),\n      source: img,\n    });\n  }\n}\n\nclassRegistry.setClass(Pattern);\n// kept for compatibility reason\nclassRegistry.setClass(Pattern, 'pattern');\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport type { Shadow } from '../Shadow';\nimport type { Canvas } from '../canvas/Canvas';\nimport type { TBrushEventData } from './typedefs';\n\n/**\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nexport abstract class BaseBrush {\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color = 'rgb(0, 0, 0)';\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width = 1;\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type Shadow\n   * @default\n   */\n  shadow: Shadow | null = null;\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: CanvasLineCap = 'round';\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: CanvasLineJoin = 'round';\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit = 10;\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: number[] | null = null;\n\n  /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n   */\n\n  limitedToCanvasSize = false;\n\n  /**\n   * @todo add type\n   */\n  declare canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  abstract _render(): void;\n  abstract onMouseDown(pointer: Point, ev: TBrushEventData): void;\n  abstract onMouseMove(pointer: Point, ev: TBrushEventData): void;\n  /**\n   * @returns true if brush should continue blocking interaction\n   */\n  abstract onMouseUp(ev: TBrushEventData): boolean | void;\n\n  /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.setLineDash(this.strokeDashArray || []);\n  }\n\n  /**\n   * Sets the transformation on given context\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @private\n   */\n  protected _saveAndTransform(ctx: CanvasRenderingContext2D) {\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  }\n\n  protected needsFullRender() {\n    const color = new Color(this.color);\n    return color.getAlpha() < 1 || !!this.shadow;\n  }\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  protected _setShadow() {\n    if (!this.shadow || !this.canvas) {\n      return;\n    }\n\n    const canvas = this.canvas,\n      shadow = this.shadow,\n      ctx = canvas.contextTop,\n      zoom = canvas.getZoom() * canvas.getRetinaScaling();\n\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur = shadow.blur * zoom;\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\n  }\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  protected _resetShadow() {\n    const ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n   */\n  protected _isOutSideCanvas(pointer: Point) {\n    return (\n      pointer.x < 0 ||\n      pointer.x > this.canvas.getWidth() ||\n      pointer.y < 0 ||\n      pointer.y > this.canvas.getHeight()\n    );\n  }\n}\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { toFixed } from '../util/misc/toFixed';\nimport {\n  getBoundsOfCurve,\n  joinPath,\n  makePathSimpler,\n  parsePath,\n} from '../util/path';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type {\n  TComplexPathData,\n  TPathSegmentInfo,\n  TSimplePathData,\n} from '../util/path/typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type {\n  TBBox,\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n} from '../typedefs';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\ninterface UniquePathProps {\n  sourcePath?: string;\n  path?: TSimplePathData;\n}\n\nexport interface SerializedPathProps\n  extends SerializedObjectProps,\n    UniquePathProps {}\n\nexport interface PathProps extends FabricObjectProps, UniquePathProps {}\n\nexport interface IPathBBox extends TBBox {\n  left: number;\n  top: number;\n  pathOffset: Point;\n}\n\nexport class Path<\n  Props extends TOptions<PathProps> = Partial<PathProps>,\n  SProps extends SerializedPathProps = SerializedPathProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Array of path points\n   * @type Array\n   * @default\n   */\n  declare path: TSimplePathData;\n\n  declare pathOffset: Point;\n\n  declare sourcePath?: string;\n\n  declare segmentsInfo?: TPathSegmentInfo[];\n\n  static type = 'Path';\n\n  static cacheProperties = [...cacheProperties, 'path', 'fillRule'];\n\n  /**\n   * Constructor\n   * @param {TComplexPathData} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {Partial<PathProps>} [options] Options object\n   * @return {Path} thisArg\n   */\n  constructor(\n    path: TComplexPathData | string,\n    // todo: evaluate this spread here\n    { path: _, left, top, ...options }: Partial<Props> = {},\n  ) {\n    super();\n    Object.assign(this, Path.ownDefaults);\n    this.setOptions(options);\n    this._setPath(path || [], true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {TComplexPathData | string} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {boolean} [adjustPosition] pass true to reposition the object according to the bounding box\n   * @returns {Point} top left position of the bounding box, useful for complementary positioning\n   */\n  _setPath(path: TComplexPathData | string, adjustPosition?: boolean) {\n    this.path = makePathSimpler(Array.isArray(path) ? path : parsePath(path));\n    this.setBoundingBox(adjustPosition);\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = this._calcBoundsFromPath();\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _renderPathCommands(ctx: CanvasRenderingContext2D) {\n    const l = -this.pathOffset.x,\n      t = -this.pathOffset.y;\n\n    ctx.beginPath();\n\n    for (const command of this.path) {\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          ctx.lineTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'M': // moveTo, absolute\n          ctx.moveTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          ctx.bezierCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n            command[5] + l,\n            command[6] + t,\n          );\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          ctx.quadraticCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n          );\n          break;\n\n        case 'Z':\n          ctx.closePath();\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    this._renderPathCommands(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {string} string representation of an instance\n   */\n  toString() {\n    return `#<Path (${this.complexity()}): { \"top\": ${this.top}, \"left\": ${\n      this.left\n    } }>`;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      path: this.path.map((pathCmd) => pathCmd.slice()),\n    };\n  }\n\n  /**\n   * Returns dataless object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const o = this.toObject<T, K>(propertiesToInclude);\n    if (this.sourcePath) {\n      delete o.path;\n      o.sourcePath = this.sourcePath;\n    }\n    return o;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const path = joinPath(this.path, config.NUM_FRACTION_DIGITS);\n    return [\n      '<path ',\n      'COMMON_PARTS',\n      `d=\"${path}\" stroke-linecap=\"round\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @return the path command's translate transform attribute\n   */\n  _getOffsetTransform() {\n    const digits = config.NUM_FRACTION_DIGITS;\n    return ` translate(${toFixed(-this.pathOffset.x, digits)}, ${toFixed(\n      -this.pathOffset.y,\n      digits,\n    )})`;\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(), {\n        reviver,\n        additionalTransform: additionalTransform,\n      })\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      additionalTransform: additionalTransform,\n    });\n  }\n\n  /**\n   * Returns number representation of an instance complexity\n   * @return {number} complexity of this instance\n   */\n  complexity() {\n    return this.path.length;\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { width, height, pathOffset } = this._calcDimensions();\n    this.set({ width, height, pathOffset });\n    // using pathOffset because it match the use case.\n    // if pathOffset change here we need to use left + width/2 , top + height/2\n    adjustPosition && this.setPositionByOrigin(pathOffset, CENTER, CENTER);\n  }\n\n  _calcBoundsFromPath(): TBBox {\n    const bounds: XY[] = [];\n    let subpathStartX = 0,\n      subpathStartY = 0,\n      x = 0, // current x\n      y = 0; // current y\n\n    for (const command of this.path) {\n      // current instruction\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          x = command[1];\n          y = command[2];\n          bounds.push({ x: subpathStartX, y: subpathStartY }, { x, y });\n          break;\n\n        case 'M': // moveTo, absolute\n          x = command[1];\n          y = command[2];\n          subpathStartX = x;\n          subpathStartY = y;\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n              command[5],\n              command[6],\n            ),\n          );\n          x = command[5];\n          y = command[6];\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n            ),\n          );\n          x = command[3];\n          y = command[4];\n          break;\n\n        case 'Z':\n          x = subpathStartX;\n          y = subpathStartY;\n          break;\n      }\n    }\n    return makeBoundingBoxFromPoints(bounds);\n  }\n\n  /**\n   * @private\n   */\n  _calcDimensions(): IPathBBox {\n    const bbox = this._calcBoundsFromPath();\n\n    return {\n      ...bbox,\n      pathOffset: new Point(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2,\n      ),\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Path.fromElement`)\n   * @static\n   * @memberOf Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'd'];\n\n  /**\n   * Creates an instance of Path from an object\n   * @static\n   * @memberOf Path\n   * @param {Object} object\n   * @returns {Promise<Path>}\n   */\n  static fromObject<T extends TOptions<SerializedPathProps>>(object: T) {\n    return this._fromObject<Path>(object, {\n      extraParam: 'path',\n    });\n  }\n\n  /**\n   * Creates an instance of Path from an SVG <path> element\n   * @static\n   * @memberOf Path\n   * @param {HTMLElement} element to parse\n   * @param {Partial<PathProps>} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement | SVGElement,\n    options?: Partial<PathProps>,\n    cssRules?: CSSRules,\n  ) {\n    const { d, ...parsedAttributes } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return new this(d, {\n      ...parsedAttributes,\n      ...options,\n      // we pass undefined to instruct the constructor to position the object using the bbox\n      left: undefined,\n      top: undefined,\n    });\n  }\n}\n\nclassRegistry.setClass(Path);\nclassRegistry.setSVGClass(Path);\n\n/* _FROM_SVG_START_ */\n","import type { ModifierKey, TEvent } from '../EventTypeDefs';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Path } from '../shapes/Path';\nimport { getSmoothPathFromPoints, joinPath } from '../util/path';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\n/**\n * @private\n * @param {TSimplePathData} pathData SVG path commands\n * @returns {boolean}\n */\nfunction isEmptySVGPath(pathData: TSimplePathData): boolean {\n  return joinPath(pathData) === 'M 0 0 Q 0 0 0 0 L 0 0';\n}\n\nexport class PencilBrush extends BaseBrush {\n  /**\n   * Discard points that are less than `decimate` pixel distant from each other\n   * @type Number\n   * @default 0.4\n   */\n  decimate = 0.4;\n\n  /**\n   * Draws a straight line between last recorded point to current pointer\n   * Used for `shift` functionality\n   *\n   * @type boolean\n   * @default false\n   */\n  drawStraightLine = false;\n\n  /**\n   * The event modifier key that makes the brush draw a straight line.\n   * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n   * @type {ModifierKey | undefined | null}\n   */\n  straightLineKey: ModifierKey | undefined | null = 'shiftKey';\n\n  declare protected _points: Point[];\n  declare protected _hasStraightLine: boolean;\n  declare protected oldEnd?: Point;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this._points = [];\n    this._hasStraightLine = false;\n  }\n\n  needsFullRender() {\n    return super.needsFullRender() || this._hasStraightLine;\n  }\n\n  static drawSegment(ctx: CanvasRenderingContext2D, p1: Point, p2: Point) {\n    const midPoint = p1.midPointFrom(p2);\n    ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n    return midPoint;\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    this._prepareForDrawing(pointer);\n    // capture coordinates immediately\n    // this allows to draw dots (when movement never occurs)\n    this._addPoint(pointer);\n    this._render();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this._addPoint(pointer) && this._points.length > 1) {\n      if (this.needsFullRender()) {\n        // redraw curve\n        // clear top canvas\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._render();\n      } else {\n        const points = this._points,\n          length = points.length,\n          ctx = this.canvas.contextTop;\n        // draw the curve update\n        this._saveAndTransform(ctx);\n        if (this.oldEnd) {\n          ctx.beginPath();\n          ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n        }\n        this.oldEnd = PencilBrush.drawSegment(\n          ctx,\n          points[length - 2],\n          points[length - 1],\n        );\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp({ e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return true;\n    }\n    this.drawStraightLine = false;\n    this.oldEnd = undefined;\n    this._finalizeAndAddPath();\n\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Point} pointer Actual mouse position related to the canvas.\n   */\n  _prepareForDrawing(pointer: Point) {\n    this._reset();\n    this._addPoint(pointer);\n    this.canvas.contextTop.moveTo(pointer.x, pointer.y);\n  }\n\n  /**\n   * @private\n   * @param {Point} point Point to be added to points array\n   */\n  _addPoint(point: Point) {\n    if (\n      this._points.length > 1 &&\n      point.eq(this._points[this._points.length - 1])\n    ) {\n      return false;\n    }\n    if (this.drawStraightLine && this._points.length > 1) {\n      this._hasStraightLine = true;\n      this._points.pop();\n    }\n    this._points.push(point);\n    return true;\n  }\n\n  /**\n   * Clear points array and set contextTop canvas style.\n   * @private\n   */\n  _reset() {\n    this._points = [];\n    this._setBrushStyles(this.canvas.contextTop);\n    this._setShadow();\n    this._hasStraightLine = false;\n  }\n\n  /**\n   * Draw a smooth path on the topCanvas using quadraticCurveTo\n   * @private\n   * @param {CanvasRenderingContext2D} [ctx]\n   */\n  _render(ctx: CanvasRenderingContext2D = this.canvas.contextTop) {\n    let p1 = this._points[0],\n      p2 = this._points[1];\n    this._saveAndTransform(ctx);\n    ctx.beginPath();\n    //if we only have 2 points in the path and they are the same\n    //it means that the user only clicked the canvas without moving the mouse\n    //then we should be drawing a dot. A path isn't drawn between two identical dots\n    //that's why we set them apart a bit\n    if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n      const width = this.width / 1000;\n      p1.x -= width;\n      p2.x += width;\n    }\n    ctx.moveTo(p1.x, p1.y);\n\n    for (let i = 1; i < this._points.length; i++) {\n      // we pick the point between pi + 1 & pi + 2 as the\n      // end point and p1 as our control point.\n      PencilBrush.drawSegment(ctx, p1, p2);\n      p1 = this._points[i];\n      p2 = this._points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * Converts points to SVG path\n   * @param {Point[]} points Array of points\n   * @return {TSimplePathData} SVG path commands\n   */\n  convertPointsToSVGPath(points: Point[]): TSimplePathData {\n    const correction = this.width / 1000;\n    return getSmoothPathFromPoints(points, correction);\n  }\n\n  /**\n   * Creates a Path object to add on canvas\n   * @param {TSimplePathData} pathData Path data\n   * @return {Path} Path to add on canvas\n   */\n  createPath(pathData: TSimplePathData): Path {\n    const path = new Path(pathData, {\n      fill: null,\n      stroke: this.color,\n      strokeWidth: this.width,\n      strokeLineCap: this.strokeLineCap,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeDashArray: this.strokeDashArray,\n    });\n    if (this.shadow) {\n      this.shadow.affectStroke = true;\n      path.shadow = new Shadow(this.shadow);\n    }\n\n    return path;\n  }\n\n  /**\n   * Decimate points array with the decimate value\n   */\n  decimatePoints(points: Point[], distance: number) {\n    if (points.length <= 2) {\n      return points;\n    }\n    let lastPoint = points[0],\n      cDistance;\n    const zoom = this.canvas.getZoom(),\n      adjustedDistance = Math.pow(distance / zoom, 2),\n      l = points.length - 1,\n      newPoints = [lastPoint];\n    // TODO investigate why this is not i < l\n    for (let i = 1; i < l - 1; i++) {\n      cDistance =\n        Math.pow(lastPoint.x - points[i].x, 2) +\n        Math.pow(lastPoint.y - points[i].y, 2);\n      if (cDistance >= adjustedDistance) {\n        lastPoint = points[i];\n        newPoints.push(lastPoint);\n      }\n    }\n    // Add the last point from the original line to the end of the array.\n    // This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n    newPoints.push(points[l]);\n    return newPoints;\n  }\n\n  /**\n   * On mouseup after drawing the path on contextTop canvas\n   * we use the points captured to create an new Path object\n   * and add it to the canvas.\n   */\n  _finalizeAndAddPath() {\n    const ctx = this.canvas.contextTop;\n    ctx.closePath();\n    if (this.decimate) {\n      this._points = this.decimatePoints(this._points, this.decimate);\n    }\n    const pathData = this.convertPointsToSVGPath(this._points);\n    if (isEmptySVGPath(pathData)) {\n      // do not create 0 width/height paths, as they are\n      // rendered inconsistently across browsers\n      // Firefox 4, for example, renders a dot,\n      // whereas Chrome 10 renders nothing\n      this.canvas.requestRenderAll();\n      return;\n    }\n\n    const path = this.createPath(pathData);\n    this.canvas.clearContext(this.canvas.contextTop);\n    this.canvas.fire('before:path:created', { path: path });\n    this.canvas.add(path);\n    this.canvas.requestRenderAll();\n    path.setCoords();\n    this._resetShadow();\n\n    // fire event 'path' created\n    this.canvas.fire('path:created', { path: path });\n  }\n}\n","import type { ObjectEvents } from '../EventTypeDefs';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { cos } from '../util/misc/cos';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { sin } from '../util/misc/sin';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { CSSRules } from '../parser/typedefs';\nimport { SCALE_X, SCALE_Y } from '../constants';\n\ninterface UniqueCircleProps {\n  /**\n   * Radius of this circle\n   * @type Number\n   * @default 0\n   */\n  radius: number;\n\n  /**\n   * Angle for the start of the circle, in degrees.\n   * @type TDegree 0 - 359\n   * @default 0\n   */\n  startAngle: number;\n\n  /**\n   * Angle for the end of the circle, in degrees\n   * @type TDegree 1 - 360\n   * @default 360\n   */\n  endAngle: number;\n\n  /**\n   * Orientation for the direction of the circle.\n   * Setting to true will switch the arc of the circle to traverse from startAngle to endAngle in a counter-clockwise direction.\n   * Note: this will only change how the circle is drawn, and does not affect rotational transformation.\n   * @default false\n   */\n  counterClockwise: boolean;\n}\n\nexport interface SerializedCircleProps\n  extends SerializedObjectProps,\n    UniqueCircleProps {}\n\nexport interface CircleProps extends FabricObjectProps, UniqueCircleProps {}\n\nconst CIRCLE_PROPS = [\n  'radius',\n  'startAngle',\n  'endAngle',\n  'counterClockwise',\n] as const;\n\nexport const circleDefaultValues: Partial<TClassProperties<Circle>> = {\n  radius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  counterClockwise: false,\n};\n\nexport class Circle<\n    Props extends TOptions<CircleProps> = Partial<CircleProps>,\n    SProps extends SerializedCircleProps = SerializedCircleProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueCircleProps\n{\n  declare radius: number;\n  declare startAngle: number;\n  declare endAngle: number;\n  declare counterClockwise: boolean;\n\n  static type = 'Circle';\n\n  static cacheProperties = [...cacheProperties, ...CIRCLE_PROPS];\n\n  static ownDefaults = circleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Circle.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Circle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n\n    if (key === 'radius') {\n      this.setRadius(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(\n      0,\n      0,\n      this.radius,\n      degreesToRadians(this.startAngle),\n      degreesToRadians(this.endAngle),\n      this.counterClockwise,\n    );\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusX(): number {\n    return this.get('radius') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusY(): number {\n    return this.get('radius') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Sets radius of an object (and updates width accordingly)\n   */\n  setRadius(value: number) {\n    this.radius = value;\n    this.set({ width: value * 2, height: value * 2 });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...CIRCLE_PROPS, ...propertiesToInclude]);\n  }\n\n  /* _TO_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    const angle = (this.endAngle - this.startAngle) % 360;\n\n    if (angle === 0) {\n      return [\n        '<circle ',\n        'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'r=\"',\n        `${this.radius}`,\n        '\" />\\n',\n      ];\n    } else {\n      const { radius } = this;\n      const start = degreesToRadians(this.startAngle),\n        end = degreesToRadians(this.endAngle),\n        startX = cos(start) * radius,\n        startY = sin(start) * radius,\n        endX = cos(end) * radius,\n        endY = sin(end) * radius,\n        largeFlag = angle > 180 ? 1 : 0,\n        sweepFlag = this.counterClockwise ? 0 : 1;\n      return [\n        `<path d=\"M ${startX} ${startY} A ${radius} ${radius} 0 ${largeFlag} ${sweepFlag} ${endX} ${endY}\" `,\n        'COMMON_PARTS',\n        ' />\\n',\n      ];\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Circle.fromElement})\n   * @static\n   * @memberOf Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  static ATTRIBUTE_NAMES = ['cx', 'cy', 'r', ...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns {@link Circle} instance from an SVG element\n   * @static\n   * @memberOf Circle\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Partial Circle object to default missing properties on the element.\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ): Promise<Circle> {\n    const {\n      left = 0,\n      top = 0,\n      radius = 0,\n      ...otherParsedAttributes\n    } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    ) as Partial<CircleProps>;\n\n    // this probably requires to be fixed for default origins not being top/left.\n\n    return new this({\n      ...otherParsedAttributes,\n      radius,\n      left: left - radius,\n      top: top - radius,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * @todo how do we declare this??\n   */\n  static fromObject<T extends TOptions<SerializedCircleProps>>(object: T) {\n    return super._fromObject<Circle>(object);\n  }\n}\n\nclassRegistry.setClass(Circle);\nclassRegistry.setSVGClass(Circle);\n","import { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport { Point } from '../Point';\nimport { isFiller } from '../util/typeAssertions';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { makeBoundingBoxFromPoints } from '../util';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\n// @TODO this code is terrible and Line should be a special case of polyline.\n\nconst coordProps = ['x1', 'x2', 'y1', 'y2'] as const;\n\ninterface UniqueLineProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\nexport interface SerializedLineProps\n  extends SerializedObjectProps,\n    UniqueLineProps {}\n\n/**\n * A Class to draw a line\n * A bunch of methods will be added to Polyline to handle the line case\n * The line class is very strange to work with, is all special, it hardly aligns\n * to what a developer want everytime there is an angle\n * @deprecated\n */\nexport class Line<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedLineProps = SerializedLineProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueLineProps\n{\n  /**\n   * x value or first line edge\n   * @type number\n   * @default\n   */\n  declare x1: number;\n\n  /**\n   * y value or first line edge\n   * @type number\n   * @default\n   */\n  declare y1: number;\n\n  /**\n   * x value or second line edge\n   * @type number\n   * @default\n   */\n  declare x2: number;\n\n  /**\n   * y value or second line edge\n   * @type number\n   * @default\n   */\n  declare y2: number;\n\n  static type = 'Line';\n\n  static cacheProperties = [...cacheProperties, ...coordProps];\n  /**\n   * Constructor\n   * @param {Array} [points] Array of points\n   * @param {Object} [options] Options object\n   * @return {Line} thisArg\n   */\n  constructor([x1, y1, x2, y2] = [0, 0, 0, 0], options: Partial<Props> = {}) {\n    super();\n    Object.assign(this, Line.ownDefaults);\n    this.setOptions(options);\n    this.x1 = x1;\n    this.x2 = x2;\n    this.y1 = y1;\n    this.y2 = y2;\n    this._setWidthHeight();\n    const { left, top } = options;\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {Object} [options] Options\n   */\n  _setWidthHeight() {\n    const { x1, y1, x2, y2 } = this;\n    this.width = Math.abs(x2 - x1);\n    this.height = Math.abs(y2 - y1);\n    const { left, top, width, height } = makeBoundingBoxFromPoints([\n      { x: x1, y: y1 },\n      { x: x2, y: y2 },\n    ]);\n    const position = new Point(left + width / 2, top + height / 2);\n    this.setPositionByOrigin(position, CENTER, CENTER);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    if (coordProps.includes(key as keyof UniqueLineProps)) {\n      // this doesn't make sense very much, since setting x1 when top or left\n      // are already set, is just going to show a strange result since the\n      // line will move way more than the developer expect.\n      // in fabric5 it worked only when the line didn't have extra transformations,\n      // in fabric6 too. With extra transform they behave bad in different ways.\n      // This needs probably a good rework or a tutorial if you have to create a dynamic line\n      this._setWidthHeight();\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n\n    const p = this.calcLinePoints();\n    ctx.moveTo(p.x1, p.y1);\n    ctx.lineTo(p.x2, p.y2);\n\n    ctx.lineWidth = this.strokeWidth;\n\n    // TODO: test this\n    // make sure setting \"fill\" changes color of a line\n    // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n    const origStrokeStyle = ctx.strokeStyle;\n    if (isFiller(this.stroke)) {\n      ctx.strokeStyle = this.stroke.toLive(ctx)!;\n    } else {\n      ctx.strokeStyle = this.stroke ?? ctx.fillStyle;\n    }\n    this.stroke && this._renderStroke(ctx);\n    ctx.strokeStyle = origStrokeStyle;\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    return new Point((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      ...this.calcLinePoints(),\n    };\n  }\n\n  /*\n   * Calculate object dimensions from its properties\n   * @private\n   */\n  _getNonTransformedDimensions(): Point {\n    const dim = super._getNonTransformedDimensions();\n    if (this.strokeLineCap === 'butt') {\n      if (this.width === 0) {\n        dim.y -= this.strokeWidth;\n      }\n      if (this.height === 0) {\n        dim.x -= this.strokeWidth;\n      }\n    }\n    return dim;\n  }\n\n  /**\n   * Recalculates line points given width and height\n   * Those points are simply placed around the center,\n   * This is not useful outside internal render functions and svg output\n   * Is not meant to be for the developer.\n   * @private\n   */\n  calcLinePoints(): UniqueLineProps {\n    const { x1: _x1, x2: _x2, y1: _y1, y2: _y2, width, height } = this;\n    const xMult = _x1 <= _x2 ? -1 : 1,\n      yMult = _y1 <= _y2 ? -1 : 1,\n      x1 = (xMult * width) / 2,\n      y1 = (yMult * height) / 2,\n      x2 = (xMult * -width) / 2,\n      y2 = (yMult * -height) / 2;\n\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { x1, x2, y1, y2 } = this.calcLinePoints();\n    return [\n      '<line ',\n      'COMMON_PARTS',\n      `x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Line.fromElement})\n   * @static\n   * @memberOf Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(coordProps);\n\n  /**\n   * Returns Line instance from an SVG element\n   * @static\n   * @memberOf Line\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      x1 = 0,\n      y1 = 0,\n      x2 = 0,\n      y2 = 0,\n      ...parsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n    return new this([x1, y1, x2, y2], parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Line instance from an object representation\n   * @static\n   * @memberOf Line\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Line>}\n   */\n  static fromObject<T extends TOptions<SerializedLineProps>>({\n    x1,\n    y1,\n    x2,\n    y2,\n    ...object\n  }: T) {\n    return this._fromObject<Line>(\n      {\n        ...object,\n        points: [x1, y1, x2, y2],\n      },\n      {\n        extraParam: 'points',\n      },\n    );\n  }\n}\n\nclassRegistry.setClass(Line);\nclassRegistry.setSVGClass(Line);\n","import { classRegistry } from '../ClassRegistry';\nimport { FabricObject } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { TClassProperties, TOptions } from '../typedefs';\nimport type { ObjectEvents } from '../EventTypeDefs';\n\nexport const triangleDefaultValues: Partial<TClassProperties<Triangle>> = {\n  width: 100,\n  height: 100,\n};\n\nexport class Triangle<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  static type = 'Triangle';\n\n  static ownDefaults = triangleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...Triangle.ownDefaults };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Triangle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(-widthBy2, heightBy2);\n    ctx.lineTo(0, -heightBy2);\n    ctx.lineTo(widthBy2, heightBy2);\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2,\n      points = `${-widthBy2} ${heightBy2},0 ${-heightBy2},${widthBy2} ${heightBy2}`;\n    return ['<polygon ', 'COMMON_PARTS', 'points=\"', points, '\" />'];\n  }\n}\n\nclassRegistry.setClass(Triangle);\nclassRegistry.setSVGClass(Triangle);\n","import { SCALE_X, SCALE_Y, twoMathPi } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const ellipseDefaultValues: Partial<TClassProperties<Ellipse>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueEllipseProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedEllipseProps\n  extends SerializedObjectProps,\n    UniqueEllipseProps {}\n\nexport interface EllipseProps extends FabricObjectProps, UniqueEllipseProps {}\n\nconst ELLIPSE_PROPS = ['rx', 'ry'] as const;\n\nexport class Ellipse<\n    Props extends TOptions<EllipseProps> = Partial<EllipseProps>,\n    SProps extends SerializedEllipseProps = SerializedEllipseProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements EllipseProps\n{\n  /**\n   * Horizontal radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Ellipse';\n\n  static cacheProperties = [...cacheProperties, ...ELLIPSE_PROPS];\n\n  static ownDefaults = ellipseDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Ellipse.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Ellipse.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   * @return {Ellipse} thisArg\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    switch (key) {\n      case 'rx':\n        this.rx = value;\n        this.set('width', value * 2);\n        break;\n\n      case 'ry':\n        this.ry = value;\n        this.set('height', value * 2);\n        break;\n    }\n    return this;\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRx() {\n    return this.get('rx') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns Vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRy() {\n    return this.get('ry') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...ELLIPSE_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    return [\n      '<ellipse ',\n      'COMMON_PARTS',\n      `cx=\"0\" cy=\"0\" rx=\"${this.rx}\" ry=\"${this.ry}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n    ctx.arc(0, 0, this.rx, 0, twoMathPi, false);\n    ctx.restore();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Ellipse.fromElement})\n   * @static\n   * @memberOf Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'cx', 'cy', 'rx', 'ry'];\n\n  /**\n   * Returns {@link Ellipse} instance from an SVG element\n   * @static\n   * @memberOf Ellipse\n   * @param {HTMLElement} element Element to parse\n   * @return {Ellipse}\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    return new this(parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Ellipse);\nclassRegistry.setSVGClass(Ellipse);\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { parsePointsAttribute } from '../parser/parsePointsAttribute';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { calcDimensionsMatrix, transformPoint } from '../util/misc/matrix';\nimport { projectStrokeOnPoints } from '../util/misc/projectStroke';\nimport type { TProjectStrokeOnPointsOptions } from '../util/misc/projectStroke/types';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport {\n  CENTER,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const polylineDefaultValues: Partial<TClassProperties<Polyline>> = {\n  /**\n   * @deprecated transient option soon to be removed in favor of a different design\n   */\n  exactBoundingBox: false,\n};\n\nexport interface SerializedPolylineProps extends SerializedObjectProps {\n  points: XY[];\n}\n\nexport class Polyline<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedPolylineProps = SerializedPolylineProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Points array\n   * @type Array\n   * @default\n   */\n  declare points: XY[];\n\n  /**\n   * WARNING: Feature in progress\n   * Calculate the exact bounding box taking in account strokeWidth on acute angles\n   * this will be turned to true by default on fabric 6.0\n   * maybe will be left in as an optimization since calculations may be slow\n   * @deprecated transient option soon to be removed in favor of a different design\n   * @type Boolean\n   * @default false\n   */\n  declare exactBoundingBox: boolean;\n\n  declare private initialized: true | undefined;\n\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polyline';\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Polyline.ownDefaults,\n    };\n  }\n\n  /**\n   * A list of properties that if changed trigger a recalculation of dimensions\n   * @todo check if you really need to recalculate for all cases\n   */\n  static layoutProperties: (keyof Polyline)[] = [\n    SKEW_X,\n    SKEW_Y,\n    'strokeLineCap',\n    'strokeLineJoin',\n    'strokeMiterLimit',\n    'strokeWidth',\n    'strokeUniform',\n    'points',\n  ];\n\n  declare pathOffset: Point;\n\n  declare strokeOffset: Point;\n\n  static cacheProperties = [...cacheProperties, 'points'];\n\n  strokeDiff: Point;\n\n  /**\n   * Constructor\n   * @param {Array} points Array of points (where each point is an object with x and y)\n   * @param {Object} [options] Options object\n   * @return {Polyline} thisArg\n   * @example\n   * var poly = new Polyline([\n   *     { x: 10, y: 10 },\n   *     { x: 50, y: 30 },\n   *     { x: 40, y: 70 },\n   *     { x: 60, y: 50 },\n   *     { x: 100, y: 150 },\n   *     { x: 40, y: 100 }\n   *   ], {\n   *   stroke: 'red',\n   *   left: 100,\n   *   top: 100\n   * });\n   */\n  constructor(points: XY[] = [], options: Props = {} as Props) {\n    super();\n    Object.assign(this, Polyline.ownDefaults);\n    this.setOptions(options);\n    this.points = points;\n    const { left, top } = options;\n    this.initialized = true;\n    this.setBoundingBox(true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  protected isOpen() {\n    return true;\n  }\n\n  private _projectStrokeOnPoints(options: TProjectStrokeOnPointsOptions) {\n    return projectStrokeOnPoints(this.points, options, this.isOpen());\n  }\n\n  /**\n   * Calculate the polygon bounding box\n   * @private\n   */\n  _calcDimensions(options?: Partial<TProjectStrokeOnPointsOptions>) {\n    options = {\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      strokeLineCap: this.strokeLineCap,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeUniform: this.strokeUniform,\n      strokeWidth: this.strokeWidth,\n      ...(options || {}),\n    };\n    const points = this.exactBoundingBox\n      ? this._projectStrokeOnPoints(\n          options as TProjectStrokeOnPointsOptions,\n        ).map((projection) => projection.projectedPoint)\n      : this.points;\n    if (points.length === 0) {\n      return {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        pathOffset: new Point(),\n        strokeOffset: new Point(),\n        strokeDiff: new Point(),\n      };\n    }\n    const bbox = makeBoundingBoxFromPoints(points),\n      // Remove scale effect, since it's applied after\n      matrix = calcDimensionsMatrix({ ...options, scaleX: 1, scaleY: 1 }),\n      bboxNoStroke = makeBoundingBoxFromPoints(\n        this.points.map((p) => transformPoint(p, matrix, true)),\n      ),\n      scale = new Point(this.scaleX, this.scaleY);\n    let offsetX = bbox.left + bbox.width / 2,\n      offsetY = bbox.top + bbox.height / 2;\n    if (this.exactBoundingBox) {\n      offsetX = offsetX - offsetY * Math.tan(degreesToRadians(this.skewX));\n      // Order of those assignments is important.\n      // offsetY relies on offsetX being already changed by the line above\n      offsetY = offsetY - offsetX * Math.tan(degreesToRadians(this.skewY));\n    }\n\n    return {\n      ...bbox,\n      pathOffset: new Point(offsetX, offsetY),\n      strokeOffset: new Point(bboxNoStroke.left, bboxNoStroke.top)\n        .subtract(new Point(bbox.left, bbox.top))\n        .multiply(scale),\n      strokeDiff: new Point(bbox.width, bbox.height)\n        .subtract(new Point(bboxNoStroke.width, bboxNoStroke.height))\n        .multiply(scale),\n    };\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = makeBoundingBoxFromPoints(this.points);\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { left, top, width, height, pathOffset, strokeOffset, strokeDiff } =\n      this._calcDimensions();\n    this.set({ width, height, pathOffset, strokeOffset, strokeDiff });\n    adjustPosition &&\n      this.setPositionByOrigin(\n        new Point(left + width / 2, top + height / 2),\n        CENTER,\n        CENTER,\n      );\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return this.exactBoundingBox;\n  }\n\n  /**\n   * @override stroke is taken in account in size\n   */\n  _getNonTransformedDimensions() {\n    return this.exactBoundingBox\n      ? // TODO: fix this\n        new Point(this.width, this.height)\n      : super._getNonTransformedDimensions();\n  }\n\n  /**\n   * @override stroke and skewing are taken into account when projecting stroke on points,\n   * therefore we don't want the default calculation to account for skewing as well.\n   * Though it is possible to pass `width` and `height` in `options`, doing so is very strange, use with discretion.\n   *\n   * @private\n   */\n  _getTransformedDimensions(options: any = {}) {\n    if (this.exactBoundingBox) {\n      let size: Point;\n      /* When `strokeUniform = true`, any changes to the properties require recalculating the `width` and `height` because\n        the stroke projections are affected.\n        When `strokeUniform = false`, we don't need to recalculate for scale transformations, as the effect of scale on\n        projections follows a linear function (e.g. scaleX of 2 just multiply width by 2)*/\n      if (\n        Object.keys(options).some(\n          (key) =>\n            this.strokeUniform ||\n            (this.constructor as typeof Polyline).layoutProperties.includes(\n              key as keyof TProjectStrokeOnPointsOptions,\n            ),\n        )\n      ) {\n        const { width, height } = this._calcDimensions(options);\n        size = new Point(options.width ?? width, options.height ?? height);\n      } else {\n        size = new Point(\n          options.width ?? this.width,\n          options.height ?? this.height,\n        );\n      }\n      return size.multiply(\n        new Point(options.scaleX || this.scaleX, options.scaleY || this.scaleY),\n      );\n    } else {\n      return super._getTransformedDimensions(options);\n    }\n  }\n\n  /**\n   * Recalculates dimensions when changing skew and scale\n   * @private\n   */\n  _set(key: string, value: any) {\n    const changed = this.initialized && this[key as keyof this] !== value;\n    const output = super._set(key, value);\n    if (\n      this.exactBoundingBox &&\n      changed &&\n      (((key === SCALE_X || key === SCALE_Y) &&\n        this.strokeUniform &&\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          'strokeUniform',\n        )) ||\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          key as keyof Polyline,\n        ))\n    ) {\n      this.setDimensions();\n    }\n    return output;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      points: this.points.map(({ x, y }) => ({ x, y })),\n    };\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const points = [],\n      diffX = this.pathOffset.x,\n      diffY = this.pathOffset.y,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n\n    for (let i = 0, len = this.points.length; i < len; i++) {\n      points.push(\n        toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS),\n        ',',\n        toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS),\n        ' ',\n      );\n    }\n    return [\n      `<${\n        (this.constructor as typeof Polyline).type.toLowerCase() as\n          | 'polyline'\n          | 'polygon'\n      } `,\n      'COMMON_PARTS',\n      `points=\"${points.join('')}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const len = this.points.length,\n      x = this.pathOffset.x,\n      y = this.pathOffset.y;\n\n    if (!len || isNaN(this.points[len - 1].y)) {\n      // do not draw if no points or odd points\n      // NaN comes from parseFloat of a empty string in parser\n      return;\n    }\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n    for (let i = 0; i < len; i++) {\n      const point = this.points[i];\n      ctx.lineTo(point.x - x, point.y - y);\n    }\n    !this.isOpen() && ctx.closePath();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance\n   */\n  complexity(): number {\n    return this.points.length;\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Polyline.fromElement})\n   * @static\n   * @memberOf Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns Polyline instance from an SVG element\n   * @static\n   * @memberOf Polyline\n   * @param {HTMLElement} element Element to parser\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement | SVGElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const points = parsePointsAttribute(element.getAttribute('points')),\n      // we omit left and top to instruct the constructor to position the object using the bbox\n\n      { left, top, ...parsedAttributes } = parseAttributes(\n        element,\n        this.ATTRIBUTE_NAMES,\n        cssRules,\n      );\n    return new this(points, {\n      ...parsedAttributes,\n      ...options,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Polyline instance from an object representation\n   * @static\n   * @memberOf Polyline\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Polyline>}\n   */\n  static fromObject<T extends TOptions<SerializedPolylineProps>>(object: T) {\n    return this._fromObject<Polyline>(object, {\n      extraParam: 'points',\n    });\n  }\n}\n\nclassRegistry.setClass(Polyline);\nclassRegistry.setSVGClass(Polyline);\n","import type { XY } from '../Point';\n\n/**\n * Parses \"points\" attribute, returning an array of values\n * @static\n * @memberOf fabric\n * @param {String} points points attribute string\n * @return {Array} array of points\n */\nexport function parsePointsAttribute(points: string | null): XY[] {\n  // points attribute is required and must not be empty\n  if (!points) {\n    return [];\n  }\n\n  // replace commas with whitespace and remove bookending whitespace\n  const pointsSplit: string[] = points.replace(/,/g, ' ').trim().split(/\\s+/);\n\n  const parsedPoints = [];\n\n  for (let i = 0; i < pointsSplit.length; i += 2) {\n    parsedPoints.push({\n      x: parseFloat(pointsSplit[i]),\n      y: parseFloat(pointsSplit[i + 1]),\n    });\n  }\n\n  // odd number of points is an error\n  // if (parsedPoints.length % 2 !== 0) {\n  //   return null;\n  // }\n  return parsedPoints;\n}\n","import { classRegistry } from '../ClassRegistry';\nimport { Polyline, polylineDefaultValues } from './Polyline';\n\nexport class Polygon extends Polyline {\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polygon';\n\n  protected isOpen() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Polygon);\nclassRegistry.setSVGClass(Polygon);\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { TOptions } from '../../typedefs';\nimport { FabricObject } from '../Object/FabricObject';\nimport { styleProperties } from './constants';\nimport type { StylePropertiesType } from './constants';\nimport type { FabricText } from './Text';\nimport { pick } from '../../util';\nimport { pickBy } from '../../util/misc/pick';\n\nexport type CompleteTextStyleDeclaration = Pick<\n  FabricText,\n  StylePropertiesType\n>;\n\nexport type TextStyleDeclaration = Partial<CompleteTextStyleDeclaration>;\n\nexport type TextStyle = {\n  [line: number | string]: { [char: number | string]: TextStyleDeclaration };\n};\n\nexport abstract class StyledText<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  declare abstract styles: TextStyle;\n  declare protected abstract _textLines: string[][];\n  declare protected _forceClearCache: boolean;\n  static _styleProperties: Readonly<StylePropertiesType[]> = styleProperties;\n  abstract get2DCursorLocation(\n    selectionStart: number,\n    skipWrapping?: boolean,\n  ): { charIndex: number; lineIndex: number };\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex?: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return true;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        // eslint-disable-next-line no-unused-vars\n        for (const p3 in obj[p1][p2]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if object has a style property or has it ina specified line\n   * This function is used to detect if a text will use a particular property or not.\n   * @param {String} property to check for\n   * @param {Number} lineIndex to check the style on\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex?: number): boolean {\n    if (!this.styles) {\n      return false;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return false;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { 0: this.styles[lineIndex] };\n    // eslint-disable-next-line\n    for (const p1 in obj) {\n      // eslint-disable-next-line\n      for (const p2 in obj[p1]) {\n        if (typeof obj[p1][p2][property] !== 'undefined') {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if characters in a text have a value for a property\n   * whose value matches the textbox's value for that property.  If so,\n   * the character-level property is deleted.  If the character\n   * has no other properties, then it is also deleted.  Finally,\n   * if the line containing that character has no other characters\n   * then it also is deleted.\n   */\n  cleanStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return false;\n    }\n    const obj = this.styles;\n    let stylesCount = 0,\n      letterCount,\n      stylePropertyValue,\n      allStyleObjectPropertiesMatch = true,\n      graphemeCount = 0;\n    for (const p1 in obj) {\n      letterCount = 0;\n      for (const p2 in obj[p1]) {\n        const styleObject = obj[p1][p2] || {},\n          stylePropertyHasBeenSet = styleObject[property] !== undefined;\n\n        stylesCount++;\n\n        if (stylePropertyHasBeenSet) {\n          if (!stylePropertyValue) {\n            stylePropertyValue = styleObject[property];\n          } else if (styleObject[property] !== stylePropertyValue) {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (styleObject[property] === this[property as keyof this]) {\n            delete styleObject[property];\n          }\n        } else {\n          allStyleObjectPropertiesMatch = false;\n        }\n\n        if (Object.keys(styleObject).length !== 0) {\n          letterCount++;\n        } else {\n          delete obj[p1][p2];\n        }\n      }\n\n      if (letterCount === 0) {\n        delete obj[p1];\n      }\n    }\n    // if every grapheme has the same style set then\n    // delete those styles and set it on the parent\n    for (let i = 0; i < this._textLines.length; i++) {\n      graphemeCount += this._textLines[i].length;\n    }\n    if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n      this[property as keyof this] = stylePropertyValue as any;\n      this.removeStyle(property);\n    }\n  }\n\n  /**\n   * Remove a style property or properties from all individual character styles\n   * in a text object.  Deletes the character style object if it contains no other style\n   * props.  Deletes a line style object if it contains no other character styles.\n   *\n   * @param {String} props The property to remove from character styles.\n   */\n  removeStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return;\n    }\n    const obj = this.styles;\n    let line, lineNum, charNum;\n    for (lineNum in obj) {\n      line = obj[lineNum];\n      for (charNum in line) {\n        delete line[charNum][property];\n        if (Object.keys(line[charNum]).length === 0) {\n          delete line[charNum];\n        }\n      }\n      if (Object.keys(line).length === 0) {\n        delete obj[lineNum];\n      }\n    }\n  }\n\n  private _extendStyles(index: number, style: TextStyleDeclaration): void {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(index);\n\n    if (!this._getLineStyle(lineIndex)) {\n      this._setLineStyle(lineIndex);\n    }\n\n    const newStyle = pickBy(\n      {\n        // first create a new object that is a merge of existing and new\n        ...this._getStyleDeclaration(lineIndex, charIndex),\n        ...style,\n        // use the predicate to discard undefined values\n      },\n      (value) => value !== undefined,\n    );\n\n    // finally assign to the old position the new style\n    this._setStyleDeclaration(lineIndex, charIndex, newStyle);\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number,\n    endIndex?: number,\n    complete?: boolean,\n  ): TextStyleDeclaration[] {\n    const styles: TextStyleDeclaration[] = [];\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      styles.push(this.getStyleAtPosition(i, complete));\n    }\n    return styles;\n  }\n\n  /**\n   * Gets style of a current selection/cursor position\n   * @param {Number} position  to get styles at\n   * @param {Boolean} [complete] full style if true\n   * @return {Object} style Style object at a specified index\n   * @private\n   */\n  getStyleAtPosition(position: number, complete?: boolean) {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(position);\n    return complete\n      ? this.getCompleteStyleDeclaration(lineIndex, charIndex)\n      : this._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} styles Styles object\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified startIndex + 1\n   */\n  setSelectionStyles(styles: object, startIndex: number, endIndex?: number) {\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      this._extendStyles(i, styles);\n    }\n    /* not included in _extendStyles to avoid clearing cache more than once */\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Get a reference, not a clone, to the style object for a given character,\n   * if no style is set for a line or char, return a new empty object.\n   * This is tricky and confusing because when you get an empty object you can't\n   * determine if it is a reference or a new one.\n   * @TODO this should always return a reference or always a clone or undefined when necessary.\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    const lineStyle = this.styles && this.styles[lineIndex];\n    return lineStyle ? (lineStyle[charIndex] ?? {}) : {};\n  }\n\n  /**\n   * return a new object that contains all the style property for a character\n   * the object returned is newly created\n   * @param {Number} lineIndex of the line where the character is\n   * @param {Number} charIndex position of the character on the line\n   * @return {Object} style object\n   */\n  getCompleteStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): CompleteTextStyleDeclaration {\n    return {\n      ...pick(\n        this,\n        (this.constructor as typeof StyledText)\n          ._styleProperties as (keyof this)[],\n      ),\n      ...this._getStyleDeclaration(lineIndex, charIndex),\n    } as CompleteTextStyleDeclaration;\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    this.styles[lineIndex][charIndex] = style;\n  }\n\n  /**\n   *\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    delete this.styles[lineIndex][charIndex];\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @return {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    return !!this.styles[lineIndex];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    this.styles[lineIndex] = {};\n  }\n\n  protected _deleteLineStyle(lineIndex: number) {\n    delete this.styles[lineIndex];\n  }\n}\n","import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText, GraphemeBBox } from './Text';\nimport { STROKE, FILL } from '../../constants';\nimport { createRotateMatrix } from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport { Point } from '../../Point';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver?: TSVGReviver): string {\n    const textSvg = this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      noStyle: true,\n      withShadow: true,\n    });\n    return textSvg;\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    },\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n\n    return [textSpans.join('')];\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `,\n      `font-size=\"${this.fontSize}\" `,\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number,\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height,\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number,\n    charBox: GraphemeBBox,\n  ) {\n    const numFractionDigit = config.NUM_FRACTION_DIGITS,\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, numFractionDigit)}\" ` : '',\n      { angle, renderLeft, renderTop, width } = charBox;\n    let angleAttr = '';\n    if (renderLeft !== undefined) {\n      const wBy2 = width / 2;\n      angle &&\n        (angleAttr = ` rotate=\"${toFixed(radiansToDegrees(angle), numFractionDigit)}\"`);\n      const m = createRotateMatrix({ angle: radiansToDegrees(angle!) });\n      m[4] = renderLeft!;\n      m[5] = renderTop!;\n      const renderPoint = new Point(-wBy2, 0).transform(m);\n      left = renderPoint.x;\n      top = renderPoint.y;\n    }\n\n    const value = char;\n    const path = (this as any).font.getPath(value, 0, 0, this.fontSize, {\n      kerning: true,\n      features: {\n        liga: true,\n      },\n    });\n    const pathData = path.toPathData(2);\n\n    const style = this.getSvgStyles(true);\n\n    return `<path style=\"${style}\" vector-effect=\"non-scaling-stroke\" transform=\"translate(${toFixed(\n      left,\n      numFractionDigit,\n    )}, ${toFixed(top, numFractionDigit)})\" d=\"${pathData}\" ${dySpan} ${angleAttr}></path>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || this.path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing or a path, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset,\n            charBox,\n          ),\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number,\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine,\n            ),\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine,\n        ),\n      );\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    return `${super.getSvgStyles(skipShadow)} text-decoration-thickness: ${toFixed((this.textDecorationThickness * this.getObjectScaling().y) / 10, config.NUM_FRACTION_DIGITS)}%; white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean,\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n      textDecorationThickness,\n      linethrough,\n      overline,\n      underline,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration({\n      underline: underline ?? this.underline,\n      overline: overline ?? this.overline,\n      linethrough: linethrough ?? this.linethrough,\n    });\n    const thickness = textDecorationThickness || this.textDecorationThickness;\n    return [\n      stroke ? colorPropToSVG(STROKE, stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration\n        ? `text-decoration: ${textDecoration}; text-decoration-thickness: ${toFixed((thickness * this.getObjectScaling().y) / 10, config.NUM_FRACTION_DIGITS)}%; `\n        : '',\n      fill ? colorPropToSVG(FILL, fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ],\n      )\n      .join(' ');\n  }\n}\n","import { cache } from '../../cache';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, STROKE } from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type {\n  CompleteTextStyleDeclaration,\n  TextStyle,\n  TextStyleDeclaration,\n} from './StyledText';\nimport { StyledText } from './StyledText';\nimport { SHARED_ATTRIBUTES } from '../../parser/attributes';\nimport { parseAttributes } from '../../parser/parseAttributes';\nimport type {\n  Abortable,\n  TCacheCanvasDimensions,\n  TClassProperties,\n  TFiller,\n  TOptions,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { graphemeSplit } from '../../util/lang_string';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport type { TextStyleArray } from '../../util/misc/textStyles';\nimport {\n  hasStyleChanged,\n  stylesFromArray,\n  stylesToArray,\n} from '../../util/misc/textStyles';\nimport { getPathSegmentsInfo, getPointOnPath } from '../../util/path';\nimport { cacheProperties } from '../Object/FabricObject';\nimport type { Path } from '../Path';\nimport { TextSVGExportMixin } from './TextSVGExportMixin';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { StylePropertiesType } from './constants';\nimport {\n  additionalProps,\n  textDefaultValues,\n  textLayoutProperties,\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n  TEXT_DECORATION_THICKNESS,\n} from './constants';\nimport { CENTER, LEFT, RIGHT, TOP, BOTTOM } from '../../constants';\nimport { isFiller } from '../../util/typeAssertions';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { CSSRules } from '../../parser/typedefs';\n\nlet measuringContext: CanvasRenderingContext2D | null;\n\n/**\n * Return a context for measurement of text string.\n * if created it gets stored for reuse\n */\nexport function getMeasuringContext() {\n  if (!measuringContext) {\n    const canvas = createCanvasElementFor({\n      width: 0,\n      height: 0,\n    });\n    measuringContext = canvas.getContext('2d');\n  }\n  return measuringContext;\n}\n\nexport type TPathSide = 'left' | 'right';\n\nexport type TPathAlign = 'baseline' | 'center' | 'ascender' | 'descender';\n\nexport type TextLinesInfo = {\n  lines: string[];\n  graphemeLines: string[][];\n  graphemeText: string[];\n  _unwrappedLines: string[][];\n};\n\n/**\n * Measure and return the info of a single grapheme.\n * needs the the info of previous graphemes already filled\n * Override to customize measuring\n */\nexport type GraphemeBBox = {\n  width: number;\n  height: number;\n  kernedWidth: number;\n  left: number;\n  deltaY: number;\n  renderLeft?: number;\n  renderTop?: number;\n  angle?: number;\n};\n\n// @TODO this is not complete\ninterface UniqueTextProps {\n  charSpacing: number;\n  lineHeight: number;\n  fontSize: number;\n  fontWeight: string | number;\n  fontFamily: string;\n  fontStyle: string;\n  pathSide: TPathSide;\n  pathAlign: TPathAlign;\n  underline: boolean;\n  overline: boolean;\n  linethrough: boolean;\n  textAlign: string;\n  direction: CanvasDirection;\n  path?: Path;\n  textDecorationThickness: number;\n}\n\nexport interface SerializedTextProps\n  extends SerializedObjectProps,\n    UniqueTextProps {\n  styles: TextStyleArray | TextStyle;\n}\n\nexport interface TextProps extends FabricObjectProps, UniqueTextProps {\n  styles: TextStyle;\n}\n\n/**\n * Text class\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n */\nexport class FabricText<\n    Props extends TOptions<TextProps> = Partial<TextProps>,\n    SProps extends SerializedTextProps = SerializedTextProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends StyledText<Props, SProps, EventSpec>\n  implements UniqueTextProps\n{\n  /**\n   * Properties that requires a text layout recalculation when changed\n   * @type string[]\n   * @protected\n   */\n  static textLayoutProperties: string[] = textLayoutProperties;\n\n  /**\n   * @private\n   */\n  declare _reNewline: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespaces that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpacesAndTabs: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespace that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpaceAndTab: RegExp;\n\n  /**\n   * Use this regular expression to filter consecutive groups of non spaces.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reWords: RegExp;\n\n  declare text: string;\n\n  /**\n   * Font size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare fontSize: number;\n\n  /**\n   * Font weight (e.g. bold, normal, 400, 600, 800)\n   * @type {(Number|String)}\n   * @default\n   */\n  declare fontWeight: string | number;\n\n  /**\n   * Font family\n   * @type String\n   * @default\n   */\n  declare fontFamily: string;\n\n  /**\n   * Text decoration underline.\n   * @type Boolean\n   * @default\n   */\n  declare underline: boolean;\n\n  /**\n   * Text decoration overline.\n   * @type Boolean\n   * @default\n   */\n  declare overline: boolean;\n\n  /**\n   * Text decoration linethrough.\n   * @type Boolean\n   * @default\n   */\n  declare linethrough: boolean;\n\n  /**\n   * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n   * \"justify-left\", \"justify-center\" or \"justify-right\".\n   * @type String\n   * @default\n   */\n  declare textAlign: string;\n\n  /**\n   * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n   * @type String\n   * @default\n   */\n  declare fontStyle: string;\n\n  /**\n   * Line height\n   * @type Number\n   * @default\n   */\n  declare lineHeight: number;\n\n  /**\n   * Superscript schema object (minimum overlap)\n   */\n  declare superscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (upwards)\n     * @default -0.35\n     */\n    baseline: number;\n  };\n\n  /**\n   * Subscript schema object (minimum overlap)\n   */\n  declare subscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (downwards)\n     * @default 0.11\n     */\n    baseline: number;\n  };\n\n  /**\n   * Background color of text lines\n   * @type String\n   * @default\n   */\n  declare textBackgroundColor: string;\n\n  declare styles: TextStyle;\n\n  /**\n   * Path that the text should follow.\n   * since 4.6.0 the path will be drawn automatically.\n   * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n   * if you want it to be hidden, assign visible = false to the path.\n   * This feature is in BETA, and SVG import/export is not yet supported.\n   * @type Path\n   * @example\n   * const textPath = new Text('Text on a path', {\n   *     top: 150,\n   *     left: 150,\n   *     textAlign: 'center',\n   *     charSpacing: -50,\n   *     path: new Path('M 0 0 C 50 -100 150 -100 200 0', {\n   *         strokeWidth: 1,\n   *         visible: false\n   *     }),\n   *     pathSide: 'left',\n   *     pathStartOffset: 0\n   * });\n   * @default\n   */\n  declare path?: Path;\n\n  /**\n   * The text decoration tickness for underline, overline and strikethrough\n   * The tickness is expressed in thousandths of fontSize ( em ).\n   * The original value was 1/15 that translates to 66.6667 thousandths.\n   * The choice of unit of measure is to align with charSpacing.\n   * You can slim the tickness without issues, while large underline or overline may end up\n   * outside the bounding box of the text. In order to fix that a bigger refactor of the code\n   * is needed and is out of scope for now. If you need such large overline on the first line\n   * of text or large underline on the last line of text, consider disabling caching as a\n   * workaround\n   * @default 66.667\n   */\n  declare textDecorationThickness: number;\n\n  /**\n   * Offset amount for text path starting position\n   * Only used when text has a path\n   * @default\n   */\n  declare pathStartOffset: number;\n\n  /**\n   * Which side of the path the text should be drawn on.\n   * Only used when text has a path\n   * @type {TPathSide} 'left|right'\n   * @default\n   */\n  declare pathSide: TPathSide;\n\n  /**\n   * How text is aligned to the path. This property determines\n   * the perpendicular position of each character relative to the path.\n   * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n   * This feature is in BETA, and its behavior may change\n   * @type TPathAlign\n   * @default\n   */\n  declare pathAlign: TPathAlign;\n\n  /**\n   * @private\n   */\n  declare _fontSizeFraction: number;\n\n  /**\n   * @private\n   */\n  declare offsets: { underline: number; linethrough: number; overline: number };\n\n  /**\n   * Text Line proportion to font Size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare _fontSizeMult: number;\n\n  /**\n   * additional space between characters\n   * expressed in thousands of em unit\n   * @type Number\n   * @default\n   */\n  declare charSpacing: number;\n\n  /**\n   * Baseline shift, styles only, keep at 0 for the main text object\n   * @type {Number}\n   * @default\n   */\n  declare deltaY: number;\n\n  /**\n   * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n   * determine the direction of the text.\n   * This has to be set manually together with textAlign and originX for proper\n   * experience.\n   * some interesting link for the future\n   * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n   * @since 4.5.0\n   * @type {CanvasDirection} 'ltr|rtl'\n   * @default\n   */\n  declare direction: CanvasDirection;\n\n  /**\n   * contains characters bounding boxes\n   * This variable is considered to be protected.\n   * But for how mixins are implemented right now, we can't leave it private\n   * @protected\n   */\n  __charBounds: GraphemeBBox[][] = [];\n\n  /**\n   * use this size when measuring text. To avoid IE11 rounding errors\n   * @type {Number}\n   * @default\n   * @readonly\n   * @private\n   */\n  declare CACHE_FONT_SIZE: number;\n\n  /**\n   * contains the min text width to avoid getting 0\n   * @type {Number}\n   * @default\n   */\n  declare MIN_TEXT_WIDTH: number;\n\n  /**\n   * contains the the text of the object, divided in lines as they are displayed\n   * on screen. Wrapping will divide the text independently of line breaks\n   * @type {string[]}\n   * @default\n   */\n  declare textLines: string[];\n\n  /**\n   * same as textlines, but each line is an array of graphemes as split by splitByGrapheme\n   * @type {string[]}\n   * @default\n   */\n  declare _textLines: string[][];\n\n  declare _unwrappedTextLines: string[][];\n  declare _text: string[];\n  declare cursorWidth: number;\n  declare __lineHeights: number[];\n  declare __lineWidths: number[];\n  declare initialized?: true;\n\n  static cacheProperties = [...cacheProperties, ...additionalProps];\n\n  static ownDefaults = textDefaultValues;\n\n  static type = 'Text';\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...FabricText.ownDefaults };\n  }\n\n  constructor(text: string, options?: Props) {\n    super();\n    Object.assign(this, FabricText.ownDefaults);\n    this.setOptions(options);\n    if (!this.styles) {\n      this.styles = {};\n    }\n    this.text = text;\n    this.initialized = true;\n    if (this.path) {\n      this.setPathInfo();\n    }\n    this.initDimensions();\n    this.setCoords();\n  }\n\n  /**\n   * If text has a path, it will add the extra information needed\n   * for path and text calculations\n   */\n  setPathInfo() {\n    const path = this.path;\n    if (path) {\n      path.segmentsInfo = getPathSegmentsInfo(path.path);\n    }\n  }\n\n  /**\n   * @private\n   * Divides text into lines of text and lines of graphemes.\n   */\n  _splitText(): TextLinesInfo {\n    const newLines = this._splitTextIntoLines(this.text);\n    this.textLines = newLines.lines;\n    this._textLines = newLines.graphemeLines;\n    this._unwrappedTextLines = newLines._unwrappedLines;\n    this._text = newLines.graphemeText;\n    return newLines;\n  }\n\n  /**\n   * Initialize or update text dimensions.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   */\n  initDimensions() {\n    this._splitText();\n    this._clearCache();\n    this.dirty = true;\n    if (this.path) {\n      this.width = this.path.width;\n      this.height = this.path.height;\n    } else {\n      this.width =\n        this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      this.height = this.calcTextHeight();\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n  }\n\n  /**\n   * Enlarge space boxes and shift the others\n   */\n  enlargeSpaces() {\n    let diffSpace,\n      currentLineWidth,\n      numberOfSpaces,\n      accumulatedSpace,\n      line,\n      charBound,\n      spaces;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      if (\n        this.textAlign !== JUSTIFY &&\n        (i === len - 1 || this.isEndOfWrapping(i))\n      ) {\n        continue;\n      }\n      accumulatedSpace = 0;\n      line = this._textLines[i];\n      currentLineWidth = this.getLineWidth(i);\n      if (\n        currentLineWidth < this.width &&\n        (spaces = this.textLines[i].match(this._reSpacesAndTabs))\n      ) {\n        numberOfSpaces = spaces.length;\n        diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n        for (let j = 0; j <= line.length; j++) {\n          charBound = this.__charBounds[i][j];\n          if (this._reSpaceAndTab.test(line[j])) {\n            charBound.width += diffSpace;\n            charBound.kernedWidth += diffSpace;\n            charBound.left += accumulatedSpace;\n            accumulatedSpace += diffSpace;\n          } else {\n            charBound.left += accumulatedSpace;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    return lineIndex === this._textLines.length - 1;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * It return always 1 for text and Itext. Textbox has its own implementation\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1;\n  missingNewlineOffset(_lineIndex: number): 1 {\n    return 1;\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor\n   * @param {Number} selectionStart\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(selectionStart: number, skipWrapping?: boolean) {\n    const lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n    let i: number;\n    for (i = 0; i < lines.length; i++) {\n      if (selectionStart <= lines[i].length) {\n        return {\n          lineIndex: i,\n          charIndex: selectionStart,\n        };\n      }\n      selectionStart -=\n        lines[i].length + this.missingNewlineOffset(i, skipWrapping);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex:\n        lines[i - 1].length < selectionStart\n          ? lines[i - 1].length\n          : selectionStart,\n    };\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of text object\n   */\n  toString(): string {\n    return `#<Text (${this.complexity()}): { \"text\": \"${\n      this.text\n    }\", \"fontFamily\": \"${this.fontFamily}\" }>`;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @param {Object} dim.x width of object to be cached\n   * @param {Object} dim.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const dims = super._getCacheCanvasDimensions();\n    const fontSize = this.fontSize;\n    dims.width += fontSize * dims.zoomX;\n    dims.height += fontSize * dims.zoomY;\n    return dims;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const path = this.path;\n    path && !path.isNotVisible() && path._render(ctx);\n    this._setTextStyles(ctx);\n    this._renderTextLinesBackground(ctx);\n    this._renderTextDecoration(ctx, 'underline');\n    this._renderText(ctx);\n    this._renderTextDecoration(ctx, 'overline');\n    this._renderTextDecoration(ctx, 'linethrough');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderText(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderTextStroke(ctx);\n      this._renderTextFill(ctx);\n    } else {\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n    }\n  }\n\n  /**\n   * Set the font parameter of the context with the object properties or with charStyle\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [charStyle] object with font style properties\n   * @param {String} [charStyle.fontFamily] Font Family\n   * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n   * @param {String} [charStyle.fontWeight] Font weight\n   * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n   */\n  _setTextStyles(\n    ctx: CanvasRenderingContext2D,\n    charStyle?: any,\n    forMeasuring?: boolean,\n  ) {\n    ctx.textBaseline = 'alphabetic';\n    if (this.path) {\n      switch (this.pathAlign) {\n        case CENTER:\n          ctx.textBaseline = 'middle';\n          break;\n        case 'ascender':\n          ctx.textBaseline = TOP;\n          break;\n        case 'descender':\n          ctx.textBaseline = BOTTOM;\n          break;\n      }\n    }\n    ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n  }\n\n  /**\n   * calculate and return the text Width measuring each line.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {Number} Maximum width of Text object\n   */\n  calcTextWidth(): number {\n    let maxWidth = this.getLineWidth(0);\n\n    for (let i = 1, len = this._textLines.length; i < len; i++) {\n      const currentLineWidth = this.getLineWidth(i);\n      if (currentLineWidth > maxWidth) {\n        maxWidth = currentLineWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  /**\n   * @private\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} line Text to render\n   * @param {Number} left Left position of text\n   * @param {Number} top Top position of text\n   * @param {Number} lineIndex Index of a line in a text\n   */\n  _renderTextLine(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: string[],\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    this._renderChars(method, ctx, line, left, top, lineIndex);\n  }\n\n  /**\n   * Renders the text background for lines, taking care of style\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextLinesBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n      return;\n    }\n    const originalFill = ctx.fillStyle,\n      leftOffset = this._getLeftOffset();\n    let lineTopOffset = this._getTopOffset();\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (\n        !this.textBackgroundColor &&\n        !this.styleHas('textBackgroundColor', i)\n      ) {\n        lineTopOffset += heightOfLine;\n        continue;\n      }\n      const jlen = this._textLines[i].length;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxWidth = 0;\n      let boxStart = 0;\n      let drawStart;\n      let currentColor;\n      let lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (let j = 0; j < jlen; j++) {\n        // at this point charbox are either standard or full with pathInfo if there is a path.\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (this.path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillStyle = currentColor;\n          currentColor &&\n            ctx.fillRect(\n              -charBox.width / 2,\n              (-heightOfLine / this.lineHeight) * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight,\n            );\n          ctx.restore();\n        } else if (currentColor !== lastColor) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = lastColor;\n          lastColor &&\n            ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight,\n            );\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      if (currentColor && !this.path) {\n        drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentColor;\n        ctx.fillRect(\n          drawStart,\n          lineTopOffset,\n          boxWidth,\n          heightOfLine / this.lineHeight,\n        );\n      }\n      lineTopOffset += heightOfLine;\n    }\n    ctx.fillStyle = originalFill;\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * measure and return the width of a single character.\n   * possibly overridden to accommodate different measure logic or\n   * to hook some external lib for character measurement\n   * @private\n   * @param {String} _char, char to be measured\n   * @param {Object} charStyle style of char to be measured\n   * @param {String} [previousChar] previous char\n   * @param {Object} [prevCharStyle] style of previous char\n   */\n  _measureChar(\n    _char: string,\n    charStyle: CompleteTextStyleDeclaration,\n    previousChar: string | undefined,\n    prevCharStyle: CompleteTextStyleDeclaration | Record<string, never>,\n  ) {\n    const fontCache = cache.getFontCache(charStyle),\n      fontDeclaration = this._getFontDeclaration(charStyle),\n      couple = previousChar + _char,\n      stylesAreEqual =\n        previousChar &&\n        fontDeclaration === this._getFontDeclaration(prevCharStyle),\n      fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE;\n    let width: number | undefined,\n      coupleWidth: number | undefined,\n      previousWidth: number | undefined,\n      kernedWidth: number | undefined;\n\n    if (previousChar && fontCache[previousChar] !== undefined) {\n      previousWidth = fontCache[previousChar];\n    }\n    if (fontCache[_char] !== undefined) {\n      kernedWidth = width = fontCache[_char];\n    }\n    if (stylesAreEqual && fontCache[couple] !== undefined) {\n      coupleWidth = fontCache[couple];\n      kernedWidth = coupleWidth - previousWidth!;\n    }\n    if (\n      width === undefined ||\n      previousWidth === undefined ||\n      coupleWidth === undefined\n    ) {\n      const ctx = getMeasuringContext()!;\n      // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n      this._setTextStyles(ctx, charStyle, true);\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        // safe to use the non-null since if undefined we defined it before.\n        kernedWidth = coupleWidth - previousWidth!;\n      }\n    }\n    return {\n      width: width * fontMultiplier,\n      kernedWidth: kernedWidth! * fontMultiplier,\n    };\n  }\n\n  /**\n   * Computes height of character at given position\n   * @param {Number} line the line index number\n   * @param {Number} _char the character index number\n   * @return {Number} fontSize of the character\n   */\n  getHeightOfChar(line: number, _char: number): number {\n    return this.getValueOfPropertyAt(line, _char, 'fontSize');\n  }\n\n  /**\n   * measure a text line measuring all characters.\n   * @param {Number} lineIndex line number\n   */\n  measureLine(lineIndex: number) {\n    const lineInfo = this._measureLine(lineIndex);\n    if (this.charSpacing !== 0) {\n      lineInfo.width -= this._getWidthOfCharSpacing();\n    }\n    if (lineInfo.width < 0) {\n      lineInfo.width = 0;\n    }\n    return lineInfo;\n  }\n\n  /**\n   * measure every grapheme of a line, populating __charBounds\n   * @param {Number} lineIndex\n   * @return {Object} object.width total width of characters\n   * @return {Object} object.numOfSpaces length of chars that match this._reSpacesAndTabs\n   */\n  _measureLine(lineIndex: number) {\n    let width = 0,\n      prevGrapheme: string | undefined,\n      graphemeInfo: GraphemeBBox | undefined;\n\n    const reverse = this.pathSide === RIGHT,\n      path = this.path,\n      line = this._textLines[lineIndex],\n      llength = line.length,\n      lineBounds = new Array<GraphemeBBox>(llength);\n\n    this.__charBounds[lineIndex] = lineBounds;\n    for (let i = 0; i < llength; i++) {\n      const grapheme = line[i];\n      graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n      lineBounds[i] = graphemeInfo;\n      width += graphemeInfo.kernedWidth;\n      prevGrapheme = grapheme;\n    }\n    // this latest bound box represent the last character of the line\n    // to simplify cursor handling in interactive mode.\n    lineBounds[llength] = {\n      left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0,\n    } as GraphemeBBox;\n    if (path && path.segmentsInfo) {\n      let positionInPath = 0;\n      const totalPathLength =\n        path.segmentsInfo[path.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case LEFT:\n          positionInPath = reverse ? totalPathLength - width : 0;\n          break;\n        case CENTER:\n          positionInPath = (totalPathLength - width) / 2;\n          break;\n        case RIGHT:\n          positionInPath = reverse ? 0 : totalPathLength - width;\n          break;\n        //todo - add support for justify\n      }\n      positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n      for (\n        let i = reverse ? llength - 1 : 0;\n        reverse ? i >= 0 : i < llength;\n        reverse ? i-- : i++\n      ) {\n        graphemeInfo = lineBounds[i];\n        if (positionInPath > totalPathLength) {\n          positionInPath %= totalPathLength;\n        } else if (positionInPath < 0) {\n          positionInPath += totalPathLength;\n        }\n        // it would probably much faster to send all the grapheme position for a line\n        // and calculate path position/angle at once.\n        this._setGraphemeOnPath(positionInPath, graphemeInfo);\n        positionInPath += graphemeInfo.kernedWidth;\n      }\n    }\n    return { width: width, numOfSpaces: 0 };\n  }\n\n  /**\n   * Calculate the angle  and the left,top position of the char that follow a path.\n   * It appends it to graphemeInfo to be reused later at rendering\n   * @private\n   * @param {Number} positionInPath to be measured\n   * @param {GraphemeBBox} graphemeInfo current grapheme box information\n   * @param {Object} startingPoint position of the point\n   */\n  _setGraphemeOnPath(positionInPath: number, graphemeInfo: GraphemeBBox) {\n    const centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n      path = this.path!;\n\n    // we are at currentPositionOnPath. we want to know what point on the path is.\n    const info = getPointOnPath(path.path, centerPosition, path.segmentsInfo)!;\n    graphemeInfo.renderLeft = info.x - path.pathOffset.x;\n    graphemeInfo.renderTop = info.y - path.pathOffset.y;\n    graphemeInfo.angle = info.angle + (this.pathSide === RIGHT ? Math.PI : 0);\n  }\n\n  /**\n   *\n   * @param {String} grapheme to be measured\n   * @param {Number} lineIndex index of the line where the char is\n   * @param {Number} charIndex position in the line\n   * @param {String} [prevGrapheme] character preceding the one to be measured\n   * @returns {GraphemeBBox} grapheme bbox\n   */\n  _getGraphemeBox(\n    grapheme: string,\n    lineIndex: number,\n    charIndex: number,\n    prevGrapheme?: string,\n    skipLeft?: boolean,\n  ): GraphemeBBox {\n    const style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      prevStyle = prevGrapheme\n        ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1)\n        : {},\n      info = this._measureChar(grapheme, style, prevGrapheme, prevStyle);\n    let kernedWidth = info.kernedWidth,\n      width = info.width,\n      charSpacing;\n\n    if (this.charSpacing !== 0) {\n      charSpacing = this._getWidthOfCharSpacing();\n      width += charSpacing;\n      kernedWidth += charSpacing;\n    }\n\n    const box: GraphemeBBox = {\n      width,\n      left: 0,\n      height: style.fontSize,\n      kernedWidth,\n      deltaY: style.deltaY,\n    };\n    if (charIndex > 0 && !skipLeft) {\n      const previousBox = this.__charBounds[lineIndex][charIndex - 1];\n      box.left =\n        previousBox.left + previousBox.width + info.kernedWidth - info.width;\n    }\n    return box;\n  }\n\n  /**\n   * Calculate height of line at 'lineIndex'\n   * @param {Number} lineIndex index of line to calculate\n   * @return {Number}\n   */\n  getHeightOfLine(lineIndex: number): number {\n    if (this.__lineHeights[lineIndex]) {\n      return this.__lineHeights[lineIndex];\n    }\n\n    // char 0 is measured before the line cycle because it needs to char\n    // emptylines\n    let maxHeight = this.getHeightOfChar(lineIndex, 0);\n    for (let i = 1, len = this._textLines[lineIndex].length; i < len; i++) {\n      maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n    }\n\n    return (this.__lineHeights[lineIndex] =\n      maxHeight * this.lineHeight * this._fontSizeMult);\n  }\n\n  /**\n   * Calculate text box height\n   */\n  calcTextHeight() {\n    let lineHeight,\n      height = 0;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineHeight = this.getHeightOfLine(i);\n      height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n    }\n    return height;\n  }\n\n  /**\n   * @private\n   * @return {Number} Left offset\n   */\n  _getLeftOffset(): number {\n    return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n  }\n\n  /**\n   * @private\n   * @return {Number} Top offset\n   */\n  _getTopOffset(): number {\n    return -this.height / 2;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   */\n  _renderTextCommon(\n    ctx: CanvasRenderingContext2D,\n    method: 'fillText' | 'strokeText',\n  ) {\n    ctx.save();\n    let lineHeights = 0;\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset();\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i),\n        maxHeight = heightOfLine / this.lineHeight,\n        leftOffset = this._getLineLeftOffset(i);\n      this._renderTextLine(\n        method,\n        ctx,\n        this._textLines[i],\n        left + leftOffset,\n        top + lineHeights + maxHeight,\n        i,\n      );\n      lineHeights += heightOfLine;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill && !this.styleHas(FILL)) {\n      return;\n    }\n\n    this._renderTextCommon(ctx, 'fillText');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextStroke(ctx: CanvasRenderingContext2D) {\n    if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    this._setLineDash(ctx, this.strokeDashArray);\n    ctx.beginPath();\n    this._renderTextCommon(ctx, 'strokeText');\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {String} method fillText or strokeText.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} line Content of the line, splitted in an array by grapheme\n   * @param {Number} left\n   * @param {Number} top\n   * @param {Number} lineIndex\n   */\n  _renderChars(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: Array<any>,\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      path = this.path,\n      shortCut =\n        !isJustify &&\n        this.charSpacing === 0 &&\n        this.isEmptyStyles(lineIndex) &&\n        !path,\n      isLtr = this.direction === 'ltr',\n      sign = this.direction === 'ltr' ? 1 : -1,\n      // this was changed in the PR #7674\n      // currentDirection = ctx.canvas.getAttribute('dir');\n      currentDirection = ctx.direction;\n\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      boxWidth = 0,\n      timeToRender,\n      drawingLeft;\n\n    ctx.save();\n    if (currentDirection !== this.direction) {\n      ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n      ctx.direction = isLtr ? 'ltr' : 'rtl';\n      ctx.textAlign = isLtr ? LEFT : RIGHT;\n    }\n    top -= (lineHeight * this._fontSizeFraction) / this.lineHeight;\n    if (shortCut) {\n      // render all the line in one pass without checking\n      // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n      this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top);\n      ctx.restore();\n      return;\n    }\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i] as Required<GraphemeBBox>;\n      if (boxWidth === 0) {\n        left += sign * (charBox.kernedWidth - charBox.width);\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, false);\n      }\n      if (timeToRender) {\n        if (path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            -boxWidth / 2,\n            0,\n          );\n          ctx.restore();\n        } else {\n          drawingLeft = left;\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            drawingLeft,\n            top,\n          );\n        }\n        charsToRender = '';\n        actualStyle = nextStyle;\n        left += sign * boxWidth;\n        boxWidth = 0;\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {TFiller} filler a fabric gradient instance\n   * @return {CanvasPattern} a pattern to use as fill/stroke style\n   */\n  _applyPatternGradientTransformText(filler: TFiller) {\n    // TODO: verify compatibility with strokeUniform\n    const width = this.width + this.strokeWidth,\n      height = this.height + this.strokeWidth,\n      pCanvas = createCanvasElementFor({\n        width,\n        height,\n      }),\n      pCtx = pCanvas.getContext('2d')!;\n    pCanvas.width = width;\n    pCanvas.height = height;\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.fillStyle = filler.toLive(pCtx)!;\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fill();\n    return pCtx.createPattern(pCanvas, 'no-repeat')!;\n  }\n\n  handleFiller<T extends 'fill' | 'stroke'>(\n    ctx: CanvasRenderingContext2D,\n    property: `${T}Style`,\n    filler: TFiller | string,\n  ): { offsetX: number; offsetY: number } {\n    let offsetX: number, offsetY: number;\n    if (isFiller(filler)) {\n      if (\n        (filler as Gradient<'linear'>).gradientUnits === 'percentage' ||\n        (filler as Gradient<'linear'>).gradientTransform ||\n        (filler as Pattern).patternTransform\n      ) {\n        // need to transform gradient in a pattern.\n        // this is a slow process. If you are hitting this codepath, and the object\n        // is not using caching, you should consider switching it on.\n        // we need a canvas as big as the current object caching canvas.\n        offsetX = -this.width / 2;\n        offsetY = -this.height / 2;\n        ctx.translate(offsetX, offsetY);\n        ctx[property] = this._applyPatternGradientTransformText(filler);\n        return { offsetX, offsetY };\n      } else {\n        // is a simple gradient or pattern\n        ctx[property] = filler.toLive(ctx)!;\n        return this._applyPatternGradientTransform(ctx, filler);\n      }\n    } else {\n      // is a color\n      ctx[property] = filler;\n    }\n    return { offsetX: 0, offsetY: 0 };\n  }\n\n  /**\n   * This function prepare the canvas for a stroke style, and stroke and strokeWidth\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with stroke and strokeWidth defined\n   * @returns\n   */\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    {\n      stroke,\n      strokeWidth,\n    }: Pick<CompleteTextStyleDeclaration, 'stroke' | 'strokeWidth'>,\n  ) {\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineDashOffset = this.strokeDashOffset;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.miterLimit = this.strokeMiterLimit;\n    return this.handleFiller(ctx, 'strokeStyle', stroke!);\n  }\n\n  /**\n   * This function prepare the canvas for a ill style, and fill\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with ill defined\n   * @returns\n   */\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    return this.handleFiller(ctx, 'fillStyle', fill!);\n  }\n\n  /**\n   * @private\n   * @param {String} method\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {String} _char\n   * @param {Number} left Left coordinate\n   * @param {Number} top Top coordinate\n   * @param {Number} lineHeight Height of the line\n   */\n  _renderChar(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    lineIndex: number,\n    charIndex: number,\n    _char: string,\n    left: number,\n    top: number,\n  ) {\n    const decl = this._getStyleDeclaration(lineIndex, charIndex),\n      fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      shouldFill = method === 'fillText' && fullDecl.fill,\n      shouldStroke =\n        method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n    if (!shouldStroke && !shouldFill) {\n      return;\n    }\n    ctx.save();\n\n    ctx.font = this._getFontDeclaration(fullDecl);\n\n    if (decl.textBackgroundColor) {\n      this._removeShadow(ctx);\n    }\n    if (decl.deltaY) {\n      top += decl.deltaY;\n    }\n\n    if (shouldFill) {\n      const fillOffsets = this._setFillStyles(ctx, fullDecl);\n      ctx.fillText(\n        _char,\n        left - fillOffsets.offsetX,\n        top - fillOffsets.offsetY,\n      );\n    }\n\n    if (shouldStroke) {\n      const strokeOffsets = this._setStrokeStyles(ctx, fullDecl);\n      ctx.strokeText(\n        _char,\n        left - strokeOffsets.offsetX,\n        top - strokeOffsets.offsetY,\n      );\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Turns the character into a 'superior figure' (i.e. 'superscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSuperscript(start: number, end: number) {\n    this._setScript(start, end, this.superscript);\n  }\n\n  /**\n   * Turns the character into an 'inferior figure' (i.e. 'subscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSubscript(start: number, end: number) {\n    this._setScript(start, end, this.subscript);\n  }\n\n  /**\n   * Applies 'schema' at given position\n   * @private\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   * @param {Number} schema\n   */\n  protected _setScript(\n    start: number,\n    end: number,\n    schema: {\n      size: number;\n      baseline: number;\n    },\n  ) {\n    const loc = this.get2DCursorLocation(start, true),\n      fontSize = this.getValueOfPropertyAt(\n        loc.lineIndex,\n        loc.charIndex,\n        'fontSize',\n      ),\n      dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n      style = {\n        fontSize: fontSize * schema.size,\n        deltaY: dy + fontSize * schema.baseline,\n      };\n    this.setSelectionStyles(style, start, end);\n  }\n\n  /**\n   * @private\n   * @param {Number} lineIndex index text line\n   * @return {Number} Line left offset\n   */\n  _getLineLeftOffset(lineIndex: number): number {\n    const lineWidth = this.getLineWidth(lineIndex),\n      lineDiff = this.width - lineWidth,\n      textAlign = this.textAlign,\n      direction = this.direction,\n      isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n    let leftOffset = 0;\n    if (\n      textAlign === JUSTIFY ||\n      (textAlign === JUSTIFY_CENTER && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_RIGHT && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_LEFT && !isEndOfWrapping)\n    ) {\n      return 0;\n    }\n    if (textAlign === CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (textAlign === JUSTIFY_CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === JUSTIFY_RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (direction === 'rtl') {\n      if (\n        textAlign === RIGHT ||\n        textAlign === JUSTIFY ||\n        textAlign === JUSTIFY_RIGHT\n      ) {\n        leftOffset = 0;\n      } else if (textAlign === LEFT || textAlign === JUSTIFY_LEFT) {\n        leftOffset = -lineDiff;\n      } else if (textAlign === CENTER || textAlign === JUSTIFY_CENTER) {\n        leftOffset = -lineDiff / 2;\n      }\n    }\n    return leftOffset;\n  }\n\n  /**\n   * @private\n   */\n  _clearCache() {\n    this._forceClearCache = false;\n    this.__lineWidths = [];\n    this.__lineHeights = [];\n    this.__charBounds = [];\n  }\n\n  /**\n   * Measure a single line given its index. Used to calculate the initial\n   * text bounding box. The values are calculated and stored in __lineWidths cache.\n   * @private\n   * @param {Number} lineIndex line number\n   * @return {Number} Line width\n   */\n  getLineWidth(lineIndex: number): number {\n    if (this.__lineWidths[lineIndex] !== undefined) {\n      return this.__lineWidths[lineIndex];\n    }\n\n    const { width } = this.measureLine(lineIndex);\n    this.__lineWidths[lineIndex] = width;\n    return width;\n  }\n\n  _getWidthOfCharSpacing() {\n    if (this.charSpacing !== 0) {\n      return (this.fontSize * this.charSpacing) / 1000;\n    }\n    return 0;\n  }\n\n  /**\n   * Retrieves the value of property at given character position\n   * @param {Number} lineIndex the line number\n   * @param {Number} charIndex the character number\n   * @param {String} property the property name\n   * @returns the value of 'property'\n   */\n  getValueOfPropertyAt<T extends StylePropertiesType>(\n    lineIndex: number,\n    charIndex: number,\n    property: T,\n  ): this[T] {\n    const charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n    return (charStyle[property] ?? this[property]) as this[T];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextDecoration(\n    ctx: CanvasRenderingContext2D,\n    type: 'underline' | 'linethrough' | 'overline',\n  ) {\n    if (!this[type] && !this.styleHas(type)) {\n      return;\n    }\n    let topOffset = this._getTopOffset();\n    const leftOffset = this._getLeftOffset(),\n      path = this.path,\n      charSpacing = this._getWidthOfCharSpacing(),\n      offsetAligner =\n        type === 'linethrough' ? 0.5 : type === 'overline' ? 1 : 0,\n      offsetY = this.offsets[type];\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (!this[type] && !this.styleHas(type, i)) {\n        topOffset += heightOfLine;\n        continue;\n      }\n      const line = this._textLines[i];\n      const maxHeight = heightOfLine / this.lineHeight;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxStart = 0;\n      let boxWidth = 0;\n      let lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n      let lastFill = this.getValueOfPropertyAt(i, 0, FILL);\n      let lastTickness = this.getValueOfPropertyAt(\n        i,\n        0,\n        TEXT_DECORATION_THICKNESS,\n      );\n      let currentDecoration = lastDecoration;\n      let currentFill = lastFill;\n      let currentTickness = lastTickness;\n      const top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n      let size = this.getHeightOfChar(i, 0);\n      let dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n      for (let j = 0, jlen = line.length; j < jlen; j++) {\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentDecoration = this.getValueOfPropertyAt(i, j, type);\n        currentFill = this.getValueOfPropertyAt(i, j, FILL);\n        currentTickness = this.getValueOfPropertyAt(\n          i,\n          j,\n          TEXT_DECORATION_THICKNESS,\n        );\n        const currentSize = this.getHeightOfChar(i, j);\n        const currentDy = this.getValueOfPropertyAt(i, j, 'deltaY');\n        if (path && currentDecoration && currentFill) {\n          const finalTickness = (this.fontSize * currentTickness) / 1000;\n          ctx.save();\n          // bug? verify lastFill is a valid fill here.\n          ctx.fillStyle = lastFill as string;\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillRect(\n            -charBox.kernedWidth / 2,\n            offsetY * currentSize + currentDy - offsetAligner * finalTickness,\n            charBox.kernedWidth,\n            finalTickness,\n          );\n          ctx.restore();\n        } else if (\n          (currentDecoration !== lastDecoration ||\n            currentFill !== lastFill ||\n            currentSize !== size ||\n            currentTickness !== lastTickness ||\n            currentDy !== dy) &&\n          boxWidth > 0\n        ) {\n          const finalTickness = (this.fontSize * lastTickness) / 1000;\n          let drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          if (lastDecoration && lastFill && lastTickness) {\n            // bug? verify lastFill is a valid fill here.\n            ctx.fillStyle = lastFill as string;\n            ctx.fillRect(\n              drawStart,\n              top + offsetY * size + dy - offsetAligner * finalTickness,\n              boxWidth,\n              finalTickness,\n            );\n          }\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastDecoration = currentDecoration;\n          lastTickness = currentTickness;\n          lastFill = currentFill;\n          size = currentSize;\n          dy = currentDy;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      let drawStart = leftOffset + lineLeftOffset + boxStart;\n      if (this.direction === 'rtl') {\n        drawStart = this.width - drawStart - boxWidth;\n      }\n      ctx.fillStyle = currentFill as string;\n      const finalTickness = (this.fontSize * currentTickness) / 1000;\n      currentDecoration &&\n        currentFill &&\n        currentTickness &&\n        ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy - offsetAligner * finalTickness,\n          boxWidth - charSpacing,\n          finalTickness,\n        );\n      topOffset += heightOfLine;\n    }\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * return font declaration string for canvas context\n   * @param {Object} [styleObject] object\n   * @returns {String} font declaration formatted for canvas context.\n   */\n  _getFontDeclaration(\n    {\n      fontFamily = this.fontFamily,\n      fontStyle = this.fontStyle,\n      fontWeight = this.fontWeight,\n      fontSize = this.fontSize,\n    }: Partial<\n      Pick<\n        TextStyleDeclaration,\n        'fontFamily' | 'fontStyle' | 'fontWeight' | 'fontSize'\n      >\n    > = {},\n    forMeasuring?: boolean,\n  ): string {\n    const parsedFontFamily =\n      fontFamily.includes(\"'\") ||\n      fontFamily.includes('\"') ||\n      fontFamily.includes(',') ||\n      FabricText.genericFonts.includes(fontFamily.toLowerCase())\n        ? fontFamily\n        : `\"${fontFamily}\"`;\n    return [\n      fontStyle,\n      fontWeight,\n      `${forMeasuring ? this.CACHE_FONT_SIZE : fontSize}px`,\n      parsedFontFamily,\n    ].join(' ');\n  }\n\n  /**\n   * Renders text instance on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    if (!this.visible) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    if (this._forceClearCache) {\n      this.initDimensions();\n    }\n    super.render(ctx);\n  }\n\n  /**\n   * Override this method to customize grapheme splitting\n   * @todo the util `graphemeSplit` needs to be injectable in some way.\n   * is more comfortable to inject the correct util rather than having to override text\n   * in the middle of the prototype chain\n   * @param {string} value\n   * @returns {string[]} array of graphemes\n   */\n  graphemeSplit(value: string): string[] {\n    return graphemeSplit(value);\n  }\n\n  /**\n   * Returns the text as an array of lines.\n   * @param {String} text text to split\n   * @returns  Lines in the text\n   */\n  _splitTextIntoLines(text: string): TextLinesInfo {\n    const lines = text.split(this._reNewline),\n      newLines = new Array<string[]>(lines.length),\n      newLine = ['\\n'];\n    let newText: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      newLines[i] = this.graphemeSplit(lines[i]);\n      newText = newText.concat(newLines[i], newLine);\n    }\n    newText.pop();\n    return {\n      _unwrappedLines: newLines,\n      lines: lines,\n      graphemeText: newText,\n      graphemeLines: newLines,\n    };\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject([...additionalProps, ...propertiesToInclude] as K[]),\n      styles: stylesToArray(this.styles, this.text),\n      ...(this.path ? { path: this.path.toObject() } : {}),\n    };\n  }\n\n  set(key: string | any, value?: any) {\n    const { textLayoutProperties } = this.constructor as typeof FabricText;\n    super.set(key, value);\n    let needsDims = false;\n    let isAddingPath = false;\n    if (typeof key === 'object') {\n      for (const _key in key) {\n        if (_key === 'path') {\n          this.setPathInfo();\n        }\n        needsDims = needsDims || textLayoutProperties.includes(_key);\n        isAddingPath = isAddingPath || _key === 'path';\n      }\n    } else {\n      needsDims = textLayoutProperties.includes(key);\n      isAddingPath = key === 'path';\n    }\n    if (isAddingPath) {\n      this.setPathInfo();\n    }\n    if (needsDims && this.initialized) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    return this;\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity\n   */\n  complexity(): number {\n    return 1;\n  }\n\n  /**\n   * List of generic font families\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#generic-name\n   */\n  static genericFonts = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n    'ui-serif',\n    'ui-sans-serif',\n    'ui-monospace',\n    'ui-rounded',\n    'math',\n    'emoji',\n    'fangsong',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricText.fromElement})\n   * @static\n   * @memberOf Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(\n    'x',\n    'y',\n    'dx',\n    'dy',\n    'font-family',\n    'font-style',\n    'font-weight',\n    'font-size',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor',\n  );\n\n  /**\n   * Returns FabricText instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf Text\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement | SVGElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      FabricText.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    const {\n      textAnchor = LEFT as typeof LEFT | typeof CENTER | typeof RIGHT,\n      textDecoration = '',\n      dx = 0,\n      dy = 0,\n      top = 0,\n      left = 0,\n      fontSize = DEFAULT_SVG_FONT_SIZE,\n      strokeWidth = 1,\n      ...restOfOptions\n    } = { ...options, ...parsedAttributes };\n\n    const textContent = (element.textContent || '')\n      .replace(/^\\s+|\\s+$|\\n+/g, '')\n      .replace(/\\s+/g, ' ');\n\n    // this code here is probably the usual issue for SVG center find\n    // this can later looked at again and probably removed.\n\n    const text = new this(textContent, {\n        left: left + dx,\n        top: top + dy,\n        underline: textDecoration.includes('underline'),\n        overline: textDecoration.includes('overline'),\n        linethrough: textDecoration.includes('line-through'),\n        // we initialize this as 0\n        strokeWidth: 0,\n        fontSize,\n        ...restOfOptions,\n      }),\n      textHeightScaleFactor = text.getScaledHeight() / text.height,\n      lineHeightDiff =\n        (text.height + text.strokeWidth) * text.lineHeight - text.height,\n      scaledDiff = lineHeightDiff * textHeightScaleFactor,\n      textHeight = text.getScaledHeight() + scaledDiff;\n\n    let offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (textAnchor === CENTER) {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (textAnchor === RIGHT) {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top:\n        text.top -\n        (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) /\n          text.lineHeight,\n      strokeWidth,\n    });\n    return text;\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns FabricText instance from an object representation\n   * @param {Object} object plain js Object to create an instance from\n   * @returns {Promise<FabricText>}\n   */\n  static fromObject<\n    T extends TOptions<SerializedTextProps>,\n    S extends FabricText,\n  >(object: T) {\n    return this._fromObject<S>(\n      {\n        ...object,\n        styles: stylesFromArray(object.styles || {}, object.text),\n      },\n      {\n        extraParam: 'text',\n      },\n    );\n  }\n}\n\napplyMixins(FabricText, [TextSVGExportMixin]);\nclassRegistry.setClass(FabricText);\nclassRegistry.setSVGClass(FabricText);\n","import type {\n  DragEventData,\n  DropEventData,\n  TPointerEvent,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { IText } from './IText';\nimport { setStyle } from '../../util/internals/dom_style';\nimport { cloneStyles } from '../../util/internals/cloneStyles';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, NONE } from '../../constants';\n\n/**\n * #### Dragging IText/Textbox Lifecycle\n * - {@link start} is called from `mousedown` {@link IText#_mouseDownHandler} and determines if dragging should start by testing {@link isPointerOverSelection}\n * - if true `mousedown` {@link IText#_mouseDownHandler} is blocked to keep selection\n * - if the pointer moves, canvas fires numerous mousemove {@link Canvas#_onMouseMove} that we make sure **aren't** prevented ({@link IText#shouldStartDragging}) in order for the window to start a drag session\n * - once/if the session starts canvas calls {@link onDragStart} on the active object to determine if dragging should occur\n * - canvas fires relevant drag events that are handled by the handlers defined in this scope\n * - {@link end} is called from `mouseup` {@link IText#mouseUpHandler}, blocking IText default click behavior\n * - in case the drag session didn't occur, {@link end} handles a click, since logic to do so was blocked during `mousedown`\n */\nexport class DraggableTextDelegate {\n  readonly target: IText;\n  private __mouseDownInPlace = false;\n  private __dragStartFired = false;\n  private __isDraggingOver = false;\n  private __dragStartSelection?: {\n    selectionStart: number;\n    selectionEnd: number;\n  };\n  private __dragImageDisposer?: VoidFunction;\n  private _dispose?: () => void;\n\n  constructor(target: IText) {\n    this.target = target;\n    const disposers = [\n      this.target.on('dragenter', this.dragEnterHandler.bind(this)),\n      this.target.on('dragover', this.dragOverHandler.bind(this)),\n      this.target.on('dragleave', this.dragLeaveHandler.bind(this)),\n      this.target.on('dragend', this.dragEndHandler.bind(this)),\n      this.target.on('drop', this.dropHandler.bind(this)),\n    ];\n    this._dispose = () => {\n      disposers.forEach((d) => d());\n      this._dispose = undefined;\n    };\n  }\n\n  isPointerOverSelection(e: TPointerEvent) {\n    const target = this.target;\n    const newSelection = target.getSelectionStartFromPointer(e);\n    return (\n      target.isEditing &&\n      newSelection >= target.selectionStart &&\n      newSelection <= target.selectionEnd &&\n      target.selectionStart < target.selectionEnd\n    );\n  }\n\n  /**\n   * @public override this method to disable dragging and default to mousedown logic\n   */\n  start(e: TPointerEvent) {\n    return (this.__mouseDownInPlace = this.isPointerOverSelection(e));\n  }\n\n  /**\n   * @public override this method to disable dragging without discarding selection\n   */\n  isActive() {\n    return this.__mouseDownInPlace;\n  }\n\n  /**\n   * Ends interaction and sets cursor in case of a click\n   * @returns true if was active\n   */\n  end(e: TPointerEvent) {\n    const active = this.isActive();\n    if (active && !this.__dragStartFired) {\n      // mousedown has been blocked since `active` is true => cursor has not been set.\n      // `__dragStartFired` is false => dragging didn't occur, pointer didn't move and is over selection.\n      // meaning this is actually a click, `active` is a false positive.\n      this.target.setCursorByClick(e);\n      this.target.initDelayedCursor(true);\n    }\n    this.__mouseDownInPlace = false;\n    this.__dragStartFired = false;\n    this.__isDraggingOver = false;\n    return active;\n  }\n\n  getDragStartSelection() {\n    return this.__dragStartSelection;\n  }\n\n  /**\n   * Override to customize the drag image\n   * https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage\n   */\n  setDragImage(\n    e: DragEvent,\n    {\n      selectionStart,\n      selectionEnd,\n    }: {\n      selectionStart: number;\n      selectionEnd: number;\n    },\n  ) {\n    const target = this.target;\n    const canvas = target.canvas!;\n    const flipFactor = new Point(target.flipX ? -1 : 1, target.flipY ? -1 : 1);\n    const boundaries = target._getCursorBoundaries(selectionStart);\n    const selectionPosition = new Point(\n      boundaries.left + boundaries.leftOffset,\n      boundaries.top + boundaries.topOffset,\n    ).multiply(flipFactor);\n    const pos = selectionPosition.transform(target.calcTransformMatrix());\n    const pointer = canvas.getScenePoint(e);\n    const diff = pointer.subtract(pos);\n    const retinaScaling = target.getCanvasRetinaScaling();\n    const bbox = target.getBoundingRect();\n    const correction = pos.subtract(new Point(bbox.left, bbox.top));\n    const vpt = canvas.viewportTransform;\n    const offset = correction.add(diff).transform(vpt, true);\n    //  prepare instance for drag image snapshot by making all non selected text invisible\n    const bgc = target.backgroundColor;\n    const styles = cloneStyles(target.styles);\n    target.backgroundColor = '';\n    const styleOverride = {\n      stroke: 'transparent',\n      fill: 'transparent',\n      textBackgroundColor: 'transparent',\n    };\n    target.setSelectionStyles(styleOverride, 0, selectionStart);\n    target.setSelectionStyles(styleOverride, selectionEnd, target.text.length);\n    target.dirty = true;\n    const dragImage = target.toCanvasElement({\n      enableRetinaScaling: canvas.enableRetinaScaling,\n      viewportTransform: true,\n    });\n    // restore values\n    target.backgroundColor = bgc;\n    target.styles = styles;\n    target.dirty = true;\n    //  position drag image offscreen\n    setStyle(dragImage, {\n      position: 'fixed',\n      left: `${-dragImage.width}px`,\n      border: NONE,\n      width: `${dragImage.width / retinaScaling}px`,\n      height: `${dragImage.height / retinaScaling}px`,\n    });\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    this.__dragImageDisposer = () => {\n      dragImage.remove();\n    };\n    getDocumentFromElement(\n      (e.target || this.target.hiddenTextarea)! as HTMLElement,\n    ).body.appendChild(dragImage);\n    e.dataTransfer?.setDragImage(dragImage, offset.x, offset.y);\n  }\n\n  /**\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drag source\n   */\n  onDragStart(e: DragEvent): boolean {\n    this.__dragStartFired = true;\n    const target = this.target;\n    const active = this.isActive();\n    if (active && e.dataTransfer) {\n      const selection = (this.__dragStartSelection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n      });\n      const value = target._text\n        .slice(selection.selectionStart, selection.selectionEnd)\n        .join('');\n      const data = { text: target.text, value, ...selection };\n      e.dataTransfer.setData('text/plain', value);\n      e.dataTransfer.setData(\n        'application/fabric',\n        JSON.stringify({\n          value: value,\n          styles: target.getSelectionStyles(\n            selection.selectionStart,\n            selection.selectionEnd,\n            true,\n          ),\n        }),\n      );\n      e.dataTransfer.effectAllowed = 'copyMove';\n      this.setDragImage(e, data);\n    }\n    target.abortCursorAnimation();\n    return active;\n  }\n\n  /**\n   * use {@link targetCanDrop} to respect overriding\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent): boolean {\n    if (\n      this.target.editable &&\n      !this.target.getActiveControl() &&\n      !e.defaultPrevented\n    ) {\n      if (this.isActive() && this.__dragStartSelection) {\n        //  drag source trying to drop over itself\n        //  allow dropping only outside of drag start selection\n        const index = this.target.getSelectionStartFromPointer(e);\n        const dragStartSelection = this.__dragStartSelection;\n        return (\n          index < dragStartSelection.selectionStart ||\n          index > dragStartSelection.selectionEnd\n        );\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * in order to respect overriding {@link IText#canDrop} we call that instead of calling {@link canDrop} directly\n   */\n  protected targetCanDrop(e: DragEvent) {\n    return this.target.canDrop(e);\n  }\n\n  dragEnterHandler({ e }: DragEventData) {\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    }\n  }\n\n  dragOverHandler(ev: DragEventData) {\n    const { e } = ev;\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    } else if (this.__isDraggingOver && !canDrop) {\n      //  drop state has changed\n      this.__isDraggingOver = false;\n    }\n    if (this.__isDraggingOver) {\n      //  can be dropped, inform browser\n      e.preventDefault();\n      //  inform event subscribers\n      ev.canDrop = true;\n      ev.dropTarget = this.target;\n    }\n  }\n\n  dragLeaveHandler() {\n    if (this.__isDraggingOver || this.isActive()) {\n      this.__isDraggingOver = false;\n    }\n  }\n\n  /**\n   * Override the `text/plain | application/fabric` types of {@link DragEvent#dataTransfer}\n   * in order to change the drop value or to customize styling respectively, by listening to the `drop:before` event\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#performing_a_drop\n   */\n  dropHandler(ev: DropEventData) {\n    const { e } = ev;\n    const didDrop = e.defaultPrevented;\n    this.__isDraggingOver = false;\n    // inform browser that the drop has been accepted\n    e.preventDefault();\n    let insert = e.dataTransfer?.getData('text/plain');\n    if (insert && !didDrop) {\n      const target = this.target;\n      const canvas = target.canvas!;\n      let insertAt = target.getSelectionStartFromPointer(e);\n      const { styles } = (\n        e.dataTransfer!.types.includes('application/fabric')\n          ? JSON.parse(e.dataTransfer!.getData('application/fabric'))\n          : {}\n      ) as { styles: TextStyleDeclaration[] };\n      const trailing = insert[Math.max(0, insert.length - 1)];\n      const selectionStartOffset = 0;\n      //  drag and drop in same instance\n      if (this.__dragStartSelection) {\n        const selectionStart = this.__dragStartSelection.selectionStart;\n        const selectionEnd = this.__dragStartSelection.selectionEnd;\n        if (insertAt > selectionStart && insertAt <= selectionEnd) {\n          insertAt = selectionStart;\n        } else if (insertAt > selectionEnd) {\n          insertAt -= selectionEnd - selectionStart;\n        }\n        target.removeChars(selectionStart, selectionEnd);\n        // prevent `dragend` from handling event\n        delete this.__dragStartSelection;\n      }\n      //  remove redundant line break\n      if (\n        target._reNewline.test(trailing) &&\n        (target._reNewline.test(target._text[insertAt]) ||\n          insertAt === target._text.length)\n      ) {\n        insert = insert.trimEnd();\n      }\n      //  inform subscribers\n      ev.didDrop = true;\n      ev.dropTarget = target;\n      //  finalize\n      target.insertChars(insert, styles, insertAt);\n      // can this part be moved in an outside event? andrea to check.\n      canvas.setActiveObject(target);\n      target.enterEditing(e);\n      target.selectionStart = Math.min(\n        insertAt + selectionStartOffset,\n        target._text.length,\n      );\n      target.selectionEnd = Math.min(\n        target.selectionStart + insert.length,\n        target._text.length,\n      );\n      target.hiddenTextarea!.value = target.text;\n      target._updateTextarea();\n      target.hiddenTextarea!.focus();\n      target.fire(CHANGED, {\n        index: insertAt + selectionStartOffset,\n        action: 'drop',\n      });\n      canvas.fire('text:changed', { target });\n      canvas.contextTopDirty = true;\n      canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * fired only on the drag source after drop (if occurred)\n   * handle changes to the drag source in case of a drop on another object or a cancellation\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   */\n  dragEndHandler({ e }: DragEventData) {\n    if (this.isActive() && this.__dragStartFired) {\n      //  once the drop event finishes we check if we need to change the drag source\n      //  if the drag source received the drop we bail out since the drop handler has already handled logic\n      if (this.__dragStartSelection) {\n        const target = this.target;\n        const canvas = this.target.canvas!;\n        const { selectionStart, selectionEnd } = this.__dragStartSelection;\n        const dropEffect = e.dataTransfer?.dropEffect || NONE;\n        if (dropEffect === NONE) {\n          // pointer is back over selection\n          target.selectionStart = selectionStart;\n          target.selectionEnd = selectionEnd;\n          target._updateTextarea();\n          target.hiddenTextarea!.focus();\n        } else {\n          target.clearContextTop();\n          if (dropEffect === 'move') {\n            target.removeChars(selectionStart, selectionEnd);\n            target.selectionStart = target.selectionEnd = selectionStart;\n            target.hiddenTextarea &&\n              (target.hiddenTextarea.value = target.text);\n            target._updateTextarea();\n            target.fire(CHANGED, {\n              index: selectionStart,\n              action: 'dragend',\n            });\n            canvas.fire('text:changed', { target });\n            canvas.requestRenderAll();\n          }\n          target.exitEditing();\n        }\n      }\n    }\n\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    delete this.__dragImageDisposer;\n    delete this.__dragStartSelection;\n    this.__isDraggingOver = false;\n  }\n\n  dispose() {\n    this._dispose && this._dispose();\n  }\n}\n","import type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { FabricText } from '../Text/Text';\nimport { animate } from '../../util/animation/animate';\nimport type { TOnAnimationChangeCallback } from '../../util/animation/types';\nimport type { ValueAnimation } from '../../util/animation/ValueAnimation';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport type { TOptions } from '../../typedefs';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, MODIFIED, RIGHT, reNewline } from '../../constants';\nimport type { IText } from './IText';\n\n/**\n *  extend this regex to support non english languages\n *\n *  - ` `      Matches a SPACE character (char code 32).\n *  - `\\n`     Matches a LINE FEED character (char code 10).\n *  - `\\.`     Matches a \".\" character (char code 46).\n *  - `,`      Matches a \",\" character (char code 44).\n *  - `;`      Matches a \";\" character (char code 59).\n *  - `!`      Matches a \"!\" character (char code 33).\n *  - `\\?`     Matches a \"?\" character (char code 63).\n *  - `\\-`     Matches a \"-\" character (char code 45).\n */\n// eslint-disable-next-line no-useless-escape\nconst reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\nexport type ITextEvents = ObjectEvents & {\n  'selection:changed': never;\n  changed: never | { index: number; action: string };\n  'editing:entered': never | { e: TPointerEvent };\n  'editing:exited': never;\n};\n\nexport abstract class ITextBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends FabricText<Props, SProps, EventSpec> {\n  declare abstract isEditing: boolean;\n  declare abstract cursorDelay: number;\n  declare abstract selectionStart: number;\n  declare abstract selectionEnd: number;\n  declare abstract cursorDuration: number;\n  declare abstract editable: boolean;\n  declare abstract editingBorderColor: string;\n\n  declare abstract compositionStart: number;\n  declare abstract compositionEnd: number;\n\n  declare abstract hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * Helps determining when the text is in composition, so that the cursor\n   * rendering is altered.\n   */\n  declare protected inCompositionMode: boolean;\n\n  declare protected _reSpace: RegExp;\n  declare private _currentTickState?: ValueAnimation;\n  declare private _currentTickCompleteState?: ValueAnimation;\n  protected _currentCursorOpacity = 1;\n  declare private _textBeforeEdit: string;\n  declare protected __selectionStartOnMouseDown: number;\n\n  /**\n   * Keeps track if the IText object was selected before the actual click.\n   * This because we want to delay enter editing by a click.\n   */\n  declare protected selected: boolean;\n  declare protected cursorOffsetCache: { left?: number; top?: number };\n  declare protected _savedProps?: {\n    hasControls: boolean;\n    borderColor: string;\n    lockMovementX: boolean;\n    lockMovementY: boolean;\n    selectable: boolean;\n    hoverCursor: CSSStyleDeclaration['cursor'] | null;\n    defaultCursor?: CSSStyleDeclaration['cursor'];\n    moveCursor?: CSSStyleDeclaration['cursor'];\n  };\n  declare protected _selectionDirection: 'left' | 'right' | null;\n\n  abstract initHiddenTextarea(): void;\n  abstract _fireSelectionChanged(): void;\n  abstract renderCursorOrSelection(): void;\n  abstract getSelectionStartFromPointer(e: TPointerEvent): number;\n  abstract _getCursorBoundaries(\n    index: number,\n    skipCaching?: boolean,\n  ): {\n    left: number;\n    top: number;\n    leftOffset: number;\n    topOffset: number;\n  };\n\n  /**\n   * Initializes all the interactive behavior of IText\n   */\n  initBehavior() {\n    this._tick = this._tick.bind(this);\n    this._onTickComplete = this._onTickComplete.bind(this);\n    this.updateSelectionOnMouseMove =\n      this.updateSelectionOnMouseMove.bind(this);\n  }\n\n  onDeselect(options?: { e?: TPointerEvent; object?: FabricObject }) {\n    this.isEditing && this.exitEditing();\n    this.selected = false;\n    return super.onDeselect(options);\n  }\n\n  /**\n   * @private\n   */\n  _animateCursor({\n    toValue,\n    duration,\n    delay,\n    onComplete,\n  }: {\n    toValue: number;\n    duration: number;\n    delay?: number;\n    onComplete?: TOnAnimationChangeCallback<number>;\n  }) {\n    return animate({\n      startValue: this._currentCursorOpacity,\n      endValue: toValue,\n      duration,\n      delay,\n      onComplete,\n      abort: () =>\n        !this.canvas ||\n        // we do not want to animate a selection, only cursor\n        this.selectionStart !== this.selectionEnd,\n      onChange: (value) => {\n        this._currentCursorOpacity = value;\n        this.renderCursorOrSelection();\n      },\n    });\n  }\n\n  /**\n   * changes the cursor from visible to invisible\n   */\n  private _tick(delay?: number) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(delay || 0, 100),\n      onComplete: this._onTickComplete,\n    });\n  }\n\n  /**\n   * Changes the cursor from invisible to visible\n   */\n  private _onTickComplete() {\n    this._currentTickCompleteState?.abort();\n    this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick,\n    });\n  }\n\n  /**\n   * Initializes delayed cursor\n   */\n  initDelayedCursor(restart?: boolean) {\n    this.abortCursorAnimation();\n    this._tick(restart ? 0 : this.cursorDelay);\n  }\n\n  /**\n   * Aborts cursor animation, clears all timeouts and clear textarea context if necessary\n   */\n  abortCursorAnimation() {\n    let shouldClear = false;\n    [this._currentTickState, this._currentTickCompleteState].forEach(\n      (cursorAnimation) => {\n        if (cursorAnimation && !cursorAnimation.isDone()) {\n          shouldClear = true;\n          cursorAnimation.abort();\n        }\n      },\n    );\n\n    this._currentCursorOpacity = 1;\n\n    //  make sure we clear context even if instance is not editing\n    if (shouldClear) {\n      this.clearContextTop();\n    }\n  }\n\n  /**\n   * Restart tue cursor animation if either is in complete state ( between animations )\n   * or if it never started before\n   */\n  restartCursorIfNeeded() {\n    if (\n      [this._currentTickState, this._currentTickCompleteState].some(\n        (cursorAnimation) => !cursorAnimation || cursorAnimation.isDone(),\n      )\n    ) {\n      this.initDelayedCursor();\n    }\n  }\n\n  /**\n   * Selects entire text\n   */\n  selectAll() {\n    this.selectionStart = 0;\n    this.selectionEnd = this._text.length;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Selects entire text and updates the visual state\n   */\n  cmdAll() {\n    this.selectAll();\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Returns selected text\n   * @return {String}\n   */\n  getSelectedText(): string {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n  }\n\n  /**\n   * Find new selection index representing start of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    // remove space before cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index--;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    // remove space after cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index++;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Find new selection index representing start of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    while (!/\\n/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    while (!/\\n/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Finds index corresponding to beginning or end of a word\n   * @param {Number} selectionStart Index of a character\n   * @param {Number} direction 1 or -1\n   * @return {Number} Index of the beginning or end of a word\n   */\n  searchWordBoundary(selectionStart: number, direction: 1 | -1): number {\n    const text = this._text;\n    // if we land on a space we move the cursor backwards\n    // if we are searching boundary end we move the cursor backwards ONLY if we don't land on a line break\n    let index =\n        selectionStart > 0 &&\n        this._reSpace.test(text[selectionStart]) &&\n        (direction === -1 || !reNewline.test(text[selectionStart - 1]))\n          ? selectionStart - 1\n          : selectionStart,\n      _char = text[index];\n    while (index > 0 && index < text.length && !reNonWord.test(_char)) {\n      index += direction;\n      _char = text[index];\n    }\n    if (direction === -1 && reNonWord.test(_char)) {\n      index++;\n    }\n    return index;\n  }\n\n  /**\n   * Selects the word that contains the char at index selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectWord(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    // search backwards\n    const newSelectionStart = this.searchWordBoundary(selectionStart, -1),\n      // search forward\n      newSelectionEnd = Math.max(\n        newSelectionStart,\n        this.searchWordBoundary(selectionStart, 1),\n      );\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    // remove next major, for now it renders twice :(\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Selects the line that contains selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectLine(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    const newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n      newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n  }\n\n  /**\n   * Enters editing state\n   */\n  enterEditing(e?: TPointerEvent) {\n    if (this.isEditing || !this.editable) {\n      return;\n    }\n    this.enterEditingImpl();\n    this.fire('editing:entered', e ? { e } : undefined);\n    this._fireSelectionChanged();\n    if (this.canvas) {\n      this.canvas.fire('text:editing:entered', {\n        target: this as unknown as IText,\n        e,\n      });\n      this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * runs the actual logic that enter from editing state, see {@link enterEditing}\n   */\n  enterEditingImpl() {\n    if (this.canvas) {\n      this.canvas.calcOffset();\n      this.canvas.textEditingManager.exitTextEditing();\n    }\n\n    this.isEditing = true;\n\n    this.initHiddenTextarea();\n    this.hiddenTextarea!.focus();\n    this.hiddenTextarea!.value = this.text;\n    this._updateTextarea();\n    this._saveEditingProps();\n    this._setEditingProps();\n    this._textBeforeEdit = this.text;\n\n    this._tick();\n  }\n\n  /**\n   * called by {@link Canvas#textEditingManager}\n   */\n  updateSelectionOnMouseMove(e: TPointerEvent) {\n    if (this.getActiveControl()) {\n      return;\n    }\n\n    const el = this.hiddenTextarea!;\n    // regain focus\n    getDocumentFromElement(el).activeElement !== el && el.focus();\n\n    const newSelectionStart = this.getSelectionStartFromPointer(e),\n      currentStart = this.selectionStart,\n      currentEnd = this.selectionEnd;\n    if (\n      (newSelectionStart !== this.__selectionStartOnMouseDown ||\n        currentStart === currentEnd) &&\n      (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n    ) {\n      return;\n    }\n    if (newSelectionStart > this.__selectionStartOnMouseDown) {\n      this.selectionStart = this.__selectionStartOnMouseDown;\n      this.selectionEnd = newSelectionStart;\n    } else {\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = this.__selectionStartOnMouseDown;\n    }\n    if (\n      this.selectionStart !== currentStart ||\n      this.selectionEnd !== currentEnd\n    ) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setEditingProps() {\n    this.hoverCursor = 'text';\n\n    if (this.canvas) {\n      this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n    }\n\n    this.borderColor = this.editingBorderColor;\n    this.hasControls = this.selectable = false;\n    this.lockMovementX = this.lockMovementY = true;\n  }\n\n  /**\n   * convert from textarea to grapheme indexes\n   */\n  fromStringToGraphemeSelection(start: number, end: number, text: string) {\n    const smallerTextStart = text.slice(0, start),\n      graphemeStart = this.graphemeSplit(smallerTextStart).length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = text.slice(start, end),\n      graphemeEnd = this.graphemeSplit(smallerTextEnd).length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * convert from fabric to textarea values\n   */\n  fromGraphemeToStringSelection(\n    start: number,\n    end: number,\n    graphemes: string[],\n  ) {\n    const smallerTextStart = graphemes.slice(0, start),\n      graphemeStart = smallerTextStart.join('').length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = graphemes.slice(start, end),\n      graphemeEnd = smallerTextEnd.join('').length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _updateTextarea() {\n    this.cursorOffsetCache = {};\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    if (!this.inCompositionMode) {\n      const newSelection = this.fromGraphemeToStringSelection(\n        this.selectionStart,\n        this.selectionEnd,\n        this._text,\n      );\n      this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n      this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    this.cursorOffsetCache = {};\n    const textarea = this.hiddenTextarea;\n    this.text = textarea.value;\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    const newSelection = this.fromStringToGraphemeSelection(\n      textarea.selectionStart,\n      textarea.selectionEnd,\n      textarea.value,\n    );\n    this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n    if (!this.inCompositionMode) {\n      this.selectionStart = newSelection.selectionStart;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const style = this._calcTextareaPosition();\n      this.hiddenTextarea!.style.left = style.left;\n      this.hiddenTextarea!.style.top = style.top;\n    }\n  }\n\n  /**\n   * @private\n   * @return {Object} style contains style for hiddenTextarea\n   */\n  _calcTextareaPosition() {\n    if (!this.canvas) {\n      return { left: '1px', top: '1px' };\n    }\n    const desiredPosition = this.inCompositionMode\n        ? this.compositionStart\n        : this.selectionStart,\n      boundaries = this._getCursorBoundaries(desiredPosition),\n      cursorLocation = this.get2DCursorLocation(desiredPosition),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex = cursorLocation.charIndex,\n      charHeight =\n        this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') *\n        this.lineHeight,\n      leftOffset = boundaries.leftOffset,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      upperCanvas = this.canvas.upperCanvasEl,\n      upperCanvasWidth = upperCanvas.width / retinaScaling,\n      upperCanvasHeight = upperCanvas.height / retinaScaling,\n      maxWidth = upperCanvasWidth - charHeight,\n      maxHeight = upperCanvasHeight - charHeight;\n\n    const p = new Point(\n      boundaries.left + leftOffset,\n      boundaries.top + boundaries.topOffset + charHeight,\n    )\n      .transform(this.calcTransformMatrix())\n      .transform(this.canvas.viewportTransform)\n      .multiply(\n        new Point(\n          upperCanvas.clientWidth / upperCanvasWidth,\n          upperCanvas.clientHeight / upperCanvasHeight,\n        ),\n      );\n\n    if (p.x < 0) {\n      p.x = 0;\n    }\n    if (p.x > maxWidth) {\n      p.x = maxWidth;\n    }\n    if (p.y < 0) {\n      p.y = 0;\n    }\n    if (p.y > maxHeight) {\n      p.y = maxHeight;\n    }\n\n    // add canvas offset on document\n    p.x += this.canvas._offset.left;\n    p.y += this.canvas._offset.top;\n\n    return {\n      left: `${p.x}px`,\n      top: `${p.y}px`,\n      fontSize: `${charHeight}px`,\n      charHeight: charHeight,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _restoreEditingProps() {\n    if (!this._savedProps) {\n      return;\n    }\n\n    this.hoverCursor = this._savedProps.hoverCursor;\n    this.hasControls = this._savedProps.hasControls;\n    this.borderColor = this._savedProps.borderColor;\n    this.selectable = this._savedProps.selectable;\n    this.lockMovementX = this._savedProps.lockMovementX;\n    this.lockMovementY = this._savedProps.lockMovementY;\n\n    if (this.canvas) {\n      this.canvas.defaultCursor =\n        this._savedProps.defaultCursor || this.canvas.defaultCursor;\n      this.canvas.moveCursor =\n        this._savedProps.moveCursor || this.canvas.moveCursor;\n    }\n\n    delete this._savedProps;\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * But it does not fire events\n   */\n  exitEditingImpl() {\n    const hiddenTextarea = this.hiddenTextarea;\n    this.selected = false;\n    this.isEditing = false;\n\n    if (hiddenTextarea) {\n      hiddenTextarea.blur && hiddenTextarea.blur();\n      hiddenTextarea.parentNode &&\n        hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n    }\n    this.hiddenTextarea = null;\n    this.abortCursorAnimation();\n    this.selectionStart !== this.selectionEnd && this.clearContextTop();\n    this.selectionEnd = this.selectionStart;\n    this._restoreEditingProps();\n    if (this._forceClearCache) {\n      this.initDimensions();\n      this.setCoords();\n    }\n  }\n\n  /**\n   * Exits from editing state and fires relevant events\n   */\n  exitEditing() {\n    const isTextChanged = this._textBeforeEdit !== this.text;\n    this.exitEditingImpl();\n\n    this.fire('editing:exited');\n    isTextChanged && this.fire(MODIFIED);\n    if (this.canvas) {\n      this.canvas.fire('text:editing:exited', {\n        target: this as unknown as IText,\n      });\n      // todo: evaluate add an action to this event\n      isTextChanged && this.canvas.fire('object:modified', { target: this });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _removeExtraneousStyles() {\n    for (const prop in this.styles) {\n      if (!this._textLines[prop as unknown as number]) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * remove and reflow a style block from start to end.\n   * @param {Number} start linear start position for removal (included in removal)\n   * @param {Number} end linear end position for removal ( excluded from removal )\n   */\n  removeStyleFromTo(start: number, end: number) {\n    const { lineIndex: lineStart, charIndex: charStart } =\n        this.get2DCursorLocation(start, true),\n      { lineIndex: lineEnd, charIndex: charEnd } = this.get2DCursorLocation(\n        end,\n        true,\n      );\n    if (lineStart !== lineEnd) {\n      // step1 remove the trailing of lineStart\n      if (this.styles[lineStart]) {\n        for (\n          let i = charStart;\n          i < this._unwrappedTextLines[lineStart].length;\n          i++\n        ) {\n          delete this.styles[lineStart][i];\n        }\n      }\n      // step2 move the trailing of lineEnd to lineStart if needed\n      if (this.styles[lineEnd]) {\n        for (\n          let i = charEnd;\n          i < this._unwrappedTextLines[lineEnd].length;\n          i++\n        ) {\n          const styleObj = this.styles[lineEnd][i];\n          if (styleObj) {\n            this.styles[lineStart] || (this.styles[lineStart] = {});\n            this.styles[lineStart][charStart + i - charEnd] = styleObj;\n          }\n        }\n      }\n      // step3 detects lines will be completely removed.\n      for (let i = lineStart + 1; i <= lineEnd; i++) {\n        delete this.styles[i];\n      }\n      // step4 shift remaining lines.\n      this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n    } else {\n      // remove and shift left on the same line\n      if (this.styles[lineStart]) {\n        const styleObj = this.styles[lineStart];\n        const diff = charEnd - charStart;\n        for (let i = charStart; i < charEnd; i++) {\n          delete styleObj[i];\n        }\n        for (const char in this.styles[lineStart]) {\n          const numericChar = parseInt(char, 10);\n          if (numericChar >= charEnd) {\n            styleObj[numericChar - diff] = styleObj[char];\n            delete styleObj[char];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Shifts line styles up or down\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} offset Can any number?\n   */\n  shiftLineStyles(lineIndex: number, offset: number) {\n    const clonedStyles = Object.assign({}, this.styles);\n    for (const line in this.styles) {\n      const numericLine = parseInt(line, 10);\n      if (numericLine > lineIndex) {\n        this.styles[numericLine + offset] = clonedStyles[numericLine];\n        if (!clonedStyles[numericLine - offset]) {\n          delete this.styles[numericLine];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle insertion of more consecutive style lines for when one or more\n   * newlines gets added to the text. Since current style needs to be shifted\n   * first we shift the current style of the number lines needed, then we add\n   * new lines from the last to the first.\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} qty number of lines to add\n   * @param {Array} copiedStyle Array of objects styles\n   */\n  insertNewlineStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    qty: number,\n    copiedStyle?: { [index: number]: TextStyleDeclaration },\n  ) {\n    const newLineStyles: { [index: number]: TextStyleDeclaration } = {};\n    const originalLineLength = this._unwrappedTextLines[lineIndex].length;\n    const isEndOfLine = originalLineLength === charIndex;\n\n    let someStyleIsCarryingOver = false;\n    qty || (qty = 1);\n    this.shiftLineStyles(lineIndex, qty);\n    const currentCharStyle = this.styles[lineIndex]\n      ? this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1]\n      : undefined;\n\n    // we clone styles of all chars\n    // after cursor onto the current line\n    for (const index in this.styles[lineIndex]) {\n      const numIndex = parseInt(index, 10);\n      if (numIndex >= charIndex) {\n        someStyleIsCarryingOver = true;\n        newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n        // remove lines from the previous line since they're on a new line now\n        if (!(isEndOfLine && charIndex === 0)) {\n          delete this.styles[lineIndex][index];\n        }\n      }\n    }\n    let styleCarriedOver = false;\n    if (someStyleIsCarryingOver && !isEndOfLine) {\n      // if is end of line, the extra style we copied\n      // is probably not something we want\n      this.styles[lineIndex + qty] = newLineStyles;\n      styleCarriedOver = true;\n    }\n    if (styleCarriedOver || originalLineLength > charIndex) {\n      // skip the last line of since we already prepared it.\n      // or contains text without style that we don't want to style\n      // just because it changed lines\n      qty--;\n    }\n    // for the all the lines or all the other lines\n    // we clone current char style onto the next (otherwise empty) line\n    while (qty > 0) {\n      if (copiedStyle && copiedStyle[qty - 1]) {\n        this.styles[lineIndex + qty] = {\n          0: { ...copiedStyle[qty - 1] },\n        };\n      } else if (currentCharStyle) {\n        this.styles[lineIndex + qty] = {\n          0: { ...currentCharStyle },\n        };\n      } else {\n        delete this.styles[lineIndex + qty];\n      }\n      qty--;\n    }\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Inserts style object for a given line/char index\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} quantity number Style object to insert, if given\n   * @param {Array} copiedStyle array of style objects\n   */\n  insertCharStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    quantity: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    if (!this.styles) {\n      this.styles = {};\n    }\n    const currentLineStyles = this.styles[lineIndex],\n      currentLineStylesCloned = currentLineStyles\n        ? { ...currentLineStyles }\n        : {};\n\n    quantity || (quantity = 1);\n    // shift all char styles by quantity forward\n    // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n    for (const index in currentLineStylesCloned) {\n      const numericIndex = parseInt(index, 10);\n      if (numericIndex >= charIndex) {\n        currentLineStyles[numericIndex + quantity] =\n          currentLineStylesCloned[numericIndex];\n        // only delete the style if there was nothing moved there\n        if (!currentLineStylesCloned[numericIndex - quantity]) {\n          delete currentLineStyles[numericIndex];\n        }\n      }\n    }\n    this._forceClearCache = true;\n    if (copiedStyle) {\n      while (quantity--) {\n        if (!Object.keys(copiedStyle[quantity]).length) {\n          continue;\n        }\n        if (!this.styles[lineIndex]) {\n          this.styles[lineIndex] = {};\n        }\n        this.styles[lineIndex][charIndex + quantity] = {\n          ...copiedStyle[quantity],\n        };\n      }\n      return;\n    }\n    if (!currentLineStyles) {\n      return;\n    }\n    const newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n    while (newStyle && quantity--) {\n      this.styles[lineIndex][charIndex + quantity] = { ...newStyle };\n    }\n  }\n\n  /**\n   * Inserts style object(s)\n   * @param {Array} insertedText Characters at the location where style is inserted\n   * @param {Number} start cursor index for inserting style\n   * @param {Array} [copiedStyle] array of style objects to insert.\n   */\n  insertNewStyleBlock(\n    insertedText: string[],\n    start: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    const cursorLoc = this.get2DCursorLocation(start, true),\n      addedLines = [0];\n    let linesLength = 0;\n    // get an array of how many char per lines are being added.\n    for (let i = 0; i < insertedText.length; i++) {\n      if (insertedText[i] === '\\n') {\n        linesLength++;\n        addedLines[linesLength] = 0;\n      } else {\n        addedLines[linesLength]++;\n      }\n    }\n    // for the first line copy the style from the current char position.\n    if (addedLines[0] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex,\n        addedLines[0],\n        copiedStyle,\n      );\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n    }\n    linesLength &&\n      this.insertNewlineStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex + addedLines[0],\n        linesLength,\n      );\n    let i;\n    for (i = 1; i < linesLength; i++) {\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(\n          cursorLoc.lineIndex + i,\n          0,\n          addedLines[i],\n          copiedStyle,\n        );\n      } else if (copiedStyle) {\n        // this test is required in order to close #6841\n        // when a pasted buffer begins with a newline then\n        // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]\n        // may be undefined for some reason\n        if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n      }\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n    }\n    if (addedLines[i] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex + i,\n        0,\n        addedLines[i],\n        copiedStyle,\n      );\n    }\n  }\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars(start: number, end: number = start + 1) {\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars(\n    text: string,\n    style: TextStyleDeclaration[] | undefined,\n    start: number,\n    end: number = start,\n  ) {\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    const graphemes = this.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [\n      ...this._text.slice(0, start),\n      ...graphemes,\n      ...this._text.slice(end),\n    ];\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * Set the selectionStart and selectionEnd according to the new position of cursor\n   * mimic the key - mouse navigation when shift is pressed.\n   */\n  setSelectionStartEndWithShift(\n    start: number,\n    end: number,\n    newSelection: number,\n  ) {\n    if (newSelection <= start) {\n      if (end === start) {\n        this._selectionDirection = LEFT;\n      } else if (this._selectionDirection === RIGHT) {\n        this._selectionDirection = LEFT;\n        this.selectionEnd = start;\n      }\n      this.selectionStart = newSelection;\n    } else if (newSelection > start && newSelection < end) {\n      if (this._selectionDirection === RIGHT) {\n        this.selectionEnd = newSelection;\n      } else {\n        this.selectionStart = newSelection;\n      }\n    } else {\n      // newSelection is > selection start and end\n      if (end === start) {\n        this._selectionDirection = RIGHT;\n      } else if (this._selectionDirection === LEFT) {\n        this._selectionDirection = RIGHT;\n        this.selectionStart = end;\n      }\n      this.selectionEnd = newSelection;\n    }\n  }\n}\n","import { config } from '../../config';\nimport { getFabricDocument, getEnv } from '../../env';\nimport { capValue } from '../../util/misc/capValue';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextBehavior } from './ITextBehavior';\nimport type { TKeyMapIText } from './constants';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, LEFT, RIGHT } from '../../constants';\nimport type { IText } from './IText';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\n\nexport abstract class ITextKeyBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextBehavior<Props, SProps, EventSpec> {\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behavior for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the IText or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = Object.assign({}, this.keysMap);\n   * The function must be in IText.prototype.myFunction And will receive event as args[0]\n   */\n  declare keysMap: TKeyMapIText;\n\n  declare keysMapRtl: TKeyMapIText;\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  declare ctrlKeysMapUp: TKeyMapIText;\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  declare ctrlKeysMapDown: TKeyMapIText;\n\n  declare hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * DOM container to append the hiddenTextarea.\n   * An alternative to attaching to the document.body.\n   * Useful to reduce laggish redraw of the full document.body tree and\n   * also with modals event capturing that won't let the textarea take focus.\n   * @type HTMLElement\n   * @default\n   */\n  declare hiddenTextareaContainer?: HTMLElement | null;\n\n  declare private _clickHandlerInitialized: boolean;\n  declare private _copyDone: boolean;\n  declare private fromPaste: boolean;\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea() {\n    const doc =\n      (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n      getFabricDocument();\n    const textarea = doc.createElement('textarea');\n    Object.entries({\n      autocapitalize: 'off',\n      autocorrect: 'off',\n      autocomplete: 'off',\n      spellcheck: 'false',\n      'data-fabric': 'textarea',\n      wrap: 'off',\n    }).map(([attribute, value]) => textarea.setAttribute(attribute, value));\n    const { top, left, fontSize } = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    textarea.style.cssText = `position: absolute; top: ${top}; left: ${left}; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: ${fontSize};`;\n\n    (this.hiddenTextareaContainer || doc.body).appendChild(textarea);\n\n    Object.entries({\n      blur: 'blur',\n      keydown: 'onKeyDown',\n      keyup: 'onKeyUp',\n      input: 'onInput',\n      copy: 'copy',\n      cut: 'copy',\n      paste: 'paste',\n      compositionstart: 'onCompositionStart',\n      compositionupdate: 'onCompositionUpdate',\n      compositionend: 'onCompositionEnd',\n    } as Record<string, keyof this>).map(([eventName, handler]) =>\n      textarea.addEventListener(\n        eventName,\n        (this[handler] as EventListener).bind(this),\n      ),\n    );\n    this.hiddenTextarea = textarea;\n  }\n\n  /**\n   * Override this method to customize cursor behavior on textbox blur\n   */\n  blur() {\n    this.abortCursorAnimation();\n  }\n\n  /**\n   * Handles keydown event\n   * only used for arrows and combination of modifier keys.\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyDown(e: KeyboardEvent) {\n    if (!this.isEditing) {\n      return;\n    }\n    const keyMap = this.direction === 'rtl' ? this.keysMapRtl : this.keysMap;\n    if (e.keyCode in keyMap) {\n      (this[keyMap[e.keyCode] as keyof this] as (arg: KeyboardEvent) => void)(\n        e,\n      );\n    } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapDown[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.inCompositionMode = false;\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    } else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyUp(e: KeyboardEvent) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapUp[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  }\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput(this: this & { hiddenTextarea: HTMLTextAreaElement }, e: Event) {\n    const fromPaste = this.fromPaste;\n    const { value, selectionStart, selectionEnd } = this.hiddenTextarea;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    const updateAndFire = () => {\n      this.updateFromTextArea();\n      this.fire(CHANGED);\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this as unknown as IText });\n        this.canvas.requestRenderAll();\n      }\n    };\n    if (this.hiddenTextarea.value === '') {\n      this.styles = {};\n      updateAndFire();\n      return;\n    }\n    // decisions about style changes.\n    const nextText = this._splitTextIntoLines(value).graphemeText,\n      charCount = this._text.length,\n      nextCharCount = nextText.length,\n      _selectionStart = this.selectionStart,\n      _selectionEnd = this.selectionEnd,\n      selection = _selectionStart !== _selectionEnd;\n    let copiedStyle: TextStyleDeclaration[] | undefined,\n      removedText,\n      charDiff = nextCharCount - charCount,\n      removeFrom,\n      removeTo;\n\n    const textareaSelection = this.fromStringToGraphemeSelection(\n      selectionStart,\n      selectionEnd,\n      value,\n    );\n    const backDelete = _selectionStart > textareaSelection.selectionStart;\n\n    if (selection) {\n      removedText = this._text.slice(_selectionStart, _selectionEnd);\n      charDiff += _selectionEnd - _selectionStart;\n    } else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(_selectionEnd + charDiff, _selectionEnd);\n      } else {\n        removedText = this._text.slice(\n          _selectionStart,\n          _selectionStart - charDiff,\n        );\n      }\n    }\n    const insertedText = nextText.slice(\n      textareaSelection.selectionEnd - charDiff,\n      textareaSelection.selectionEnd,\n    );\n    if (removedText && removedText.length) {\n      if (insertedText.length) {\n        // let's copy some style before deleting.\n        // we want to copy the style before the cursor OR the style at the cursor if selection\n        // is bigger than 0.\n        copiedStyle = this.getSelectionStyles(\n          _selectionStart,\n          _selectionStart + 1,\n          false,\n        );\n        // now duplicate the style one for each inserted text.\n        copiedStyle = insertedText.map(\n          () =>\n            // this return an array of references, but that is fine since we are\n            // copying the style later.\n            copiedStyle![0],\n        );\n      }\n      if (selection) {\n        removeFrom = _selectionStart;\n        removeTo = _selectionEnd;\n      } else if (backDelete) {\n        // detect differences between forwardDelete and backDelete\n        removeFrom = _selectionEnd - removedText.length;\n        removeTo = _selectionEnd;\n      } else {\n        removeFrom = _selectionEnd;\n        removeTo = _selectionEnd + removedText.length;\n      }\n      this.removeStyleFromTo(removeFrom, removeTo);\n    }\n    if (insertedText.length) {\n      const { copyPasteData } = getEnv();\n      if (\n        fromPaste &&\n        insertedText.join('') === copyPasteData.copiedText &&\n        !config.disableStyleCopyPaste\n      ) {\n        copiedStyle = copyPasteData.copiedTextStyle;\n      }\n      this.insertNewStyleBlock(insertedText, _selectionStart, copiedStyle);\n    }\n    updateAndFire();\n  }\n\n  /**\n   * Composition start\n   */\n  onCompositionStart() {\n    this.inCompositionMode = true;\n  }\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd() {\n    this.inCompositionMode = false;\n  }\n\n  onCompositionUpdate({ target }: CompositionEvent) {\n    const { selectionStart, selectionEnd } = target as HTMLTextAreaElement;\n    this.compositionStart = selectionStart;\n    this.compositionEnd = selectionEnd;\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * Copies selected text\n   */\n  copy() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n    const { copyPasteData } = getEnv();\n    copyPasteData.copiedText = this.getSelectedText();\n    if (!config.disableStyleCopyPaste) {\n      copyPasteData.copiedTextStyle = this.getSelectionStyles(\n        this.selectionStart,\n        this.selectionEnd,\n        true,\n      );\n    } else {\n      copyPasteData.copiedTextStyle = undefined;\n    }\n    this._copyDone = true;\n  }\n\n  /**\n   * Pastes text\n   */\n  paste() {\n    this.fromPaste = true;\n  }\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor(lineIndex: number, charIndex: number): number {\n    let widthBeforeCursor = this._getLineLeftOffset(lineIndex),\n      bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  }\n\n  /**\n   * Gets start offset of a selection\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (\n      lineIndex === this._textLines.length - 1 ||\n      e.metaKey ||\n      e.keyCode === 34\n    ) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n      textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return (\n      textAfterCursor.length +\n      indexOnOtherLine +\n      1 +\n      this.missingNewlineOffset(lineIndex)\n    );\n  }\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset(e: KeyboardEvent, isRight: boolean): number {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    } else {\n      return this.selectionStart;\n    }\n  }\n\n  /**\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n      textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\n      missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\n    // return a negative offset\n    return (\n      -this._textLines[lineIndex - 1].length +\n      indexOnOtherLine -\n      textBeforeCursor.length +\n      (1 - missingNewlineOffset)\n    );\n  }\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine(lineIndex: number, width: number) {\n    const line = this._textLines[lineIndex],\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    let widthOfCharsOnLine = lineLeftOffset,\n      indexOnLine = 0,\n      charWidth,\n      foundMatch;\n\n    for (let j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        const leftEdge = widthOfCharsOnLine - charWidth,\n          rightEdge = widthOfCharsOnLine,\n          offsetFromLeftEdge = Math.abs(leftEdge - width),\n          offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  }\n\n  /**\n   * Moves cursor down\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorDown(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  }\n\n  /**\n   * Moves cursor up\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorUp(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  }\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorUpOrDown(direction: 'Up' | 'Down', e: KeyboardEvent) {\n    const offset = this[`get${direction}CursorOffset`](\n      e,\n      this._selectionDirection === RIGHT,\n    );\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    } else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      const max = this.text.length;\n      this.selectionStart = capValue(0, this.selectionStart, max);\n      this.selectionEnd = capValue(0, this.selectionEnd, max);\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift(offset: number) {\n    const newSelection =\n      this._selectionDirection === LEFT\n        ? this.selectionStart + offset\n        : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(\n      this.selectionStart,\n      this.selectionEnd,\n      newSelection,\n    );\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift(offset: number) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor left\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorLeft(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  }\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   *\n   * @todo refactor not to use method name composition\n   */\n  _move(\n    e: KeyboardEvent,\n    prop: 'selectionStart' | 'selectionEnd',\n    direction: 'Left' | 'Right',\n  ): boolean {\n    let newValue: number | undefined;\n    if (e.altKey) {\n      newValue = this[`findWordBoundary${direction}`](this[prop]);\n    } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {\n      newValue = this[`findLineBoundary${direction}`](this[prop]);\n    } else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== 'undefined' && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _moveLeft(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Left');\n  }\n\n  /**\n   * @private\n   */\n  _moveRight(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Right');\n  }\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithoutShift(e: KeyboardEvent) {\n    let change = true;\n    this._selectionDirection = LEFT;\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (\n      this.selectionEnd === this.selectionStart &&\n      this.selectionStart !== 0\n    ) {\n      change = this._moveLeft(e, 'selectionStart');\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  }\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === RIGHT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveLeft(e, 'selectionEnd');\n    } else if (this.selectionStart !== 0) {\n      this._selectionDirection = LEFT;\n      return this._moveLeft(e, 'selectionStart');\n    }\n  }\n\n  /**\n   * Moves cursor right\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRight(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  }\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorLeftOrRight(direction: 'Left' | 'Right', e: KeyboardEvent) {\n    const actionName = `moveCursor${direction}${\n      e.shiftKey ? 'WithShift' : 'WithoutShift'\n    }` as const;\n    this._currentCursorOpacity = 1;\n    if (this[actionName](e)) {\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorRightWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === LEFT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveRight(e, 'selectionStart');\n    } else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = RIGHT;\n      return this._moveRight(e, 'selectionEnd');\n    }\n  }\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRightWithoutShift(e: KeyboardEvent) {\n    let changed = true;\n    this._selectionDirection = RIGHT;\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  }\n}\n","import type {\n  ObjectPointerEvents,\n  TPointerEvent,\n  TPointerEventInfo,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { invertTransform } from '../../util/misc/matrix';\nimport { DraggableTextDelegate } from './DraggableTextDelegate';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextKeyBehavior } from './ITextKeyBehavior';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport type { IText } from './IText';\n/**\n * `LEFT_CLICK === 0`\n */\nconst notALeftClick = (e: Event) => !!(e as MouseEvent).button;\n\nexport abstract class ITextClickBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextKeyBehavior<Props, SProps, EventSpec> {\n  protected draggableTextDelegate: DraggableTextDelegate;\n\n  initBehavior() {\n    // Initializes event handlers related to cursor or selection\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mouseup', this.mouseUpHandler);\n    this.on('mousedblclick', this.doubleClickHandler);\n    this.on('mousetripleclick', this.tripleClickHandler);\n\n    this.draggableTextDelegate = new DraggableTextDelegate(\n      this as unknown as IText,\n    );\n\n    super.initBehavior();\n  }\n\n  /**\n   * If this method returns true a mouse move operation over a text selection\n   * will not prevent the native mouse event allowing the browser to start a drag operation.\n   * shouldStartDragging can be read 'do not prevent default for mouse move event'\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns\n   */\n  shouldStartDragging() {\n    return this.draggableTextDelegate.isActive();\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drag source,\n   * @see also {@link DraggableTextDelegate#isActive}\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns {boolean} should handle event\n   */\n  onDragStart(e: DragEvent) {\n    return this.draggableTextDelegate.onDragStart(e);\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent) {\n    return this.draggableTextDelegate.canDrop(e);\n  }\n\n  /**\n   * Default handler for double click, select a word\n   */\n  doubleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectWord(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default handler for triple click, select a line\n   */\n  tripleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectLine(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   * initializing a mousedDown on a text area will cancel fabricjs knowledge of\n   * current compositionMode. It will be set to false.\n   */\n  _mouseDownHandler({ e, alreadySelected }: ObjectPointerEvents['mousedown']) {\n    if (\n      !this.canvas ||\n      !this.editable ||\n      notALeftClick(e) ||\n      this.getActiveControl()\n    ) {\n      return;\n    }\n\n    if (this.draggableTextDelegate.start(e)) {\n      return;\n    }\n\n    this.canvas.textEditingManager.register(this);\n\n    if (alreadySelected) {\n      this.inCompositionMode = false;\n      this.setCursorByClick(e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n    this.selected ||= alreadySelected || this.isEditing;\n  }\n\n  /**\n   * standard handler for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler({ e, transform }: ObjectPointerEvents['mouseup']) {\n    const didDrag = this.draggableTextDelegate.end(e);\n\n    if (this.canvas) {\n      this.canvas.textEditingManager.unregister(this);\n\n      const activeObject = this.canvas._activeObject;\n      if (activeObject && activeObject !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n\n    if (\n      !this.editable ||\n      (this.group && !this.group.interactive) ||\n      (transform && transform.actionPerformed) ||\n      notALeftClick(e) ||\n      didDrag\n    ) {\n      return;\n    }\n\n    if (this.selected && !this.getActiveControl()) {\n      this.enterEditing(e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      } else {\n        this.renderCursorOrSelection();\n      }\n    }\n  }\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {TPointerEvent} e Event object\n   */\n  setCursorByClick(e: TPointerEvent) {\n    const newSelection = this.getSelectionStartFromPointer(e),\n      start = this.selectionStart,\n      end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    } else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {TPointerEvent} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer(e: TPointerEvent): number {\n    const mouseOffset = this.canvas!.getScenePoint(e)\n      .transform(invertTransform(this.calcTransformMatrix()))\n      .add(new Point(-this._getLeftOffset(), -this._getTopOffset()));\n    let height = 0,\n      charIndex = 0,\n      lineIndex = 0;\n\n    for (let i = 0; i < this._textLines.length; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i);\n        lineIndex = i;\n        if (i > 0) {\n          charIndex +=\n            this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\n        }\n      } else {\n        break;\n      }\n    }\n    const lineLeftOffset = Math.abs(this._getLineLeftOffset(lineIndex));\n    let width = lineLeftOffset;\n    const charLength = this._textLines[lineIndex].length;\n    const chars = this.__charBounds[lineIndex];\n    for (let j = 0; j < charLength; j++) {\n      // i removed something about flipX here, check.\n      const charWidth = chars[j].kernedWidth;\n      const widthAfter = width + charWidth;\n      if (mouseOffset.x <= widthAfter) {\n        // if the pointer is closer to the end of the char we increment charIndex\n        // in order to position the cursor after the char\n        if (\n          Math.abs(mouseOffset.x - widthAfter) <=\n          Math.abs(mouseOffset.x - width)\n        ) {\n          charIndex++;\n        }\n        break;\n      }\n      width = widthAfter;\n      charIndex++;\n    }\n\n    return Math.min(\n      // if object is horizontally flipped, mirror cursor location from the end\n      this.flipX ? charLength - charIndex : charIndex,\n      this._text.length,\n    );\n  }\n}\n","export type TKeyMapIText = Record<\n  KeyboardEvent['keyCode'],\n  CursorHandlingMethods\n>;\n\nexport type CursorHandlingMethods =\n  | 'moveCursorUp'\n  | 'moveCursorDown'\n  | 'moveCursorLeft'\n  | 'moveCursorRight'\n  | 'exitEditing'\n  | 'copy'\n  | 'cut'\n  | 'cmdAll';\n\nconst MOVE_CURSOR_UP: CursorHandlingMethods = 'moveCursorUp';\nconst MOVE_CURSOR_DOWN: CursorHandlingMethods = 'moveCursorDown';\nconst MOVE_CURSOR_LEFT: CursorHandlingMethods = 'moveCursorLeft';\nconst MOVE_CURSOR_RIGHT: CursorHandlingMethods = 'moveCursorRight';\nconst EXIT_EDITING: CursorHandlingMethods = 'exitEditing';\n\n// @TODO look into import { Key } from 'ts-key-enum';\n// and transition from keyCode to Key\n// also reduce string duplication\nexport const keysMap: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_RIGHT,\n  36: MOVE_CURSOR_LEFT,\n  37: MOVE_CURSOR_LEFT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_RIGHT,\n  40: MOVE_CURSOR_DOWN,\n};\n\nexport const keysMapRtl: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_LEFT,\n  36: MOVE_CURSOR_RIGHT,\n  37: MOVE_CURSOR_RIGHT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_LEFT,\n  40: MOVE_CURSOR_DOWN,\n};\n\n/**\n * For functionalities on keyUp + ctrl || cmd\n */\nexport const ctrlKeysMapUp: TKeyMapIText = {\n  67: 'copy',\n  // there was a reason this wasn't deleted. for now leave it here\n  88: 'cut',\n};\n\n/**\n * For functionalities on keyDown + ctrl || cmd\n */\nexport const ctrlKeysMapDown: TKeyMapIText = {\n  65: 'cmdAll',\n};\n","import type { StaticCanvas } from '../../canvas/StaticCanvas';\n\n/**\n * Set the transform of the passed context to the same of a specific Canvas or StaticCanvas.\n * setTransform is used since this utility will RESET the ctx transform to the basic value\n * of retina scaling and viewport transform\n * It is not meant to be added to other transforms, it is used internally to preapre canvases to draw\n * @param ctx\n * @param canvas\n */\nexport const applyCanvasTransform = (\n  ctx: CanvasRenderingContext2D,\n  canvas: StaticCanvas,\n) => {\n  const scale = canvas.getRetinaScaling();\n  ctx.setTransform(scale, 0, 0, scale, 0, 0);\n  const v = canvas.viewportTransform;\n  ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n};\n","import { Canvas } from '../../canvas/Canvas';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextClickBehavior } from './ITextClickBehavior';\nimport {\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  keysMap,\n  keysMapRtl,\n} from './constants';\nimport type { TClassProperties, TFiller, TOptions } from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport {\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from '../Text/constants';\nimport { CENTER, FILL, LEFT, RIGHT } from '../../constants';\nimport type { ObjectToCanvasElementOptions } from '../Object/Object';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport { applyCanvasTransform } from '../../util/internals/applyCanvasTransform';\n\nexport type CursorBoundaries = {\n  left: number;\n  top: number;\n  leftOffset: number;\n  topOffset: number;\n};\n\nexport type CursorRenderingData = {\n  color: string;\n  opacity: number;\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\n// Declare IText protected properties to workaround TS\nconst protectedDefaultValues = {\n  _selectionDirection: null,\n  _reSpace: /\\s|\\r?\\n/,\n  inCompositionMode: false,\n};\n\nexport const iTextDefaultValues: Partial<TClassProperties<IText>> = {\n  selectionStart: 0,\n  selectionEnd: 0,\n  selectionColor: 'rgba(17,119,255,0.3)',\n  isEditing: false,\n  editable: true,\n  editingBorderColor: 'rgba(102,153,255,0.25)',\n  cursorWidth: 2,\n  cursorColor: '',\n  cursorDelay: 1000,\n  cursorDuration: 600,\n  caching: true,\n  hiddenTextareaContainer: null,\n  keysMap,\n  keysMapRtl,\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  ...protectedDefaultValues,\n};\n\n// @TODO this is not complete\ninterface UniqueITextProps {\n  selectionStart: number;\n  selectionEnd: number;\n}\n\nexport interface SerializedITextProps\n  extends SerializedTextProps,\n    UniqueITextProps {}\n\nexport interface ITextProps extends TextProps, UniqueITextProps {}\n\n/**\n * @fires changed\n * @fires selection:changed\n * @fires editing:entered\n * @fires editing:exited\n * @fires dragstart\n * @fires drag drag event firing on the drag source\n * @fires dragend\n * @fires copy\n * @fires cut\n * @fires paste\n *\n * #### Supported key combinations\n * ```\n *   Move cursor:                    left, right, up, down\n *   Select character:               shift + left, shift + right\n *   Select text vertically:         shift + up, shift + down\n *   Move cursor by word:            alt + left, alt + right\n *   Select words:                   shift + alt + left, shift + alt + right\n *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n *   Jump to start/end of text:      cmd + up, cmd + down\n *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n *   Delete character:               backspace\n *   Delete word:                    alt + backspace\n *   Delete line:                    cmd + backspace\n *   Forward delete:                 delete\n *   Copy text:                      ctrl/cmd + c\n *   Paste text:                     ctrl/cmd + v\n *   Cut text:                       ctrl/cmd + x\n *   Select entire text:             ctrl/cmd + a\n *   Quit editing                    tab or esc\n * ```\n *\n * #### Supported mouse/touch combination\n * ```\n *   Position cursor:                click/touch\n *   Create selection:               click/touch & drag\n *   Create selection:               click & shift + click\n *   Select word:                    double click\n *   Select line:                    triple click\n * ```\n */\nexport class IText<\n    Props extends TOptions<ITextProps> = Partial<ITextProps>,\n    SProps extends SerializedITextProps = SerializedITextProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends ITextClickBehavior<Props, SProps, EventSpec>\n  implements UniqueITextProps\n{\n  /**\n   * Index where text selection starts (or where cursor is when there is no selection)\n   * @type Number\n   * @default\n   */\n  declare selectionStart: number;\n\n  /**\n   * Index where text selection ends\n   * @type Number\n   * @default\n   */\n  declare selectionEnd: number;\n\n  declare compositionStart: number;\n\n  declare compositionEnd: number;\n\n  /**\n   * Color of text selection\n   * @type String\n   * @default\n   */\n  declare selectionColor: string;\n\n  /**\n   * Indicates whether text is in editing mode\n   * @type Boolean\n   * @default\n   */\n  declare isEditing: boolean;\n\n  /**\n   * Indicates whether a text can be edited\n   * @type Boolean\n   * @default\n   */\n  declare editable: boolean;\n\n  /**\n   * Border color of text object while it's in editing mode\n   * @type String\n   * @default\n   */\n  declare editingBorderColor: string;\n\n  /**\n   * Width of cursor (in px)\n   * @type Number\n   * @default\n   */\n  declare cursorWidth: number;\n\n  /**\n   * Color of text cursor color in editing mode.\n   * if not set (default) will take color from the text.\n   * if set to a color value that fabric can understand, it will\n   * be used instead of the color of the text at the current position.\n   * @type String\n   * @default\n   */\n  declare cursorColor: string;\n\n  /**\n   * Delay between cursor blink (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDelay: number;\n\n  /**\n   * Duration of cursor fade in (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDuration: number;\n\n  declare compositionColor: string;\n\n  /**\n   * Indicates whether internal text char widths can be cached\n   * @type Boolean\n   * @default\n   */\n  declare caching: boolean;\n\n  static ownDefaults = iTextDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...IText.ownDefaults };\n  }\n\n  static type = 'IText';\n\n  get type() {\n    const type = super.type;\n    // backward compatibility\n    return type === 'itext' ? 'i-text' : type;\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...IText.ownDefaults, ...options } as Props);\n    this.initBehavior();\n  }\n\n  /**\n   * While editing handle differently\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (this.isEditing && this._savedProps && key in this._savedProps) {\n      // @ts-expect-error irritating TS\n      this._savedProps[key] = value;\n      return this;\n    }\n    if (key === 'canvas') {\n      this.canvas instanceof Canvas &&\n        this.canvas.textEditingManager.remove(this);\n      value instanceof Canvas && value.textEditingManager.add(this);\n    }\n    return super._set(key, value);\n  }\n\n  /**\n   * Sets selection start (left boundary of a selection)\n   * @param {Number} index Index to set selection start to\n   */\n  setSelectionStart(index: number) {\n    index = Math.max(index, 0);\n    this._updateAndFire('selectionStart', index);\n  }\n\n  /**\n   * Sets selection end (right boundary of a selection)\n   * @param {Number} index Index to set selection end to\n   */\n  setSelectionEnd(index: number) {\n    index = Math.min(index, this.text.length);\n    this._updateAndFire('selectionEnd', index);\n  }\n\n  /**\n   * @private\n   * @param {String} property 'selectionStart' or 'selectionEnd'\n   * @param {Number} index new position of property\n   */\n  protected _updateAndFire(\n    property: 'selectionStart' | 'selectionEnd',\n    index: number,\n  ) {\n    if (this[property] !== index) {\n      this._fireSelectionChanged();\n      this[property] = index;\n    }\n    this._updateTextarea();\n  }\n\n  /**\n   * Fires the even of selection changed\n   * @private\n   */\n  _fireSelectionChanged() {\n    this.fire('selection:changed');\n    this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n  }\n\n  /**\n   * Initialize text dimensions. Render all text on given context\n   * or on a offscreen canvas to get the text width with measureText.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   * @private\n   */\n  initDimensions() {\n    this.isEditing && this.initDelayedCursor();\n    super.initDimensions();\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified selectionEnd or startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n    complete?: boolean,\n  ) {\n    return super.getSelectionStyles(startIndex, endIndex, complete);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} [styles] Styles object\n   * @param {Number} [startIndex] Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n   */\n  setSelectionStyles(\n    styles: object,\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n  ) {\n    return super.setSelectionStyles(styles, startIndex, endIndex);\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n   * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(\n    selectionStart = this.selectionStart,\n    skipWrapping?: boolean,\n  ) {\n    return super.get2DCursorLocation(selectionStart, skipWrapping);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    super.render(ctx);\n    // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n    // the correct position but not at every cursor animation.\n    this.cursorOffsetCache = {};\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * @override block cursor/selection logic while rendering the exported canvas\n   * @todo this workaround should be replaced with a more robust solution\n   */\n  toCanvasElement(options?: ObjectToCanvasElementOptions): HTMLCanvasElement {\n    const isEditing = this.isEditing;\n    this.isEditing = false;\n    const canvas = super.toCanvasElement(options);\n    this.isEditing = isEditing;\n    return canvas;\n  }\n\n  /**\n   * Renders cursor or selection (depending on what exists)\n   * it does on the contextTop. If contextTop is not available, do nothing.\n   */\n  renderCursorOrSelection() {\n    if (!this.isEditing || !this.canvas) {\n      return;\n    }\n    const ctx = this.clearContextTop(true);\n    if (!ctx) {\n      return;\n    }\n    const boundaries = this._getCursorBoundaries();\n\n    const ancestors = this.findAncestorsWithClipPath();\n    const hasAncestorsWithClipping = ancestors.length > 0;\n    let drawingCtx: CanvasRenderingContext2D = ctx;\n    let drawingCanvas: HTMLCanvasElement | undefined = undefined;\n    if (hasAncestorsWithClipping) {\n      // we have some clipPath, we need to draw the selection on an intermediate layer.\n      drawingCanvas = createCanvasElementFor(ctx.canvas);\n      drawingCtx = drawingCanvas.getContext('2d')!;\n      applyCanvasTransform(drawingCtx, this.canvas);\n      const m = this.calcTransformMatrix();\n      drawingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n\n    if (this.selectionStart === this.selectionEnd && !this.inCompositionMode) {\n      this.renderCursor(drawingCtx, boundaries);\n    } else {\n      this.renderSelection(drawingCtx, boundaries);\n    }\n\n    if (hasAncestorsWithClipping) {\n      // we need a neutral context.\n      // this won't work for nested clippaths in which a clippath\n      // has its own clippath\n      for (const ancestor of ancestors) {\n        const clipPath = ancestor.clipPath!;\n        const clippingCanvas = createCanvasElementFor(ctx.canvas);\n        const clippingCtx = clippingCanvas.getContext('2d')!;\n        applyCanvasTransform(clippingCtx, this.canvas);\n        // position the ctx in the center of the outer ancestor\n        if (!clipPath.absolutePositioned) {\n          const m = ancestor.calcTransformMatrix();\n          clippingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        }\n        clipPath.transform(clippingCtx);\n        // we assign an empty drawing context, we don't plan to have this working for nested clippaths for now\n        clipPath.drawObject(clippingCtx, true, {});\n        this.drawClipPathOnCache(drawingCtx, clipPath, clippingCanvas);\n      }\n    }\n\n    if (hasAncestorsWithClipping) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(drawingCanvas!, 0, 0);\n    }\n\n    this.canvas.contextTopDirty = true;\n    ctx.restore();\n  }\n\n  /**\n   * Finds and returns an array of clip paths that are applied to the parent\n   * group(s) of the current FabricObject instance. The object's hierarchy is\n   * traversed upwards (from the current object towards the root of the canvas),\n   * checking each parent object for the presence of a `clipPath` that is not\n   * absolutely positioned.\n   */\n  findAncestorsWithClipPath(): FabricObject[] {\n    const clipPathAncestors: FabricObject[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let obj: FabricObject | undefined = this;\n    while (obj) {\n      if (obj.clipPath) {\n        clipPathAncestors.push(obj);\n      }\n      obj = obj.parent;\n    }\n\n    return clipPathAncestors;\n  }\n\n  /**\n   * Returns cursor boundaries (left, top, leftOffset, topOffset)\n   * left/top are left/top of entire text box\n   * leftOffset/topOffset are offset from that left/top point of a text box\n   * @private\n   * @param {number} [index] index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundaries(\n    index: number = this.selectionStart,\n    skipCaching?: boolean,\n  ): CursorBoundaries {\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset(),\n      offsets = this._getCursorBoundariesOffsets(index, skipCaching);\n    return {\n      left: left,\n      top: top,\n      leftOffset: offsets.left,\n      topOffset: offsets.top,\n    };\n  }\n\n  /**\n   * Caches and returns cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundariesOffsets(\n    index: number,\n    skipCaching?: boolean,\n  ): { left: number; top: number } {\n    if (skipCaching) {\n      return this.__getCursorBoundariesOffsets(index);\n    }\n    if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n      return this.cursorOffsetCache as { left: number; top: number };\n    }\n    return (this.cursorOffsetCache = this.__getCursorBoundariesOffsets(index));\n  }\n\n  /**\n   * Calculates cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   */\n  __getCursorBoundariesOffsets(index: number) {\n    let topOffset = 0,\n      leftOffset = 0;\n    const { charIndex, lineIndex } = this.get2DCursorLocation(index);\n\n    for (let i = 0; i < lineIndex; i++) {\n      topOffset += this.getHeightOfLine(i);\n    }\n    const lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    const bound = this.__charBounds[lineIndex][charIndex];\n    bound && (leftOffset = bound.left);\n    if (\n      this.charSpacing !== 0 &&\n      charIndex === this._textLines[lineIndex].length\n    ) {\n      leftOffset -= this._getWidthOfCharSpacing();\n    }\n    const boundaries = {\n      top: topOffset,\n      left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n    };\n    if (this.direction === 'rtl') {\n      if (\n        this.textAlign === RIGHT ||\n        this.textAlign === JUSTIFY ||\n        this.textAlign === JUSTIFY_RIGHT\n      ) {\n        boundaries.left *= -1;\n      } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      } else if (\n        this.textAlign === CENTER ||\n        this.textAlign === JUSTIFY_CENTER\n      ) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      }\n    }\n    return boundaries;\n  }\n\n  /**\n   * Renders cursor on context Top, outside the animation cycle, on request\n   * Used for the drag/drop effect.\n   * If contextTop is not available, do nothing.\n   */\n  renderCursorAt(selectionStart: number) {\n    this._renderCursor(\n      this.canvas!.contextTop,\n      this._getCursorBoundaries(selectionStart, true),\n      selectionStart,\n    );\n  }\n\n  /**\n   * Renders cursor\n   * @param {Object} boundaries\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderCursor(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    this._renderCursor(ctx, boundaries, this.selectionStart);\n  }\n\n  /**\n   * Return the data needed to render the cursor for given selection start\n   * The left,top are relative to the object, while width and height are prescaled\n   * to look think with canvas zoom and object scaling,\n   * so they depend on canvas and object scaling\n   */\n  getCursorRenderingData(\n    selectionStart: number = this.selectionStart,\n    boundaries: CursorBoundaries = this._getCursorBoundaries(selectionStart),\n  ): CursorRenderingData {\n    const cursorLocation = this.get2DCursorLocation(selectionStart),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex =\n        cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n      charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n      multiplier = this.getObjectScaling().x * this.canvas!.getZoom(),\n      cursorWidth = this.cursorWidth / multiplier,\n      dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY'),\n      topOffset =\n        boundaries.topOffset +\n        ((1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex)) /\n          this.lineHeight -\n        charHeight * (1 - this._fontSizeFraction);\n\n    return {\n      color:\n        this.cursorColor ||\n        (this.getValueOfPropertyAt(lineIndex, charIndex, 'fill') as string),\n      opacity: this._currentCursorOpacity,\n      left: boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n      top: topOffset + boundaries.top + dy,\n      width: cursorWidth,\n      height: charHeight,\n    };\n  }\n\n  /**\n   * Render the cursor at the given selectionStart.\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderCursor(\n    ctx: CanvasRenderingContext2D,\n    boundaries: CursorBoundaries,\n    selectionStart: number,\n  ) {\n    const { color, opacity, left, top, width, height } =\n      this.getCursorRenderingData(selectionStart, boundaries);\n    ctx.fillStyle = color;\n    ctx.globalAlpha = opacity;\n    ctx.fillRect(left, top, width, height);\n  }\n\n  /**\n   * Renders text selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderSelection(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    const selection = {\n      selectionStart: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionStart\n        : this.selectionStart,\n      selectionEnd: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionEnd\n        : this.selectionEnd,\n    };\n    this._renderSelection(ctx, selection, boundaries);\n  }\n\n  /**\n   * Renders drag start text selection\n   */\n  renderDragSourceEffect() {\n    const dragStartSelection =\n      this.draggableTextDelegate.getDragStartSelection()!;\n    this._renderSelection(\n      this.canvas!.contextTop,\n      dragStartSelection,\n      this._getCursorBoundaries(dragStartSelection.selectionStart, true),\n    );\n  }\n\n  renderDropTargetEffect(e: DragEvent) {\n    const dragSelection = this.getSelectionStartFromPointer(e);\n    this.renderCursorAt(dragSelection);\n  }\n\n  /**\n   * Renders text selection\n   * @private\n   * @param {{ selectionStart: number, selectionEnd: number }} selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderSelection(\n    ctx: CanvasRenderingContext2D,\n    selection: { selectionStart: number; selectionEnd: number },\n    boundaries: CursorBoundaries,\n  ) {\n    const selectionStart = selection.selectionStart,\n      selectionEnd = selection.selectionEnd,\n      isJustify = this.textAlign.includes(JUSTIFY),\n      start = this.get2DCursorLocation(selectionStart),\n      end = this.get2DCursorLocation(selectionEnd),\n      startLine = start.lineIndex,\n      endLine = end.lineIndex,\n      startChar = start.charIndex < 0 ? 0 : start.charIndex,\n      endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n    for (let i = startLine; i <= endLine; i++) {\n      const lineOffset = this._getLineLeftOffset(i) || 0;\n      let lineHeight = this.getHeightOfLine(i),\n        realLineHeight = 0,\n        boxStart = 0,\n        boxEnd = 0;\n\n      if (i === startLine) {\n        boxStart = this.__charBounds[startLine][startChar].left;\n      }\n      if (i >= startLine && i < endLine) {\n        boxEnd =\n          isJustify && !this.isEndOfWrapping(i)\n            ? this.width\n            : this.getLineWidth(i) || 5; // WTF is this 5?\n      } else if (i === endLine) {\n        if (endChar === 0) {\n          boxEnd = this.__charBounds[endLine][endChar].left;\n        } else {\n          const charSpacing = this._getWidthOfCharSpacing();\n          boxEnd =\n            this.__charBounds[endLine][endChar - 1].left +\n            this.__charBounds[endLine][endChar - 1].width -\n            charSpacing;\n        }\n      }\n      realLineHeight = lineHeight;\n      if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n        lineHeight /= this.lineHeight;\n      }\n      let drawStart = boundaries.left + lineOffset + boxStart,\n        drawHeight = lineHeight,\n        extraTop = 0;\n      const drawWidth = boxEnd - boxStart;\n      if (this.inCompositionMode) {\n        ctx.fillStyle = this.compositionColor || 'black';\n        drawHeight = 1;\n        extraTop = lineHeight;\n      } else {\n        ctx.fillStyle = this.selectionColor;\n      }\n      if (this.direction === 'rtl') {\n        if (\n          this.textAlign === RIGHT ||\n          this.textAlign === JUSTIFY ||\n          this.textAlign === JUSTIFY_RIGHT\n        ) {\n          drawStart = this.width - drawStart - drawWidth;\n        } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        } else if (\n          this.textAlign === CENTER ||\n          this.textAlign === JUSTIFY_CENTER\n        ) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        }\n      }\n      ctx.fillRect(\n        drawStart,\n        boundaries.top + boundaries.topOffset + extraTop,\n        drawWidth,\n        drawHeight,\n      );\n      boundaries.topOffset += realLineHeight;\n    }\n  }\n\n  /**\n   * High level function to know the height of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns fontSize of char at the current cursor\n   * Unused from the library, is for the end user\n   * @return {Number} Character font size\n   */\n  getCurrentCharFontSize(): number {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n  }\n\n  /**\n   * High level function to know the color of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns color (fill) of char at the current cursor\n   * if the text object has a pattern or gradient for filler, it will return that.\n   * Unused by the library, is for the end user\n   * @return {String | TFiller} Character color (fill)\n   */\n  getCurrentCharColor(): string | TFiller | null {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, FILL);\n  }\n\n  /**\n   * Returns the cursor position for the getCurrent.. functions\n   * @private\n   */\n  _getCurrentCharIndex() {\n    const cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n      charIndex =\n        cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n    return { l: cursorPosition.lineIndex, c: charIndex };\n  }\n\n  dispose() {\n    this.exitEditingImpl();\n    this.draggableTextDelegate.dispose();\n    super.dispose();\n  }\n}\n\nclassRegistry.setClass(IText);\n// legacy\nclassRegistry.setClass(IText, 'i-text');\n","import type { TClassProperties, TOptions } from '../typedefs';\nimport { IText } from './IText/IText';\nimport { classRegistry } from '../ClassRegistry';\nimport { createTextboxDefaultControls } from '../controls/commonControls';\nimport { JUSTIFY } from './Text/constants';\nimport type { TextStyleDeclaration } from './Text/StyledText';\nimport type { SerializedITextProps, ITextProps } from './IText/IText';\nimport type { ITextEvents } from './IText/ITextBehavior';\nimport type { TextLinesInfo } from './Text/Text';\nimport type { Control } from '../controls/Control';\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textboxDefaultValues: Partial<TClassProperties<Textbox>> = {\n  minWidth: 20,\n  dynamicMinWidth: 2,\n  lockScalingFlip: true,\n  noScaleCache: false,\n  _wordJoiners: /[ \\t\\r]/,\n  splitByGrapheme: false,\n};\n\nexport type GraphemeData = {\n  wordsData: {\n    word: string[];\n    width: number;\n  }[][];\n  largestWordWidth: number;\n};\n\nexport type StyleMap = Record<string, { line: number; offset: number }>;\n\n// @TODO this is not complete\ninterface UniqueTextboxProps {\n  minWidth: number;\n  splitByGrapheme: boolean;\n  dynamicMinWidth: number;\n  _wordJoiners: RegExp;\n}\n\nexport interface SerializedTextboxProps\n  extends SerializedITextProps,\n    Pick<UniqueTextboxProps, 'minWidth' | 'splitByGrapheme'> {}\n\nexport interface TextboxProps extends ITextProps, UniqueTextboxProps {}\n\n/**\n * Textbox class, based on IText, allows the user to resize the text rectangle\n * and wraps lines automatically. Textboxes have their Y scaling locked, the\n * user can only change width. Height is adjusted automatically based on the\n * wrapping of lines.\n */\nexport class Textbox<\n    Props extends TOptions<TextboxProps> = Partial<TextboxProps>,\n    SProps extends SerializedTextboxProps = SerializedTextboxProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends IText<Props, SProps, EventSpec>\n  implements UniqueTextboxProps\n{\n  /**\n   * Minimum width of textbox, in pixels.\n   * @type Number\n   * @default\n   */\n  declare minWidth: number;\n\n  /**\n   * Minimum calculated width of a textbox, in pixels.\n   * fixed to 2 so that an empty textbox cannot go to 0\n   * and is still selectable without text.\n   * @type Number\n   * @default\n   */\n  declare dynamicMinWidth: number;\n\n  /**\n   * Use this boolean property in order to split strings that have no white space concept.\n   * this is a cheap way to help with chinese/japanese\n   * @type Boolean\n   * @since 2.6.0\n   */\n  declare splitByGrapheme: boolean;\n\n  declare _wordJoiners: RegExp;\n\n  declare _styleMap: StyleMap;\n\n  declare isWrapping: boolean;\n\n  static type = 'Textbox';\n\n  static textLayoutProperties = [...IText.textLayoutProperties, 'width'];\n\n  static ownDefaults = textboxDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Textbox.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...Textbox.ownDefaults, ...options } as Props);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createTextboxDefaultControls() };\n  }\n\n  /**\n   * Unlike superclass's version of this function, Textbox does not update\n   * its width.\n   * @private\n   * @override\n   */\n  initDimensions() {\n    if (!this.initialized) {\n      return;\n    }\n    this.isEditing && this.initDelayedCursor();\n    this._clearCache();\n    // clear dynamicMinWidth as it will be different after we re-wrap line\n    this.dynamicMinWidth = 0;\n    // wrap lines\n    this._styleMap = this._generateStyleMap(this._splitText());\n    // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n    if (this.dynamicMinWidth > this.width) {\n      this._set('width', this.dynamicMinWidth);\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n    // clear cache and re-calculate height\n    this.height = this.calcTextHeight();\n  }\n\n  /**\n   * Generate an object that translates the style object so that it is\n   * broken up by visual lines (new lines and automatic wrapping).\n   * The original text styles object is broken up by actual lines (new lines only),\n   * which is only sufficient for Text / IText\n   * @private\n   */\n  _generateStyleMap(textInfo: TextLinesInfo): StyleMap {\n    let realLineCount = 0,\n      realLineCharCount = 0,\n      charCount = 0;\n    const map: StyleMap = {};\n\n    for (let i = 0; i < textInfo.graphemeLines.length; i++) {\n      if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n        realLineCharCount = 0;\n        charCount++;\n        realLineCount++;\n      } else if (\n        !this.splitByGrapheme &&\n        this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) &&\n        i > 0\n      ) {\n        // this case deals with space's that are removed from end of lines when wrapping\n        realLineCharCount++;\n        charCount++;\n      }\n\n      map[i] = { line: realLineCount, offset: realLineCharCount };\n\n      charCount += textInfo.graphemeLines[i].length;\n      realLineCharCount += textInfo.graphemeLines[i].length;\n    }\n\n    return map;\n  }\n\n  /**\n   * Returns true if object has a style property or has it on a specified line\n   * @param {Number} lineIndex\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex: number): boolean {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (map) {\n        lineIndex = map.line;\n      }\n    }\n    return super.styleHas(property, lineIndex);\n  }\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    let offset = 0,\n      nextLineIndex = lineIndex + 1,\n      nextOffset: number,\n      shouldLimit = false;\n    const map = this._styleMap[lineIndex],\n      mapNextLine = this._styleMap[lineIndex + 1];\n    if (map) {\n      lineIndex = map.line;\n      offset = map.offset;\n    }\n    if (mapNextLine) {\n      nextLineIndex = mapNextLine.line;\n      shouldLimit = nextLineIndex === lineIndex;\n      nextOffset = mapNextLine.offset;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        const p2Number = parseInt(p2, 10);\n        if (p2Number >= offset && (!shouldLimit || p2Number < nextOffset!)) {\n          for (const p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (!map) {\n        return {};\n      }\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n    }\n    return super._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    const map = this._styleMap[lineIndex];\n    super._setStyleDeclaration(map.line, map.offset + charIndex, style);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._deleteStyleDeclaration(map.line, map.offset + charIndex);\n  }\n\n  /**\n   * probably broken need a fix\n   * Returns the real style line that correspond to the wrapped lineIndex line\n   * Used just to verify if the line does exist or not.\n   * @param {Number} lineIndex\n   * @returns {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    const map = this._styleMap[lineIndex];\n    return !!this.styles[map.line];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._setLineStyle(map.line);\n  }\n\n  /**\n   * Wraps text using the 'width' property of Textbox. First this function\n   * splits text on newlines, so we preserve newlines entered by the user.\n   * Then it wraps each line using the width of the Textbox by calling\n   * _wrapLine().\n   * @param {Array} lines The string array of text that is split into lines\n   * @param {Number} desiredWidth width you want to wrap to\n   * @returns {Array} Array of lines\n   */\n  _wrapText(lines: string[], desiredWidth: number): string[][] {\n    this.isWrapping = true;\n    // extract all thewords and the widths to optimally wrap lines.\n    const data = this.getGraphemeDataForRender(lines);\n    const wrapped: string[][] = [];\n    for (let i = 0; i < data.wordsData.length; i++) {\n      wrapped.push(...this._wrapLine(i, desiredWidth, data));\n    }\n    this.isWrapping = false;\n    return wrapped;\n  }\n\n  /**\n   * For each line of text terminated by an hard line stop,\n   * measure each word width and extract the largest word from all.\n   * The returned words here are the one that at the end will be rendered.\n   * @param {string[]} lines the lines we need to measure\n   *\n   */\n  getGraphemeDataForRender(lines: string[]): GraphemeData {\n    const splitByGrapheme = this.splitByGrapheme,\n      infix = splitByGrapheme ? '' : ' ';\n\n    let largestWordWidth = 0;\n\n    const data = lines.map((line, lineIndex) => {\n      let offset = 0;\n      const wordsOrGraphemes = splitByGrapheme\n        ? this.graphemeSplit(line)\n        : this.wordSplit(line);\n\n      if (wordsOrGraphemes.length === 0) {\n        return [{ word: [], width: 0 }];\n      }\n\n      return wordsOrGraphemes.map((word: string) => {\n        // if using splitByGrapheme words are already in graphemes.\n        const graphemeArray = splitByGrapheme\n          ? [word]\n          : this.graphemeSplit(word);\n        const width = this._measureWord(graphemeArray, lineIndex, offset);\n        largestWordWidth = Math.max(width, largestWordWidth);\n        offset += graphemeArray.length + infix.length;\n        return { word: graphemeArray, width };\n      });\n    });\n\n    return {\n      wordsData: data,\n      largestWordWidth,\n    };\n  }\n\n  /**\n   * Helper function to measure a string of text, given its lineIndex and charIndex offset\n   * It gets called when charBounds are not available yet.\n   * Override if necessary\n   * Use with {@link Textbox#wordSplit}\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {String} text\n   * @param {number} lineIndex\n   * @param {number} charOffset\n   * @returns {number}\n   */\n  _measureWord(word: string[], lineIndex: number, charOffset = 0): number {\n    let width = 0,\n      prevGrapheme;\n    const skipLeft = true;\n    for (let i = 0, len = word.length; i < len; i++) {\n      const box = this._getGraphemeBox(\n        word[i],\n        lineIndex,\n        i + charOffset,\n        prevGrapheme,\n        skipLeft,\n      );\n      width += box.kernedWidth;\n      prevGrapheme = word[i];\n    }\n    return width;\n  }\n\n  /**\n   * Override this method to customize word splitting\n   * Use with {@link Textbox#_measureWord}\n   * @param {string} value\n   * @returns {string[]} array of words\n   */\n  wordSplit(value: string): string[] {\n    return value.split(this._wordJoiners);\n  }\n\n  /**\n   * Wraps a line of text using the width of the Textbox as desiredWidth\n   * and leveraging the known width o words from GraphemeData\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} desiredWidth width you want to wrap the line to\n   * @param {GraphemeData} graphemeData an object containing all the lines' words width.\n   * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n   * @returns {Array} Array of line(s) into which the given text is wrapped\n   * to.\n   */\n  _wrapLine(\n    lineIndex: number,\n    desiredWidth: number,\n    { largestWordWidth, wordsData }: GraphemeData,\n    reservedSpace = 0,\n  ): string[][] {\n    const additionalSpace = this._getWidthOfCharSpacing(),\n      splitByGrapheme = this.splitByGrapheme,\n      graphemeLines = [],\n      infix = splitByGrapheme ? '' : ' ';\n\n    let lineWidth = 0,\n      line: string[] = [],\n      // spaces in different languages?\n      offset = 0,\n      infixWidth = 0,\n      lineJustStarted = true;\n\n    desiredWidth -= reservedSpace;\n\n    const maxWidth = Math.max(\n      desiredWidth,\n      largestWordWidth,\n      this.dynamicMinWidth,\n    );\n    // layout words\n    const data = wordsData[lineIndex];\n    offset = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      const { word, width: wordWidth } = data[i];\n      offset += word.length;\n\n      lineWidth += infixWidth + wordWidth - additionalSpace;\n      if (lineWidth > maxWidth && !lineJustStarted) {\n        graphemeLines.push(line);\n        line = [];\n        lineWidth = wordWidth;\n        lineJustStarted = true;\n      } else {\n        lineWidth += additionalSpace;\n      }\n\n      if (!lineJustStarted && !splitByGrapheme) {\n        line.push(infix);\n      }\n      line = line.concat(word);\n\n      infixWidth = splitByGrapheme\n        ? 0\n        : this._measureWord([infix], lineIndex, offset);\n      offset++;\n      lineJustStarted = false;\n    }\n\n    i && graphemeLines.push(line);\n\n    // TODO: this code is probably not necessary anymore.\n    // it can be moved out of this function since largestWordWidth is now\n    // known in advance\n    if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n      this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n    }\n    return graphemeLines;\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @param {Number} lineIndex text to split\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    if (!this._styleMap[lineIndex + 1]) {\n      // is last line, return true;\n      return true;\n    }\n    if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n      // this is last line before a line break, return true;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * This is important only for splitByGrapheme at the end of wrapping.\n   * If we are not wrapping the offset is always 1\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1 {\n    if (this.splitByGrapheme && !skipWrapping) {\n      return this.isEndOfWrapping(lineIndex) ? 1 : 0;\n    }\n    return 1;\n  }\n\n  /**\n   * Gets lines of text to render in the Textbox. This function calculates\n   * text wrapping on the fly every time it is called.\n   * @param {String} text text to split\n   * @returns {Array} Array of lines in the Textbox.\n   * @override\n   */\n  _splitTextIntoLines(text: string) {\n    const newText = super._splitTextIntoLines(text),\n      graphemeLines = this._wrapText(newText.lines, this.width),\n      lines = new Array(graphemeLines.length);\n    for (let i = 0; i < graphemeLines.length; i++) {\n      lines[i] = graphemeLines[i].join('');\n    }\n    newText.lines = lines;\n    newText.graphemeLines = graphemeLines;\n    return newText;\n  }\n\n  getMinWidth() {\n    return Math.max(this.minWidth, this.dynamicMinWidth);\n  }\n\n  _removeExtraneousStyles() {\n    const linesToKeep = new Map();\n    for (const prop in this._styleMap) {\n      const propNumber = parseInt(prop, 10);\n      if (this._textLines[propNumber]) {\n        const lineIndex = this._styleMap[prop].line;\n        linesToKeep.set(`${lineIndex}`, true);\n      }\n    }\n    for (const prop in this.styles) {\n      if (!linesToKeep.has(prop)) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject<T, K>([\n      'minWidth',\n      'splitByGrapheme',\n      ...propertiesToInclude,\n    ] as K[]);\n  }\n}\n\nclassRegistry.setClass(Textbox);\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport { sendPointToPlane } from '../../util/misc/planeChange';\nimport type { LayoutStrategyResult, StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { getObjectBounds } from './utils';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to match the clip path bounding box.\n */\nexport class ClipPathLayout extends LayoutStrategy {\n  static readonly type = 'clip-path';\n\n  shouldPerformLayout(context: StrictLayoutContext): boolean {\n    return !!context.target.clipPath && super.shouldPerformLayout(context);\n  }\n\n  shouldLayoutClipPath() {\n    return false;\n  }\n\n  calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    const { target } = context;\n    const { clipPath, group } = target;\n    if (!clipPath || !this.shouldPerformLayout(context)) {\n      return;\n    }\n    // TODO: remove stroke calculation from this case\n    const { width, height } = makeBoundingBoxFromPoints(\n      getObjectBounds(target, clipPath as FabricObject),\n    );\n    const size = new Point(width, height);\n    if (clipPath.absolutePositioned) {\n      //  we want the center point to exist in group's containing plane\n      const clipPathCenter = sendPointToPlane(\n        clipPath.getRelativeCenterPoint(),\n        undefined,\n        group ? group.calcTransformMatrix() : undefined,\n      );\n      return {\n        center: clipPathCenter,\n        size,\n      };\n    } else {\n      //  we want the center point to exist in group's containing plane, so we send it upwards\n      const clipPathCenter = clipPath\n        .getRelativeCenterPoint()\n        .transform(target.calcOwnMatrix(), true);\n      if (this.shouldPerformLayout(context)) {\n        // the clip path is positioned relative to the group's center which is affected by the bbox\n        // so we first calculate the bbox\n        const { center = new Point(), correction = new Point() } =\n          this.calcBoundingBox(objects, context) || {};\n        return {\n          center: center.add(clipPathCenter),\n          correction: correction.subtract(clipPathCenter),\n          size,\n        };\n      } else {\n        return {\n          center: target.getRelativeCenterPoint().add(clipPathCenter),\n          size,\n        };\n      }\n    }\n  }\n}\n\nclassRegistry.setClass(ClipPathLayout);\n","import { Point } from '../../Point';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will keep target's initial size.\n */\nexport class FixedLayout extends LayoutStrategy {\n  static readonly type = 'fixed';\n\n  /**\n   * @override respect target's initial size\n   */\n  getInitialSize(\n    { target }: StrictLayoutContext & InitializationLayoutContext,\n    { size }: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ): Point {\n    return new Point(target.width || size.x, target.height || size.y);\n  }\n}\n\nclassRegistry.setClass(FixedLayout);\n","import { LayoutManager } from './LayoutManager';\nimport type { RegistrationContext, StrictLayoutContext } from './types';\nimport type { Group } from '../shapes/Group';\n\n/**\n * Today the LayoutManager class also takes care of subscribing event handlers\n * to update the group layout when the group is interactive and a transform is applied\n * to a child object.\n * The ActiveSelection is never interactive, but it could contain objects from\n * groups that are.\n * The standard LayoutManager would subscribe the children of the activeSelection to\n * perform layout changes to the active selection itself, what we need instead is that\n * the transformation applied to the active selection will trigger changes to the\n * original group of the children ( the one referenced under the parent property )\n * This subclass of the LayoutManager has a single duty to fill the gap of this difference.`\n */\nexport class ActiveSelectionLayoutManager extends LayoutManager {\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      parent.layoutManager.subscribeTargets({\n        target: parent,\n        targets: [activeSelection],\n      });\n    });\n  }\n\n  /**\n   * unsubscribe from parent only if all its children were deselected\n   */\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const selectedObjects = activeSelection.getObjects();\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      !selectedObjects.some((object) => object.parent === parent) &&\n        parent.layoutManager.unsubscribeTargets({\n          target: parent,\n          targets: [activeSelection],\n        });\n    });\n  }\n}\n","import type { ControlRenderingStyleOverride } from '../controls/controlRendering';\nimport { classRegistry } from '../ClassRegistry';\nimport type { GroupProps } from './Group';\nimport { Group } from './Group';\nimport type { FabricObject } from './Object/FabricObject';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { TClassProperties } from '../typedefs';\nimport { log } from '../util/internals/console';\nimport { ActiveSelectionLayoutManager } from '../LayoutManager/ActiveSelectionLayoutManager';\nimport { uid } from '../util/internals/uid';\n\nexport type MultiSelectionStacking = 'canvas-stacking' | 'selection-order';\n\nexport interface ActiveSelectionOptions extends GroupProps {\n  multiSelectionStacking: MultiSelectionStacking;\n}\n\nconst activeSelectionDefaultValues: Partial<TClassProperties<ActiveSelection>> =\n  {\n    multiSelectionStacking: 'canvas-stacking',\n  };\n\n/**\n * Used by Canvas to manage selection.\n *\n * @example\n * class MyActiveSelection extends ActiveSelection {\n *   ...\n * }\n *\n * // override the default `ActiveSelection` class\n * classRegistry.setClass(MyActiveSelection)\n */\nexport class ActiveSelection extends Group {\n  static type = 'ActiveSelection';\n\n  static ownDefaults: Record<string, any> = activeSelectionDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...ActiveSelection.ownDefaults };\n  }\n\n  /**\n   * The ActiveSelection needs to use the ActiveSelectionLayoutManager\n   * or selections on interactive groups may be broken\n   */\n  declare layoutManager: ActiveSelectionLayoutManager;\n\n  /**\n   * controls how selected objects are added during a multiselection event\n   * - `canvas-stacking` adds the selected object to the active selection while respecting canvas object stacking order\n   * - `selection-order` adds the selected object to the top of the stack,\n   * meaning that the stack is ordered by the order in which objects were selected\n   * @default `canvas-stacking`\n   */\n  declare multiSelectionStacking: MultiSelectionStacking;\n\n  lockSize = true;\n\n  id = uid().toString();\n\n  constructor(\n    objects: FabricObject[] = [],\n    options: Partial<ActiveSelectionOptions> = {},\n  ) {\n    super();\n    Object.assign(this, ActiveSelection.ownDefaults);\n    this.setOptions(options);\n    const { left, top, layoutManager } = options;\n    this.groupInit(objects, {\n      left,\n      top,\n      layoutManager: layoutManager ?? new ActiveSelectionLayoutManager(),\n    });\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return true;\n  }\n\n  /**\n   * @private\n   * @override we don't want the selection monitor to be active\n   */\n  __objectSelectionMonitor() {\n    //  noop\n  }\n\n  /**\n   * Adds objects with respect to {@link multiSelectionStacking}\n   * @param targets object to add to selection\n   */\n  multiSelectAdd(...targets: FabricObject[]) {\n    if (this.multiSelectionStacking === 'selection-order') {\n      this.add(...targets);\n    } else {\n      //  respect object stacking as it is on canvas\n      //  perf enhancement for large ActiveSelection: consider a binary search of `isInFrontOf`\n      targets.forEach((target) => {\n        const index = this._objects.findIndex((obj) => obj.isInFrontOf(target));\n        const insertAt =\n          index === -1\n            ? //  `target` is in front of all other objects\n              this.size()\n            : index;\n        this.insertAt(insertAt, target);\n      });\n    }\n  }\n\n  /**\n   * @override block ancestors/descendants of selected objects from being selected to prevent a circular object tree\n   */\n  canEnterGroup(object: FabricObject) {\n    if (\n      this.getObjects().some(\n        (o) => o.isDescendantOf(object) || object.isDescendantOf(o),\n      )\n    ) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'ActiveSelection: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    }\n\n    return super.canEnterGroup(object);\n  }\n\n  /**\n   * Change an object so that it can be part of an active selection.\n   * this method is called by multiselectAdd from canvas code.\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    // This condition check that the object has currently a group, and the group\n    // is also its parent, meaning that is not in an active selection, but is\n    // in a normal group.\n    if (object.parent && object.parent === object.group) {\n      // Disconnect the object from the group functionalities, but keep the ref parent intact\n      // for later re-enter\n      object.parent._exitGroup(object);\n      // in this case the object is probably inside an active selection.\n    } else if (object.group && object.parent !== object.group) {\n      // in this case group.remove will also clear the old parent reference.\n      object.group.remove(object);\n    }\n    // enter the active selection from a render perspective\n    // the object will be in the objects array of both the ActiveSelection and the Group\n    // but referenced in the group's _activeObjects so that it won't be rendered twice.\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * we want objects to retain their canvas ref when exiting instance\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    // return to parent\n    object.parent && object.parent._enterGroup(object, true);\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    super._onAfterObjectsChange(type, targets);\n    const groups = new Set<Group>();\n    targets.forEach((object) => {\n      const { parent } = object;\n      parent && groups.add(parent);\n    });\n    if (type === LAYOUT_TYPE_REMOVED) {\n      //  invalidate groups' layout and mark as dirty\n      groups.forEach((group) => {\n        group._onAfterObjectsChange(LAYOUT_TYPE_ADDED, targets);\n      });\n    } else {\n      //  mark groups as dirty\n      groups.forEach((group) => {\n        group._set('dirty', true);\n      });\n    }\n  }\n\n  /**\n   * @override remove all objects\n   */\n  onDeselect() {\n    this.removeAll();\n    return false;\n  }\n\n  /**\n   * Returns string representation of a group\n   * @return {String}\n   */\n  toString() {\n    return `#<ActiveSelection: (${this.complexity()})>`;\n  }\n\n  /**\n   * Decide if the object should cache or not. The Active selection never caches\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return false;\n  }\n\n  /**\n   * Check if this group or its parent group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache() {\n    return false;\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [styleOverride] properties to override the object style\n   * @param {Object} [childrenOverride] properties to override the children overrides\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride?: ControlRenderingStyleOverride,\n    childrenOverride?: ControlRenderingStyleOverride,\n  ) {\n    ctx.save();\n    ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    const options = {\n      hasControls: false,\n      ...childrenOverride,\n      forActiveSelection: true,\n    };\n    for (let i = 0; i < this._objects.length; i++) {\n      this._objects[i]._renderControls(ctx, options);\n    }\n    super._renderControls(ctx, styleOverride);\n    ctx.restore();\n  }\n}\n\nclassRegistry.setClass(ActiveSelection);\nclassRegistry.setClass(ActiveSelection, 'activeSelection');\n","/**\n * Canvas 2D filter backend.\n */\nimport type { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TPipelineResources } from './typedefs';\n\nexport class Canvas2dFilterBackend {\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  /**\n   * Apply a set of filters against a source image and draw the filtered output\n   * to the provided destination canvas.\n   *\n   * @param {EnhancedFilter} filters The filter to apply.\n   * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n   * @param {Number} sourceWidth The width of the source input.\n   * @param {Number} sourceHeight The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    sourceElement: CanvasImageSource,\n    sourceWidth: number,\n    sourceHeight: number,\n    targetCanvas: HTMLCanvasElement,\n  ): T2DPipelineState | void {\n    const ctx = targetCanvas.getContext('2d', {\n      willReadFrequently: true,\n      desynchronized: true,\n    });\n    if (!ctx) {\n      return;\n    }\n    ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n    const imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const pipelineState: T2DPipelineState = {\n      sourceWidth,\n      sourceHeight,\n      imageData,\n      originalEl: sourceElement,\n      originalImageData,\n      canvasEl: targetCanvas,\n      ctx,\n      filterBackend: this,\n    };\n    filters.forEach((filter) => {\n      filter.applyTo(pipelineState);\n    });\n    const { imageData: imageDataPostFilter } = pipelineState;\n    if (\n      imageDataPostFilter.width !== sourceWidth ||\n      imageDataPostFilter.height !== sourceHeight\n    ) {\n      targetCanvas.width = imageDataPostFilter.width;\n      targetCanvas.height = imageDataPostFilter.height;\n    }\n    ctx.putImageData(imageDataPostFilter, 0, 0);\n    return pipelineState;\n  }\n}\n","import { config } from '../config';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport type {\n  TWebGLPipelineState,\n  TProgramCache,\n  TTextureCache,\n  TPipelineResources,\n} from './typedefs';\nimport type { BaseFilter } from './BaseFilter';\n\nexport class WebGLFilterBackend {\n  declare tileSize: number;\n\n  /**\n   * Define ...\n   **/\n  aPosition: Float32Array = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n\n  /**\n   * If GLPut data is the fastest operation, or if forced, this buffer will be used\n   * to transfer the data back in the 2d logic\n   **/\n  declare imageBuffer?: ArrayBuffer;\n\n  declare canvas: HTMLCanvasElement;\n\n  /**\n   * The Webgl context that will execute the operations for filtering\n   **/\n  declare gl: WebGLRenderingContext;\n\n  /**\n   * Keyed map for shader cache\n   **/\n  declare programCache: TProgramCache;\n\n  /**\n   * Keyed map for texture cache\n   **/\n  declare textureCache: TTextureCache;\n\n  /**\n   * Contains GPU info for debug\n   **/\n  declare gpuInfo: any;\n\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  constructor({ tileSize = config.textureSize } = {}) {\n    this.tileSize = tileSize;\n    this.setupGLContext(tileSize, tileSize);\n    this.captureGPUInfo();\n  }\n\n  /**\n   * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n   */\n  setupGLContext(width: number, height: number): void {\n    this.dispose();\n    this.createWebGLCanvas(width, height);\n  }\n\n  /**\n   * Create a canvas element and associated WebGL context and attaches them as\n   * class properties to the GLFilterBackend class.\n   */\n  createWebGLCanvas(width: number, height: number): void {\n    const canvas = createCanvasElementFor({ width, height });\n    const glOptions = {\n        alpha: true,\n        premultipliedAlpha: false,\n        depth: false,\n        stencil: false,\n        antialias: false,\n      },\n      gl = canvas.getContext('webgl', glOptions) as WebGLRenderingContext;\n\n    if (!gl) {\n      return;\n    }\n    gl.clearColor(0, 0, 0, 0);\n    // this canvas can fire webglcontextlost and webglcontextrestored\n    this.canvas = canvas;\n    this.gl = gl;\n  }\n\n  /**\n   * Attempts to apply the requested filters to the source provided, drawing the filtered output\n   * to the provided target canvas.\n   *\n   * @param {Array} filters The filters to apply.\n   * @param {TexImageSource} source The source to be filtered.\n   * @param {Number} width The width of the source input.\n   * @param {Number} height The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n   * omitted, caching will be skipped.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    source: TexImageSource,\n    width: number,\n    height: number,\n    targetCanvas: HTMLCanvasElement,\n    cacheKey?: string,\n  ): TWebGLPipelineState | undefined {\n    const gl = this.gl;\n    const ctx = targetCanvas.getContext('2d');\n    if (!gl || !ctx) {\n      return;\n    }\n    let cachedTexture;\n    if (cacheKey) {\n      cachedTexture = this.getCachedTexture(cacheKey, source);\n    }\n    const pipelineState: TWebGLPipelineState = {\n      originalWidth:\n        (source as HTMLImageElement).width ||\n        (source as HTMLImageElement).naturalWidth ||\n        0,\n      originalHeight:\n        (source as HTMLImageElement).height ||\n        (source as HTMLImageElement).naturalHeight ||\n        0,\n      sourceWidth: width,\n      sourceHeight: height,\n      destinationWidth: width,\n      destinationHeight: height,\n      context: gl,\n      sourceTexture: this.createTexture(\n        gl,\n        width,\n        height,\n        !cachedTexture ? source : undefined,\n      ),\n      targetTexture: this.createTexture(gl, width, height),\n      originalTexture:\n        cachedTexture ||\n        this.createTexture(\n          gl,\n          width,\n          height,\n          !cachedTexture ? source : undefined,\n        ),\n      passes: filters.length,\n      webgl: true,\n      aPosition: this.aPosition,\n      programCache: this.programCache,\n      pass: 0,\n      filterBackend: this,\n      targetCanvas: targetCanvas,\n    };\n    const tempFbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n    filters.forEach((filter: any) => {\n      filter && filter.applyTo(pipelineState);\n    });\n    resizeCanvasIfNeeded(pipelineState);\n    this.copyGLTo2D(gl, pipelineState);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.deleteTexture(pipelineState.sourceTexture);\n    gl.deleteTexture(pipelineState.targetTexture);\n    gl.deleteFramebuffer(tempFbo);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    return pipelineState;\n  }\n\n  /**\n   * Detach event listeners, remove references, and clean up caches.\n   */\n  dispose() {\n    if (this.canvas) {\n      // we are disposing, we don't care about the fact\n      // that the canvas shouldn't be null.\n      // @ts-expect-error disposing\n      this.canvas = null;\n      // @ts-expect-error disposing\n      this.gl = null;\n    }\n    this.clearWebGLCaches();\n  }\n\n  /**\n   * Wipe out WebGL-related caches.\n   */\n  clearWebGLCaches() {\n    this.programCache = {};\n    this.textureCache = {};\n  }\n\n  /**\n   * Create a WebGL texture object.\n   *\n   * Accepts specific dimensions to initialize the texture to or a source image.\n   *\n   * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n   * @param {number} width The width to initialize the texture at.\n   * @param {number} height The height to initialize the texture.\n   * @param {TexImageSource} textureImageSource A source for the texture data.\n   * @param {number} filter gl.NEAREST default or gl.LINEAR filters for the texture.\n   * This filter is very useful for LUTs filters. If you need interpolation use gl.LINEAR\n   * @returns {WebGLTexture}\n   */\n  createTexture(\n    gl: WebGLRenderingContext,\n    width: number,\n    height: number,\n    textureImageSource?: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ) {\n    const {\n      NEAREST,\n      TEXTURE_2D,\n      RGBA,\n      UNSIGNED_BYTE,\n      CLAMP_TO_EDGE,\n      TEXTURE_MAG_FILTER,\n      TEXTURE_MIN_FILTER,\n      TEXTURE_WRAP_S,\n      TEXTURE_WRAP_T,\n    } = gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(TEXTURE_2D, texture);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n    if (textureImageSource) {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        RGBA,\n        UNSIGNED_BYTE,\n        textureImageSource,\n      );\n    } else {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        width,\n        height,\n        0,\n        RGBA,\n        UNSIGNED_BYTE,\n        null,\n      );\n    }\n    return texture;\n  }\n\n  /**\n   * Can be optionally used to get a texture from the cache array\n   *\n   * If an existing texture is not found, a new texture is created and cached.\n   *\n   * @param {String} uniqueId A cache key to use to find an existing texture.\n   * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n   * texture cache entry if one does not already exist.\n   */\n  getCachedTexture(\n    uniqueId: string,\n    textureImageSource: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ): WebGLTexture | null {\n    const { textureCache } = this;\n    if (textureCache[uniqueId]) {\n      return textureCache[uniqueId];\n    } else {\n      const texture = this.createTexture(\n        this.gl,\n        (textureImageSource as HTMLImageElement).width,\n        (textureImageSource as HTMLImageElement).height,\n        textureImageSource,\n        filter,\n      );\n      if (texture) {\n        textureCache[uniqueId] = texture;\n      }\n      return texture;\n    }\n  }\n\n  /**\n   * Clear out cached resources related to a source image that has been\n   * filtered previously.\n   *\n   * @param {String} cacheKey The cache key provided when the source image was filtered.\n   */\n  evictCachesForKey(cacheKey: string) {\n    if (this.textureCache[cacheKey]) {\n      this.gl.deleteTexture(this.textureCache[cacheKey]);\n      delete this.textureCache[cacheKey];\n    }\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas.\n   *\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2D(gl: WebGLRenderingContext, pipelineState: TWebGLPipelineState) {\n    const glCanvas = gl.canvas,\n      targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    const sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(\n      glCanvas,\n      0,\n      sourceY,\n      targetCanvas.width,\n      targetCanvas.height,\n      0,\n      0,\n      targetCanvas.width,\n      targetCanvas.height,\n    );\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2DPutImageData(\n    this: Required<WebGLFilterBackend>,\n    gl: WebGLRenderingContext,\n    pipelineState: TWebGLPipelineState,\n  ) {\n    const targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n    if (!ctx) {\n      return;\n    }\n    const u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    const u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    const imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Attempt to extract GPU information strings from a WebGL context.\n   *\n   * Useful information when debugging or blacklisting specific GPUs.\n   *\n   * @returns {Object} A GPU info object with renderer and vendor strings.\n   */\n  captureGPUInfo() {\n    if (this.gpuInfo) {\n      return this.gpuInfo;\n    }\n    const gl = this.gl,\n      gpuInfo = { renderer: '', vendor: '' };\n    if (!gl) {\n      return gpuInfo;\n    }\n    const ext = gl.getExtension('WEBGL_debug_renderer_info');\n    if (ext) {\n      const renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n      const vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n      if (renderer) {\n        gpuInfo.renderer = renderer.toLowerCase();\n      }\n      if (vendor) {\n        gpuInfo.vendor = vendor.toLowerCase();\n      }\n    }\n    this.gpuInfo = gpuInfo;\n    return gpuInfo;\n  }\n}\n\nfunction resizeCanvasIfNeeded(pipelineState: TWebGLPipelineState): void {\n  const targetCanvas = pipelineState.targetCanvas,\n    width = targetCanvas.width,\n    height = targetCanvas.height,\n    dWidth = pipelineState.destinationWidth,\n    dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n","import { config } from '../config';\nimport { getEnv } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { Canvas2dFilterBackend } from './Canvas2dFilterBackend';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\n\nexport type FilterBackend = WebGLFilterBackend | Canvas2dFilterBackend;\n\nlet filterBackend: FilterBackend;\n\n/**\n * Verifies if it is possible to initialize webgl or fallback on a canvas2d filtering backend\n */\nexport function initFilterBackend(): FilterBackend {\n  const { WebGLProbe } = getEnv();\n  WebGLProbe.queryWebGL(createCanvasElement());\n  if (config.enableGLFiltering && WebGLProbe.isSupported(config.textureSize)) {\n    return new WebGLFilterBackend({ tileSize: config.textureSize });\n  } else {\n    return new Canvas2dFilterBackend();\n  }\n}\n\n/**\n * Get the current fabricJS filter backend  or initialize one if not available yet\n * @param [strict] pass `true` to create the backend if it wasn't created yet (default behavior),\n * pass `false` to get the backend ref without mutating it\n */\nexport function getFilterBackend(strict = true): FilterBackend {\n  if (!filterBackend && strict) {\n    filterBackend = initFilterBackend();\n  }\n  return filterBackend;\n}\n\nexport function setFilterBackend(backend: FilterBackend) {\n  filterBackend = backend;\n}\n","import { getFabricDocument, getEnv } from '../env';\nimport type { BaseFilter } from '../filters/BaseFilter';\nimport { getFilterBackend } from '../filters/FilterBackend';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type {\n  TClassProperties,\n  TCrossOrigin,\n  TSize,\n  Abortable,\n  TOptions,\n} from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport { findScaleToCover, findScaleToFit } from '../util/misc/findScaleTo';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n  loadImage,\n} from '../util/misc/objectEnlive';\nimport { parsePreserveAspectRatioAttribute } from '../util/misc/svgParsing';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { WebGLFilterBackend } from '../filters/WebGLFilterBackend';\nimport { FILL, NONE } from '../constants';\nimport { getDocumentFromElement } from '../util/dom_misc';\nimport type { CSSRules } from '../parser/typedefs';\nimport type { Resize, ResizeSerializedProps } from '../filters/Resize';\nimport type { TCachedFabricObject } from './Object/Object';\nimport { log } from '../util/internals/console';\n\n// @todo Would be nice to have filtering code not imported directly.\n\nexport type ImageSource =\n  | HTMLImageElement\n  | HTMLVideoElement\n  | HTMLCanvasElement\n  | OffscreenCanvas;\n\ninterface UniqueImageProps {\n  srcFromAttribute: boolean;\n  minimumScaleTrigger: number;\n  cropX: number;\n  cropY: number;\n  imageSmoothing: boolean;\n  filters: BaseFilter<string, Record<string, any>>[];\n  resizeFilter?: Resize;\n}\n\nexport const imageDefaultValues: Partial<TClassProperties<FabricImage>> = {\n  strokeWidth: 0,\n  srcFromAttribute: false,\n  minimumScaleTrigger: 0.5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: true,\n};\n\nexport interface SerializedImageProps extends SerializedObjectProps {\n  src: string;\n  crossOrigin: TCrossOrigin;\n  filters: any[];\n  resizeFilter?: ResizeSerializedProps;\n  cropX: number;\n  cropY: number;\n}\n\nexport interface ImageProps extends FabricObjectProps, UniqueImageProps {}\n\nconst IMAGE_PROPS = ['cropX', 'cropY'] as const;\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n */\nexport class FabricImage<\n    Props extends TOptions<ImageProps> = Partial<ImageProps>,\n    SProps extends SerializedImageProps = SerializedImageProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements ImageProps\n{\n  /**\n   * When calling {@link FabricImage.getSrc}, return value from element src with `element.getAttribute('src')`.\n   * This allows for relative urls as image src.\n   * @since 2.7.0\n   * @type Boolean\n   * @default false\n   */\n  declare srcFromAttribute: boolean;\n\n  /**\n   * private\n   * contains last value of scaleX to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleX = 1;\n\n  /**\n   * private\n   * contains last value of scaleY to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleY = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingX = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingY = 1;\n\n  /**\n   * minimum scale factor under which any resizeFilter is triggered to resize the image\n   * 0 will disable the automatic resize. 1 will trigger automatically always.\n   * number bigger than 1 are not implemented yet.\n   * @type Number\n   */\n  declare minimumScaleTrigger: number;\n\n  /**\n   * key used to retrieve the texture representing this image\n   * @since 2.0.0\n   * @type String\n   * @default\n   */\n  declare cacheKey: string;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropX: number;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropY: number;\n\n  /**\n   * Indicates whether this canvas will use image smoothing when painting this image.\n   * Also influence if the cacheCanvas for this image uses imageSmoothing\n   * @since 4.0.0-beta.11\n   * @type Boolean\n   * @default\n   */\n  declare imageSmoothing: boolean;\n\n  declare preserveAspectRatio: string;\n\n  declare protected src: string;\n\n  declare filters: BaseFilter<string, Record<string, any>>[];\n  declare resizeFilter: Resize;\n\n  declare _element: ImageSource;\n  declare _filteredEl?: HTMLCanvasElement;\n  declare _originalElement: ImageSource;\n\n  static type = 'Image';\n\n  static cacheProperties = [...cacheProperties, ...IMAGE_PROPS];\n\n  static ownDefaults = imageDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...FabricImage.ownDefaults,\n    };\n  }\n  /**\n   * Constructor\n   * Image can be initialized with any canvas drawable or a string.\n   * The string should be a url and will be loaded as an image.\n   * Canvas and Image element work out of the box, while videos require extra code to work.\n   * Please check video element events for seeking.\n   * @param {ImageSource | string} element Image element\n   * @param {Object} [options] Options object\n   */\n  constructor(elementId: string, options?: Props);\n  constructor(element: ImageSource, options?: Props);\n  constructor(arg0: ImageSource | string, options?: Props) {\n    super();\n    this.filters = [];\n    Object.assign(this, FabricImage.ownDefaults);\n    this.setOptions(options);\n    this.cacheKey = `texture${uid()}`;\n    this.setElement(\n      typeof arg0 === 'string'\n        ? ((\n            (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n            getFabricDocument()\n          ).getElementById(arg0) as ImageSource)\n        : arg0,\n      options,\n    );\n  }\n\n  /**\n   * Returns image element which this instance if based on\n   */\n  getElement() {\n    return this._element;\n  }\n\n  /**\n   * Sets image element for this instance to a specified one.\n   * If filters defined they are applied to new image.\n   * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n   * @param {HTMLImageElement} element\n   * @param {Partial<TSize>} [size] Options object\n   */\n  setElement(element: ImageSource, size: Partial<TSize> = {}) {\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._element = element;\n    this._originalElement = element;\n    this._setWidthHeight(size);\n    if (this.filters.length !== 0) {\n      this.applyFilters();\n    }\n    // resizeFilters work on the already filtered copy.\n    // we need to apply resizeFilters AFTER normal filters.\n    // applyResizeFilters is run more often than normal filters\n    // and is triggered by user interactions rather than dev code\n    if (this.resizeFilter) {\n      this.applyResizeFilters();\n    }\n  }\n\n  /**\n   * Delete a single texture if in webgl mode\n   */\n  removeTexture(key: string) {\n    const backend = getFilterBackend(false);\n    if (backend instanceof WebGLFilterBackend) {\n      backend.evictCachesForKey(key);\n    }\n  }\n\n  /**\n   * Delete textures, reference to elements and eventually JSDOM cleanup\n   */\n  dispose() {\n    super.dispose();\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._cacheContext = null;\n    (\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'] as const\n    ).forEach((elementKey) => {\n      const el = this[elementKey];\n      el && !(el instanceof OffscreenCanvas) && getEnv().dispose(el);\n      // @ts-expect-error disposing\n      this[elementKey] = undefined;\n    });\n  }\n\n  /**\n   * Get the crossOrigin value (of the corresponding image element)\n   */\n  getCrossOrigin(): string | null {\n    return (\n      this._originalElement &&\n      ((this._originalElement as any).crossOrigin || null)\n    );\n  }\n\n  /**\n   * Returns original size of an image\n   */\n  getOriginalSize() {\n    const element = this.getElement() as any;\n    if (!element) {\n      return {\n        width: 0,\n        height: 0,\n      };\n    }\n    return {\n      width: element.naturalWidth || element.width,\n      height: element.naturalHeight || element.height,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _stroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    const w = this.width / 2,\n      h = this.height / 2;\n    ctx.beginPath();\n    ctx.moveTo(-w, -h);\n    ctx.lineTo(w, -h);\n    ctx.lineTo(w, h);\n    ctx.lineTo(-w, h);\n    ctx.lineTo(-w, -h);\n    ctx.closePath();\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const filters: Record<string, any>[] = [];\n    this.filters.forEach((filterObj) => {\n      filterObj && filters.push(filterObj.toObject());\n    });\n    return {\n      ...super.toObject([...IMAGE_PROPS, ...propertiesToInclude]),\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters,\n      ...(this.resizeFilter\n        ? { resizeFilter: this.resizeFilter.toObject() }\n        : {}),\n    };\n  }\n\n  /**\n   * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n   * @return {Boolean}\n   */\n  hasCrop() {\n    return (\n      !!this.cropX ||\n      !!this.cropY ||\n      this.width < this._element.width ||\n      this.height < this._element.height\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {string[]} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const imageMarkup: string[] = [],\n      element = this._element,\n      x = -this.width / 2,\n      y = -this.height / 2;\n    let svgString: string[] = [],\n      strokeSvg: string[] = [],\n      clipPath = '',\n      imageRendering = '';\n    if (!element) {\n      return [];\n    }\n    if (this.hasCrop()) {\n      const clipPathId = uid();\n      svgString.push(\n        '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n        '\\t<rect x=\"' +\n          x +\n          '\" y=\"' +\n          y +\n          '\" width=\"' +\n          this.width +\n          '\" height=\"' +\n          this.height +\n          '\" />\\n',\n        '</clipPath>\\n',\n      );\n      clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n    }\n    if (!this.imageSmoothing) {\n      imageRendering = ' image-rendering=\"optimizeSpeed\"';\n    }\n    imageMarkup.push(\n      '\\t<image ',\n      'COMMON_PARTS',\n      `xlink:href=\"${this.getSvgSrc(true)}\" x=\"${x - this.cropX}\" y=\"${\n        y - this.cropY\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n      }\" width=\"${\n        element.width || (element as HTMLImageElement).naturalWidth\n      }\" height=\"${\n        element.height || (element as HTMLImageElement).naturalHeight\n      }\"${imageRendering}${clipPath}></image>\\n`,\n    );\n\n    if (this.stroke || this.strokeDashArray) {\n      const origFill = this.fill;\n      this.fill = null;\n      strokeSvg = [\n        `\\t<rect x=\"${x}\" y=\"${y}\" width=\"${this.width}\" height=\"${\n          this.height\n        }\" style=\"${this.getSvgStyles()}\" />\\n`,\n      ];\n      this.fill = origFill;\n    }\n    if (this.paintFirst !== FILL) {\n      svgString = svgString.concat(strokeSvg, imageMarkup);\n    } else {\n      svgString = svgString.concat(imageMarkup, strokeSvg);\n    }\n    return svgString;\n  }\n\n  /**\n   * Returns source of an image\n   * @param {Boolean} filtered indicates if the src is needed for svg\n   * @return {String} Source of an image\n   */\n  getSrc(filtered?: boolean): string {\n    const element = filtered ? this._element : this._originalElement;\n    if (element) {\n      if ((element as HTMLCanvasElement).toDataURL || element instanceof OffscreenCanvas) {\n        return (element as HTMLCanvasElement).toDataURL();\n      }\n\n      if (this.srcFromAttribute) {\n        return element.getAttribute('src') || '';\n      } else {\n        return (element as HTMLImageElement).src;\n      }\n    } else {\n      return this.src || '';\n    }\n  }\n\n  /**\n   * Alias for getSrc\n   * @param filtered\n   * @deprecated\n   */\n  getSvgSrc(filtered?: boolean) {\n    return this.getSrc(filtered);\n  }\n\n  /**\n   * Loads and sets source of an image\\\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   * @param {String} src Source string (URL)\n   * @param {LoadImageOptions} [options] Options object\n   */\n  setSrc(src: string, { crossOrigin, signal }: LoadImageOptions = {}) {\n    return loadImage(src, { crossOrigin, signal }).then((img) => {\n      typeof crossOrigin !== 'undefined' && this.set({ crossOrigin });\n      this.setElement(img);\n    });\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of an instance\n   */\n  toString() {\n    return `#<Image: { src: \"${this.getSrc()}\" }>`;\n  }\n\n  applyResizeFilters() {\n    const filter = this.resizeFilter,\n      minimumScale = this.minimumScaleTrigger,\n      objectScale = this.getTotalObjectScaling(),\n      scaleX = objectScale.x,\n      scaleY = objectScale.y,\n      elementToFilter = this._filteredEl || this._originalElement;\n    if (this.group) {\n      this.set('dirty', true);\n    }\n    if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n      this._element = elementToFilter;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      this._lastScaleX = scaleX;\n      this._lastScaleY = scaleY;\n      return;\n    }\n    const canvasEl = createCanvasElementFor(elementToFilter),\n      { width, height } = elementToFilter;\n    this._element = canvasEl;\n    this._lastScaleX = filter.scaleX = scaleX;\n    this._lastScaleY = filter.scaleY = scaleY;\n    getFilterBackend().applyFilters(\n      [filter],\n      elementToFilter,\n      width,\n      height,\n      this._element,\n    );\n    this._filterScalingX = canvasEl.width / this._originalElement.width;\n    this._filterScalingY = canvasEl.height / this._originalElement.height;\n  }\n\n  /**\n   * Applies filters assigned to this image (from \"filters\" array) or from filter param\n   * @method applyFilters\n   * @param {Array} filters to be applied\n   * @param {Boolean} forResizing specify if the filter operation is a resize operation\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[] = this.filters || [],\n  ) {\n    filters = filters.filter((filter) => filter && !filter.isNeutralState());\n    this.set('dirty', true);\n\n    // needs to clear out or WEBGL will not resize correctly\n    this.removeTexture(`${this.cacheKey}_filtered`);\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      // this is unsafe and needs to be rethinkend\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return;\n    }\n\n    const imgElement = this._originalElement,\n      sourceWidth =\n        (imgElement as HTMLImageElement).naturalWidth || imgElement.width,\n      sourceHeight =\n        (imgElement as HTMLImageElement).naturalHeight || imgElement.height;\n\n    if (this._element === this._originalElement) {\n      // if the _element a reference to _originalElement\n      // we need to create a new element to host the filtered pixels\n      const canvasEl = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else if (this._filteredEl) {\n      // if the _element is it own element,\n      // and we also have a _filteredEl, then we clean up _filteredEl\n      // and we assign it to _element.\n      // in this way we invalidate the eventual old resize filtered element\n      this._element = this._filteredEl;\n      this._filteredEl\n        .getContext('2d')!\n        .clearRect(0, 0, sourceWidth, sourceHeight);\n      // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n      this._lastScaleX = 1;\n      this._lastScaleY = 1;\n    }\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement,\n      this.cacheKey,\n    );\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n      this.applyResizeFilters();\n    }\n    this._stroke(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * it will set the imageSmoothing for the draw operation\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(\n    this: TCachedFabricObject<FabricImage>,\n    ctx: CanvasRenderingContext2D,\n  ) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    super.drawCacheOnCanvas(ctx);\n  }\n\n  /**\n   * Decide if the FabricImage should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * This is the special Image version where we would like to avoid caching where possible.\n   * Essentially images do not benefit from caching. They may require caching, and in that\n   * case we do it. Also caching an image usually ends in a loss of details.\n   * A full performance audit should be done.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    const elementToDraw = this._element;\n    if (!elementToDraw) {\n      return;\n    }\n    const scaleX = this._filterScalingX,\n      scaleY = this._filterScalingY,\n      w = this.width,\n      h = this.height,\n      // crop values cannot be lesser than 0.\n      cropX = Math.max(this.cropX, 0),\n      cropY = Math.max(this.cropY, 0),\n      elWidth =\n        (elementToDraw as HTMLImageElement).naturalWidth || elementToDraw.width,\n      elHeight =\n        (elementToDraw as HTMLImageElement).naturalHeight ||\n        elementToDraw.height,\n      sX = cropX * scaleX,\n      sY = cropY * scaleY,\n      // the width height cannot exceed element width/height, starting from the crop offset.\n      sW = Math.min(w * scaleX, elWidth - sX),\n      sH = Math.min(h * scaleY, elHeight - sY),\n      x = -w / 2,\n      y = -h / 2,\n      maxDestW = Math.min(w, elWidth / scaleX - cropX),\n      maxDestH = Math.min(h, elHeight / scaleY - cropY);\n\n    elementToDraw &&\n      ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n  }\n\n  /**\n   * needed to check if image needs resize\n   * @private\n   */\n  _needsResize() {\n    const scale = this.getTotalObjectScaling();\n    return scale.x !== this._lastScaleX || scale.y !== this._lastScaleY;\n  }\n\n  /**\n   * @private\n   * @deprecated unused\n   */\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n\n  /**\n   * @private\n   * Set the width and the height of the image object, using the element or the\n   * options.\n   */\n  _setWidthHeight({ width, height }: Partial<TSize> = {}) {\n    const size = this.getOriginalSize();\n    this.width = width || size.width;\n    this.height = height || size.height;\n  }\n\n  /**\n   * Calculate offset for center and scale factor for the image in order to respect\n   * the preserveAspectRatio attribute\n   * @private\n   */\n  parsePreserveAspectRatioAttribute() {\n    const pAR = parsePreserveAspectRatioAttribute(\n        this.preserveAspectRatio || '',\n      ),\n      pWidth = this.width,\n      pHeight = this.height,\n      parsedAttributes = { width: pWidth, height: pHeight };\n    let rWidth = this._element.width,\n      rHeight = this._element.height,\n      scaleX = 1,\n      scaleY = 1,\n      offsetLeft = 0,\n      offsetTop = 0,\n      cropX = 0,\n      cropY = 0,\n      offset;\n\n    if (pAR && (pAR.alignX !== NONE || pAR.alignY !== NONE)) {\n      if (pAR.meetOrSlice === 'meet') {\n        scaleX = scaleY = findScaleToFit(this._element, parsedAttributes);\n        offset = (pWidth - rWidth * scaleX) / 2;\n        if (pAR.alignX === 'Min') {\n          offsetLeft = -offset;\n        }\n        if (pAR.alignX === 'Max') {\n          offsetLeft = offset;\n        }\n        offset = (pHeight - rHeight * scaleY) / 2;\n        if (pAR.alignY === 'Min') {\n          offsetTop = -offset;\n        }\n        if (pAR.alignY === 'Max') {\n          offsetTop = offset;\n        }\n      }\n      if (pAR.meetOrSlice === 'slice') {\n        scaleX = scaleY = findScaleToCover(this._element, parsedAttributes);\n        offset = rWidth - pWidth / scaleX;\n        if (pAR.alignX === 'Mid') {\n          cropX = offset / 2;\n        }\n        if (pAR.alignX === 'Max') {\n          cropX = offset;\n        }\n        offset = rHeight - pHeight / scaleY;\n        if (pAR.alignY === 'Mid') {\n          cropY = offset / 2;\n        }\n        if (pAR.alignY === 'Max') {\n          cropY = offset;\n        }\n        rWidth = pWidth / scaleX;\n        rHeight = pHeight / scaleY;\n      }\n    } else {\n      scaleX = pWidth / rWidth;\n      scaleY = pHeight / rHeight;\n    }\n    return {\n      width: rWidth,\n      height: rHeight,\n      scaleX,\n      scaleY,\n      offsetLeft,\n      offsetTop,\n      cropX,\n      cropY,\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricImage.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'width',\n    'height',\n    'preserveAspectRatio',\n    'xlink:href',\n    'href',\n    'crossOrigin',\n    'image-rendering',\n  ];\n\n  /**\n   * Creates an instance of FabricImage from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricImage>}\n   */\n  static fromObject<T extends TOptions<SerializedImageProps>>(\n    { filters: f, resizeFilter: rf, src, crossOrigin, type, ...object }: T,\n    options?: Abortable,\n  ) {\n    return Promise.all([\n      loadImage(src!, { ...options, crossOrigin }),\n      f && enlivenObjects<BaseFilter<string>>(f, options),\n      // redundant - handled by enlivenObjectEnlivables, but nicely explicit\n      rf ? enlivenObjects<Resize>([rf], options) : [],\n      enlivenObjectEnlivables(object, options),\n    ]).then(([el, filters = [], [resizeFilter], hydratedProps = {}]) => {\n      return new this(el, {\n        ...object,\n        // TODO: passing src creates a difference between image creation and restoring from JSON\n        src,\n        filters,\n        resizeFilter,\n        ...hydratedProps,\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {LoadImageOptions} [options] Options object\n   * @returns {Promise<FabricImage>}\n   */\n  static fromURL<T extends TOptions<ImageProps>>(\n    url: string,\n    { crossOrigin = null, signal }: LoadImageOptions = {},\n    imageOptions?: T,\n  ): Promise<FabricImage> {\n    return loadImage(url, { crossOrigin, signal }).then(\n      (img) => new this(img, imageOptions),\n    );\n  }\n\n  /**\n   * Returns {@link FabricImage} instance from an SVG element\n   * @static\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @param {Function} callback Callback to execute when Image object is created\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable = {},\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return this.fromURL(\n      parsedAttributes['xlink:href'] || parsedAttributes['href'],\n      options,\n      parsedAttributes,\n    ).catch((err) => {\n      log('log', 'Unable to parse Image', err);\n      return null;\n    });\n  }\n}\n\nclassRegistry.setClass(FabricImage);\nclassRegistry.setSVGClass(FabricImage);\n","import { svgNS } from './constants';\nimport {\n  parsePreserveAspectRatioAttribute,\n  parseUnit,\n} from '../util/misc/svgParsing';\nimport { svgViewBoxElementsRegEx, reViewBoxAttrValue } from './constants';\nimport { NONE } from '../constants';\n\nexport type ParsedViewboxTransform = Partial<{\n  width: number;\n  height: number;\n  minX: number;\n  minY: number;\n  viewBoxWidth: number;\n  viewBoxHeight: number;\n}>;\n\n/**\n * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n */\nexport function applyViewboxTransform(\n  element: Element,\n): ParsedViewboxTransform {\n  if (!svgViewBoxElementsRegEx.test(element.nodeName)) {\n    return {};\n  }\n  const viewBoxAttr: string | null = element.getAttribute('viewBox');\n  let scaleX = 1;\n  let scaleY = 1;\n  let minX = 0;\n  let minY = 0;\n  let matrix;\n  let el;\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const x = element.getAttribute('x') || 0;\n  const y = element.getAttribute('y') || 0;\n  const goodViewbox = viewBoxAttr && reViewBoxAttrValue.test(viewBoxAttr);\n  const missingViewBox = !goodViewbox;\n  const missingDimAttr =\n    !widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%';\n\n  let translateMatrix = '';\n  let widthDiff = 0;\n  let heightDiff = 0;\n\n  if (missingViewBox) {\n    if (\n      (x || y) &&\n      element.parentNode &&\n      element.parentNode.nodeName !== '#document'\n    ) {\n      translateMatrix =\n        ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n      matrix = (element.getAttribute('transform') || '') + translateMatrix;\n      element.setAttribute('transform', matrix);\n      element.removeAttribute('x');\n      element.removeAttribute('y');\n    }\n  }\n\n  if (missingViewBox && missingDimAttr) {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const parsedDim: ParsedViewboxTransform = {\n    width: 0,\n    height: 0,\n  };\n\n  if (missingViewBox) {\n    parsedDim.width = parseUnit(widthAttr!);\n    parsedDim.height = parseUnit(heightAttr!);\n    // set a transform for elements that have x y and are inner(only) SVGs\n    return parsedDim;\n  }\n\n  const pasedViewBox = viewBoxAttr.match(reViewBoxAttrValue)!;\n  minX = -parseFloat(pasedViewBox[1]);\n  minY = -parseFloat(pasedViewBox[2]);\n  const viewBoxWidth = parseFloat(pasedViewBox[3]);\n  const viewBoxHeight = parseFloat(pasedViewBox[4]);\n  parsedDim.minX = minX;\n  parsedDim.minY = minY;\n  parsedDim.viewBoxWidth = viewBoxWidth;\n  parsedDim.viewBoxHeight = viewBoxHeight;\n  if (!missingDimAttr) {\n    parsedDim.width = parseUnit(widthAttr);\n    parsedDim.height = parseUnit(heightAttr);\n    scaleX = parsedDim.width / viewBoxWidth;\n    scaleY = parsedDim.height / viewBoxHeight;\n  } else {\n    parsedDim.width = viewBoxWidth;\n    parsedDim.height = viewBoxHeight;\n  }\n\n  // default is to preserve aspect ratio\n  const preserveAspectRatio = parsePreserveAspectRatioAttribute(\n    element.getAttribute('preserveAspectRatio') || '',\n  );\n  if (preserveAspectRatio.alignX !== NONE) {\n    //translate all container for the effect of Mid, Min, Max\n    if (preserveAspectRatio.meetOrSlice === 'meet') {\n      scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;\n      // calculate additional translation to move the viewbox\n    }\n    if (preserveAspectRatio.meetOrSlice === 'slice') {\n      scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;\n      // calculate additional translation to move the viewbox\n    }\n    widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n    heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n    if (preserveAspectRatio.alignX === 'Mid') {\n      widthDiff /= 2;\n    }\n    if (preserveAspectRatio.alignY === 'Mid') {\n      heightDiff /= 2;\n    }\n    if (preserveAspectRatio.alignX === 'Min') {\n      widthDiff = 0;\n    }\n    if (preserveAspectRatio.alignY === 'Min') {\n      heightDiff = 0;\n    }\n  }\n\n  if (\n    scaleX === 1 &&\n    scaleY === 1 &&\n    minX === 0 &&\n    minY === 0 &&\n    x === 0 &&\n    y === 0\n  ) {\n    return parsedDim;\n  }\n  if ((x || y) && element.parentNode!.nodeName !== '#document') {\n    translateMatrix =\n      ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n  }\n\n  matrix =\n    translateMatrix +\n    ' matrix(' +\n    scaleX +\n    ' 0' +\n    ' 0 ' +\n    scaleY +\n    ' ' +\n    (minX * scaleX + widthDiff) +\n    ' ' +\n    (minY * scaleY + heightDiff) +\n    ') ';\n  // seems unused.\n  // parsedDim.viewboxTransform = parseTransformAttribute(matrix);\n  if (element.nodeName === 'svg') {\n    el = element.ownerDocument.createElementNS(svgNS, 'g');\n    // element.firstChild != null\n    while (element.firstChild) {\n      el.appendChild(element.firstChild);\n    }\n    element.appendChild(el);\n  } else {\n    el = element;\n    el.removeAttribute('x');\n    el.removeAttribute('y');\n    matrix = el.getAttribute('transform') + matrix;\n  }\n  el.setAttribute('transform', matrix);\n  return parsedDim;\n}\n","export const getTagName = (node: Element) => node.tagName.replace('svg:', '');\n","import { svgInvalidAncestors } from './constants';\nimport { getSvgRegex } from './getSvgRegex';\nimport { getTagName } from './getTagName';\n\nconst svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n\nexport function hasInvalidAncestor(element: Element) {\n  let _element: Element | null = element;\n  while (_element && (_element = _element.parentElement)) {\n    if (\n      _element &&\n      _element.nodeName &&\n      svgInvalidAncestorsRegEx.test(getTagName(_element)) &&\n      !_element.getAttribute('instantiated_by_use')\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n","export function getMultipleNodes(\n  doc: Document,\n  nodeNames: string[],\n): Element[] {\n  let nodeName,\n    nodeArray: Element[] = [],\n    nodeList,\n    i,\n    len;\n  for (i = 0, len = nodeNames.length; i < len; i++) {\n    nodeName = nodeNames[i];\n    nodeList = doc.getElementsByTagNameNS(\n      'http://www.w3.org/2000/svg',\n      nodeName,\n    );\n    nodeArray = nodeArray.concat(Array.from(nodeList));\n  }\n  return nodeArray;\n}\n","const gradientsAttrs = [\n  'gradientTransform',\n  'x1',\n  'x2',\n  'y1',\n  'y2',\n  'gradientUnits',\n  'cx',\n  'cy',\n  'r',\n  'fx',\n  'fy',\n];\nconst xlinkAttr = 'xlink:href';\n\nexport function recursivelyParseGradientsXlink(\n  doc: Document,\n  gradient: Element,\n) {\n  const xLink = gradient.getAttribute(xlinkAttr)?.slice(1) || '',\n    referencedGradient = doc.getElementById(xLink);\n  if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n    recursivelyParseGradientsXlink(doc, referencedGradient as Element);\n  }\n  if (referencedGradient) {\n    gradientsAttrs.forEach((attr) => {\n      const value = referencedGradient.getAttribute(attr);\n      if (!gradient.hasAttribute(attr) && value) {\n        gradient.setAttribute(attr, value);\n      }\n    });\n    if (!gradient.children.length) {\n      const referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n  }\n  gradient.removeAttribute(xlinkAttr);\n}\n","import { getMultipleNodes } from './getMultipleNodes';\nimport { recursivelyParseGradientsXlink } from './recursivelyParseGradientsXlink';\n\nconst tagArray = [\n  'linearGradient',\n  'radialGradient',\n  'svg:linearGradient',\n  'svg:radialGradient',\n];\n\n/**\n * Parses an SVG document, returning all of the gradient declarations found in it\n * @param {SVGDocument} doc SVG document to parse\n * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n */\nexport function getGradientDefs(\n  doc: Document,\n): Record<string, SVGGradientElement> {\n  const elList = getMultipleNodes(doc, tagArray);\n  const gradientDefs: Record<string, SVGGradientElement> = {};\n  let j = elList.length;\n  while (j--) {\n    const el = elList[j];\n    if (el.getAttribute('xlink:href')) {\n      recursivelyParseGradientsXlink(doc, el);\n    }\n    const id = el.getAttribute('id');\n    if (id) {\n      gradientDefs[id] = el as SVGGradientElement;\n    }\n  }\n  return gradientDefs;\n}\n","import { Gradient } from '../gradient/Gradient';\nimport { Group } from '../shapes/Group';\nimport { FabricImage } from '../shapes/Image';\nimport { classRegistry } from '../ClassRegistry';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../util/misc/matrix';\nimport { removeTransformMatrixForSvgParsing } from '../util/transform_matrix_removal';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { Point } from '../Point';\nimport { CENTER, FILL, STROKE } from '../constants';\nimport { getGradientDefs } from './getGradientDefs';\nimport { getCSSRules } from './getCSSRules';\nimport type { LoadImageOptions } from '../util';\nimport type { CSSRules, TSvgReviverCallback } from './typedefs';\nimport type { ParsedViewboxTransform } from './applyViewboxTransform';\nimport type { SVGOptions } from '../gradient';\nimport { getTagName } from './getTagName';\nimport { parseTransformAttribute } from './parseTransformAttribute';\n\nconst findTag = (el: Element) =>\n  classRegistry.getSVGClass(getTagName(el).toLowerCase());\n\ntype StorageType = {\n  fill: SVGGradientElement;\n  stroke: SVGGradientElement;\n  clipPath: Element[];\n};\n\ntype NotParsedFabricObject = FabricObject & {\n  fill: string;\n  stroke: string;\n  clipPath?: string;\n  clipRule?: CanvasFillRule;\n};\n\nexport class ElementsParser {\n  declare elements: Element[];\n  declare options: LoadImageOptions & ParsedViewboxTransform;\n  declare reviver?: TSvgReviverCallback;\n  declare regexUrl: RegExp;\n  declare doc: Document;\n  declare clipPaths: Record<string, Element[]>;\n  declare gradientDefs: Record<string, SVGGradientElement>;\n  declare cssRules: CSSRules;\n\n  constructor(\n    elements: Element[],\n    options: LoadImageOptions & ParsedViewboxTransform,\n    reviver: TSvgReviverCallback | undefined,\n    doc: Document,\n    clipPaths: Record<string, Element[]>,\n  ) {\n    this.elements = elements;\n    this.options = options;\n    this.reviver = reviver;\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n    this.doc = doc;\n    this.clipPaths = clipPaths;\n    this.gradientDefs = getGradientDefs(doc);\n    this.cssRules = getCSSRules(doc);\n  }\n\n  parse(): Promise<Array<FabricObject | null>> {\n    return Promise.all(\n      this.elements.map((element) => this.createObject(element)),\n    );\n  }\n\n  async createObject(el: Element): Promise<FabricObject | null> {\n    const klass = findTag(el);\n    if (klass) {\n      const obj: NotParsedFabricObject = await klass.fromElement(\n        el,\n        this.options,\n        this.cssRules,\n      );\n      this.resolveGradient(obj, el, FILL);\n      this.resolveGradient(obj, el, STROKE);\n      if (obj instanceof FabricImage && obj._originalElement) {\n        removeTransformMatrixForSvgParsing(\n          obj,\n          obj.parsePreserveAspectRatioAttribute(),\n        );\n      } else {\n        removeTransformMatrixForSvgParsing(obj);\n      }\n      await this.resolveClipPath(obj, el);\n      this.reviver && this.reviver(el, obj);\n      return obj;\n    }\n    return null;\n  }\n\n  extractPropertyDefinition(\n    obj: NotParsedFabricObject,\n    property: 'fill' | 'stroke' | 'clipPath',\n    storage: Record<string, StorageType[typeof property]>,\n  ): StorageType[typeof property] | undefined {\n    const value = obj[property]!,\n      regex = this.regexUrl;\n    if (!regex.test(value)) {\n      return undefined;\n    }\n    // verify: can we remove the 'g' flag? and remove lastIndex changes?\n    regex.lastIndex = 0;\n    // we passed the regex test, so we know is not null;\n    const id = regex.exec(value)![1];\n    regex.lastIndex = 0;\n    // @todo fix this\n    return storage[id];\n  }\n\n  resolveGradient(\n    obj: NotParsedFabricObject,\n    el: Element,\n    property: 'fill' | 'stroke',\n  ) {\n    const gradientDef = this.extractPropertyDefinition(\n      obj,\n      property,\n      this.gradientDefs,\n    ) as SVGGradientElement;\n    if (gradientDef) {\n      const opacityAttr = el.getAttribute(property + '-opacity');\n      const gradient = Gradient.fromElement(gradientDef, obj, {\n        ...this.options,\n        opacity: opacityAttr,\n      } as SVGOptions);\n      obj.set(property, gradient);\n    }\n  }\n\n  // TODO: resolveClipPath could be run once per clippath with minor work per object.\n  // is a refactor that i m not sure is worth on this code\n  async resolveClipPath(\n    obj: NotParsedFabricObject,\n    usingElement: Element,\n    exactOwner?: Element,\n  ) {\n    const clipPathElements = this.extractPropertyDefinition(\n      obj,\n      'clipPath',\n      this.clipPaths,\n    ) as Element[];\n    if (clipPathElements) {\n      const objTransformInv = invertTransform(obj.calcTransformMatrix());\n      const clipPathTag = clipPathElements[0].parentElement!;\n      let clipPathOwner = usingElement;\n      while (\n        !exactOwner &&\n        clipPathOwner.parentElement &&\n        clipPathOwner.getAttribute('clip-path') !== obj.clipPath\n      ) {\n        clipPathOwner = clipPathOwner.parentElement;\n      }\n      // move the clipPath tag as sibling to the real element that is using it\n      clipPathOwner.parentElement!.appendChild(clipPathTag);\n\n      // this multiplication order could be opposite.\n      // but i don't have an svg to test it\n      // at the first SVG that has a transform on both places and is misplaced\n      // try to invert this multiplication order\n      const finalTransform = parseTransformAttribute(\n        `${clipPathOwner.getAttribute('transform') || ''} ${\n          clipPathTag.getAttribute('originalTransform') || ''\n        }`,\n      );\n\n      clipPathTag.setAttribute(\n        'transform',\n        `matrix(${finalTransform.join(',')})`,\n      );\n\n      const container = await Promise.all(\n        clipPathElements.map((clipPathElement) => {\n          return findTag(clipPathElement)\n            .fromElement(clipPathElement, this.options, this.cssRules)\n            .then((enlivedClippath: NotParsedFabricObject) => {\n              removeTransformMatrixForSvgParsing(enlivedClippath);\n              enlivedClippath.fillRule = enlivedClippath.clipRule!;\n              delete enlivedClippath.clipRule;\n              return enlivedClippath;\n            });\n        }),\n      );\n      const clipPath =\n        container.length === 1 ? container[0] : new Group(container);\n      const gTransform = multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix(),\n      );\n      if (clipPath.clipPath) {\n        await this.resolveClipPath(\n          clipPath,\n          clipPathOwner,\n          // this is tricky.\n          // it tries to differentiate from when clipPaths are inherited by outside groups\n          // or when are really clipPaths referencing other clipPaths\n          clipPathTag.getAttribute('clip-path') ? clipPathOwner : undefined,\n        );\n      }\n      const { scaleX, scaleY, angle, skewX, translateX, translateY } =\n        qrDecompose(gTransform);\n      clipPath.set({\n        flipX: false,\n        flipY: false,\n      });\n      clipPath.set({\n        scaleX,\n        scaleY,\n        angle,\n        skewX,\n        skewY: 0,\n      });\n      clipPath.setPositionByOrigin(\n        new Point(translateX, translateY),\n        CENTER,\n        CENTER,\n      );\n      obj.clipPath = clipPath;\n    } else {\n      // if clip-path does not resolve to any element, delete the property.\n      delete obj.clipPath;\n      return;\n    }\n  }\n}\n","import type { CSSRules } from './typedefs';\n\n/**\n * Returns CSS rules for a given SVG document\n * @param {HTMLElement} doc SVG document to parse\n * @return {Object} CSS rules of this document\n */\nexport function getCSSRules(doc: Document) {\n  const styles = doc.getElementsByTagName('style');\n  let i;\n  let len;\n  const allRules: CSSRules = {};\n\n  // very crude parsing of style contents\n  for (i = 0, len = styles.length; i < len; i++) {\n    const styleContents = (styles[i].textContent || '').replace(\n      // remove comments\n      /\\/\\*[\\s\\S]*?\\*\\//g,\n      '',\n    );\n\n    if (styleContents.trim() === '') {\n      continue;\n    }\n    // recovers all the rule in this form `body { style code... }`\n    // rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n    styleContents\n      .split('}')\n      // remove empty rules and remove everything if we didn't split in at least 2 pieces\n      .filter((rule, index, array) => array.length > 1 && rule.trim())\n      // at this point we have hopefully an array of rules `body { style code... `\n      .forEach((rule) => {\n        // if there is more than one opening bracket and the rule starts with '@', it is likely\n        // a nested at-rule like @media, @supports, @scope, etc. Ignore these as the code below\n        // can not handle it.\n        if (\n          (rule.match(/{/g) || []).length > 1 &&\n          rule.trim().startsWith('@')\n        ) {\n          return;\n        }\n\n        const match = rule.split('{'),\n          ruleObj: Record<string, string> = {},\n          declaration = match[1].trim(),\n          propertyValuePairs = declaration.split(';').filter(function (pair) {\n            return pair.trim();\n          });\n\n        for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n          const pair = propertyValuePairs[i].split(':'),\n            property = pair[0].trim(),\n            value = pair[1].trim();\n          ruleObj[property] = value;\n        }\n        rule = match[0].trim();\n        rule.split(',').forEach((_rule) => {\n          _rule = _rule.replace(/^svg/i, '').trim();\n          if (_rule === '') {\n            return;\n          }\n          allRules[_rule] = {\n            ...(allRules[_rule] || {}),\n            ...ruleObj,\n          };\n        });\n      });\n  }\n  return allRules;\n}\n","import { applyViewboxTransform } from './applyViewboxTransform';\nimport { svgValidTagNamesRegEx } from './constants';\nimport { hasInvalidAncestor } from './hasInvalidAncestor';\nimport { parseUseDirectives } from './parseUseDirectives';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { ElementsParser } from './elements_parser';\nimport { log, SignalAbortedError } from '../util/internals/console';\nimport { getTagName } from './getTagName';\n\nconst isValidSvgTag = (el: Element) =>\n  svgValidTagNamesRegEx.test(getTagName(el));\n\nexport const createEmptyResponse = (): SVGParsingOutput => ({\n  objects: [],\n  elements: [],\n  options: {},\n  allElements: [],\n});\n\n/**\n * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n * @static\n * @function\n * @memberOf fabric\n * @param {HTMLElement} doc SVG document to parse\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @return {SVGParsingOutput}\n * {@link SVGParsingOutput} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n */\nexport async function parseSVGDocument(\n  doc: Document,\n  reviver?: TSvgReviverCallback,\n  { crossOrigin, signal }: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  if (signal && signal.aborted) {\n    log('log', new SignalAbortedError('parseSVGDocument'));\n    // this is an unhappy path, we dont care about speed\n    return createEmptyResponse();\n  }\n  const documentElement = doc.documentElement;\n  parseUseDirectives(doc);\n\n  const descendants = Array.from(documentElement.getElementsByTagName('*')),\n    options = {\n      ...applyViewboxTransform(documentElement),\n      crossOrigin,\n      signal,\n    };\n  const elements = descendants.filter((el) => {\n    applyViewboxTransform(el);\n    return isValidSvgTag(el) && !hasInvalidAncestor(el); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n  });\n  if (!elements || (elements && !elements.length)) {\n    return {\n      ...createEmptyResponse(),\n      options,\n      allElements: descendants,\n    };\n  }\n  const localClipPaths: Record<string, Element[]> = {};\n  descendants\n    .filter((el) => getTagName(el) === 'clipPath')\n    .forEach((el) => {\n      el.setAttribute('originalTransform', el.getAttribute('transform') || '');\n      const id = el.getAttribute('id')!;\n      localClipPaths[id] = Array.from(el.getElementsByTagName('*')).filter(\n        (el) => isValidSvgTag(el),\n      );\n    });\n\n  // Precedence of rules:   style > class > attribute\n  const elementParser = new ElementsParser(\n    elements,\n    options,\n    reviver,\n    doc,\n    localClipPaths,\n  );\n\n  const instances = await elementParser.parse();\n\n  return {\n    objects: instances,\n    elements,\n    options,\n    allElements: descendants,\n  };\n}\n","import { svgNS } from './constants';\nimport { getMultipleNodes } from './getMultipleNodes';\nimport { applyViewboxTransform } from './applyViewboxTransform';\nimport { parseStyleString } from './parseStyleString';\n\nexport function parseUseDirectives(doc: Document) {\n  const nodelist = getMultipleNodes(doc, ['use', 'svg:use']);\n  const skipAttributes = ['x', 'y', 'xlink:href', 'href', 'transform'];\n\n  for (const useElement of nodelist) {\n    const useAttributes: NamedNodeMap = useElement.attributes;\n\n    const useAttrMap: Record<string, string> = {};\n    for (const attr of useAttributes) {\n      attr.value && (useAttrMap[attr.name] = attr.value);\n    }\n\n    const xlink = (useAttrMap['xlink:href'] || useAttrMap.href || '').slice(1);\n\n    if (xlink === '') {\n      return;\n    }\n    const referencedElement = doc.getElementById(xlink);\n    if (referencedElement === null) {\n      // if we can't find the target of the xlink, consider this use tag bad, similar to no xlink\n      return;\n    }\n    let clonedOriginal = referencedElement.cloneNode(true) as Element;\n\n    const originalAttributes: NamedNodeMap = clonedOriginal.attributes;\n\n    const originalAttrMap: Record<string, string> = {};\n    for (const attr of originalAttributes) {\n      attr.value && (originalAttrMap[attr.name] = attr.value);\n    }\n\n    // Transform attribute needs to be merged in a particular way\n    const { x = 0, y = 0, transform = '' } = useAttrMap;\n    const currentTrans = `${transform} ${\n      originalAttrMap.transform || ''\n    } translate(${x}, ${y})`;\n\n    applyViewboxTransform(clonedOriginal);\n\n    if (/^svg$/i.test(clonedOriginal.nodeName)) {\n      // if is an SVG, create a group and apply all the attributes on top of it\n      const el3 = clonedOriginal.ownerDocument.createElementNS(svgNS, 'g');\n      Object.entries(originalAttrMap).forEach(([name, value]) =>\n        el3.setAttributeNS(svgNS, name, value),\n      );\n      el3.append(...clonedOriginal.childNodes);\n      clonedOriginal = el3;\n    }\n\n    for (const attr of useAttributes) {\n      if (!attr) {\n        continue;\n      }\n      const { name, value } = attr;\n      if (skipAttributes.includes(name)) {\n        continue;\n      }\n\n      if (name === 'style') {\n        // when use has a style, merge the two styles, with the ref being priority (not use)\n        // priority is by feature. an attribute for fill on the original element\n        // will overwrite the fill in style or attribute for tha use\n        const styleRecord: Record<string, any> = {};\n        parseStyleString(value, styleRecord);\n        // cleanup styleRecord from attributes of original\n        Object.entries(originalAttrMap).forEach(([name, value]) => {\n          styleRecord[name] = value;\n        });\n        // now we can put in the style of the original that will overwrite the original attributes\n        parseStyleString(originalAttrMap.style || '', styleRecord);\n        const mergedStyles = Object.entries(styleRecord)\n          .map((entry) => entry.join(':'))\n          .join(';');\n        clonedOriginal.setAttribute(name, mergedStyles);\n      } else {\n        // set the attribute from use element only if the original does not have it already\n        !originalAttrMap[name] && clonedOriginal.setAttribute(name, value);\n      }\n    }\n\n    clonedOriginal.setAttribute('transform', currentTrans);\n    clonedOriginal.setAttribute('instantiated_by_use', '1');\n    clonedOriginal.removeAttribute('id');\n    useElement.parentNode!.replaceChild(clonedOriginal, useElement);\n  }\n}\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Polyline } from '../shapes/Polyline';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { MODIFY_POLY } from '../constants';\n\nconst ACTION_NAME: TModificationEvents = MODIFY_POLY;\n\ntype TTransformAnchor = Transform & { pointIndex: number };\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nexport const createPolyPositionHandler = (pointIndex: number) => {\n  return function (dim: Point, finalMatrix: TMat2D, polyObject: Polyline) {\n    const { points, pathOffset } = polyObject;\n    return new Point(points[pointIndex])\n      .subtract(pathOffset)\n      .transform(\n        multiplyTransformMatrices(\n          polyObject.getViewportTransform(),\n          polyObject.calcTransformMatrix(),\n        ),\n      );\n  };\n};\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nexport const polyActionHandler = (\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) => {\n  const { target, pointIndex } = transform;\n  const poly = target as Polyline;\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    poly.calcOwnMatrix(),\n  );\n\n  poly.points[pointIndex] = mouseLocalPosition.add(poly.pathOffset);\n  poly.setDimensions();\n  poly.set('dirty', true);\n  return true;\n};\n\n/**\n * Keep the polygon in the same position when we change its `width`/`height`/`top`/`left`.\n */\nexport const factoryPolyActionHandler = (\n  pointIndex: number,\n  fn: TransformActionHandler<TTransformAnchor>,\n) => {\n  return function (\n    eventData: TPointerEvent,\n    transform: Transform,\n    x: number,\n    y: number,\n  ) {\n    const poly = transform.target as Polyline,\n      anchorPoint = new Point(\n        poly.points[(pointIndex > 0 ? pointIndex : poly.points.length) - 1],\n      ),\n      anchorPointInParentPlane = anchorPoint\n        .subtract(poly.pathOffset)\n        .transform(poly.calcOwnMatrix()),\n      actionPerformed = fn(eventData, { ...transform, pointIndex }, x, y);\n\n    const newAnchorPointInParentPlane = anchorPoint\n      .subtract(poly.pathOffset)\n      .transform(poly.calcOwnMatrix());\n\n    const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n    poly.left -= diff.x;\n    poly.top -= diff.y;\n\n    return actionPerformed;\n  };\n};\n\nexport const createPolyActionHandler = (pointIndex: number) =>\n  wrapWithFireEvent(\n    ACTION_NAME,\n    factoryPolyActionHandler(pointIndex, polyActionHandler),\n  );\n\nexport function createPolyControls(\n  poly: Polyline,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  numOfControls: number,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  arg0: number | Polyline,\n  options: Partial<Control> = {},\n) {\n  const controls = {} as Record<string, Control>;\n  for (\n    let idx = 0;\n    idx < (typeof arg0 === 'number' ? arg0 : arg0.points.length);\n    idx++\n  ) {\n    controls[`p${idx}`] = new Control({\n      actionName: ACTION_NAME,\n      positionHandler: createPolyPositionHandler(idx),\n      actionHandler: createPolyActionHandler(idx),\n      ...options,\n    });\n  }\n  return controls;\n}\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { TAxis, TAxisKey } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  isLocked,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport {\n  CENTER,\n  SCALE_X,\n  SCALE_Y,\n  SKEWING,\n  SKEW_X,\n  SKEW_Y,\n} from '../constants';\n\nexport type SkewTransform = Transform & { skewingSide: -1 | 1 };\n\nconst AXIS_KEYS: Record<\n  TAxis,\n  {\n    counterAxis: TAxis;\n    scale: TAxisKey<'scale'>;\n    skew: TAxisKey<'skew'>;\n    lockSkewing: TAxisKey<'lockSkewing'>;\n    origin: TAxisKey<'origin'>;\n    flip: TAxisKey<'flip'>;\n  }\n> = {\n  x: {\n    counterAxis: 'y',\n    scale: SCALE_X,\n    skew: SKEW_X,\n    lockSkewing: 'lockSkewingX',\n    origin: 'originX',\n    flip: 'flipX',\n  },\n  y: {\n    counterAxis: 'x',\n    scale: SCALE_Y,\n    skew: SKEW_Y,\n    lockSkewing: 'lockSkewingY',\n    origin: 'originY',\n    flip: 'flipY',\n  },\n};\n\nconst skewMap = ['ns', 'nesw', 'ew', 'nwse'];\n\n/**\n * return the correct cursor style for the skew action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const skewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n  coord,\n) => {\n  if (control.x !== 0 && isLocked(fabricObject, 'lockSkewingY')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  if (control.y !== 0 && isLocked(fabricObject, 'lockSkewingX')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control, coord) % 4;\n  return `${skewMap[n]}-resize`;\n};\n\n/**\n * Since skewing is applied before scaling, calculations are done in a scaleless plane\n * @see https://github.com/fabricjs/fabric.js/pull/8380\n */\nfunction skewObject(\n  axis: TAxis,\n  { target, ex, ey, skewingSide, ...transform }: SkewTransform,\n  pointer: Point,\n) {\n  const { skew: skewKey } = AXIS_KEYS[axis],\n    offset = pointer\n      .subtract(new Point(ex, ey))\n      .divide(new Point(target.scaleX, target.scaleY))[axis],\n    skewingBefore = target[skewKey],\n    skewingStart = transform[skewKey],\n    shearingStart = Math.tan(degreesToRadians(skewingStart)),\n    // let a, b be the size of target\n    // let a' be the value of a after applying skewing\n    // then:\n    // a' = a + b * skewA => skewA = (a' - a) / b\n    // the value b is tricky since skewY is applied before skewX\n    b =\n      axis === 'y'\n        ? target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n            // since skewY is applied before skewX, b (=width) is not affected by skewX\n            skewX: 0,\n          }).x\n        : target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n          }).y;\n\n  const shearing =\n    (2 * offset * skewingSide) /\n      // we max out fractions to safeguard from asymptotic behavior\n      Math.max(b, 1) +\n    // add starting state\n    shearingStart;\n\n  const skewing = radiansToDegrees(Math.atan(shearing));\n\n  target.set(skewKey, skewing);\n  const changed = skewingBefore !== target[skewKey];\n\n  if (changed && axis === 'y') {\n    // we don't want skewing to affect scaleX\n    // so we factor it by the inverse skewing diff to make it seem unchanged to the viewer\n    const { skewX, scaleX } = target,\n      dimBefore = target._getTransformedDimensions({ skewY: skewingBefore }),\n      dimAfter = target._getTransformedDimensions(),\n      compensationFactor = skewX !== 0 ? dimBefore.x / dimAfter.x : 1;\n    compensationFactor !== 1 &&\n      target.set(SCALE_X, compensationFactor * scaleX);\n  }\n\n  return changed;\n}\n\n/**\n * Wrapped Action handler for skewing on a given axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nfunction skewHandler(\n  axis: TAxis,\n  eventData: TPointerEvent,\n  transform: Transform,\n  x: number,\n  y: number,\n) {\n  const { target } = transform,\n    {\n      counterAxis,\n      origin: originKey,\n      lockSkewing: lockSkewingKey,\n      skew: skewKey,\n      flip: flipKey,\n    } = AXIS_KEYS[axis];\n  if (isLocked(target, lockSkewingKey)) {\n    return false;\n  }\n\n  const { origin: counterOriginKey, flip: counterFlipKey } =\n      AXIS_KEYS[counterAxis],\n    counterOriginFactor =\n      resolveOrigin(transform[counterOriginKey]) *\n      (target[counterFlipKey] ? -1 : 1),\n    // if the counter origin is top/left (= -0.5) then we are skewing x/y values on the bottom/right side of target respectively.\n    // if the counter origin is bottom/right (= 0.5) then we are skewing x/y values on the top/left side of target respectively.\n    // skewing direction on the top/left side of target is OPPOSITE to the direction of the movement of the pointer,\n    // so we factor skewing direction by this value.\n    skewingSide = (-Math.sign(counterOriginFactor) *\n      (target[flipKey] ? -1 : 1)) as 1 | -1,\n    skewingDirection =\n      ((target[skewKey] === 0 &&\n        // in case skewing equals 0 we use the pointer offset from target center to determine the direction of skewing\n        getLocalPoint(transform, CENTER, CENTER, x, y)[axis] > 0) ||\n      // in case target has skewing we use that as the direction\n      target[skewKey] > 0\n        ? 1\n        : -1) * skewingSide,\n    // anchor to the opposite side of the skewing direction\n    // normalize value from [-1, 1] to origin value [0, 1]\n    origin = -skewingDirection * 0.5 + 0.5;\n\n  const finalHandler = wrapWithFireEvent<SkewTransform>(\n    SKEWING,\n    wrapWithFixedAnchor((eventData, transform, x, y) =>\n      skewObject(axis, transform, new Point(x, y)),\n    ),\n  );\n\n  return finalHandler(\n    eventData,\n    {\n      ...transform,\n      [originKey]: origin,\n      skewingSide,\n    },\n    x,\n    y,\n  );\n}\n\n/**\n * Wrapped Action handler for skewing on the X axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('x', eventData, transform, x, y);\n};\n\n/**\n * Wrapped Action handler for skewing on the Y axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('y', eventData, transform, x, y);\n};\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Path } from '../shapes/Path';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport type { TSimpleParseCommandType } from '../util/path/typedefs';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\nconst ACTION_NAME: TModificationEvents = 'modifyPath' as const;\n\ntype TTransformAnchor = Transform;\n\nexport type PathPointControlStyle = {\n  controlFill?: string;\n  controlStroke?: string;\n  connectionDashArray?: number[];\n};\n\nconst calcPathPointPosition = (\n  pathObject: Path,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n  const command = path[commandIndex];\n  return new Point(\n    (command[pointIndex] as number) - pathOffset.x,\n    (command[pointIndex + 1] as number) - pathOffset.y,\n  ).transform(\n    multiplyTransformMatrices(\n      pathObject.getViewportTransform(),\n      pathObject.calcTransformMatrix(),\n    ),\n  );\n};\n\nconst movePathPoint = (\n  pathObject: Path,\n  x: number,\n  y: number,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n\n  const anchorCommand =\n    path[(commandIndex > 0 ? commandIndex : path.length) - 1];\n  const anchorPoint = new Point(\n    anchorCommand[pointIndex] as number,\n    anchorCommand[pointIndex + 1] as number,\n  );\n\n  const anchorPointInParentPlane = anchorPoint\n    .subtract(pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    pathObject.calcOwnMatrix(),\n  );\n\n  path[commandIndex][pointIndex] = mouseLocalPosition.x + pathOffset.x;\n  path[commandIndex][pointIndex + 1] = mouseLocalPosition.y + pathOffset.y;\n  pathObject.setDimensions();\n\n  const newAnchorPointInParentPlane = anchorPoint\n    .subtract(pathObject.pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n  pathObject.left -= diff.x;\n  pathObject.top -= diff.y;\n  pathObject.set('dirty', true);\n  return true;\n};\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nfunction pathPositionHandler(\n  this: PathPointControl,\n  dim: Point,\n  finalMatrix: TMat2D,\n  pathObject: Path,\n) {\n  const { commandIndex, pointIndex } = this;\n  return calcPathPointPosition(pathObject, commandIndex, pointIndex);\n}\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nfunction pathActionHandler(\n  this: PathPointControl,\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) {\n  const { target } = transform;\n  const { commandIndex, pointIndex } = this;\n  const actionPerformed = movePathPoint(\n    target as Path,\n    x,\n    y,\n    commandIndex,\n    pointIndex,\n  );\n  if (actionPerformed) {\n    fireEvent(this.actionName as TModificationEvents, {\n      ...commonEventInfo(eventData, transform, x, y),\n      commandIndex,\n      pointIndex,\n    });\n  }\n  return actionPerformed;\n}\n\nconst indexFromPrevCommand = (previousCommandType: TSimpleParseCommandType) =>\n  previousCommandType === 'C' ? 5 : previousCommandType === 'Q' ? 3 : 1;\n\nclass PathPointControl extends Control {\n  declare commandIndex: number;\n  declare pointIndex: number;\n  declare controlFill: string;\n  declare controlStroke: string;\n  constructor(options?: Partial<PathPointControl>) {\n    super(options);\n  }\n\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const overrides: ControlRenderingStyleOverride = {\n      ...styleOverride,\n      cornerColor: this.controlFill,\n      cornerStrokeColor: this.controlStroke,\n      transparentCorners: !this.controlFill,\n    };\n    super.render(ctx, left, top, overrides, fabricObject);\n  }\n}\n\nclass PathControlPointControl extends PathPointControl {\n  declare connectionDashArray?: number[];\n  declare connectToCommandIndex: number;\n  declare connectToPointIndex: number;\n  constructor(options?: Partial<PathControlPointControl>) {\n    super(options);\n  }\n\n  render(\n    this: PathControlPointControl,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const { path } = fabricObject;\n    const {\n      commandIndex,\n      pointIndex,\n      connectToCommandIndex,\n      connectToPointIndex,\n    } = this;\n    ctx.save();\n    ctx.strokeStyle = this.controlStroke;\n    if (this.connectionDashArray) {\n      ctx.setLineDash(this.connectionDashArray);\n    }\n    const [commandType] = path[commandIndex];\n    const point = calcPathPointPosition(\n      fabricObject,\n      connectToCommandIndex,\n      connectToPointIndex,\n    );\n\n    if (commandType === 'Q') {\n      // one control point connects to 2 points\n      const point2 = calcPathPointPosition(\n        fabricObject,\n        commandIndex,\n        pointIndex + 2,\n      );\n      ctx.moveTo(point2.x, point2.y);\n      ctx.lineTo(left, top);\n    } else {\n      ctx.moveTo(left, top);\n    }\n    ctx.lineTo(point.x, point.y);\n    ctx.stroke();\n    ctx.restore();\n\n    super.render(ctx, left, top, styleOverride, fabricObject);\n  }\n}\n\nconst createControl = (\n  commandIndexPos: number,\n  pointIndexPos: number,\n  isControlPoint: boolean,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  },\n  connectToCommandIndex?: number,\n  connectToPointIndex?: number,\n) =>\n  new (isControlPoint ? PathControlPointControl : PathPointControl)({\n    commandIndex: commandIndexPos,\n    pointIndex: pointIndexPos,\n    actionName: ACTION_NAME,\n    positionHandler: pathPositionHandler,\n    actionHandler: pathActionHandler,\n    connectToCommandIndex,\n    connectToPointIndex,\n    ...options,\n    ...(isControlPoint ? options.controlPointStyle : options.pointStyle),\n  } as Partial<PathControlPointControl>);\n\nexport function createPathControls(\n  path: Path,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  } = {},\n): Record<string, Control> {\n  const controls = {} as Record<string, Control>;\n  let previousCommandType: TSimpleParseCommandType = 'M';\n  path.path.forEach((command, commandIndex) => {\n    const commandType = command[0];\n\n    if (commandType !== 'Z') {\n      controls[`c_${commandIndex}_${commandType}`] = createControl(\n        commandIndex,\n        command.length - 2,\n        false,\n        options,\n      );\n    }\n    switch (commandType) {\n      case 'C':\n        controls[`c_${commandIndex}_C_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex - 1,\n          indexFromPrevCommand(previousCommandType),\n        );\n        controls[`c_${commandIndex}_C_CP_2`] = createControl(\n          commandIndex,\n          3,\n          true,\n          options,\n          commandIndex,\n          5,\n        );\n        break;\n      case 'Q':\n        controls[`c_${commandIndex}_Q_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex,\n          3,\n        );\n        break;\n    }\n    previousCommandType = commandType;\n  });\n  return controls;\n}\n","import { getFabricWindow } from '../env';\nimport { createCanvasElement, createCanvasElementFor } from '../util/misc/dom';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\n\nexport const isWebGLPipelineState = (\n  options: TWebGLPipelineState | T2DPipelineState,\n): options is TWebGLPipelineState => {\n  return (options as TWebGLPipelineState).webgl !== undefined;\n};\n\n/**\n * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n * drawImage should be faster, but is also bugged for a small combination of old hardware\n * and drivers.\n * putImageData is faster than drawImage for that specific operation.\n */\nexport const isPutImageFaster = (width: number, height: number): boolean => {\n  const targetCanvas = createCanvasElementFor({ width, height });\n  const sourceCanvas = createCanvasElement();\n  const gl = sourceCanvas.getContext('webgl')!;\n  // eslint-disable-next-line no-undef\n  const imageBuffer = new ArrayBuffer(width * height * 4);\n\n  const testContext = {\n    imageBuffer: imageBuffer,\n  } as unknown as Required<WebGLFilterBackend>;\n  const testPipelineState = {\n    destinationWidth: width,\n    destinationHeight: height,\n    targetCanvas: targetCanvas,\n  } as unknown as TWebGLPipelineState;\n  let startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2D.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const drawImageTime = getFabricWindow().performance.now() - startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2DPutImageData.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const putImageDataTime = getFabricWindow().performance.now() - startTime;\n\n  return drawImageTime > putImageDataTime;\n};\n","export const highPsourceCode = `precision highp float`;\n\nexport const identityFragmentShader = `\n    ${highPsourceCode};\n    varying vec2 vTexCoord;\n    uniform sampler2D uTexture;\n    void main() {\n      gl_FragColor = texture2D(uTexture, vTexCoord);\n    }`;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    void main() {\n      vTexCoord = aPosition;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }`;\n","import { getEnv } from '../env';\nimport type {\n  T2DPipelineState,\n  TWebGLAttributeLocationMap,\n  TWebGLPipelineState,\n  TWebGLProgramCacheItem,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport {\n  highPsourceCode,\n  identityFragmentShader,\n  vertexSource,\n} from './shaders/baseFilter';\nimport type { Abortable } from '../typedefs';\nimport { FabricError } from '../util/internals/console';\nimport { createCanvasElementFor } from '../util/misc/dom';\n\nconst regex = new RegExp(highPsourceCode, 'g');\n\nexport class BaseFilter<\n  Name extends string,\n  OwnProps extends Record<string, any> = object,\n  SerializedProps extends Record<string, any> = OwnProps,\n> {\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  get type(): Name {\n    return (this.constructor as typeof BaseFilter).type as Name;\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'BaseFilter';\n\n  /**\n   * Contains the uniform locations for the fragment shader.\n   * uStepW and uStepH are handled by the BaseFilter, each filter class\n   * needs to specify all the one that are needed\n   */\n  static uniformLocations: string[] = [];\n\n  declare static defaults: Record<string, unknown>;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor({\n    type,\n    ...options\n  }: { type?: never } & Partial<OwnProps> & Record<string, any> = {}) {\n    Object.assign(\n      this,\n      (this.constructor as typeof BaseFilter).defaults,\n      options,\n    );\n  }\n\n  protected getFragmentSource(): string {\n    return identityFragmentShader;\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram(\n    gl: WebGLRenderingContext,\n    fragmentSource: string = this.getFragmentSource(),\n    vertexSource: string = this.getVertexSource(),\n  ) {\n    const {\n      WebGLProbe: { GLPrecision = 'highp' },\n    } = getEnv();\n    if (GLPrecision !== 'highp') {\n      fragmentSource = fragmentSource.replace(\n        regex,\n        highPsourceCode.replace('highp', GLPrecision),\n      );\n    }\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    const program = gl.createProgram();\n\n    if (!vertexShader || !fragmentShader || !program) {\n      throw new FabricError(\n        'Vertex, fragment shader or program creation error',\n      );\n    }\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Vertex shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          vertexShader,\n        )}`,\n      );\n    }\n\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Fragment shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          fragmentShader,\n        )}`,\n      );\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new FabricError(\n        `Shader link error for \"${this.type}\" ${gl.getProgramInfoLog(program)}`,\n      );\n    }\n\n    const uniformLocations = this.getUniformLocations(gl, program) || {};\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n\n    return {\n      program,\n      attributeLocations: this.getAttributeLocations(gl, program),\n      uniformLocations,\n    };\n  }\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLAttributeLocationMap {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  }\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLUniformLocationMap {\n    const locations = (this.constructor as unknown as typeof BaseFilter<string>)\n      .uniformLocations;\n\n    const uniformLocations: Record<string, WebGLUniformLocation | null> = {};\n    for (let i = 0; i < locations.length; i++) {\n      uniformLocations[locations[i]] = gl.getUniformLocation(\n        program,\n        locations[i],\n      );\n    }\n    return uniformLocations;\n  }\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData(\n    gl: WebGLRenderingContext,\n    attributeLocations: Record<string, number>,\n    aPositionData: Float32Array,\n  ) {\n    const attributeLocation = attributeLocations.aPosition;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  }\n\n  _setupFrameBuffer(options: TWebGLPipelineState) {\n    const gl = options.context;\n    if (options.passes > 1) {\n      const width = options.destinationWidth;\n      const height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(\n          gl,\n          width,\n          height,\n        );\n      }\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        options.targetTexture,\n        0,\n      );\n    } else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  }\n\n  _swapTextures(options: TWebGLPipelineState) {\n    options.passes--;\n    options.pass++;\n    const temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  }\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isNeutralState(options?: any): boolean {\n    return false;\n  }\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(_options: T2DPipelineState): void {\n    // override by subclass\n  }\n\n  /**\n   * Returns a string that represent the current selected shader code for the filter.\n   * Used to force recompilation when parameters change or to retrieve the shader from cache\n   * @type string\n   **/\n  getCacheKey(): string {\n    return this.type;\n  }\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   * @return {WebGLProgram} the compiled program shader\n   */\n  retrieveShader(options: TWebGLPipelineState): TWebGLProgramCacheItem {\n    const key = this.getCacheKey();\n    if (!options.programCache[key]) {\n      options.programCache[key] = this.createProgram(options.context);\n    }\n    return options.programCache[key];\n  }\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context;\n    const shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    } else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  bindAdditionalTexture(\n    gl: WebGLRenderingContext,\n    texture: WebGLTexture,\n    textureUnit: number,\n  ) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  unbindAdditionalTexture(gl: WebGLRenderingContext, textureUnit: number) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} _gl The canvas context used to compile the shader program.\n   * @param {Object} _uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData(\n    _gl: WebGLRenderingContext,\n    _uniformLocations: TWebGLUniformLocationMap,\n  ): void {\n    // override by subclass\n  }\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer(options: T2DPipelineState) {\n    if (!options.helpLayer) {\n      const { sourceWidth, sourceHeight } = options;\n      const helpLayer = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      options.helpLayer = helpLayer;\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * It will automatically export the default values of a filter,\n   * stored in the static defaults property.\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): { type: Name } & SerializedProps {\n    const defaultKeys = Object.keys(\n      (this.constructor as typeof BaseFilter).defaults || {},\n    ) as (keyof SerializedProps)[];\n\n    return {\n      type: this.type,\n      ...defaultKeys.reduce<SerializedProps>((acc, key) => {\n        acc[key] = this[\n          key as keyof this\n        ] as unknown as (typeof acc)[typeof key];\n        return acc;\n      }, {} as SerializedProps),\n    };\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  static async fromObject(\n    { type, ...filterOptions }: Record<string, any>,\n    _options?: Abortable,\n  ): Promise<BaseFilter<string>> {\n    return new this(filterOptions);\n  }\n}\n","export const blendColorFragmentSource = {\n  multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n  screen:\n    'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n  add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n  difference: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n  subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n  lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n  darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n  exclusion:\n    'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n  overlay: `\n    if (uColor.r < 0.5) {\n      gl_FragColor.r *= 2.0 * uColor.r;\n    } else {\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n    }\n    if (uColor.g < 0.5) {\n      gl_FragColor.g *= 2.0 * uColor.g;\n    } else {\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n    }\n    if (uColor.b < 0.5) {\n      gl_FragColor.b *= 2.0 * uColor.b;\n    } else {\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n    }\n    `,\n  tint: `\n    gl_FragColor.rgb *= (1.0 - uColor.a);\n    gl_FragColor.rgb += uColor.rgb;\n    `,\n} as const;\n","import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const alpha = this.alpha;\n    const tr = source[0] * alpha;\n    const tg = source[1] * alpha;\n    const tb = source[2] * alpha;\n    const alpha1 = 1 - alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      let oR, oG, oB;\n      switch (this.mode) {\n        case 'multiply':\n          oR = (r * tr) / 255;\n          oG = (g * tg) / 255;\n          oB = (b * tb) / 255;\n          break;\n        case 'screen':\n          oR = 255 - ((255 - r) * (255 - tr)) / 255;\n          oG = 255 - ((255 - g) * (255 - tg)) / 255;\n          oB = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          oR = r + tr;\n          oG = g + tg;\n          oB = b + tb;\n          break;\n        case 'difference':\n          oR = Math.abs(r - tr);\n          oG = Math.abs(g - tg);\n          oB = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          oR = r - tr;\n          oG = g - tg;\n          oB = b - tb;\n          break;\n        case 'darken':\n          oR = Math.min(r, tr);\n          oG = Math.min(g, tg);\n          oB = Math.min(b, tb);\n          break;\n        case 'lighten':\n          oR = Math.max(r, tr);\n          oG = Math.max(g, tg);\n          oB = Math.max(b, tb);\n          break;\n        case 'overlay':\n          oR =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          oG =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          oB =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          oR = tr + r - (2 * tr * r) / 255;\n          oG = tg + g - (2 * tg * g) / 255;\n          oB = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          oR = tr + r * alpha1;\n          oG = tg + g * alpha1;\n          oB = tb + b * alpha1;\n      }\n      data[i] = oR;\n      data[i + 1] = oG;\n      data[i + 2] = oB;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n","import type { TBlendImageMode } from '../BlendImage';\n\nexport const fragmentSource: Record<TBlendImageMode, string> = {\n  multiply: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.rgba *= color2.rgba;\n      gl_FragColor = color;\n    }\n    `,\n  mask: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.a = color2.a;\n      gl_FragColor = color;\n    }\n    `,\n} as const;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    uniform mat3 uTransformMatrix;\n    void main() {\n      vTexCoord = aPosition;\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ` as const;\n","import { FabricImage } from '../shapes/Image';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport type { WebGLFilterBackend } from './WebGLFilterBackend';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource, vertexSource } from './shaders/blendImage';\n\nexport type TBlendImageMode = 'multiply' | 'mask';\n\ntype BlendImageOwnProps = {\n  mode: TBlendImageMode;\n  alpha: number;\n};\n\nexport const blendImageDefaultValues: BlendImageOwnProps = {\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Image Blend filter class\n * @example\n * const filter = new filters.BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendImage extends BaseFilter<'BlendImage', BlendImageOwnProps> {\n  /**\n   * Image to make the blend operation with.\n   **/\n  declare image: FabricImage;\n\n  /**\n   * Blend mode for the filter: either 'multiply' or 'mask'. 'multiply' will\n   * multiply the values of each channel (R, G, B, and A) of the filter image by\n   * their corresponding values in the base image. 'mask' will only look at the\n   * alpha channel of the filter image, and apply those values to the base\n   * image's alpha channel.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendImageOwnProps['mode'];\n\n  /**\n   * alpha value. represent the strength of the blend image operation.\n   * not implemented.\n   **/\n  declare alpha: BlendImageOwnProps['alpha'];\n\n  static type = 'BlendImage';\n\n  static defaults = blendImageDefaultValues;\n\n  static uniformLocations = ['uTransformMatrix', 'uImage'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource(): string {\n    return fragmentSource[this.mode];\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context,\n      texture = this.createTexture(options.filterBackend, this.image);\n    this.bindAdditionalTexture(gl, texture!, gl.TEXTURE1);\n    super.applyToWebGL(options);\n    this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n  }\n\n  createTexture(backend: WebGLFilterBackend, image: FabricImage) {\n    return backend.getCachedTexture(image.cacheKey, image.getElement());\n  }\n\n  /**\n   * Calculate a transformMatrix to adapt the image to blend over\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  calculateMatrix() {\n    const image = this.image,\n      { width, height } = image.getElement();\n    return [\n      1 / image.scaleX,\n      0,\n      0,\n      0,\n      1 / image.scaleY,\n      0,\n      -image.left / width,\n      -image.top / height,\n      1,\n    ];\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({\n    imageData: { data, width, height },\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const image = this.image;\n    if (!resources.blendImage) {\n      resources.blendImage = createCanvasElement();\n    }\n    const canvas1 = resources.blendImage;\n    const context = canvas1.getContext('2d')!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas1.width = width;\n      canvas1.height = height;\n    } else {\n      context.clearRect(0, 0, width, height);\n    }\n    context.setTransform(\n      image.scaleX,\n      0,\n      0,\n      image.scaleY,\n      image.left,\n      image.top,\n    );\n    context.drawImage(image.getElement(), 0, 0, width, height);\n    const blendData = context.getImageData(0, 0, width, height).data;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      const tr = blendData[i];\n      const tg = blendData[i + 1];\n      const tb = blendData[i + 2];\n      const ta = blendData[i + 3];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          data[i + 3] = (a * ta) / 255;\n          break;\n        case 'mask':\n          data[i + 3] = ta;\n          break;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const matrix = this.calculateMatrix();\n    gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n    gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * TODO: Handle the possibility of missing image better.\n   * As of now a BlendImage filter without image can't be used with fromObject\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): {\n    type: 'BlendImage';\n    image: ReturnType<FabricImage['toObject']>;\n  } & BlendImageOwnProps {\n    return {\n      ...super.toObject(),\n      image: this.image && this.image.toObject(),\n    };\n  }\n\n  /**\n   * Create filter instance from an object representation\n   * @static\n   * @param {object} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting image loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<BlendImage>}\n   */\n  static async fromObject(\n    { type, image, ...filterOptions }: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<BaseFilter<'BlendImage', BlendImageOwnProps>> {\n    return FabricImage.fromObject(image, options).then(\n      (enlivedImage) => new this({ ...filterOptions, image: enlivedImage }),\n    );\n  }\n}\n\nclassRegistry.setClass(BlendImage);\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  TWebGLPipelineState,\n  T2DPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/blur';\n\ntype BlurOwnProps = {\n  blur: number;\n};\n\nexport const blurDefaultValues: BlurOwnProps = {\n  blur: 0,\n};\n\n/**\n * Blur filter class\n * @example\n * const filter = new Blur({\n *   blur: 0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Blur extends BaseFilter<'Blur', BlurOwnProps> {\n  /**\n   * blur value, in percentage of image dimensions.\n   * specific to keep the image blur constant at different resolutions\n   * range between 0 and 1.\n   * @type Number\n   * @default\n   */\n  declare blur: BlurOwnProps['blur'];\n\n  declare horizontal: boolean;\n  declare aspectRatio: number;\n\n  static type = 'Blur';\n\n  static defaults = blurDefaultValues;\n\n  static uniformLocations = ['uDelta'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      // this aspectRatio is used to give the same blur to vertical and horizontal\n      this.aspectRatio = options.sourceWidth / options.sourceHeight;\n      options.passes++;\n      this._setupFrameBuffer(options);\n      this.horizontal = true;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n      this._setupFrameBuffer(options);\n      this.horizontal = false;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    // this code mimic the shader for output consistency\n    // it samples 31 pixels across the image over a distance that depends from the blur value.\n    this.aspectRatio = width / height;\n    this.horizontal = true;\n    let blurValue = this.getBlurValue() * width;\n    const imageData = new Uint8ClampedArray(data);\n    const samples = 15;\n    const bytesInRow = 4 * width;\n    for (let i = 0; i < data.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i - (i % bytesInRow);\n      const maxIRow = minIRow + bytesInRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = 4;\n      // } else if (offset < 1) {\n      //   pixelOffset = -4;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * 4;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = data[sampledPixel + 3] * weight;\n        r += data[sampledPixel] * localAlpha;\n        g += data[sampledPixel + 1] * localAlpha;\n        b += data[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      imageData[i] = r / a;\n      imageData[i + 1] = g / a;\n      imageData[i + 2] = b / a;\n      imageData[i + 3] = a / totalA;\n    }\n    this.horizontal = false;\n    blurValue = this.getBlurValue() * height;\n    for (let i = 0; i < imageData.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i % bytesInRow;\n      const maxIRow = imageData.length - bytesInRow + minIRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = bytesInRow;\n      // } else if (offset < 1) {\n      //   pixelOffset = -bytesInRow;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * bytesInRow;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = imageData[sampledPixel + 3] * weight;\n        r += imageData[sampledPixel] * localAlpha;\n        g += imageData[sampledPixel + 1] * localAlpha;\n        b += imageData[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      data[i] = r / a;\n      data[i + 1] = g / a;\n      data[i + 2] = b / a;\n      data[i + 3] = a / totalA;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const delta = this.chooseRightDelta();\n    gl.uniform2fv(uniformLocations.uDelta, delta);\n  }\n\n  isNeutralState() {\n    return this.blur === 0;\n  }\n\n  getBlurValue(): number {\n    let blurScale = 1;\n    const { horizontal, aspectRatio } = this;\n    if (horizontal) {\n      if (aspectRatio > 1) {\n        // image is wide, i want to shrink radius horizontal\n        blurScale = 1 / aspectRatio;\n      }\n    } else {\n      if (aspectRatio < 1) {\n        // image is tall, i want to shrink radius vertical\n        blurScale = aspectRatio;\n      }\n    }\n    return blurScale * this.blur * 0.12;\n  }\n\n  /**\n   * choose right value of image percentage to blur with\n   * @returns {Array} a numeric array with delta values\n   */\n  chooseRightDelta() {\n    const blur = this.getBlurValue();\n    return this.horizontal ? [blur, 0] : [0, blur];\n  }\n}\n\nclassRegistry.setClass(Blur);\n","export const fragmentSource = `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n    const float nSamples = 15.0;\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n    float random(vec3 scale) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n    }\n    void main() {\n      vec4 color = vec4(0.0);\n      float totalC = 0.0;\n      float totalA = 0.0;\n      float offset = random(v3offset);\n      for (float t = -nSamples; t <= nSamples; t++) {\n        float percent = (t + offset - 0.5) / nSamples;\n        vec4 sample = texture2D(uTexture, vTexCoord + uDelta * percent);\n        float weight = 1.0 - abs(percent);\n        float alpha = weight * sample.a;\n        color.rgb += sample.rgb * alpha;\n        color.a += alpha;\n        totalA += weight;\n        totalC += alpha;\n      }\n      gl_FragColor.rgb = color.rgb / totalC;\n      gl_FragColor.a = color.a / totalA;\n    }\n  ` as const;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\n\ntype BrightnessOwnProps = {\n  brightness: number;\n};\n\nexport const brightnessDefaultValues: BrightnessOwnProps = {\n  brightness: 0,\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter<'Brightness', BrightnessOwnProps> {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: BrightnessOwnProps['brightness'];\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  static uniformLocations = ['uBrightness'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] += brightness;\n      data[i + 1] += brightness;\n      data[i + 2] += brightness;\n    }\n  }\n\n  isNeutralState() {\n    return this.brightness === 0;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBrightness;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += uBrightness;\n    gl_FragColor = color;\n  }\n`;\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  varying vec2 vTexCoord;\n  uniform mat4 uColorMatrix;\n  uniform vec4 uConstants;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color *= uColorMatrix;\n    color += uConstants;\n    gl_FragColor = color;\n  }`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TMatColorMatrix,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/colorMatrix';\n\nexport type ColorMatrixOwnProps = {\n  matrix: TMatColorMatrix;\n  colorsOnly: boolean;\n};\n\nexport const colorMatrixDefaultValues: ColorMatrixOwnProps = {\n  matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n  colorsOnly: true,\n};\n\n/**\n   * Color Matrix filter class\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl demo}\n   * @example <caption>Kodachrome filter</caption>\n   * const filter = new ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\nexport class ColorMatrix<\n  Name extends string = 'ColorMatrix',\n  OwnProps extends object = ColorMatrixOwnProps,\n  SerializedProps extends object = ColorMatrixOwnProps,\n> extends BaseFilter<Name, OwnProps, SerializedProps> {\n  /**\n   * Colormatrix for pixels.\n   * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n   * outside the -1, 1 range.\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Array} matrix array of 20 numbers.\n   * @default\n   */\n  declare matrix: ColorMatrixOwnProps['matrix'];\n\n  /**\n   * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n   * to save some calculation\n   * @type Boolean\n   * @default true\n   */\n  declare colorsOnly: ColorMatrixOwnProps['colorsOnly'];\n\n  static type = 'ColorMatrix';\n\n  static defaults = colorMatrixDefaultValues;\n\n  static uniformLocations = ['uColorMatrix', 'uConstants'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      m = this.matrix,\n      colorsOnly = this.colorsOnly;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n      data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n      data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n      if (!colorsOnly) {\n        const a = data[i + 3];\n        data[i] += a * m[3];\n        data[i + 1] += a * m[8];\n        data[i + 2] += a * m[13];\n        data[i + 3] =\n          r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const m = this.matrix,\n      matrix = [\n        m[0],\n        m[1],\n        m[2],\n        m[3],\n        m[5],\n        m[6],\n        m[7],\n        m[8],\n        m[10],\n        m[11],\n        m[12],\n        m[13],\n        m[15],\n        m[16],\n        m[17],\n        m[18],\n      ],\n      constants = [m[4], m[9], m[14], m[19]];\n    gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n    gl.uniform4fv(uniformLocations.uConstants, constants);\n  }\n\n  toObject(): { type: Name } & SerializedProps {\n    return {\n      ...super.toObject(),\n      matrix: [...this.matrix] as TMatColorMatrix,\n    };\n  }\n}\n\nclassRegistry.setClass(ColorMatrix);\n","import { ColorMatrix } from './ColorMatrix';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TMatColorMatrix } from './typedefs';\n\ntype FixedFiltersOwnProps = {\n  colorsOnly: boolean;\n};\n\nexport function createColorMatrixFilter(key: string, matrix: TMatColorMatrix) {\n  const newClass = class extends ColorMatrix<\n    typeof key,\n    FixedFiltersOwnProps,\n    FixedFiltersOwnProps\n  > {\n    static type = key;\n\n    static defaults = {\n      colorsOnly: false,\n      matrix,\n    };\n\n    toObject(): { type: string } & FixedFiltersOwnProps {\n      return { type: this.type, colorsOnly: this.colorsOnly };\n    }\n  };\n  classRegistry.setClass(newClass, key);\n  return newClass as typeof ColorMatrix<typeof key, FixedFiltersOwnProps>;\n}\n\nexport const Brownie = createColorMatrixFilter(\n  'Brownie',\n  [\n    0.5997, 0.34553, -0.27082, 0, 0.186, -0.0377, 0.86095, 0.15059, 0, -0.1449,\n    0.24113, -0.07441, 0.44972, 0, -0.02965, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Vintage = createColorMatrixFilter(\n  'Vintage',\n  [\n    0.62793, 0.32021, -0.03965, 0, 0.03784, 0.02578, 0.64411, 0.03259, 0,\n    0.02926, 0.0466, -0.08512, 0.52416, 0, 0.02023, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Kodachrome = createColorMatrixFilter(\n  'Kodachrome',\n  [\n    1.12855, -0.39673, -0.03992, 0, 0.24991, -0.16404, 1.08352, -0.05498, 0,\n    0.09698, -0.16786, -0.56034, 1.60148, 0, 0.13972, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Technicolor = createColorMatrixFilter(\n  'Technicolor',\n  [\n    1.91252, -0.85453, -0.09155, 0, 0.04624, -0.30878, 1.76589, -0.10601, 0,\n    -0.27589, -0.2311, -0.75018, 1.84759, 0, 0.12137, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Polaroid = createColorMatrixFilter(\n  'Polaroid',\n  [\n    1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016,\n    1.483, 0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Sepia = createColorMatrixFilter(\n  'Sepia',\n  [\n    0.393, 0.769, 0.189, 0, 0, 0.349, 0.686, 0.168, 0, 0, 0.272, 0.534, 0.131,\n    0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const BlackWhite = createColorMatrixFilter(\n  'BlackWhite',\n  [\n    1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0,\n    1, 0,\n  ],\n);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLPipelineState } from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\n\ntype ComposedOwnProps = {\n  subFilters: BaseFilter<string, object, object>[];\n};\n\ntype ComposedSerializedProps = {\n  subFilters: Record<string, unknown>[];\n};\n\n/**\n * A container class that knows how to apply a sequence of filters to an input image.\n */\nexport class Composed extends BaseFilter<\n  'Composed',\n  ComposedOwnProps,\n  ComposedSerializedProps\n> {\n  /**\n   * A non sparse array of filters to apply\n   */\n  declare subFilters: ComposedOwnProps['subFilters'];\n\n  static type = 'Composed';\n\n  constructor(\n    options: { subFilters?: BaseFilter<string>[] } & Record<string, any> = {},\n  ) {\n    super(options);\n    this.subFilters = options.subFilters || [];\n  }\n\n  /**\n   * Apply this container's filters to the input image provided.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be applied.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      options.passes += this.subFilters.length - 1;\n    }\n    this.subFilters.forEach((filter) => {\n      filter.applyTo(options);\n    });\n  }\n\n  /**\n   * Serialize this filter into JSON.\n   * @returns {Object} A JSON representation of this filter.\n   */\n  toObject() {\n    return {\n      type: this.type,\n      subFilters: this.subFilters.map((filter) => filter.toObject()),\n    };\n  }\n\n  isNeutralState() {\n    return !this.subFilters.some((filter) => !filter.isNeutralState());\n  }\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   * @static\n   * @param {oject} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting `BlendImage` filter loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<Composed>}\n   */\n  static fromObject(\n    object: Record<string, any>,\n    options?: { signal: AbortSignal },\n  ): Promise<Composed> {\n    return Promise.all(\n      ((object.subFilters || []) as BaseFilter<string>[]).map((filter) =>\n        classRegistry\n          .getClass<typeof BaseFilter>(filter.type)\n          .fromObject(filter, options),\n      ),\n    ).then((enlivedFilters) => new this({ subFilters: enlivedFilters }));\n  }\n}\n\nclassRegistry.setClass(Composed);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/constrast';\n\ntype ContrastOwnProps = {\n  contrast: number;\n};\n\nexport const contrastDefaultValues: ContrastOwnProps = {\n  contrast: 0,\n};\n\n/**\n * Contrast filter class\n * @example\n * const filter = new Contrast({\n *   contrast: 0.25\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Contrast extends BaseFilter<'Contrast', ContrastOwnProps> {\n  /**\n   * contrast value, range from -1 to 1.\n   * @param {Number} contrast\n   * @default 0\n   */\n  declare contrast: ContrastOwnProps['contrast'];\n\n  static type = 'Contrast';\n\n  static defaults = contrastDefaultValues;\n\n  static uniformLocations = ['uContrast'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  isNeutralState() {\n    return this.contrast === 0;\n  }\n\n  /**\n   * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const contrast = Math.floor(this.contrast * 255),\n      contrastF = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = contrastF * (data[i] - 128) + 128;\n      data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n      data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uContrast, this.contrast);\n  }\n}\n\nclassRegistry.setClass(Contrast);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uContrast;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n    gl_FragColor = color;\n  }`;\n","export const fragmentSource = {\n  Convolute_3_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_3_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_5_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_5_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_7_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_7_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_9_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_9_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/convolute';\n\nexport type ConvoluteOwnProps = {\n  opaque: boolean;\n  matrix: number[];\n};\n\nexport const convoluteDefaultValues: ConvoluteOwnProps = {\n  opaque: false,\n  matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n};\n\n/**\n * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n * @example <caption>Sharpen filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 0, -1,  0,\n *            -1,  5, -1,\n *             0, -1,  0 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Blur filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter with opaqueness</caption>\n * const filter = new Convolute({\n *   opaque: true,\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Convolute extends BaseFilter<'Convolute', ConvoluteOwnProps> {\n  /*\n   * Opaque value (true/false)\n   */\n  declare opaque: ConvoluteOwnProps['opaque'];\n\n  /*\n   * matrix for the filter, max 9x9\n   */\n  declare matrix: ConvoluteOwnProps['matrix'];\n\n  static type = 'Convolute';\n\n  static defaults = convoluteDefaultValues;\n\n  static uniformLocations = ['uMatrix', 'uOpaque', 'uHalfSize', 'uSize'];\n\n  getCacheKey() {\n    return `${this.type}_${Math.sqrt(this.matrix.length)}_${\n      this.opaque ? 1 : 0\n    }` as keyof typeof fragmentSource;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.getCacheKey()];\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      weights = this.matrix,\n      side = Math.round(Math.sqrt(weights.length)),\n      halfSide = Math.floor(side / 2),\n      sw = imageData.width,\n      sh = imageData.height,\n      output = options.ctx.createImageData(sw, sh),\n      dst = output.data,\n      // go through the destination image pixels\n      alphaFac = this.opaque ? 1 : 0;\n    let r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n\n    for (y = 0; y < sh; y++) {\n      for (x = 0; x < sw; x++) {\n        dstOff = (y * sw + x) * 4;\n        // calculate the weighed sum of the source image pixels that\n        // fall under the convolution matrix\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n\n        for (cy = 0; cy < side; cy++) {\n          for (cx = 0; cx < side; cx++) {\n            scy = y + cy - halfSide;\n            scx = x + cx - halfSide;\n\n            // eslint-disable-next-line max-depth\n            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n              continue;\n            }\n\n            srcOff = (scy * sw + scx) * 4;\n            wt = weights[cy * side + cx];\n\n            r += data[srcOff] * wt;\n            g += data[srcOff + 1] * wt;\n            b += data[srcOff + 2] * wt;\n            // eslint-disable-next-line max-depth\n            if (!alphaFac) {\n              a += data[srcOff + 3] * wt;\n            }\n          }\n        }\n        dst[dstOff] = r;\n        dst[dstOff + 1] = g;\n        dst[dstOff + 2] = b;\n        if (!alphaFac) {\n          dst[dstOff + 3] = a;\n        } else {\n          dst[dstOff + 3] = data[dstOff + 3];\n        }\n      }\n    }\n    options.imageData = output;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      ...super.toObject(),\n      opaque: this.opaque,\n      matrix: [...this.matrix],\n    };\n  }\n}\n\nclassRegistry.setClass(Convolute);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform vec3 uGamma;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    vec3 correction = (1.0 / uGamma);\n    color.r = pow(color.r, correction.r);\n    color.g = pow(color.g, correction.g);\n    color.b = pow(color.b, correction.b);\n    gl_FragColor = color;\n    gl_FragColor.rgb *= color.a;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/gamma';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nconst GAMMA = 'Gamma' as const;\n\nexport type GammaInput = [number, number, number];\n\nexport type GammaOwnProps = {\n  gamma: GammaInput;\n};\n\nexport const gammaDefaultValues: GammaOwnProps = {\n  gamma: [1, 1, 1],\n};\n\n/**\n * Gamma filter class\n * @example\n * const filter = new Gamma({\n *   gamma: [1, 0.5, 2.1]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Gamma extends BaseFilter<typeof GAMMA, GammaOwnProps> {\n  /**\n   * Gamma array value, from 0.01 to 2.2.\n   * @param {Array} gamma\n   * @default\n   */\n  declare gamma: GammaOwnProps['gamma'];\n  declare rgbValues?: {\n    r: Uint8Array;\n    g: Uint8Array;\n    b: Uint8Array;\n  };\n\n  static type = GAMMA;\n\n  static defaults = gammaDefaultValues;\n\n  static uniformLocations = ['uGamma'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  constructor(options: { gamma?: GammaInput } = {}) {\n    super(options);\n    this.gamma =\n      options.gamma ||\n      ((\n        this.constructor as typeof Gamma\n      ).defaults.gamma.concat() as GammaInput);\n  }\n\n  /**\n   * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const gamma = this.gamma,\n      rInv = 1 / gamma[0],\n      gInv = 1 / gamma[1],\n      bInv = 1 / gamma[2];\n\n    if (!this.rgbValues) {\n      this.rgbValues = {\n        r: new Uint8Array(256),\n        g: new Uint8Array(256),\n        b: new Uint8Array(256),\n      };\n    }\n\n    // This is an optimization - pre-compute a look-up table for each color channel\n    // instead of performing these pow calls for each pixel in the image.\n    const rgb = this.rgbValues;\n    for (let i = 0; i < 256; i++) {\n      rgb.r[i] = Math.pow(i / 255, rInv) * 255;\n      rgb.g[i] = Math.pow(i / 255, gInv) * 255;\n      rgb.b[i] = Math.pow(i / 255, bInv) * 255;\n    }\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = rgb.r[data[i]];\n      data[i + 1] = rgb.g[data[i + 1]];\n      data[i + 2] = rgb.b[data[i + 2]];\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n  }\n\n  isNeutralState() {\n    const { gamma } = this;\n    return gamma[0] === 1 && gamma[1] === 1 && gamma[2] === 1;\n  }\n\n  toObject(): { type: typeof GAMMA; gamma: GammaInput } {\n    return {\n      type: GAMMA,\n      gamma: this.gamma.concat() as GammaInput,\n    };\n  }\n}\n\nclassRegistry.setClass(Gamma);\n","import type { TGrayscaleMode } from '../Grayscale';\n\nexport const fragmentSource: Record<TGrayscaleMode, string> = {\n  average: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      float average = (color.r + color.b + color.g) / 3.0;\n      gl_FragColor = vec4(average, average, average, color.a);\n    }\n    `,\n  lightness: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n  luminosity: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/grayscale';\n\nexport type TGrayscaleMode = 'average' | 'lightness' | 'luminosity';\n\ntype GrayscaleOwnProps = {\n  mode: TGrayscaleMode;\n};\n\nexport const grayscaleDefaultValues: GrayscaleOwnProps = {\n  mode: 'average',\n};\n\n/**\n * Grayscale image filter class\n * @example\n * const filter = new Grayscale();\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Grayscale extends BaseFilter<'Grayscale', GrayscaleOwnProps> {\n  declare mode: TGrayscaleMode;\n\n  static type = 'Grayscale';\n\n  static defaults = grayscaleDefaultValues;\n\n  static uniformLocations = ['uMode'];\n\n  /**\n   * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0, value: number; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      switch (this.mode) {\n        case 'average':\n          value = (r + g + b) / 3;\n          break;\n        case 'lightness':\n          value = (Math.min(r, g, b) + Math.max(r, g, b)) / 2;\n          break;\n        case 'luminosity':\n          value = 0.21 * r + 0.72 * g + 0.07 * b;\n          break;\n      }\n\n      data[i + 2] = data[i + 1] = data[i] = value;\n    }\n  }\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.mode];\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const mode = 1;\n    gl.uniform1i(uniformLocations.uMode, mode);\n  }\n\n  /**\n   * Grayscale filter isNeutralState implementation\n   * The filter is never neutral\n   * on the image\n   **/\n  isNeutralState() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Grayscale);\n","import { cos } from '../util/misc/cos';\nimport { sin } from '../util/misc/sin';\nimport {\n  ColorMatrix,\n  type ColorMatrixOwnProps,\n  colorMatrixDefaultValues,\n} from './ColorMatrix';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\n\nexport type HueRotationOwnProps = ColorMatrixOwnProps & {\n  rotation: number;\n};\n\nexport type HueRotationSerializedProps = {\n  rotation: number;\n};\n\nexport const hueRotationDefaultValues: HueRotationOwnProps = {\n  ...colorMatrixDefaultValues,\n  rotation: 0,\n};\n\n/**\n * HueRotation filter class\n * @example\n * const filter = new HueRotation({\n *   rotation: -0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class HueRotation extends ColorMatrix<\n  'HueRotation',\n  HueRotationOwnProps,\n  HueRotationSerializedProps\n> {\n  /**\n   * HueRotation value, from -1 to 1.\n   */\n  declare rotation: HueRotationOwnProps['rotation'];\n\n  static type = 'HueRotation';\n\n  static defaults = hueRotationDefaultValues;\n\n  calculateMatrix() {\n    const rad = this.rotation * Math.PI,\n      cosine = cos(rad),\n      sine = sin(rad),\n      aThird = 1 / 3,\n      aThirdSqtSin = Math.sqrt(aThird) * sine,\n      OneMinusCos = 1 - cosine;\n    this.matrix = [\n      cosine + OneMinusCos / 3,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      aThird * OneMinusCos - aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n    ];\n  }\n\n  isNeutralState() {\n    return this.rotation === 0;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    this.calculateMatrix();\n    super.applyTo(options);\n  }\n\n  toObject() {\n    return {\n      type: this.type,\n      rotation: this.rotation,\n    };\n  }\n}\n\nclassRegistry.setClass(HueRotation);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/invert';\n\nexport type InvertOwnProps = {\n  alpha: boolean;\n  invert: boolean;\n};\n\nexport const invertDefaultValues: InvertOwnProps = {\n  alpha: false,\n  invert: true,\n};\n\n/**\n * @example\n * const filter = new Invert();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Invert extends BaseFilter<'Invert', InvertOwnProps> {\n  /**\n   * Invert also alpha.\n   * @param {Boolean} alpha\n   * @default\n   **/\n  declare alpha: InvertOwnProps['alpha'];\n\n  /**\n   * Filter invert. if false, does nothing\n   * @param {Boolean} invert\n   * @default\n   */\n  declare invert: InvertOwnProps['invert'];\n\n  static type = 'Invert';\n\n  static defaults = invertDefaultValues;\n\n  static uniformLocations = ['uInvert', 'uAlpha'];\n\n  /**\n   * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];\n      data[i + 1] = 255 - data[i + 1];\n      data[i + 2] = 255 - data[i + 2];\n\n      if (this.alpha) {\n        data[i + 3] = 255 - data[i + 3];\n      }\n    }\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Invert filter isNeutralState implementation\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * @param {Object} options\n   **/\n  isNeutralState() {\n    return !this.invert;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1i(uniformLocations.uInvert, Number(this.invert));\n    gl.uniform1i(uniformLocations.uAlpha, Number(this.alpha));\n  }\n}\n\nclassRegistry.setClass(Invert);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform int uInvert;\n  uniform int uAlpha;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    if (uInvert == 1) {\n      if (uAlpha == 1) {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\n      } else {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n      }\n    } else {\n      gl_FragColor = color;\n    }\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/noise';\n\nexport type NoiseOwnProps = {\n  noise: number;\n};\n\nexport const noiseDefaultValues: NoiseOwnProps = {\n  noise: 0,\n};\n\n/**\n * Noise filter class\n * @example\n * const filter = new Noise({\n *   noise: 700\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Noise extends BaseFilter<'Noise', NoiseOwnProps> {\n  /**\n   * Noise value, from\n   * @param {Number} noise\n   * @default\n   */\n  declare noise: NoiseOwnProps['noise'];\n\n  static type = 'Noise';\n\n  static defaults = noiseDefaultValues;\n\n  static uniformLocations = ['uNoise', 'uSeed'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const noise = this.noise;\n    for (let i = 0; i < data.length; i += 4) {\n      const rand = (0.5 - Math.random()) * noise;\n      data[i] += rand;\n      data[i + 1] += rand;\n      data[i + 2] += rand;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n    gl.uniform1f(uniformLocations.uSeed, Math.random());\n  }\n\n  isNeutralState() {\n    return this.noise === 0;\n  }\n}\n\nclassRegistry.setClass(Noise);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uStepH;\n  uniform float uNoise;\n  uniform float uSeed;\n  varying vec2 vTexCoord;\n  float rand(vec2 co, float seed, float vScale) {\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n  }\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/pixelate';\n\nexport type PixelateOwnProps = {\n  blocksize: number;\n};\n\nexport const pixelateDefaultValues: PixelateOwnProps = {\n  blocksize: 4,\n};\n\n/**\n * Pixelate filter class\n * @example\n * const filter = new Pixelate({\n *   blocksize: 8\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Pixelate extends BaseFilter<'Pixelate', PixelateOwnProps> {\n  declare blocksize: PixelateOwnProps['blocksize'];\n\n  static type = 'Pixelate';\n\n  static defaults = pixelateDefaultValues;\n\n  static uniformLocations = ['uBlocksize'];\n\n  /**\n   * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    for (let i = 0; i < height; i += this.blocksize) {\n      for (let j = 0; j < width; j += this.blocksize) {\n        const index = i * 4 * width + j * 4;\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const a = data[index + 3];\n\n        for (let _i = i; _i < Math.min(i + this.blocksize, height); _i++) {\n          for (let _j = j; _j < Math.min(j + this.blocksize, width); _j++) {\n            const index = _i * 4 * width + _j * 4;\n            data[index] = r;\n            data[index + 1] = g;\n            data[index + 2] = b;\n            data[index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicate when the filter is not gonna apply changes to the image\n   **/\n  isNeutralState() {\n    return this.blocksize === 1;\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n  }\n}\n\nclassRegistry.setClass(Pixelate);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBlocksize;\n  uniform float uStepW;\n  uniform float uStepH;\n  varying vec2 vTexCoord;\n  void main() {\n    float blockW = uBlocksize * uStepW;\n    float blockH = uBlocksize * uStepH;\n    int posX = int(vTexCoord.x / blockW);\n    int posY = int(vTexCoord.y / blockH);\n    float fposX = float(posX);\n    float fposY = float(posY);\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n    vec4 color = texture2D(uTexture, squareCoords);\n    gl_FragColor = color;\n  }\n`;\n","import { classRegistry } from '../ClassRegistry';\nimport { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport { fragmentShader } from './shaders/removeColor';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nexport type RemoveColorOwnProps = {\n  color: string;\n  distance: number;\n  useAlpha: boolean;\n};\n\nexport const removeColorDefaultValues: RemoveColorOwnProps = {\n  color: '#FFFFFF',\n  distance: 0.02,\n  useAlpha: false,\n};\n\n/**\n * Remove white filter class\n * @example\n * const filter = new RemoveColor({\n *   threshold: 0.2,\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class RemoveColor extends BaseFilter<\n  'RemoveColor',\n  RemoveColorOwnProps\n> {\n  /**\n   * Color to remove, in any format understood by {@link Color}.\n   * @param {String} type\n   * @default\n   */\n  declare color: RemoveColorOwnProps['color'];\n\n  /**\n   * distance to actual color, as value up or down from each r,g,b\n   * between 0 and 1\n   **/\n  declare distance: RemoveColorOwnProps['distance'];\n\n  /**\n   * For color to remove inside distance, use alpha channel for a smoother deletion\n   * NOT IMPLEMENTED YET\n   **/\n  declare useAlpha: RemoveColorOwnProps['useAlpha'];\n\n  static type = 'RemoveColor';\n\n  static defaults = removeColorDefaultValues;\n\n  static uniformLocations = ['uLow', 'uHigh'];\n\n  getFragmentSource() {\n    return fragmentShader;\n  }\n\n  /**\n   * Applies filter to canvas element\n   * @param {Object} canvasEl Canvas element to apply filter to\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const distance = this.distance * 255,\n      source = new Color(this.color).getSource(),\n      lowC = [source[0] - distance, source[1] - distance, source[2] - distance],\n      highC = [\n        source[0] + distance,\n        source[1] + distance,\n        source[2] + distance,\n      ];\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      if (\n        r > lowC[0] &&\n        g > lowC[1] &&\n        b > lowC[2] &&\n        r < highC[0] &&\n        g < highC[1] &&\n        b < highC[2]\n      ) {\n        data[i + 3] = 0;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource(),\n      distance = this.distance,\n      lowC = [\n        0 + source[0] / 255 - distance,\n        0 + source[1] / 255 - distance,\n        0 + source[2] / 255 - distance,\n        1,\n      ],\n      highC = [\n        source[0] / 255 + distance,\n        source[1] / 255 + distance,\n        source[2] / 255 + distance,\n        1,\n      ];\n    gl.uniform4fv(uniformLocations.uLow, lowC);\n    gl.uniform4fv(uniformLocations.uHigh, highC);\n  }\n}\n\nclassRegistry.setClass(RemoveColor);\n","export const fragmentShader = `\nprecision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vTexCoord);\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n    gl_FragColor.a = 0.0;\n  }\n}\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { XY } from '../Point';\n\nexport type TResizeType = 'bilinear' | 'hermite' | 'sliceHack' | 'lanczos';\n\nexport type ResizeOwnProps = {\n  resizeType: TResizeType;\n  scaleX: number;\n  scaleY: number;\n  lanczosLobes: number;\n};\n\nexport type ResizeSerializedProps = ResizeOwnProps;\n\nexport const resizeDefaultValues: ResizeOwnProps = {\n  resizeType: 'hermite',\n  scaleX: 1,\n  scaleY: 1,\n  lanczosLobes: 3,\n};\n\ntype ResizeDuring2DResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n};\n\ntype ResizeDuringWEBGLResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n  horizontal: boolean;\n  width: number;\n  height: number;\n  taps: number[];\n  tempScale: number;\n  dH: number;\n  dW: number;\n};\n\n/**\n * Resize image filter class\n * @example\n * const filter = new Resize();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Resize extends BaseFilter<'Resize', ResizeOwnProps> {\n  /**\n   * Resize type\n   * for webgl resizeType is just lanczos, for canvas2d can be:\n   * bilinear, hermite, sliceHack, lanczos.\n   * @default\n   */\n  declare resizeType: ResizeOwnProps['resizeType'];\n\n  /**\n   * Scale factor for resizing, x axis\n   * @param {Number} scaleX\n   * @default\n   */\n  declare scaleX: ResizeOwnProps['scaleX'];\n\n  /**\n   * Scale factor for resizing, y axis\n   * @param {Number} scaleY\n   * @default\n   */\n  declare scaleY: ResizeOwnProps['scaleY'];\n\n  /**\n   * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n   * @param {Number} lanczosLobes\n   * @default\n   */\n  declare lanczosLobes: ResizeOwnProps['lanczosLobes'];\n\n  static type = 'Resize';\n\n  static defaults = resizeDefaultValues;\n\n  static uniformLocations = ['uDelta', 'uTaps'];\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    this: ResizeDuringWEBGLResize,\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform2fv(\n      uniformLocations.uDelta,\n      this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height],\n    );\n    gl.uniform1fv(uniformLocations.uTaps, this.taps);\n  }\n\n  getFilterWindow(this: ResizeDuringWEBGLResize) {\n    const scale = this.tempScale;\n    return Math.ceil(this.lanczosLobes / scale);\n  }\n\n  getCacheKey(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return `${this.type}_${filterWindow}`;\n  }\n\n  getFragmentSource(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return this.generateShader(filterWindow);\n  }\n\n  getTaps(this: ResizeDuringWEBGLResize) {\n    const lobeFunction = this.lanczosCreate(this.lanczosLobes),\n      scale = this.tempScale,\n      filterWindow = this.getFilterWindow(),\n      taps = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      taps[i - 1] = lobeFunction(i * scale);\n    }\n    return taps;\n  }\n\n  /**\n   * Generate vertex and shader sources from the necessary steps numbers\n   * @param {Number} filterWindow\n   */\n  generateShader(filterWindow: number) {\n    const offsets = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      offsets[i - 1] = `${i}.0 * uDelta`;\n    }\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec2 uDelta;\n      varying vec2 vTexCoord;\n      uniform float uTaps[${filterWindow}];\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        float sum = 1.0;\n        ${offsets\n          .map(\n            (offset, i) => `\n              color += texture2D(uTexture, vTexCoord + ${offset}) * uTaps[${i}] + texture2D(uTexture, vTexCoord - ${offset}) * uTaps[${i}];\n              sum += 2.0 * uTaps[${i}];\n            `,\n          )\n          .join('\\n')}\n        gl_FragColor = color / sum;\n      }\n    `;\n  }\n\n  applyToForWebgl(this: ResizeDuringWEBGLResize, options: TWebGLPipelineState) {\n    options.passes++;\n    this.width = options.sourceWidth;\n    this.horizontal = true;\n    this.dW = Math.round(this.width * this.scaleX);\n    this.dH = options.sourceHeight;\n    this.tempScale = this.dW / this.width;\n    this.taps = this.getTaps();\n    options.destinationWidth = this.dW;\n    super.applyTo(options);\n    options.sourceWidth = options.destinationWidth;\n\n    this.height = options.sourceHeight;\n    this.horizontal = false;\n    this.dH = Math.round(this.height * this.scaleY);\n    this.tempScale = this.dH / this.height;\n    this.taps = this.getTaps();\n    options.destinationHeight = this.dH;\n    super.applyTo(options);\n    options.sourceHeight = options.destinationHeight;\n  }\n\n  /**\n   * Apply the resize filter to the image\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      (this as unknown as ResizeDuringWEBGLResize).applyToForWebgl(options);\n    } else {\n      (this as unknown as ResizeDuring2DResize).applyTo2d(options);\n    }\n  }\n\n  isNeutralState() {\n    return this.scaleX === 1 && this.scaleY === 1;\n  }\n\n  lanczosCreate(lobes: number) {\n    return (x: number) => {\n      if (x >= lobes || x <= -lobes) {\n        return 0.0;\n      }\n      if (x < 1.1920929e-7 && x > -1.1920929e-7) {\n        return 1.0;\n      }\n      x *= Math.PI;\n      const xx = x / lobes;\n      return ((Math.sin(x) / x) * Math.sin(xx)) / xx;\n    };\n  }\n\n  applyTo2d(this: ResizeDuring2DResize, options: T2DPipelineState) {\n    const imageData = options.imageData,\n      scaleX = this.scaleX,\n      scaleY = this.scaleY;\n\n    this.rcpScaleX = 1 / scaleX;\n    this.rcpScaleY = 1 / scaleY;\n\n    const oW = imageData.width;\n    const oH = imageData.height;\n    const dW = Math.round(oW * scaleX);\n    const dH = Math.round(oH * scaleY);\n    let newData: ImageData;\n\n    if (this.resizeType === 'sliceHack') {\n      newData = this.sliceByTwo(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'hermite') {\n      newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'bilinear') {\n      newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'lanczos') {\n      newData = this.lanczosResize(options, oW, oH, dW, dH);\n    } else {\n      // this should never trigger, is here just for safety net.\n      newData = new ImageData(dW, dH);\n    }\n    options.imageData = newData;\n  }\n\n  /**\n   * Filter sliceByTwo\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  sliceByTwo(\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const imageData = options.imageData;\n    const mult = 0.5;\n    let doneW = false;\n    let doneH = false;\n    let stepW = oW * mult;\n    let stepH = oH * mult;\n    const resources = options.filterBackend.resources;\n    let sX = 0;\n    let sY = 0;\n    const dX = oW;\n    let dY = 0;\n    if (!resources.sliceByTwo) {\n      resources.sliceByTwo = createCanvasElement();\n    }\n    const tmpCanvas = resources.sliceByTwo;\n    if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n      tmpCanvas.width = oW * 1.5;\n      tmpCanvas.height = oH;\n    }\n    const ctx = tmpCanvas.getContext('2d')!;\n    ctx.clearRect(0, 0, oW * 1.5, oH);\n    ctx.putImageData(imageData, 0, 0);\n\n    dW = Math.floor(dW);\n    dH = Math.floor(dH);\n\n    while (!doneW || !doneH) {\n      oW = stepW;\n      oH = stepH;\n      if (dW < Math.floor(stepW * mult)) {\n        stepW = Math.floor(stepW * mult);\n      } else {\n        stepW = dW;\n        doneW = true;\n      }\n      if (dH < Math.floor(stepH * mult)) {\n        stepH = Math.floor(stepH * mult);\n      } else {\n        stepH = dH;\n        doneH = true;\n      }\n      ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n      sX = dX;\n      sY = dY;\n      dY += stepH;\n    }\n    return ctx.getImageData(sX, sY, dW, dH);\n  }\n\n  /**\n   * Filter lanczosResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  lanczosResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ): ImageData {\n    function process(u: number): ImageData {\n      let v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n      center.x = (u + 0.5) * ratioX;\n      icenter.x = Math.floor(center.x);\n      for (v = 0; v < dH; v++) {\n        center.y = (v + 0.5) * ratioY;\n        icenter.y = Math.floor(center.y);\n        a = 0;\n        red = 0;\n        green = 0;\n        blue = 0;\n        alpha = 0;\n        for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n          if (i < 0 || i >= oW) {\n            continue;\n          }\n          fX = Math.floor(1000 * Math.abs(i - center.x));\n          if (!cacheLanc[fX]) {\n            cacheLanc[fX] = {};\n          }\n          for (let j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n            if (j < 0 || j >= oH) {\n              continue;\n            }\n            fY = Math.floor(1000 * Math.abs(j - center.y));\n            if (!cacheLanc[fX][fY]) {\n              cacheLanc[fX][fY] = lanczos(\n                Math.sqrt(\n                  Math.pow(fX * rcpRatioX, 2) + Math.pow(fY * rcpRatioY, 2),\n                ) / 1000,\n              );\n            }\n            weight = cacheLanc[fX][fY];\n            if (weight > 0) {\n              idx = (j * oW + i) * 4;\n              a += weight;\n              red += weight * srcData[idx];\n              green += weight * srcData[idx + 1];\n              blue += weight * srcData[idx + 2];\n              alpha += weight * srcData[idx + 3];\n            }\n          }\n        }\n        idx = (v * dW + u) * 4;\n        destData[idx] = red / a;\n        destData[idx + 1] = green / a;\n        destData[idx + 2] = blue / a;\n        destData[idx + 3] = alpha / a;\n      }\n\n      if (++u < dW) {\n        return process(u);\n      } else {\n        return destImg;\n      }\n    }\n\n    const srcData = options.imageData.data,\n      destImg = options.ctx.createImageData(dW, dH),\n      destData = destImg.data,\n      lanczos = this.lanczosCreate(this.lanczosLobes),\n      ratioX = this.rcpScaleX,\n      ratioY = this.rcpScaleY,\n      rcpRatioX = 2 / this.rcpScaleX,\n      rcpRatioY = 2 / this.rcpScaleY,\n      range2X = Math.ceil((ratioX * this.lanczosLobes) / 2),\n      range2Y = Math.ceil((ratioY * this.lanczosLobes) / 2),\n      cacheLanc: Record<number, Record<number, number>> = {},\n      center: XY = { x: 0, y: 0 },\n      icenter: XY = { x: 0, y: 0 };\n\n    return process(0);\n  }\n\n  /**\n   * bilinearFiltering\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  bilinearFiltering(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    let a;\n    let b;\n    let c;\n    let d;\n    let x;\n    let y;\n    let i;\n    let j;\n    let xDiff;\n    let yDiff;\n    let chnl;\n    let color;\n    let offset = 0;\n    let origPix;\n    const ratioX = this.rcpScaleX;\n    const ratioY = this.rcpScaleY;\n    const w4 = 4 * (oW - 1);\n    const img = options.imageData;\n    const pixels = img.data;\n    const destImage = options.ctx.createImageData(dW, dH);\n    const destPixels = destImage.data;\n    for (i = 0; i < dH; i++) {\n      for (j = 0; j < dW; j++) {\n        x = Math.floor(ratioX * j);\n        y = Math.floor(ratioY * i);\n        xDiff = ratioX * j - x;\n        yDiff = ratioY * i - y;\n        origPix = 4 * (y * oW + x);\n\n        for (chnl = 0; chnl < 4; chnl++) {\n          a = pixels[origPix + chnl];\n          b = pixels[origPix + 4 + chnl];\n          c = pixels[origPix + w4 + chnl];\n          d = pixels[origPix + w4 + 4 + chnl];\n          color =\n            a * (1 - xDiff) * (1 - yDiff) +\n            b * xDiff * (1 - yDiff) +\n            c * yDiff * (1 - xDiff) +\n            d * xDiff * yDiff;\n          destPixels[offset++] = color;\n        }\n      }\n    }\n    return destImage;\n  }\n\n  /**\n   * hermiteFastResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  hermiteFastResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const ratioW = this.rcpScaleX,\n      ratioH = this.rcpScaleY,\n      ratioWHalf = Math.ceil(ratioW / 2),\n      ratioHHalf = Math.ceil(ratioH / 2),\n      img = options.imageData,\n      data = img.data,\n      img2 = options.ctx.createImageData(dW, dH),\n      data2 = img2.data;\n    for (let j = 0; j < dH; j++) {\n      for (let i = 0; i < dW; i++) {\n        const x2 = (i + j * dW) * 4;\n        let weight = 0;\n        let weights = 0;\n        let weightsAlpha = 0;\n        let gxR = 0;\n        let gxG = 0;\n        let gxB = 0;\n        let gxA = 0;\n        const centerY = (j + 0.5) * ratioH;\n        for (let yy = Math.floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n          const dy = Math.abs(centerY - (yy + 0.5)) / ratioHHalf,\n            centerX = (i + 0.5) * ratioW,\n            w0 = dy * dy;\n          for (let xx = Math.floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n            let dx = Math.abs(centerX - (xx + 0.5)) / ratioWHalf;\n            const w = Math.sqrt(w0 + dx * dx);\n            /* eslint-disable max-depth */\n            if (w > 1 && w < -1) {\n              continue;\n            }\n            //hermite filter\n            weight = 2 * w * w * w - 3 * w * w + 1;\n            if (weight > 0) {\n              dx = 4 * (xx + yy * oW);\n              //alpha\n              gxA += weight * data[dx + 3];\n              weightsAlpha += weight;\n              //colors\n              if (data[dx + 3] < 255) {\n                weight = (weight * data[dx + 3]) / 250;\n              }\n              gxR += weight * data[dx];\n              gxG += weight * data[dx + 1];\n              gxB += weight * data[dx + 2];\n              weights += weight;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n        data2[x2] = gxR / weights;\n        data2[x2 + 1] = gxG / weights;\n        data2[x2 + 2] = gxB / weights;\n        data2[x2 + 3] = gxA / weightsAlpha;\n      }\n    }\n    return img2;\n  }\n}\n\nclassRegistry.setClass(Resize);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\nexport type SaturationOwnProps = {\n  saturation: number;\n};\n\nexport const saturationDefaultValues: SaturationOwnProps = {\n  saturation: 0,\n};\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Saturation extends BaseFilter<'Saturation', SaturationOwnProps> {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: SaturationOwnProps['saturation'];\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  static uniformLocations = ['uSaturation'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      data[i] += max !== r ? (max - r) * adjust : 0;\n      data[i + 1] += max !== g ? (max - g) * adjust : 0;\n      data[i + 2] += max !== b ? (max - b) * adjust : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n\n  isNeutralState() {\n    return this.saturation === 0;\n  }\n}\n\nclassRegistry.setClass(Saturation);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uSaturation;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float rgMax = max(color.r, color.g);\n    float rgbMax = max(rgMax, color.b);\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/vibrance';\n\nexport type VibranceOwnProps = {\n  vibrance: number;\n};\n\nexport const vibranceDefaultValues: VibranceOwnProps = {\n  vibrance: 0,\n};\n\n/**\n * Vibrance filter class\n * @example\n * const filter = new Vibrance({\n *   vibrance: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Vibrance extends BaseFilter<'Vibrance', VibranceOwnProps> {\n  /**\n   * Vibrance value, from -1 to 1.\n   * Increases/decreases the saturation of more muted colors with less effect on saturated colors.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} vibrance\n   * @default\n   */\n  declare vibrance: VibranceOwnProps['vibrance'];\n\n  static type = 'Vibrance';\n\n  static defaults = vibranceDefaultValues;\n\n  static uniformLocations = ['uVibrance'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.vibrance;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      const avg = (r + g + b) / 3;\n      const amt = ((Math.abs(max - avg) * 2) / 255) * adjust;\n      data[i] += max !== r ? (max - r) * amt : 0;\n      data[i + 1] += max !== g ? (max - g) * amt : 0;\n      data[i + 2] += max !== b ? (max - b) * amt : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {TWebGLUniformLocationMap} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);\n  }\n\n  isNeutralState() {\n    return this.vibrance === 0;\n  }\n}\n\nclassRegistry.setClass(Vibrance);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uVibrance;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float max = max(color.r, max(color.g, color.b));\n    float avg = (color.r + color.g + color.b) / 3.0;\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\n    gl_FragColor = color;\n  }\n`;\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Circle } from '../shapes/Circle';\nimport { Group } from '../shapes/Group';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { CircleBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\nexport class CircleBrush extends BaseBrush {\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  declare points: CircleBrushPoint[];\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.points = [];\n  }\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Point} pointer\n   */\n  drawDot(pointer: Point) {\n    const point = this.addPoint(pointer),\n      ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    this.dot(ctx, point);\n    ctx.restore();\n  }\n\n  dot(ctx: CanvasRenderingContext2D, point: CircleBrushPoint) {\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown(pointer: Point) {\n    this.points = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  }\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render() {\n    const ctx = this.canvas.contextTop,\n      points = this.points;\n    this._saveAndTransform(ctx);\n    for (let i = 0; i < points.length; i++) {\n      this.dot(ctx, points[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this.needsFullRender()) {\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.addPoint(pointer);\n      this._render();\n    } else {\n      this.drawDot(pointer);\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const circles: Circle[] = [];\n\n    for (let i = 0; i < this.points.length; i++) {\n      const point = this.points[i],\n        circle = new Circle({\n          radius: point.radius,\n          left: point.x,\n          top: point.y,\n          originX: CENTER,\n          originY: CENTER,\n          fill: point.fill,\n        });\n\n      this.shadow && (circle.shadow = new Shadow(this.shadow));\n\n      circles.push(circle);\n    }\n    const group = new Group(circles, { canvas: this.canvas });\n\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  /**\n   * @param {Object} pointer\n   * @return {Point} Just added pointer point\n   */\n  addPoint({ x, y }: Point) {\n    const pointerPoint: CircleBrushPoint = {\n      x,\n      y,\n      radius: getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2,\n      fill: new Color(this.color).setAlpha(getRandomInt(0, 100) / 100).toRgba(),\n    };\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n}\n","import { Pattern } from '../Pattern';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { Canvas } from '../canvas/Canvas';\nimport { PencilBrush } from './PencilBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\nexport class PatternBrush extends PencilBrush {\n  declare source?: CanvasImageSource;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n  }\n\n  getPatternSrc() {\n    const dotWidth = 20,\n      dotDistance = 5,\n      patternCanvas = createCanvasElement(),\n      patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n    if (patternCtx) {\n      patternCtx.fillStyle = this.color;\n      patternCtx.beginPath();\n      patternCtx.arc(\n        dotWidth / 2,\n        dotWidth / 2,\n        dotWidth / 2,\n        0,\n        Math.PI * 2,\n        false,\n      );\n      patternCtx.closePath();\n      patternCtx.fill();\n    }\n    return patternCanvas;\n  }\n\n  /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  getPattern(ctx: CanvasRenderingContext2D) {\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  }\n\n  /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    super._setBrushStyles(ctx);\n    const pattern = this.getPattern(ctx);\n    pattern && (ctx.strokeStyle = pattern);\n  }\n\n  /**\n   * Creates path\n   */\n  createPath(pathData: TSimplePathData) {\n    const path = super.createPath(pathData),\n      topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new Pattern({\n      source: this.source || this.getPatternSrc(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y,\n    });\n    return path;\n  }\n}\n","import type { Point } from '../Point';\nimport { Group } from '../shapes/Group';\nimport { Shadow } from '../Shadow';\nimport { Rect } from '../shapes/Rect';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { SprayBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\n/**\n *\n * @param rects\n * @returns\n */\nfunction getUniqueRects(rects: Rect[]) {\n  const uniqueRects: Record<string, boolean> = {};\n  const uniqueRectsArray: Rect[] = [];\n\n  for (let i = 0, key: string; i < rects.length; i++) {\n    key = `${rects[i].left}${rects[i].top}`;\n    if (!uniqueRects[key]) {\n      uniqueRects[key] = true;\n      uniqueRectsArray.push(rects[i]);\n    }\n  }\n\n  return uniqueRectsArray;\n}\n\nexport class SprayBrush extends BaseBrush {\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density = 20;\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth = 1;\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance = 1;\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity = false;\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping = true;\n\n  declare private sprayChunks: SprayBrushPoint[][];\n\n  declare private sprayChunk: SprayBrushPoint[];\n\n  /**\n   * Constructor\n   * @param {Canvas} canvas\n   * @return {SprayBrush} Instance of a spray brush\n   */\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.sprayChunks = [];\n    this.sprayChunk = [];\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point) {\n    this.sprayChunks = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const rects: Rect[] = [];\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      const sprayChunk = this.sprayChunks[i];\n      for (let j = 0; j < sprayChunk.length; j++) {\n        const chunck = sprayChunk[j];\n        const rect = new Rect({\n          width: chunck.width,\n          height: chunck.width,\n          left: chunck.x + 1,\n          top: chunck.y + 1,\n          originX: CENTER,\n          originY: CENTER,\n          fill: this.color,\n        });\n        rects.push(rect);\n      }\n    }\n\n    const group = new Group(\n      this.optimizeOverlapping ? getUniqueRects(rects) : rects,\n      {\n        objectCaching: true,\n        subTargetCheck: false,\n        interactive: false,\n      },\n    );\n    this.shadow && group.set('shadow', new Shadow(this.shadow));\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  renderChunck(sprayChunck: SprayBrushPoint[]) {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < sprayChunck.length; i++) {\n      const point = sprayChunck[i];\n      ctx.globalAlpha = point.opacity;\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Render all spray chunks\n   */\n  _render() {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      this.renderChunck(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @param {Point} pointer\n   */\n  addSprayChunk(pointer: Point) {\n    this.sprayChunk = [];\n    const radius = this.width / 2;\n\n    for (let i = 0; i < this.density; i++) {\n      this.sprayChunk.push({\n        x: getRandomInt(pointer.x - radius, pointer.x + radius),\n        y: getRandomInt(pointer.y - radius, pointer.y + radius),\n        width: this.dotWidthVariance\n          ? getRandomInt(\n              // bottom clamp width to 1\n              Math.max(1, this.dotWidth - this.dotWidthVariance),\n              this.dotWidth + this.dotWidthVariance,\n            )\n          : this.dotWidth,\n        opacity: this.randomOpacity ? getRandomInt(0, 100) / 100 : 1,\n      });\n    }\n\n    this.sprayChunks.push(this.sprayChunk);\n  }\n}\n","import { getFabricWindow } from '../env';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { parseSVGDocument } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\n\n/**\n * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n * @memberOf fabric\n * @param {String} string representing the svg\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromString(\n  string: string,\n  reviver?: TSvgReviverCallback,\n  options?: LoadImageOptions,\n): Promise<SVGParsingOutput> {\n  const parser = new (getFabricWindow().DOMParser)(),\n    // should we use `image/svg+xml` here?\n    doc = parser.parseFromString(string.trim(), 'text/xml');\n  return parseSVGDocument(doc, reviver, options);\n}\n","import { request } from '../util/internals/dom_request';\nimport { parseSVGDocument, createEmptyResponse } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\n\n/**\n * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n * @memberOf fabric\n * @param {string} url where the SVG is\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromURL(\n  url: string,\n  reviver?: TSvgReviverCallback,\n  options: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  // need to handle error properly\n  return new Promise<Document>((resolve, reject) => {\n    const onComplete = (r: XMLHttpRequest) => {\n      const xml = r.responseXML;\n      if (xml) {\n        resolve(xml);\n      }\n      reject();\n    };\n\n    request(url.replace(/^\\n\\s*/, '').trim(), {\n      onComplete,\n      signal: options.signal,\n    });\n  })\n    .then((parsedDoc) => parseSVGDocument(parsedDoc, reviver, options))\n    .catch(() => {\n      // this is an unhappy path, we dont care about speed\n      return createEmptyResponse();\n    });\n}\n"],"names":["BaseConfiguration","constructor","_defineProperty","this","window","devicePixelRatio","config","super","configure","arguments","length","undefined","Object","assign","addFonts","paths","fontPaths","removeFonts","forEach","fontFamily","clearFonts","restoreDefaults","keys","defaults","reduce","acc","key","log","severity","_len","optionalParams","Array","_key","console","FabricError","Error","message","options","SignalAbortedError","context","GLProbe","WebGLProbe","testPrecision","gl","precision","fragmentSource","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","queryWebGL","canvas","getContext","maxTextureSize","getParameter","MAX_TEXTURE_SIZE","GLPrecision","find","getExtension","loseContext","isSupported","textureSize","copyPasteData","env","getEnv","document","isTouchSupported","navigator","maxTouchPoints","dispose","getFabricDocument","getFabricWindow","getDevicePixelRatio","_config$devicePixelRa","Math","max","cache","getFontCache","_ref","fontStyle","fontWeight","toLowerCase","charWidthsCache","fontCache","cacheKey","clearFontCache","limitDimsByArea","ar","perfLimitSizeTotal","roughWidth","sqrt","floor","VERSION","noop","halfPI","PI","quarterPI","twoMathPi","PiBy180","iMatrix","freeze","DEFAULT_SVG_FONT_SIZE","kRect","CENTER","LEFT","TOP","BOTTOM","RIGHT","NONE","reNewline","MOVING","SCALING","ROTATING","ROTATE","SKEWING","RESIZING","MODIFY_POLY","MODIFY_PATH","CHANGED","SCALE","SCALE_X","SCALE_Y","SKEW_X","SKEW_Y","FILL","STROKE","MODIFIED","JSON","SVG","classRegistry","Map","has","classType","getClass","get","setClass","classConstructor","set","type","getSVGClass","SVGTagName","setSVGClass","runningAnimations","remove","index","indexOf","splice","cancelAll","animations","animation","abort","cancelByCanvas","filter","_animation$target","target","cancelByTarget","Observable","on","arg0","handler","__eventListeners","entries","eventName","off","push","once","disposers","_ref2","d","disposer","args","call","_removeEventListener","eventListener","_ref3","fire","_this$__eventListener","listenersForEvent","concat","i","removeFromArray","array","value","idx","cos","angle","abs","sin","angleSlice","sign","Point","y","x","add","that","addEquals","scalarAdd","scalar","scalarAddEquals","subtract","subtractEquals","scalarSubtract","scalarSubtractEquals","multiply","scalarMultiply","scalarMultiplyEquals","divide","scalarDivide","scalarDivideEquals","eq","lt","lte","gt","gte","lerp","t","min","distanceFrom","dx","dy","radiansFrom","atan2","midPointFrom","toString","setXY","setX","setY","setFromPoint","swap","clone","rotate","radians","origin","ZERO","sinus","cosinus","p","transform","ignoreOffset","isCollection","fabricObject","isArray","_objects","createCollectionMixin","Base","Collection","_onObjectAdded","object","_onObjectRemoved","_onStackOrderChanged","objects","size","insertAt","_len2","_key2","removed","_len3","_key3","forEachObject","callback","getObjects","_len4","types","_key4","o","isType","item","isEmpty","contains","deep","includes","some","obj","complexity","memo","current","sendObjectToBack","unshift","bringObjectToFront","sendObjectBackwards","intersecting","newIdx","findNewLowerIndex","bringObjectForward","findNewUpperIndex","moveObjectTo","isOverlapping","collectObjects","left","top","width","height","includeIntersecting","tl","br","selectable","visible","intersectsWithRect","isContainedWithinRect","containsPoint","CommonMethods","_setOptions","prop","_setObject","_set","toggle","property","requestAnimFrame","requestAnimationFrame","cancelAnimFrame","handle","cancelAnimationFrame","id","uid","createCanvasElement","element","createElement","createImage","createCanvasElementFor","newCanvas","toDataURL","canvasEl","format","quality","toBlob","Promise","resolve","_","degreesToRadians","degrees","radiansToDegrees","isIdentityMatrix","mat","every","transformPoint","invertTransform","a","r","multiplyTransformMatrices","b","is2x2","multiplyTransformMatrixArray","matrices","reduceRight","product","curr","calcPlaneRotation","qrDecompose","denom","pow","scaleX","scaleY","skewX","skewY","translateX","translateY","createTranslateMatrix","createRotateMatrix","angleRadiant","cosValue","sinValue","createScaleMatrix","angleToSkew","tan","createSkewXMatrix","skewValue","createSkewYMatrix","calcDimensionsMatrix","flipX","flipY","matrix","composeMatrix","scaleMatrix","loadImage","url","signal","crossOrigin","reject","aborted","img","err","src","addEventListener","done","onload","onerror","removeEventListener","enlivenObjects","reviver","instances","all","map","fromObject","then","fabricInstance","catch","error","instance","finally","enlivenObjectEnlivables","serializedObject","promises","values","enlived","pick","source","pickBy","predicate","toFixed","number","fractionDigits","parseFloat","Number","matrixToSVG","NUM_FRACTION_DIGITS","join","isFiller","filler","toLive","isSerializableFiller","toObject","isPattern","offsetX","isTextObject","_renderText","isPath","_renderPathCommands","isActiveSelection","getScrollLeftTop","doc","getDocumentFromElement","elementLoop","docElement","documentElement","body","scrollLeft","scrollTop","parentNode","host","nodeType","style","position","el","ownerDocument","getWindowFromElement","_el$ownerDocument","defaultView","setCanvasDimensions","ctx","retinaScaling","setAttribute","scale","setCSSDimensions","makeElementUnselectable","onselectstart","userSelect","StaticCanvasDOMManager","createLowerCanvas","lower","getElementById","hasAttribute","_originalCanvasStyle","cssText","classList","cleanupDOM","removeAttribute","setDimensions","calcOffset","_getWindowFromElement","offset","elemStyle","getComputedStyle","parseInt","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","box","docElem","getBoundingClientRect","scrollLeftTop","clientLeft","clientTop","getElementOffset","staticCanvasDefaults","backgroundVpt","backgroundColor","overlayVpt","overlayColor","includeDefaultValues","svgViewportTransformation","renderOnAddRemove","skipOffscreen","enableRetinaScaling","imageSmoothingEnabled","controlsAboveOverlay","allowTouchScrolling","viewportTransform","StaticCanvas","lowerCanvasEl","_this$elements$lower","elements","contextContainer","_this$elements$lower2","getDefaults","ownDefaults","initElements","_setDimensionsImpl","skipControlsDrawing","calcViewportBoundaries","requestRenderAll","setCoords","getRetinaScaling","_offset","getWidth","getHeight","dimensions","cssOnly","backstoreOnly","hasLostContext","getZoom","setViewportTransform","vpt","zoomToPoint","point","before","newPoint","after","setZoom","absolutePan","relativePan","getElement","clearContext","clearRect","clear","backgroundImage","overlayImage","renderAll","cancelRequestedRender","destroyed","renderCanvas","renderAndReset","nextRenderHandle","disposed","iVpt","vptCoords","tr","bl","drawControls","_ctx","v","path","clipPath","patternQuality","_renderBackground","save","_renderObjects","restore","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","__cleanupTask","globalCompositeOperation","zoomX","zoomY","drawImage","_cacheCanvas","cacheTranslationX","cacheTranslationY","len","render","_renderBackgroundOrOverlay","fill","needsVpt","isAFiller","beginPath","moveTo","lineTo","closePath","fillStyle","offsetY","m","gradientTransform","patternTransform","getCenterPoint","centerObjectH","_centerObject","centerObjectV","centerObject","viewportCenterObject","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","center","toDatalessJSON","propertiesToInclude","toDatalessObject","_toObjectMethod","toJSON","methodName","clipPathData","excludeFromExport","_toObject","version","__serializeBgOverlay","originalValue","data","bgImage","bgColor","background","overlay","toSVG","markup","_setSVGPreamble","_setSVGHeader","clipPathId","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","optViewBox","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","createSVGClipPathMarkup","toClipPathSVG","shouldTransform","additionalTransform","fontList","styles","styleRow","fontListMarkup","_setSVGObject","bgOrOverlay","repeat","finalWidth","finalHeight","loadFromJSON","json","serialized","parse","enlivedMap","properties","cloneWithoutData","multiplier","finalMultiplier","toCanvasElement","scaledWidth","scaledHeight","zoom","originalWidth","originalHeight","originalSkipControlsDrawing","newZoom","vp","newVp","originalRetina","objectsToRender","task","destroy","kill","touchEvents","getPointer","event","scroll","_evt","touchProp","changedTouches","getTouchInfo","clientX","clientY","isTouchEvent","pointerType","stopEvent","e","preventDefault","stopPropagation","makeBoundingBoxFromPoints","points","removeTransformFromObject","inverted","finalTransform","calcOwnMatrix","applyTransformToObject","addTransformToObject","otherOptions","setPositionByOrigin","resetObjectTransform","saveObjectTransform","sizeAfterTransform","dimX","dimY","bbox","calcPlaneChangeMatrix","from","sendPointToPlane","to","sendVectorToPlane","sendObjectToPlane","fireEvent","_target$canvas","originOffset","bottom","right","resolveOrigin","originValue","unitVectorX","zero","rotateVector","vector","createVector","magnitude","calcAngleBetweenVectors","crossProduct","dotProduct","calcVectorRotation","getUnitVector","getOrthonormalVector","counterClockwise","isBetweenVectors","AxB","AxT","BxT","NOT_ALLOWED_CURSOR","isTransformCentered","originX","originY","invertOrigin","isLocked","lockingKey","commonEventInfo","eventData","pointer","findCornerQuadrant","control","coord","round","getLocalPoint","corner","controls","padding","localPoint","getRelativeCenterPoint","translateToGivenOrigin","normalizePoint","dragHandler","newLeft","newTop","moveX","moveY","ColorNameMap","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hue2rgb","q","rgb2Hsl","g","maxValue","minValue","h","s","l","fromAlphaToFloat","endsWith","hexify","toUpperCase","padStart","greyAverage","avg","Color","color","setSource","_source","_tryParsingColor","sourceFromHex","sourceFromRgb","sourceFromHsl","isUnrecognised","getSource","toRgb","toRgba","toHsl","toHsla","toHex","toHexa","slice","getAlpha","setAlpha","alpha","toGrayscale","toBlackWhite","threshold","average","bOrW","overlayWith","otherColor","otherSource","R","G","B","fromRgb","fromRgba","match","parsedValue","fromHsl","fromHsla","parseAngletoDegrees","fromHex","expandedValue","split","hex","hexCouple","lowercase","numeric","parseUnit","fontSize","unit","exec","dpi","DPI","parsePreserveAspectRatioAttribute","attribute","firstPart","secondPart","trim","alignX","alignY","align","meetOrSlice","colorPropToSVG","colorValue","opacityValue","inlineStyle","opacity","FabricObjectSVGExportMixin","getSvgStyles","skipShadow","fillRule","strokeWidth","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","visibility","getSvgFilter","stroke","shadow","getSvgCommons","getSvgTransform","full","calcTransformMatrix","_toSVG","_reviver","_createBaseSVGMarkup","_createBaseClipPathSVGMarkup","objectMarkup","commonPieces","noStyle","withShadow","styleInfo","shadowInfo","vectorEffect","strokeUniform","absoluteClipPath","absolutePositioned","clipPathMarkup","addPaintOrder","paintFirst","getSvgRegex","arr","RegExp","TEXT_DECORATION_THICKNESS","fontProperties","textDecorationProperties","textLayoutProperties","additionalProps","styleProperties","textDefaultValues","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","underline","overline","linethrough","textAlign","lineHeight","textBackgroundColor","pathStartOffset","pathSide","pathAlign","charSpacing","deltaY","direction","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","superscript","baseline","subscript","_fontSizeFraction","offsets","_fontSizeMult","JUSTIFY","JUSTIFY_LEFT","JUSTIFY_RIGHT","JUSTIFY_CENTER","reNum","String","raw","viewportSeparator","svgNS","reFontDeclaration","attributesMap","cx","cy","display","fSize","cPath","svgValidTagNamesRegEx","svgViewBoxElementsRegEx","svgValidParentsRegEx","reViewBoxAttrValue","shadowOffsetRegex","reOffsetsAndBlur","Shadow","parseShadow","shadowStr","blur","replace","fBoxX","fBoxY","affectStroke","nonScaling","capValue","stateProperties","cacheProperties","fabricObjectDefaultValues","minScaleLimit","objectCaching","centeredRotation","centeredScaling","dirty","normalize","c","asin","elastic","defaultEasing","easeOutBounce","easeInBounce","easeInCirc","easeInCubic","easeInElastic","normA","normS","normP","easeInExpo","easeInOutBounce","easeInOutCirc","easeInOutCubic","easeInOutElastic","normC","easeInOutExpo","easeInOutQuad","easeInOutQuart","easeInOutQuint","easeInOutSine","easeInQuad","easeInQuart","easeInQuint","easeInSine","easeOutCirc","easeOutCubic","easeOutElastic","easeOutExpo","easeOutQuad","easeOutQuart","easeOutQuint","easeOutSine","defaultAbort","AnimationBase","startValue","byValue","duration","delay","easing","onStart","onChange","onComplete","tick","bind","_onStart","_onChange","_onComplete","_abort","endValue","calculate","state","_state","isDone","start","firstTick","timestamp","startTime","Date","register","setTimeout","durationMs","boundDurationMs","durationProgress","valueProgress","unregister","ValueAnimation","timeElapsed","ArrayAnimation","defaultColorEasing","wrapColorCallback","rgba","ColorAnimation","startColor","endColor","animate","isArrayAnimation","animateColor","Intersection","status","append","isPointContained","T","A","infinite","AB","isPointInPolygon","other","hits","inter","intersectSegmentSegment","intersectLineLine","a1","a2","b1","b2","aInfinite","bInfinite","a2xa1x","a2ya1y","b2xb1x","b2yb1y","a1xb1x","a1yb1y","uaT","ubT","uB","ua","ub","segmentsCoincide","intersectSegmentLine","s1","s2","l1","l2","intersectLinePolygon","result","intersectSegmentPolygon","intersectPolygonPolygon","points1","points2","coincidences","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","ObjectGeometry","getX","getXY","getY","getRelativeX","setRelativeX","getRelativeY","setRelativeY","relativePosition","getRelativeXY","group","setRelativeXY","isStrokeAccountedForInDimensions","getCoords","aCoords","calcACoords","coords","intersectsWithObject","intersection","isContainedWithinObject","getBoundingRect","isOnScreen","isPartiallyOnScreen","getScaledWidth","_getTransformedDimensions","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","getCanvasRetinaScaling","_this$canvas","getTotalAngle","getViewportTransform","_this$canvas2","rotateMatrix","tMatrix","finalMatrix","dim","w","transformMatrixKey","skipGroup","prefix","matrixCache","ownMatrixCache","_getNonTransformedDimensions","_calculateCurrentDimensions","dimOptions","preScalingStrokeValue","finalDimensions","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","translateToOriginPoint","relCenter","getPointByOrigin","pos","_getLeftTopCoords","FabricObject","name","setOptions","_createCacheCanvas","_cacheContext","_updateCacheCanvas","_limitCacheSize","dims","maxCacheSideLimit","minCacheSideLimit","limX","limY","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","neededX","neededY","ceil","dimensionsChanged","zoomChanged","setTransform","drawingWidth","drawingHeight","translate","needFullTransform","contextTop","getObjectScaling","retina","getObjectOpacity","_constrainScale","isChanged","parent","isNotVisible","_setupCompositeOperation","drawSelectionBackground","_setOpacity","_setShadow","drawCacheOnCanvas","_removeCacheCanvas","drawObject","isCacheDirty","parentClipPaths","hasStroke","hasFill","needsItsOwnCache","ownCaching","isOnACache","willDrawShadow","drawClipPathOnCache","canvasWithClipPath","originalFill","originalStroke","_setClippingProperties","_render","_drawClipPath","createClipPathLayer","prevClipPath","skipCanvas","fillRect","_removeShadow","globalAlpha","_setStrokeStyles","decl","_this$canvas$getZoom","lineWidth","lineCap","lineDashOffset","lineJoin","miterLimit","gradientUnits","_applyPatternForTransformedGradient","strokeStyle","_applyPatternGradientTransform","_setFillStyles","_setLineDash","dashArray","setLineDash","sx","sy","multX","multY","scaling","shadowColor","shadowBlur","browserShadowBlurConstant","shadowOffsetX","shadowOffsetY","_renderPaintInOrder","_renderStroke","_renderFill","_pCtx$createPattern","pCanvas","pCtx","createPattern","_findCenterFromElement","objectForm","cloneAsImage","origParams","originalGroup","originalShadow","canvasProvider","withoutTransform","withoutShadow","boundingRect","shadowOffset","originalCanvas","setOnGroup","animatable","_animate","propIsColor","colorProperties","animationOptions","isDescendantOf","getAncestors","ancestors","findCommonAncestors","fork","otherFork","common","otherAncestors","ancestor","j","hasCommonAncestors","commonAncestors","isInFrontOf","ancestorData","firstCommonAncestor","headOfFork","pop","headOfOtherFork","thisIndex","otherIndex","propertiesToSerialize","customProperties","toFixedBound","val","_removeDefaultValues","baseValues","getPrototypeOf","baseValue","_fromObject","serializedObjectOptions","extraParam","enlivedObjectOptions","wrapWithFireEvent","actionHandler","extraEventInfo","actionPerformed","wrapWithFixedAnchor","centerPoint","constraint","changeWidth","changeObjectWidth","strokePadding","oldWidth","newWidth","renderCircleControl","styleOverride","xSize","sizeX","cornerSize","ySize","sizeY","transparentCorners","cornerStrokeColor","myLeft","myTop","cornerColor","arc","renderSquareControl","xSizeBy2","ySizeBy2","strokeRect","Control","shouldActivate","controlKey","_fabricObject$canvas","getActiveObject","isControlVisible","getActionHandler","getMouseDownHandler","mouseDownHandler","getMouseUpHandler","mouseUpHandler","cursorStyleHandler","cursorStyle","getActionName","actionName","getVisibility","_fabricObject$_contro","_fabricObject$_contro2","_controlsVisibility","setVisibility","positionHandler","currentControl","calcCornerCoords","objectCornerSize","centerX","centerY","isTouch","touchSizeX","touchSizeY","cornerStyle","rotationStyleHandler","lockRotation","rotationWithSnapping","rotateObjectWithSnapping","ex","ey","theta","pivotPoint","lastAngle","curAngle","snapAngle","snapThreshold","rightAngleLocked","leftAngleLocked","hasRotated","scaleIsProportional","uniformIsToggled","lockSize","uniformScaling","scalingIsForbidden","by","scaleProportionally","lockX","lockY","scaleMap","scaleCursorStyleHandler","n","scaleObject","signX","signY","gestureScale","distance","original","oldScaleX","oldScaleY","scalingEqually","scaleObjectFromCorner","scalingX","scaleObjectX","scaleObjectByX","scalingY","scaleObjectY","scaleObjectByY","scaleOrSkewActionName","scaleSkewCursorStyleHandler","scalingXOrSkewingY","scalingYOrSkewingX","createObjectDefaultControls","ml","mr","mb","mt","mtr","withConnection","createResizeControls","createTextboxDefaultControls","InteractiveFabricObject","createControls","targetCanvas","noScaleCache","_currentTransform","action","startsWith","getActiveControl","__corner","oCoords","findControl","forTouch","hasControls","cornerEntries","touchCorner","calcOCoords","rMatrix","positionMatrix","startMatrix","transformOptions","forEachControl","_calcCornerCoords","touchCornerSize","fn","selectionBackgroundColor","_activeObject","wh","strokeBorders","_drawBorders","borderColor","borderDashArray","drawControlsConnectingLines","_renderControls","hasBorders","styleOptions","shouldDrawBorders","shouldDrawControls","borderScaleFactor","isMoving","borderOpacityWhenMoving","drawBorders","forActiveSelection","shouldStroke","cornerDashArray","setControlVisible","setControlsVisibility","clearContextTop","restoreManually","onDeselect","_options","onSelect","shouldStartDragging","_e","onDragStart","canDrop","renderDragSourceEffect","renderDropTargetEffect","setScaleX","setScaleY","applyMixins","derivedCtor","constructors","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","create","lockMovementX","lockMovementY","lockScalingX","lockScalingY","lockSkewingX","lockSkewingY","lockScalingFlip","evented","perPixelTargetFind","activeOn","hoverCursor","moveCursor","isTransparent","tolerance","getImageData","StrokeProjectionsBase","strokeProjectionMagnitude","strokeUniformScalar","createSideVector","projectOrthogonally","applySkew","calcOrthogonalProjection","isSkewed","scaleUnitVector","unitVector","zeroVector","StrokeLineJoinProjections","getOrthogonalRotationFactor","vector1","vector2","C","AC","bisector","orthogonalProjection","correctSide","projectBevel","projections","projectMiter","hypotUnitScalar","miterVector","projectRoundNoSkew","startCircle","endCircle","projectRoundWithSkew","shearing","circleRadius","newY","furthestY","newX","furthestX","projectRound","isStraightLine","newOrigin","proj0","proj1","comparisonVector","isProj0Start","projectPoints","project","originPoint","projectedPoint","StrokeLineCapProjections","projectButt","projection","projectSquare","strokePointingOut","projectedA","projectStrokeOnPoints","openPath","reduced","findIndexRight","cloneStyles","newObj","keyInner","segmenter","graphemeSplit","textstring","Intl","Segmenter","granularity","segments","segment","graphemeSplitImpl","graphemes","chr","getWholeChar","str","code","charCodeAt","isNaN","charAt","next","prev","string","firstLetterOnly","hasStyleChanged","prevStyle","thisStyle","forTextSpans","textDecorationThickness","stylesToArray","text","textLines","stylesArray","charIndex","chars","end","stylesFromArray","stylesObject","styleIndex","SHARED_ATTRIBUTES","selectorMatches","selector","nodeName","classNames","getAttribute","azAz","matcher","splitClassNames","elementMatchesRule","selectors","parentMatching","firstMatching","parentElement","doesSomeParentMatch","getGlobalStylesForElement","cssRules","rule","normalizeAttr","attr","_attributesMap","regex","transforms","transformList","reTransformList","reTransform","reTransformAll","parseTransformAttribute","attributeValue","cleanupSvgAttribute","test","matchAll","transformMatch","matchedParams","operation","rawArgs","arg1","arg2","arg3","arg4","arg5","arg","normalizeValue","parentAttributes","parsed","ouputValue","transformMatrix","fillIndex","strokeIndex","parseStyleString","oStyle","chunk","parseStyleAttribute","parseStyleObject","colorAttributesMap","parseAttributes","attributes","parentFontSize","ownAttributes","normalizedStyle","normalizedAttr","normalizedValue","font","parseFontDeclaration","mergedAttrs","colorAttr","setStrokeFillOpacity","RECT_PROPS","Rect","_initRxRy","rx","ry","isRounded","bezierCurveTo","fromElement","restOfparsedAttributes","ATTRIBUTE_NAMES","Boolean","LAYOUT_TYPE_INITIALIZATION","LAYOUT_TYPE_ADDED","LAYOUT_TYPE_REMOVED","LAYOUT_TYPE_IMPERATIVE","getObjectBounds","destinationGroup","currentGroup","objectCenter","accountForStroke","strokeUniformVector","scalingStrokeWidth","sizeVector","LayoutStrategy","calcLayoutResult","shouldPerformLayout","calcBoundingBox","prevStrategy","strategy","shouldLayoutClipPath","getInitialSize","overrides","bboxSize","bboxCenter","actualSize","relativeCorrection","FitContentLayout","LAYOUT_MANAGER","LayoutManager","_subscriptions","performLayout","strictContext","bubbles","_prevLayoutStrategy","onBeforeLayout","layoutResult","getLayoutResult","commitLayout","onAfterLayout","attachHandlers","trigger","subscribe","unsubscribe","_context","delete","unsubscribeTargets","targets","subscribeTargets","tricklingContext","layoutManager","prevCenter","nextCenter","correction","_context$x","_context$y","layoutObjects","layoutObject","bubblingContext","NoopLayoutManager","Group","groupInit","_options$layoutManage","__objectSelectionTracker","__objectSelectionMonitor","__objectSelectionDisposer","enterGroup","canEnterGroup","_filterObjectsBeforeEnteringGroup","allowedObjects","_onAfterObjectsChange","removeParentTransform","exitGroup","_shouldSetNestedCoords","subTargetCheck","removeAll","_activeObjects","selected","activeObjects","_watchObject","watch","_enterGroup","activeObject","_exitGroup","ownCache","preserveObjectStacking","triggerLayout","__serializeObjects","method","_includeDefaultValues","originalDefaults","_createSVGBgRect","fillStroke","commons","svgString","bg","abortable","hydratedOptions","layoutClass","strategyClass","interactive","findScaleToFit","destination","findScaleToCover","commaWsp","reArcCommandPoints","repeatedCommands","M","segmentToBezier","theta1","theta2","cosTh","sinTh","cx1","cy1","mT","fromX","fromY","costh1","sinth1","costh2","sinth2","toX","toY","calcVectorAngle","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","begx","begy","cp1x","cp1y","cp2x","cp2y","endx","endy","argsString","cachesBoundsOfCurve","boundsOfCurveCache","tvalues","bounds","b2ac","sqrtb2ac","t1","t2","jlen","iterator","getPointOnCubicBezierIterator","fromArcToBeziers","fx","fy","rot","large","sweep","tx","ty","segsNorm","arcToSegments","rotateX","root","sinTheta","px","py","rx2","ry2","py2","px2","pl","_rx","_ry","mTheta","dtheta","mDelta","th3","makePathSimpler","x1","y1","destinationPath","previous","controlX","controlY","parsedCommand","converted","calcLineLength","x2","y2","pct","c1","c2","CB2","c3","CB3","c4","CB4","QB1","QB2","QB3","getTangentCubicIterator","p1x","p1y","p2x","p2y","p3x","p3y","p4x","p4y","qb1","qb2","qb3","tangentX","tangentY","getPointOnQuadraticBezierIterator","getTangentQuadraticIterator","invT","pathIterator","tempP","tmpLen","perc","findPercentageForDistance","segInfo","nextLen","nextStep","lastPerc","angleFinder","getPathSegmentsInfo","tempInfo","totalLength","info","basicInfo","command","destX","destY","getPointOnPath","infos","segPercent","rePathCmdAll","regExpArcCommandPoints","reMyNum","commandLengths","parsePath","pathString","_pathString$match","chain","matchStr","commandLetter","commandLength","paramArr","lastIndex","out","newCommand","transformedCommand","getSmoothPathFromPoints","p1","p2","multSignX","multSignY","manyPoints","midPoint","joinPath","pathData","getRandomInt","random","request","xhr","removeListener","ontimeout","onreadystatechange","readyState","open","send","_assignTransformMatrixProps","removeTransformMatrixForSvgParsing","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","_newCanvas$getContext","getRegularPolygonPath","numVertexes","radius","interiorAngle","rotationAdjustment","rad","commonAttributes","groupSVGElements","mergeClipPaths","_b$group","transformPath","pathOffset","pathSegment","newSegment","setStyle","elementStyle","setProperty","CanvasDOMManager","containerClass","upperCanvasEl","createUpperCanvas","upper","applyCanvasStyle","container","createContainerElement","replaceChild","className","removeChild","SelectableCanvas","_this$elements$upper","_this$elements$upper2","wrapperEl","_objectsToRender","deselected","_discardActiveObject","_hoveredTarget","_hoveredTargets","_chooseObjectsToRender","contextTopDirty","_groupSelector","isDrawingMode","renderTopLayer","_isCurrentlyDrawing","freeDrawingBrush","selection","_drawSelection","renderTop","setTargetFindTolerance","targetFindTolerance","pixelFindCanvasEl","pixelFindContext","isTargetTransparent","selectionBgc","enhancedTolerance","_isSelectionKeyPressed","sKey","selectionKey","_shouldClearSelection","getActiveObjects","_shouldCenterTransform","modifierKeyPressed","centerTransform","_getOriginFromCorner","controlName","_setupCurrentTransform","alreadySelected","_control$getActionHan","getScenePoint","getActionFromCorner","altKey","centeredKey","lastX","lastY","shiftKey","setCursor","cursor","deltaX","extent","strokeOffset","selectionLineWidth","minX","minY","maxX","maxY","selectionColor","selectionBorderColor","selectionDashArray","findTarget","skipTargetFind","getViewportPoint","aObjects","searchPossibleTargets","subTargets","altSelectionKey","_pointIsInObjectSelectionArea","viewportZoom","angleRadians","cosP","sinP","cosPSinP","cosPMinusSinP","_checkTarget","isEditing","_searchPossibleTargets","subTarget","_viewportPoint","_getPointerImpl","_scenePoint","fromViewport","boundsWidth","boundsHeight","cssScale","_resetTransformEventData","_setBrushStyles","willReadFrequently","getTopContext","getSelectionContext","getSelectionElement","active","_fireSelectionEvents","oldObjects","somethingChanged","invalidate","added","setActiveObject","currentActives","_setActiveObject","prevActiveObject","endCurrentTransform","discardActiveObject","discarded","_finalizeCurrentTransform","_scaling","originalProperties","_realizeGroupTransformOnObject","originalValues","uniScaleKey","altActionKey","selectionFullyContained","defaultCursor","freeDrawingCursor","notAllowedCursor","stopContextMenu","fireRightClick","fireMiddleClick","enablePointerEvents","TextEditingManager","cb","hiddenTextarea","focus","__disposer","exitTextEditing","exitEditing","onMouseMove","_this$target","updateSelectionOnMouseMove","addEventOptions","passive","getEventPoints","viewportPoint","scenePoint","addListener","syntheticEventConfig","mouse","in","targetIn","targetOut","canvasIn","canvasOut","drag","Canvas","eventHandler","addOrRemove","_getEventPrefix","functor","_eventjsFunctor","canvasElement","eventTypePrefix","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onClick","_onDragStart","_onDragEnd","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","_onTouchStart","removeListeners","_onMouseUp","_onTouchEnd","clearTimeout","_willAddMouseDown","__onMouseWheel","shared","nestedTarget","_isClick","_dragSource","_onDragProgress","_renderDragEffects","dropTarget","_dropTarget","didDrop","dataTransfer","dropEffect","dragSource","_draggedoverTarget","findDragTargets","eventType","_fireEnterLeaveEvents","_basicEventHandler","clicks","detail","_cacheTransformEventData","_handleEvent","getPointerId","evt","identifier","pointerId","_isMainEvent","isPrimary","touches","mainTouchId","shouldPreventScrolling","currentActiveObject","__onMouseDown","_target","__onMouseUp","__onMouseMove","_shouldRender","_this$_activeObject","isClick","button","_onMouseUpInDrawingMode","shouldRender","targetWasActive","handleSelection","found","originalControl","originalMouseUpHandler","_setCursorFromEvent","extraData","currentTarget","currentSubTargets","_onMouseDownInDrawingMode","onMouseDown","_onMouseMoveInDrawingMode","onMouseUp","grouped","handleMultiSelection","groupSelector","_transformObject","_fireOverOutEvents","textEditingManager","fireSyntheticInOutEvents","oldTarget","fireCanvas","draggedoverTarget","targetChanged","outOpt","nextTarget","inOpt","previousTarget","localPointer","_performTransformAction","activeSelection","reverse","isAS","prevActiveObjects","multiSelectAdd","newActiveSelection","point1","point2","collectedObjects","klass","linearDefaultCoords","radialDefaultCoords","ifNaN","valueIfNaN","RE_PERCENT","isPercent","parsePercent","NaN","RE_KEY_VALUE_PAIRS","RE_KEY_VALUE","parseColorStop","opacityMultiplier","keyValuePairs","parseColorStops","opacityAttr","colorStops","colorStopEls","getElementsByTagName","parseType","parseGradientUnits","getValue","parseCoords","valuesToConvert","finalValue","propValue","convertPercentUnitsToValues","parseLinearCoords","parseRadialCoords","Gradient","addColorStop","colorStop","preTransform","sort","needsSwap","minRadius","percentageShift","gradient","createLinearGradient","createRadialGradient","svgOptions","viewBoxWidth","viewBoxHeight","Pattern","isImageSource","isCanvasSource","sourceToString","complete","naturalWidth","naturalHeight","patternSource","patternOffsetX","patternOffsetY","BaseBrush","_saveAndTransform","needsFullRender","_resetShadow","_isOutSideCanvas","Path","_setPath","adjustPosition","setBoundingBox","_calcBoundsFromPath","quadraticCurveTo","pathCmd","sourcePath","_getOffsetTransform","digits","_calcDimensions","subpathStartX","subpathStartY","parsedAttributes","PencilBrush","_points","_hasStraightLine","drawSegment","drawStraightLine","straightLineKey","_prepareForDrawing","_addPoint","limitedToCanvasSize","oldEnd","_finalizeAndAddPath","_reset","convertPointsToSVGPath","createPath","decimatePoints","cDistance","lastPoint","adjustedDistance","newPoints","decimate","isEmptySVGPath","CIRCLE_PROPS","Circle","setRadius","startAngle","endAngle","getRadiusX","getRadiusY","startX","startY","endX","endY","otherParsedAttributes","coordProps","Line","_setWidthHeight","calcLinePoints","origStrokeStyle","_this$stroke","_x1","_x2","_y1","_y2","xMult","yMult","Triangle","widthBy2","heightBy2","ELLIPSE_PROPS","Ellipse","getRx","getRy","polylineDefaultValues","exactBoundingBox","Polyline","initialized","isOpen","_projectStrokeOnPoints","strokeDiff","bboxNoStroke","layoutProperties","_options$width","_options$height","_options$width2","_options$height2","changed","output","diffX","diffY","pointsSplit","parsedPoints","parsePointsAttribute","Polygon","StyledText","isEmptyStyles","lineIndex","line","p3","styleHas","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","styleObject","_textLines","removeStyle","lineNum","charNum","_extendStyles","get2DCursorLocation","_getLineStyle","_setLineStyle","newStyle","_getStyleDeclaration","_setStyleDeclaration","getSelectionStyles","startIndex","endIndex","getStyleAtPosition","getCompleteStyleDeclaration","setSelectionStyles","_forceClearCache","_lineStyle$charIndex","lineStyle","_styleProperties","_deleteStyleDeclaration","_deleteLineStyle","createSVGInlineRect","svgColor","createSVGRect","measuringContext","getMeasuringContext","FabricText","setPathInfo","initDimensions","segmentsInfo","_splitText","newLines","_splitTextIntoLines","lines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","calcTextHeight","enlargeSpaces","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","charBound","spaces","isEndOfWrapping","getLineWidth","__charBounds","kernedWidth","missingNewlineOffset","_lineIndex","selectionStart","skipWrapping","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","leftOffset","_getLeftOffset","lineTopOffset","_getTopOffset","heightOfLine","getHeightOfLine","lineLeftOffset","_getLineLeftOffset","drawStart","currentColor","boxWidth","boxStart","lastColor","getValueOfPropertyAt","charBox","renderLeft","_measureChar","_char","previousChar","prevCharStyle","fontDeclaration","couple","stylesAreEqual","fontMultiplier","coupleWidth","previousWidth","measureText","getHeightOfChar","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","prevGrapheme","graphemeInfo","llength","lineBounds","grapheme","_getGraphemeBox","positionInPath","totalPathLength","_setGraphemeOnPath","numOfSpaces","centerPosition","skipLeft","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isJustify","shortCut","isLtr","currentDirection","actualStyle","nextStyle","timeToRender","drawingLeft","charsToRender","_renderChar","_applyPatternGradientTransformText","handleFiller","fullDecl","shouldFill","fillOffsets","fillText","strokeOffsets","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","lineDiff","__lineWidths","_charStyle$property","topOffset","offsetAligner","lastDecoration","lastFill","lastTickness","currentDecoration","currentFill","currentTickness","currentSize","currentDy","finalTickness","parsedFontFamily","genericFonts","newLine","newText","needsDims","isAddingPath","textAnchor","textDecoration","restOfOptions","textContent","textHeightScaleFactor","scaledDiff","textHeight","offX","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","textBgRects","textSpans","getSvgTextDecoration","textTopOffset","textLeftOffset","lineOffset","_setSVGTextLineText","_createTextCharSpan","char","styleDecl","numFractionDigit","dySpan","angleAttr","wBy2","renderPoint","getPath","kerning","features","liga","toPathData","_setSVGTextLineBg","getSvgSpanStyles","useWhiteSpace","thickness","decoration","DraggableTextDelegate","dragEnterHandler","dragOverHandler","dragLeaveHandler","dragEndHandler","dropHandler","_dispose","isPointerOverSelection","newSelection","getSelectionStartFromPointer","selectionEnd","__mouseDownInPlace","isActive","__dragStartFired","setCursorByClick","initDelayedCursor","__isDraggingOver","getDragStartSelection","__dragStartSelection","setDragImage","_e$dataTransfer","flipFactor","boundaries","_getCursorBoundaries","diff","bgc","dragImage","border","__dragImageDisposer","appendChild","setData","stringify","effectAllowed","abortCursorAnimation","editable","defaultPrevented","dragStartSelection","targetCanDrop","ev","_e$dataTransfer2","insert","getData","trailing","selectionStartOffset","removeChars","trimEnd","insertChars","enterEditing","_updateTextarea","_e$dataTransfer3","reNonWord","ITextBehavior","initBehavior","_tick","_onTickComplete","_animateCursor","toValue","_currentCursorOpacity","renderCursorOrSelection","_currentTickState","cursorDuration","_this$_currentTickCom","_currentTickCompleteState","restart","cursorDelay","shouldClear","cursorAnimation","restartCursorIfNeeded","selectAll","_fireSelectionChanged","cmdAll","getSelectedText","findWordBoundaryLeft","startFrom","_reSpace","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditingImpl","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","activeElement","currentStart","currentEnd","__selectionStartOnMouseDown","editingBorderColor","fromStringToGraphemeSelection","smallerTextStart","graphemeStart","smallerTextEnd","fromGraphemeToStringSelection","cursorOffsetCache","inCompositionMode","updateTextareaPosition","updateFromTextArea","textarea","_calcTextareaPosition","desiredPosition","compositionStart","cursorLocation","charHeight","upperCanvas","upperCanvasWidth","upperCanvasHeight","clientWidth","clientHeight","_savedProps","_restoreEditingProps","exitEditingImpl","isTextChanged","_removeExtraneousStyles","removeStyleFromTo","lineStart","charStart","lineEnd","charEnd","styleObj","shiftLineStyles","numericChar","clonedStyles","numericLine","insertNewlineStyleObject","qty","copiedStyle","newLineStyles","originalLineLength","isEndOfLine","someStyleIsCarryingOver","currentCharStyle","numIndex","styleCarriedOver","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLength","setSelectionStartEndWithShift","_selectionDirection","ITextKeyBehavior","autocapitalize","autocorrect","autocomplete","spellcheck","wrap","hiddenTextareaContainer","keydown","keyup","input","copy","cut","paste","compositionstart","compositionupdate","compositionend","onKeyDown","keyMap","keysMapRtl","keysMap","keyCode","ctrlKeysMapDown","ctrlKey","metaKey","stopImmediatePropagation","onKeyUp","_copyDone","ctrlKeysMapUp","onInput","fromPaste","updateAndFire","nextText","charCount","nextCharCount","_selectionStart","_selectionEnd","removedText","removeFrom","removeTo","charDiff","textareaSelection","backDelete","copiedText","disableStyleCopyPaste","copiedTextStyle","onCompositionStart","onCompositionEnd","onCompositionUpdate","compositionEnd","_getWidthBeforeCursor","bound","widthBeforeCursor","getDownCursorOffset","isRight","selectionProp","_getSelectionForOffset","indexOnOtherLine","_getIndexOnLine","getUpCursorOffset","textBeforeCursor","charWidth","foundMatch","widthOfCharsOnLine","indexOnLine","leftEdge","rightEdge","offsetFromLeftEdge","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","newValue","_moveLeft","_moveRight","moveCursorLeftWithoutShift","change","moveCursorLeftWithShift","moveCursorRight","moveCursorRightWithShift","moveCursorRightWithoutShift","notALeftClick","ITextClickBehavior","_mouseDownHandler","doubleClickHandler","tripleClickHandler","draggableTextDelegate","didDrag","mouseOffset","charLength","widthAfter","MOVE_CURSOR_UP","MOVE_CURSOR_DOWN","MOVE_CURSOR_LEFT","MOVE_CURSOR_RIGHT","EXIT_EDITING","applyCanvasTransform","iTextDefaultValues","cursorColor","caching","IText","setSelectionStart","_updateAndFire","setSelectionEnd","findAncestorsWithClipPath","hasAncestorsWithClipping","drawingCanvas","drawingCtx","renderSelection","renderCursor","clippingCanvas","clippingCtx","clipPathAncestors","skipCaching","_getCursorBoundariesOffsets","__getCursorBoundariesOffsets","renderCursorAt","_renderCursor","getCursorRenderingData","_renderSelection","dragSelection","startLine","endLine","startChar","endChar","realLineHeight","boxEnd","drawHeight","extraTop","drawWidth","compositionColor","getCurrentCharFontSize","cp","_getCurrentCharIndex","getCurrentCharColor","cursorPosition","Textbox","dynamicMinWidth","_styleMap","_generateStyleMap","textInfo","realLineCount","realLineCharCount","splitByGrapheme","isWrapping","nextOffset","nextLineIndex","shouldLimit","mapNextLine","p2Number","_wrapText","desiredWidth","getGraphemeDataForRender","wrapped","wordsData","_wrapLine","infix","largestWordWidth","wordsOrGraphemes","wordSplit","word","graphemeArray","_measureWord","charOffset","_wordJoiners","reservedSpace","additionalSpace","infixWidth","lineJustStarted","wordWidth","getMinWidth","minWidth","linesToKeep","propNumber","ClipPathLayout","clipPathCenter","FixedLayout","ActiveSelectionLayoutManager","parents","Set","selectedObjects","ActiveSelection","multiSelectionStacking","findIndex","groups","childrenOverride","Canvas2dFilterBackend","applyFilters","filters","sourceElement","sourceWidth","sourceHeight","desynchronized","pipelineState","imageData","originalEl","originalImageData","filterBackend","applyTo","imageDataPostFilter","putImageData","WebGLFilterBackend","tileSize","Float32Array","setupGLContext","captureGPUInfo","createWebGLCanvas","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","destinationWidth","destinationHeight","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","aPosition","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","dWidth","dHeight","resizeCanvasIfNeeded","copyGLTo2D","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","textureImageSource","NEAREST","RGBA","UNSIGNED_BYTE","CLAMP_TO_EDGE","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texture","texParameteri","texImage2D","uniqueId","evictCachesForKey","glCanvas","sourceY","copyGLTo2DPutImageData","numBytes","u8","Uint8Array","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","imgData","ImageData","gpuInfo","renderer","vendor","ext","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","initFilterBackend","enableGLFiltering","getFilterBackend","IMAGE_PROPS","FabricImage","setElement","_element","removeTexture","_originalElement","resizeFilter","applyResizeFilters","backend","elementKey","OffscreenCanvas","getCrossOrigin","getOriginalSize","_stroke","filterObj","getSrc","hasCrop","imageMarkup","strokeSvg","imageRendering","imageSmoothing","getSvgSrc","origFill","filtered","srcFromAttribute","setSrc","minimumScale","minimumScaleTrigger","elementToFilter","_filteredEl","_filterScalingX","_filterScalingY","_lastScaleX","_lastScaleY","isNeutralState","imgElement","_needsResize","elementToDraw","elWidth","elHeight","sX","sY","sW","sH","maxDestW","maxDestH","_resetWidthHeight","pAR","preserveAspectRatio","pWidth","pHeight","rWidth","rHeight","f","rf","hydratedProps","fromURL","imageOptions","applyViewboxTransform","viewBoxAttr","widthAttr","heightAttr","missingViewBox","missingDimAttr","translateMatrix","widthDiff","heightDiff","parsedDim","pasedViewBox","createElementNS","firstChild","getTagName","node","tagName","svgInvalidAncestorsRegEx","getMultipleNodes","nodeNames","nodeList","nodeArray","getElementsByTagNameNS","gradientsAttrs","xlinkAttr","recursivelyParseGradientsXlink","_gradient$getAttribut","xLink","referencedGradient","children","referenceClone","cloneNode","tagArray","findTag","ElementsParser","clipPaths","regexUrl","gradientDefs","elList","getGradientDefs","allRules","styleContents","ruleObj","propertyValuePairs","pair","_rule","getCSSRules","createObject","resolveGradient","resolveClipPath","extractPropertyDefinition","storage","gradientDef","usingElement","exactOwner","clipPathElements","objTransformInv","clipPathTag","clipPathOwner","clipPathElement","enlivedClippath","clipRule","gTransform","isValidSvgTag","async","parseSVGDocument","createEmptyResponse","allElements","nodelist","skipAttributes","useElement","useAttributes","useAttrMap","xlink","href","referencedElement","clonedOriginal","originalAttributes","originalAttrMap","currentTrans","el3","setAttributeNS","childNodes","styleRecord","mergedStyles","entry","parseUseDirectives","descendants","hasInvalidAncestor","localClipPaths","elementParser","ACTION_NAME","createPolyPositionHandler","pointIndex","polyObject","polyActionHandler","poly","mouseLocalPosition","factoryPolyActionHandler","anchorPoint","anchorPointInParentPlane","createPolyActionHandler","AXIS_KEYS","counterAxis","skew","lockSkewing","flip","skewMap","skewHandler","axis","originKey","lockSkewingKey","skewKey","flipKey","counterOriginKey","counterFlipKey","counterOriginFactor","skewingSide","finalHandler","skewingBefore","skewingStart","shearingStart","skewing","atan","dimBefore","dimAfter","compensationFactor","skewObject","calcPathPointPosition","pathObject","commandIndex","pathPositionHandler","pathActionHandler","movePathPoint","anchorCommand","PathPointControl","controlFill","controlStroke","PathControlPointControl","connectToCommandIndex","connectToPointIndex","connectionDashArray","commandType","createControl","commandIndexPos","pointIndexPos","isControlPoint","controlPointStyle","pointStyle","previousCommandType","indexFromPrevCommand","skewCursorStyleHandler","skewHandlerX","skewHandlerY","isWebGLPipelineState","highPsourceCode","identityFragmentShader","BaseFilter","getFragmentSource","getVertexSource","createProgram","vertexSource","vertexShader","VERTEX_SHADER","program","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","attributeLocations","getAttributeLocations","getAttribLocation","locations","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","finish","_swapTextures","temp","applyToWebGL","applyTo2d","getCacheKey","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","_gl","_uniformLocations","createHelpLayer","helpLayer","defaultKeys","filterOptions","blendColorFragmentSource","screen","difference","lighten","darken","exclusion","tint","BlendColor","mode","tg","alpha1","oR","oG","oB","uniform4fv","uColor","mask","BlendImage","image","TEXTURE1","calculateMatrix","resources","blendImage","canvas1","blendData","uniform1i","uImage","uniformMatrix3fv","uTransformMatrix","enlivedImage","Blur","aspectRatio","horizontal","blurValue","getBlurValue","samples","bytesInRow","totalA","minIRow","maxIRow","percent","weight","sampledPixel","localAlpha","delta","chooseRightDelta","uniform2fv","uDelta","blurScale","Brightness","brightness","uBrightness","colorMatrixDefaultValues","colorsOnly","ColorMatrix","constants","uniformMatrix4fv","uColorMatrix","uConstants","createColorMatrixFilter","_Class","newClass","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","Composed","subFilters","enlivedFilters","Contrast","contrast","contrastF","uContrast","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","Convolute","opaque","weights","side","halfSide","sw","sh","createImageData","dst","alphaFac","dstOff","scx","scy","srcOff","wt","uniform1fv","uMatrix","GAMMA","Gamma","gamma","rInv","gInv","bInv","rgbValues","rgb","uniform3fv","uGamma","lightness","luminosity","Grayscale","uMode","hueRotationDefaultValues","rotation","HueRotation","cosine","sine","aThird","aThirdSqtSin","OneMinusCos","Invert","invert","uInvert","uAlpha","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","uBlocksize","RemoveColor","lowC","highC","uLow","uHigh","useAlpha","Resize","uTaps","taps","getFilterWindow","tempScale","lanczosLobes","filterWindow","generateShader","getTaps","lobeFunction","lanczosCreate","applyToForWebgl","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","oW","oH","newData","resizeType","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","mult","doneW","doneH","stepW","stepH","dX","dY","tmpCanvas","srcData","destImg","destData","lanczos","ratioX","ratioY","rcpRatioX","rcpRatioY","range2X","range2Y","cacheLanc","icenter","process","u","fX","fY","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","yy","w0","Saturation","adjust","saturation","uSaturation","Vibrance","vibrance","amt","uVibrance","drawDot","addPoint","dot","originalRenderOnAddRemove","circles","circle","pointerPoint","getPatternSrc","patternCanvas","patternCtx","dotWidth","getPattern","pattern","topLeft","sprayChunks","sprayChunk","addSprayChunk","renderChunck","rects","chunck","rect","optimizeOverlapping","uniqueRects","uniqueRectsArray","getUniqueRects","sprayChunck","density","dotWidthVariance","randomOpacity","isPutImageFaster","testContext","ArrayBuffer","testPipelineState","performance","now","drawImageTime","parseFromString","xml","responseXML","parsedDoc"],"mappings":"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"}