{"version":3,"file":"index.min.mjs","sources":["../src/config.ts","../src/util/internals/console.ts","../src/filters/GLProbes/GLProbe.ts","../src/filters/GLProbes/WebGLProbe.ts","../src/env/browser.ts","../src/env/index.ts","../src/cache.ts","../src/constants.ts","../src/ClassRegistry.ts","../src/util/animation/AnimationRegistry.ts","../src/Observable.ts","../src/util/internals/removeFromArray.ts","../src/util/misc/cos.ts","../src/util/misc/sin.ts","../src/Point.ts","../src/Collection.ts","../src/CommonMethods.ts","../src/util/animation/AnimationFrameProvider.ts","../src/util/internals/uid.ts","../src/util/misc/dom.ts","../src/util/misc/radiansDegreesConversion.ts","../src/util/misc/matrix.ts","../src/util/misc/objectEnlive.ts","../src/util/misc/pick.ts","../src/util/misc/toFixed.ts","../src/util/misc/svgExport.ts","../src/util/typeAssertions.ts","../src/util/dom_misc.ts","../src/canvas/DOMManagers/util.ts","../src/canvas/DOMManagers/StaticCanvasDOMManager.ts","../src/canvas/StaticCanvasOptions.ts","../src/canvas/StaticCanvas.ts","../src/util/dom_event.ts","../src/util/misc/boundingBoxFromPoints.ts","../src/util/misc/objectTransforms.ts","../src/util/misc/planeChange.ts","../src/controls/fireEvent.ts","../src/util/misc/resolveOrigin.ts","../src/util/misc/vectors.ts","../src/controls/util.ts","../src/controls/drag.ts","../src/color/color_map.ts","../src/color/util.ts","../src/color/Color.ts","../src/color/constants.ts","../src/util/misc/svgParsing.ts","../src/shapes/Object/FabricObjectSVGExportMixin.ts","../src/parser/getSvgRegex.ts","../src/shapes/Text/constants.ts","../src/parser/constants.ts","../src/Shadow.ts","../src/util/misc/capValue.ts","../src/shapes/Object/defaultValues.ts","../src/util/animation/easing.ts","../src/util/animation/AnimationBase.ts","../src/util/animation/ValueAnimation.ts","../src/util/animation/ArrayAnimation.ts","../src/util/animation/ColorAnimation.ts","../src/util/animation/animate.ts","../src/Intersection.ts","../src/shapes/Object/ObjectGeometry.ts","../src/shapes/Object/Object.ts","../src/controls/wrapWithFireEvent.ts","../src/controls/wrapWithFixedAnchor.ts","../src/controls/changeWidth.ts","../src/controls/controlRendering.ts","../src/controls/Control.ts","../src/controls/rotate.ts","../src/controls/scale.ts","../src/controls/scaleSkew.ts","../src/controls/commonControls.ts","../src/shapes/Object/InteractiveObject.ts","../src/util/applyMixins.ts","../src/shapes/Object/FabricObject.ts","../src/util/misc/isTransparent.ts","../src/util/misc/projectStroke/StrokeProjectionsBase.ts","../src/util/misc/projectStroke/StrokeLineJoinProjections.ts","../src/util/misc/projectStroke/StrokeLineCapProjections.ts","../src/util/misc/projectStroke/index.ts","../src/util/internals/findRight.ts","../src/util/internals/cloneStyles.ts","../src/util/lang_string.ts","../src/util/misc/textStyles.ts","../src/parser/attributes.ts","../src/parser/selectorMatches.ts","../src/parser/elementMatchesRule.ts","../src/parser/doesSomeParentMatch.ts","../src/parser/getGlobalStylesForElement.ts","../src/parser/normalizeAttr.ts","../src/util/internals/cleanupSvgAttribute.ts","../src/parser/parseTransformAttribute.ts","../src/parser/normalizeValue.ts","../src/parser/parseStyleString.ts","../src/parser/parseStyleAttribute.ts","../src/parser/parseStyleObject.ts","../src/parser/setStrokeFillOpacity.ts","../src/parser/parseAttributes.ts","../src/parser/parseFontDeclaration.ts","../src/shapes/Rect.ts","../src/LayoutManager/constants.ts","../src/LayoutManager/LayoutStrategies/utils.ts","../src/LayoutManager/LayoutStrategies/LayoutStrategy.ts","../src/LayoutManager/LayoutStrategies/FitContentLayout.ts","../src/LayoutManager/LayoutManager.ts","../src/shapes/Group.ts","../src/util/misc/groupSVGElements.ts","../src/util/misc/findScaleTo.ts","../src/util/path/regex.ts","../src/util/path/index.ts","../src/util/internals/getRandomInt.ts","../src/util/internals/dom_request.ts","../src/util/transform_matrix_removal.ts","../src/util/misc/mergeClipPaths.ts","../src/util/internals/dom_style.ts","../src/canvas/DOMManagers/CanvasDOMManager.ts","../src/canvas/SelectableCanvas.ts","../src/canvas/CanvasOptions.ts","../src/canvas/TextEditingManager.ts","../src/canvas/Canvas.ts","../src/gradient/constants.ts","../src/util/internals/ifNaN.ts","../src/parser/percent.ts","../src/gradient/parser/parseColorStops.ts","../src/gradient/parser/misc.ts","../src/gradient/parser/parseCoords.ts","../src/gradient/Gradient.ts","../src/Pattern/Pattern.ts","../src/brushes/BaseBrush.ts","../src/shapes/Path.ts","../src/brushes/PencilBrush.ts","../src/shapes/Circle.ts","../src/brushes/CircleBrush.ts","../src/brushes/SprayBrush.ts","../src/brushes/PatternBrush.ts","../src/shapes/Line.ts","../src/shapes/Triangle.ts","../src/shapes/Ellipse.ts","../src/shapes/Polyline.ts","../src/parser/parsePointsAttribute.ts","../src/shapes/Polygon.ts","../src/shapes/Text/StyledText.ts","../src/shapes/Text/TextSVGExportMixin.ts","../src/shapes/Text/Text.ts","../src/shapes/IText/DraggableTextDelegate.ts","../src/shapes/IText/ITextBehavior.ts","../src/shapes/IText/ITextKeyBehavior.ts","../src/shapes/IText/ITextClickBehavior.ts","../src/shapes/IText/constants.ts","../src/util/internals/applyCanvasTransform.ts","../src/shapes/IText/IText.ts","../src/shapes/Textbox.ts","../src/LayoutManager/LayoutStrategies/ClipPathLayout.ts","../src/LayoutManager/LayoutStrategies/FixedLayout.ts","../src/LayoutManager/ActiveSelectionLayoutManager.ts","../src/shapes/ActiveSelection.ts","../src/filters/Canvas2dFilterBackend.ts","../src/filters/WebGLFilterBackend.ts","../src/filters/FilterBackend.ts","../src/shapes/Image.ts","../src/parser/applyViewboxTransform.ts","../src/parser/getTagName.ts","../src/parser/hasInvalidAncestor.ts","../src/parser/getMultipleNodes.ts","../src/parser/recursivelyParseGradientsXlink.ts","../src/parser/getGradientDefs.ts","../src/parser/elements_parser.ts","../src/parser/getCSSRules.ts","../src/parser/parseSVGDocument.ts","../src/parser/parseUseDirectives.ts","../src/parser/loadSVGFromString.ts","../src/parser/loadSVGFromURL.ts","../src/controls/polyControl.ts","../src/controls/skew.ts","../src/controls/pathControl.ts","../src/filters/utils.ts","../src/filters/shaders/baseFilter.ts","../src/filters/BaseFilter.ts","../src/filters/shaders/blendColor.ts","../src/filters/BlendColor.ts","../src/filters/shaders/blendImage.ts","../src/filters/BlendImage.ts","../src/filters/Blur.ts","../src/filters/shaders/blur.ts","../src/filters/Brightness.ts","../src/filters/shaders/brightness.ts","../src/filters/shaders/colorMatrix.ts","../src/filters/ColorMatrix.ts","../src/filters/ColorMatrixFilters.ts","../src/filters/Composed.ts","../src/filters/Contrast.ts","../src/filters/shaders/constrast.ts","../src/filters/shaders/convolute.ts","../src/filters/Convolute.ts","../src/filters/shaders/gamma.ts","../src/filters/Gamma.ts","../src/filters/shaders/grayscale.ts","../src/filters/Grayscale.ts","../src/filters/HueRotation.ts","../src/filters/Invert.ts","../src/filters/shaders/invert.ts","../src/filters/Noise.ts","../src/filters/shaders/noise.ts","../src/filters/Pixelate.ts","../src/filters/shaders/pixelate.ts","../src/filters/RemoveColor.ts","../src/filters/shaders/removeColor.ts","../src/filters/Resize.ts","../src/filters/Saturation.ts","../src/filters/shaders/saturation.ts","../src/filters/Vibrance.ts","../src/filters/shaders/vibrance.ts"],"sourcesContent":["export type TConfiguration = Partial<BaseConfiguration>;\n\nclass BaseConfiguration {\n  /**\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n   * which is unitless and not rendered equally across browsers.\n   *\n   * Values that work quite well (as of October 2017) are:\n   * - Chrome: 1.5\n   * - Edge: 1.75\n   * - Firefox: 0.9\n   * - Safari: 0.95\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default 1\n   */\n  browserShadowBlurConstant = 1;\n\n  /**\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n   */\n  DPI = 96;\n\n  /**\n   * Device Pixel Ratio\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   */\n  devicePixelRatio =\n    typeof window !== 'undefined' ? window.devicePixelRatio : 1; // eslint-disable-line no-restricted-globals\n\n  /**\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  perfLimitSizeTotal = 2097152;\n\n  /**\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  maxCacheSideLimit = 4096;\n\n  /**\n   * Lowest pixel limit for cache canvases, set at 256PX\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  minCacheSideLimit = 256;\n\n  /**\n   * When 'true', style information is not retained when copy/pasting text, making\n   * pasted text use destination style.\n   * Defaults to 'false'.\n   * @type Boolean\n   * @default\n   * @deprecated\n   */\n  disableStyleCopyPaste = false;\n\n  /**\n   * Enable webgl for filtering picture is available\n   * A filtering backend will be initialized, this will both take memory and\n   * time since a default 2048x2048 canvas will be created for the gl context\n   * @since 2.0.0\n   * @type Boolean\n   * @default\n   */\n  enableGLFiltering = true;\n\n  /**\n   * if webgl is enabled and available, textureSize will determine the size\n   * of the canvas backend\n   *\n   * In order to support old hardware set to `2048` to avoid OOM\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  textureSize = 4096;\n\n  /**\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\n   * @type Boolean\n   * @default false\n   */\n  forceGLPutImageData = false;\n\n  /**\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n   * With the standard behaviour of fabric to translate all curves in absolute commands and by not subtracting the starting point from\n   * the curve is very hard to hit any cache.\n   * Enable only if you know why it could be useful.\n   * Candidate for removal/simplification\n   * @default false\n   */\n  cachesBoundsOfCurve = false;\n\n  /**\n   * Map of font files\n   * Map<fontFamily, pathToFile> of font files\n   */\n  fontPaths: Record</** fontFamily */ string, /** pathToFile */ string> = {};\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * Used in exporting methods (`toObject`, `toJSON`, `toSVG`)\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   */\n  NUM_FRACTION_DIGITS = 4;\n}\n\nexport class Configuration extends BaseConfiguration {\n  constructor(config?: TConfiguration) {\n    super();\n    this.configure(config);\n  }\n\n  configure(config: TConfiguration = {}) {\n    Object.assign(this, config);\n  }\n\n  /**\n   * Map<fontFamily, pathToFile> of font files\n   */\n  addFonts(\n    paths: Record</** fontFamily */ string, /** pathToFile */ string> = {},\n  ) {\n    this.fontPaths = {\n      ...this.fontPaths,\n      ...paths,\n    };\n  }\n\n  removeFonts(fontFamilys: string[] = []) {\n    fontFamilys.forEach((fontFamily) => {\n      delete this.fontPaths[fontFamily];\n    });\n  }\n\n  clearFonts() {\n    this.fontPaths = {};\n  }\n\n  restoreDefaults<T extends BaseConfiguration>(keys?: (keyof T)[]) {\n    const defaults = new BaseConfiguration() as T;\n    const config =\n      keys?.reduce((acc, key) => {\n        acc[key] = defaults[key];\n        return acc;\n      }, {} as T) || defaults;\n    this.configure(config);\n  }\n}\n\nexport const config = new Configuration();\n","export const log = (\n  severity: 'log' | 'warn' | 'error',\n  ...optionalParams: any[]\n) =>\n  // eslint-disable-next-line no-restricted-syntax\n  console[severity]('fabric', ...optionalParams);\n\nexport class FabricError extends Error {\n  constructor(message?: string, options?: ErrorOptions) {\n    super(`fabric: ${message}`, options);\n  }\n}\n\nexport class SignalAbortedError extends FabricError {\n  constructor(context: string) {\n    super(`${context} 'options.signal' is in 'aborted' state`);\n  }\n}\n","export type GLPrecision = 'lowp' | 'mediump' | 'highp';\n\nexport abstract class GLProbe {\n  declare GLPrecision: GLPrecision | undefined;\n  abstract queryWebGL(canvas: HTMLCanvasElement): void;\n  abstract isSupported(textureSize: number): boolean;\n}\n","import { log } from '../../util/internals/console';\nimport { GLProbe } from './GLProbe';\nimport type { GLPrecision } from './GLProbe';\n\n/**\n * Lazy initialize WebGL constants\n */\nexport class WebGLProbe extends GLProbe {\n  declare maxTextureSize?: number;\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {GLPrecision} Precision to test can be any of following\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  private testPrecision(\n    gl: WebGLRenderingContext,\n    precision: GLPrecision,\n  ): boolean {\n    const fragmentSource = `precision ${precision} float;\\nvoid main(){}`;\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fragmentShader) {\n      return false;\n    }\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    return !!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\n  }\n\n  /**\n   * query browser for WebGL\n   */\n  queryWebGL(canvas: HTMLCanvasElement) {\n    const gl = canvas.getContext('webgl');\n    if (gl) {\n      this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      this.GLPrecision = (['highp', 'mediump', 'lowp'] as const).find(\n        (precision) => this.testPrecision(gl, precision),\n      );\n      gl.getExtension('WEBGL_lose_context')!.loseContext();\n      log('log', `WebGL: max texture size ${this.maxTextureSize}`);\n    }\n  }\n\n  isSupported(textureSize: number) {\n    return !!this.maxTextureSize && this.maxTextureSize >= textureSize;\n  }\n}\n","/* eslint-disable no-restricted-globals */\nimport { WebGLProbe } from '../filters/GLProbes/WebGLProbe';\nimport type { TCopyPasteData, TFabricEnv } from './types';\n\nconst copyPasteData: TCopyPasteData = {};\n\nexport const getEnv = (): TFabricEnv => {\n  return {\n    document,\n    window,\n    isTouchSupported:\n      'ontouchstart' in window ||\n      'ontouchstart' in document ||\n      (window && window.navigator && window.navigator.maxTouchPoints > 0),\n    WebGLProbe: new WebGLProbe(),\n    dispose() {\n      // noop\n    },\n    copyPasteData,\n  };\n};\n","/**\n * This file is consumed by fabric.\n * The `./node` and `./browser` files define the env variable that is used by this module.\n * The `./browser` module is defined to be the default env and doesn't set the env at all.\n * This is done in order to support isomorphic usage for browser and node applications\n * since window and document aren't defined at time of import in SSR, we can't set env so we avoid it by deferring to the default env.\n */\n\nimport { config } from '../config';\nimport { getEnv as getBrowserEnv } from './browser';\nimport type { TFabricEnv } from './types';\nimport type { DOMWindow } from 'jsdom';\n\nlet env: TFabricEnv;\n\n/**\n * Sets the environment variables used by fabric.\\\n * This is exposed for special cases, such as configuring a test environment, and should be used with care.\n *\n * **CAUTION**: Must be called before using the package.\n *\n * @example\n * <caption>Passing `window` and `document` objects to fabric (in case they are mocked or something)</caption>\n * import { getEnv, setEnv } from 'fabric';\n * // we want fabric to use the `window` and `document` objects exposed by the environment we are running in.\n * setEnv({ ...getEnv(), window, document });\n * // done with setup, using fabric is now safe\n */\nexport const setEnv = (value: TFabricEnv) => {\n  env = value;\n};\n\n/**\n * In order to support SSR we **MUST** access the browser env only after the window has loaded\n */\nexport const getEnv = () => env || (env = getBrowserEnv());\n\nexport const getFabricDocument = (): Document => getEnv().document;\n\nexport const getFabricWindow = (): (Window & typeof globalThis) | DOMWindow =>\n  getEnv().window;\n\n/**\n * @returns the config value if defined, fallbacks to the environment value\n */\nexport const getDevicePixelRatio = () =>\n  Math.max(config.devicePixelRatio ?? getFabricWindow().devicePixelRatio, 1);\n","import { config } from './config';\nimport type { TRectBounds } from './typedefs';\n\nexport class Cache {\n  /**\n   * Cache of widths of chars in text rendering.\n   */\n  charWidthsCache: Record<\n    /** fontFamily */ string,\n    Record<\n      /** fontStyleCacheKey */ string,\n      Record</** char */ string, /** width */ number>\n    >\n  > = {};\n\n  /**\n   * @return {Object} reference to cache\n   */\n  getFontCache({\n    fontFamily,\n    fontStyle,\n    fontWeight,\n  }: {\n    fontFamily: string;\n    fontStyle: string;\n    fontWeight: string | number;\n  }) {\n    fontFamily = fontFamily.toLowerCase();\n    if (!this.charWidthsCache[fontFamily]) {\n      this.charWidthsCache[fontFamily] = {};\n    }\n    const fontCache = this.charWidthsCache[fontFamily];\n    const cacheKey = `${fontStyle.toLowerCase()}_${(\n      fontWeight + ''\n    ).toLowerCase()}`;\n    if (!fontCache[cacheKey]) {\n      fontCache[cacheKey] = {};\n    }\n    return fontCache[cacheKey];\n  }\n\n  /**\n   * Clear char widths cache for the given font family or all the cache if no\n   * fontFamily is specified.\n   * Use it if you know you are loading fonts in a lazy way and you are not waiting\n   * for custom fonts to load properly when adding text objects to the canvas.\n   * If a text object is added when its own font is not loaded yet, you will get wrong\n   * measurement and so wrong bounding boxes.\n   * After the font cache is cleared, either change the textObject text content or call\n   * initDimensions() to trigger a recalculation\n   * @param {String} [fontFamily] font family to clear\n   */\n  clearFontCache(fontFamily?: string) {\n    fontFamily = (fontFamily || '').toLowerCase();\n    if (!fontFamily) {\n      this.charWidthsCache = {};\n    } else if (this.charWidthsCache[fontFamily]) {\n      delete this.charWidthsCache[fontFamily];\n    }\n  }\n\n  /**\n   * Given current aspect ratio, determines the max width and height that can\n   * respect the total allowed area for the cache.\n   * @param {number} ar aspect ratio\n   * @return {number[]} Limited dimensions X and Y\n   */\n  limitDimsByArea(ar: number) {\n    const { perfLimitSizeTotal } = config;\n    const roughWidth = Math.sqrt(perfLimitSizeTotal * ar);\n    // we are not returning a point on purpose, to avoid circular dependencies\n    // this is an internal utility\n    return [\n      Math.floor(roughWidth),\n      Math.floor(perfLimitSizeTotal / roughWidth),\n    ];\n  }\n\n  /**\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n   * you do not get any speed benefit and you get a big object in memory.\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n   * can eventually clear it.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  boundsOfCurveCache: Record<string, TRectBounds> = {};\n}\n\nexport const cache = new Cache();\n","import type { TMat2D } from './typedefs';\n// use this syntax so babel plugin see this import here\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\nexport const halfPI = Math.PI / 2;\nexport const quarterPI = Math.PI / 4;\nexport const twoMathPi = Math.PI * 2;\nexport const PiBy180 = Math.PI / 180;\n\nexport const iMatrix = Object.freeze([1, 0, 0, 1, 0, 0]) as TMat2D;\nexport const DEFAULT_SVG_FONT_SIZE = 16;\nexport const ALIASING_LIMIT = 2;\n\n/* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\nexport const kRect = 1 - 0.5522847498;\n\nexport const CENTER = 'center';\nexport const LEFT = 'left';\nexport const TOP = 'top';\nexport const BOTTOM = 'bottom';\nexport const RIGHT = 'right';\nexport const NONE = 'none';\n\nexport const reNewline = /\\r?\\n/;\n\nexport const MOVING = 'moving';\nexport const SCALING = 'scaling';\nexport const ROTATING = 'rotating';\nexport const ROTATE = 'rotate';\nexport const SKEWING = 'skewing';\nexport const RESIZING = 'resizing';\nexport const MODIFY_POLY = 'modifyPoly';\nexport const MODIFY_PATH = 'modifyPath';\nexport const CHANGED = 'changed';\nexport const SCALE = 'scale';\nexport const SCALE_X = 'scaleX';\nexport const SCALE_Y = 'scaleY';\nexport const SKEW_X = 'skewX';\nexport const SKEW_Y = 'skewY';\nexport const FILL = 'fill';\nexport const STROKE = 'stroke';\nexport const MODIFIED = 'modified';\n","import { FabricError } from './util/internals/console';\n\n/*\n * This Map connects the objects type value with their\n * class implementation. It used from any object to understand which are\n * the classes to enlive when requesting a object.type = 'path' for example.\n * Objects uses it for clipPath, Canvas uses it for everything.\n * This is necessary for generic code to run and enlive instances from serialized representation.\n * You can customize which classes get enlived from SVG parsing using this classRegistry.\n * The Registry start empty and gets filled in depending which files you import.\n * If you want to be able to parse arbitrary SVGs or JSON representation of canvases, coming from\n * different sources you will need to import all fabric because you may need all classes.\n */\n\nexport const JSON = 'json';\nexport const SVG = 'svg';\n\nexport class ClassRegistry {\n  declare [JSON]: Map<string, any>;\n  declare [SVG]: Map<string, any>;\n\n  constructor() {\n    this[JSON] = new Map();\n    this[SVG] = new Map();\n  }\n\n  has(classType: string): boolean {\n    return this[JSON].has(classType);\n  }\n\n  getClass<T>(classType: string): T {\n    const constructor = this[JSON].get(classType);\n    if (!constructor) {\n      throw new FabricError(`No class registered for ${classType}`);\n    }\n    return constructor;\n  }\n\n  setClass(classConstructor: any, classType?: string) {\n    if (classType) {\n      this[JSON].set(classType, classConstructor);\n    } else {\n      this[JSON].set(classConstructor.type, classConstructor);\n      // legacy\n      // @TODO: needs to be removed in fabric 7 or 8\n      this[JSON].set(classConstructor.type.toLowerCase(), classConstructor);\n    }\n  }\n\n  getSVGClass(SVGTagName: string): any {\n    return this[SVG].get(SVGTagName);\n  }\n\n  setSVGClass(classConstructor: any, SVGTagName?: string) {\n    this[SVG].set(\n      SVGTagName ?? classConstructor.type.toLowerCase(),\n      classConstructor,\n    );\n  }\n}\n\nexport const classRegistry = new ClassRegistry();\n","import type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type { AnimationBase } from './AnimationBase';\n\n/**\n * Array holding all running animations\n */\nclass AnimationRegistry extends Array<AnimationBase> {\n  /**\n   * Remove a single animation using an animation context\n   * @param {AnimationBase} context\n   */\n  remove(context: AnimationBase) {\n    const index = this.indexOf(context);\n    index > -1 && this.splice(index, 1);\n  }\n\n  /**\n   * Cancel all running animations on the next frame\n   */\n  cancelAll() {\n    const animations = this.splice(0);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations attached to a canvas on the next frame\n   * @param {StaticCanvas} canvas\n   */\n  cancelByCanvas(canvas: StaticCanvas) {\n    if (!canvas) {\n      return [];\n    }\n    const animations = this.filter(\n      (animation) =>\n        animation.target === canvas ||\n        (typeof animation.target === 'object' &&\n          (animation.target as FabricObject)?.canvas === canvas),\n    );\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations for target on the next frame\n   * @param target\n   */\n  cancelByTarget(target: AnimationBase['target']) {\n    if (!target) {\n      return [];\n    }\n    const animations = this.filter((animation) => animation.target === target);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n}\n\nexport const runningAnimations = new AnimationRegistry();\n","export type TEventCallback<T = any> = (options: T) => any;\n\ntype EventRegistryObject<E> = {\n  [K in keyof E]?: TEventCallback<E[K]>;\n};\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n * @see {@link http://fabricjs.com/events|Events demo}\n */\nexport class Observable<EventSpec> {\n  private __eventListeners: Record<keyof EventSpec, TEventCallback[]> =\n    {} as Record<keyof EventSpec, TEventCallback[]>;\n\n  /**\n   * Observes specified event\n   * @alias on\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  on(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (!this.__eventListeners) {\n      this.__eventListeners = {} as Record<keyof EventSpec, TEventCallback[]>;\n    }\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this.on(eventName as K, handler as TEventCallback);\n      });\n      return () => this.off(arg0);\n    } else if (handler) {\n      const eventName = arg0;\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n      return () => this.off(eventName, handler);\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * Observes specified event **once**\n   * @alias once\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  once(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      const disposers: VoidFunction[] = [];\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        disposers.push(this.once(eventName as K, handler as TEventCallback));\n      });\n      return () => disposers.forEach((d) => d());\n    } else if (handler) {\n      const disposer = this.on<K, E>(\n        arg0,\n        function onceHandler(this: Observable<EventSpec>, ...args) {\n          handler.call(this, ...args);\n          disposer();\n        },\n      );\n      return disposer;\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} eventName\n   * @param {Function} [handler]\n   */\n  private _removeEventListener<K extends keyof EventSpec>(\n    eventName: K,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      const eventListener = this.__eventListeners[eventName];\n      const index = eventListener.indexOf(handler);\n      index > -1 && eventListener.splice(index, 1);\n    } else {\n      this.__eventListeners[eventName] = [];\n    }\n  }\n\n  /**\n   * Unsubscribe all event listeners for eventname.\n   * Do not use this pattern. You could kill internal fabricJS events.\n   * We know we should have protected events for internal flows, but we don't have yet\n   * @deprecated\n   * @param {string} eventName event name (eg. 'after:render')\n   */\n  off<K extends keyof EventSpec>(eventName: K): void;\n  /**\n   * unsubscribe an event listener\n   * @param {string} eventName event name (eg. 'after:render')\n   * @param {TEventCallback} handler event listener to unsubscribe\n   */\n  off<K extends keyof EventSpec>(eventName: K, handler: TEventCallback): void;\n  /**\n   * unsubscribe event listeners\n   * @param handlers handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   */\n  off(handlers: EventRegistryObject<EventSpec>): void;\n  /**\n   * unsubscribe all event listeners\n   */\n  off(): void;\n  off<K extends keyof EventSpec>(\n    arg0?: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (typeof arg0 === 'undefined') {\n      for (const eventName in this.__eventListeners) {\n        this._removeEventListener(eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (typeof arg0 === 'object') {\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this._removeEventListener(eventName as K, handler as TEventCallback);\n      });\n    } else {\n      this._removeEventListener(arg0, handler);\n    }\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   */\n  fire<K extends keyof EventSpec>(eventName: K, options?: EventSpec[K]) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    const listenersForEvent = this.__eventListeners[eventName]?.concat();\n    if (listenersForEvent) {\n      for (let i = 0; i < listenersForEvent.length; i++) {\n        listenersForEvent[i].call(this, options || {});\n      }\n    }\n  }\n}\n","/**\n * Removes value from an array.\n * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n * @param {Array} array\n * @param {*} value\n * @return {Array} original array\n */\nexport const removeFromArray = <T>(array: T[], value: T): T[] => {\n  const idx = array.indexOf(value);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n  return array;\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the cosin value for angle.\n */\nexport const cos = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 1;\n  }\n  const angleSlice = Math.abs(angle) / halfPI;\n  switch (angleSlice) {\n    case 1:\n    case 3:\n      return 0;\n    case 2:\n      return -1;\n  }\n  return Math.cos(angle);\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the sin value for angle.\n */\nexport const sin = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 0;\n  }\n  const angleSlice = angle / halfPI;\n  const value = Math.sign(angle);\n  switch (angleSlice) {\n    case 1:\n      return value;\n    case 2:\n      return 0;\n    case 3:\n      return -value;\n  }\n  return Math.sin(angle);\n};\n","import type { TMat2D, TRadian } from './typedefs';\nimport { cos } from './util/misc/cos';\nimport { sin } from './util/misc/sin';\n\nexport interface XY {\n  x: number;\n  y: number;\n}\n\n/**\n * Adaptation of work of Kevin Lindsey(kevin@kevlindev.com)\n */\nexport class Point implements XY {\n  declare x: number;\n\n  declare y: number;\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(point?: XY);\n  constructor(arg0: number | XY = 0, y = 0) {\n    if (typeof arg0 === 'object') {\n      this.x = arg0.x;\n      this.y = arg0.y;\n    } else {\n      this.x = arg0;\n      this.y = y;\n    }\n  }\n\n  /**\n   * Adds another point to this one and returns a new one with the sum\n   * @param {XY} that\n   * @return {Point} new Point instance with added values\n   */\n  add(that: XY): Point {\n    return new Point(this.x + that.x, this.y + that.y);\n  }\n\n  /**\n   * Adds another point to this one\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  addEquals(that: XY): Point {\n    this.x += that.x;\n    this.y += that.y;\n    return this;\n  }\n\n  /**\n   * Adds value to this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point} new Point with added value\n   */\n  scalarAdd(scalar: number): Point {\n    return new Point(this.x + scalar, this.y + scalar);\n  }\n\n  /**\n   * Adds value to this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarAddEquals(scalar: number): Point {\n    this.x += scalar;\n    this.y += scalar;\n    return this;\n  }\n\n  /**\n   * Subtracts another point from this point and returns a new one\n   * @param {XY} that\n   * @return {Point} new Point object with subtracted values\n   */\n  subtract(that: XY): Point {\n    return new Point(this.x - that.x, this.y - that.y);\n  }\n\n  /**\n   * Subtracts another point from this point\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  subtractEquals(that: XY): Point {\n    this.x -= that.x;\n    this.y -= that.y;\n    return this;\n  }\n\n  /**\n   * Subtracts value from this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarSubtract(scalar: number): Point {\n    return new Point(this.x - scalar, this.y - scalar);\n  }\n\n  /**\n   * Subtracts value from this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarSubtractEquals(scalar: number): Point {\n    this.x -= scalar;\n    this.y -= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this point by another value and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  multiply(that: XY): Point {\n    return new Point(this.x * that.x, this.y * that.y);\n  }\n\n  /**\n   * Multiplies this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarMultiply(scalar: number): Point {\n    return new Point(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Multiplies this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarMultiplyEquals(scalar: number): Point {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this point by another and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  divide(that: XY): Point {\n    return new Point(this.x / that.x, this.y / that.y);\n  }\n\n  /**\n   * Divides this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarDivide(scalar: number): Point {\n    return new Point(this.x / scalar, this.y / scalar);\n  }\n\n  /**\n   * Divides this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarDivideEquals(scalar: number): Point {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n\n  /**\n   * Returns true if this point is equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  eq(that: XY): boolean {\n    return this.x === that.x && this.y === that.y;\n  }\n\n  /**\n   * Returns true if this point is less than another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lt(that: XY): boolean {\n    return this.x < that.x && this.y < that.y;\n  }\n\n  /**\n   * Returns true if this point is less than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lte(that: XY): boolean {\n    return this.x <= that.x && this.y <= that.y;\n  }\n\n  /**\n\n   * Returns true if this point is greater another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gt(that: XY): boolean {\n    return this.x > that.x && this.y > that.y;\n  }\n\n  /**\n   * Returns true if this point is greater than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gte(that: XY): boolean {\n    return this.x >= that.x && this.y >= that.y;\n  }\n\n  /**\n   * Returns new point which is the result of linear interpolation with this one and another one\n   * @param {XY} that\n   * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n   * @return {Point}\n   */\n  lerp(that: XY, t = 0.5): Point {\n    t = Math.max(Math.min(1, t), 0);\n    return new Point(\n      this.x + (that.x - this.x) * t,\n      this.y + (that.y - this.y) * t,\n    );\n  }\n\n  /**\n   * Returns distance from this point and another one\n   * @param {XY} that\n   * @return {Number}\n   */\n  distanceFrom(that: XY): number {\n    const dx = this.x - that.x,\n      dy = this.y - that.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  radiansFrom(that: XY): number {\n    return Math.atan2(this.y - that.y, this.x - that.x);\n  }\n\n  /**\n   * Returns the point between this point and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  midPointFrom(that: XY): Point {\n    return this.lerp(that);\n  }\n\n  /**\n   * Returns a new point which is the min of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  min(that: XY): Point {\n    return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n  }\n\n  /**\n   * Returns a new point which is the max of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  max(that: XY): Point {\n    return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n  }\n\n  /**\n   * Returns string representation of this point\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  /**\n   * Sets x/y of this point\n   * @param {Number} x\n   * @param {Number} y\n   * @chainable\n   */\n  setXY(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x of this point\n   * @param {Number} x\n   * @chainable\n   */\n  setX(x: number) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets y of this point\n   * @param {Number} y\n   * @chainable\n   */\n  setY(y: number) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x/y of this point from another point\n   * @param {XY} that\n   * @chainable\n   */\n  setFromPoint(that: XY) {\n    this.x = that.x;\n    this.y = that.y;\n    return this;\n  }\n\n  /**\n   * Swaps x/y of this point and another point\n   * @param {XY} that\n   */\n  swap(that: XY) {\n    const x = this.x,\n      y = this.y;\n    this.x = that.x;\n    this.y = that.y;\n    that.x = x;\n    that.y = y;\n  }\n\n  /**\n   * return a cloned instance of the point\n   * @return {Point}\n   */\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Rotates `point` around `origin` with `radians`\n   * @static\n   * @memberOf fabric.util\n   * @param {XY} origin The origin of the rotation\n   * @param {TRadian} radians The radians of the angle for the rotation\n   * @return {Point} The new rotated point\n   */\n  rotate(radians: TRadian, origin: XY = ZERO): Point {\n    // TODO benchmark and verify the add and subtract how much cost\n    // and then in case early return if no origin is passed\n    const sinus = sin(radians),\n      cosinus = cos(radians);\n    const p = this.subtract(origin);\n    const rotated = new Point(\n      p.x * cosinus - p.y * sinus,\n      p.x * sinus + p.y * cosinus,\n    );\n    return rotated.add(origin);\n  }\n\n  /**\n   * Apply transform t to point p\n   * @static\n   * @memberOf fabric.util\n   * @param  {TMat2D} t The transform\n   * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n   * @return {Point} The transformed point\n   */\n  transform(t: TMat2D, ignoreOffset = false): Point {\n    return new Point(\n      t[0] * this.x + t[2] * this.y + (ignoreOffset ? 0 : t[4]),\n      t[1] * this.x + t[3] * this.y + (ignoreOffset ? 0 : t[5]),\n    );\n  }\n}\n\nexport const ZERO = new Point(0, 0);\n","import type { Constructor, TBBox } from './typedefs';\nimport { removeFromArray } from './util/internals/removeFromArray';\nimport { Point } from './Point';\nimport type { ActiveSelection } from './shapes/ActiveSelection';\nimport type { Group } from './shapes/Group';\nimport type { InteractiveFabricObject } from './shapes/Object/InteractiveObject';\nimport type { FabricObject } from './shapes/Object/FabricObject';\n\nexport const isCollection = (\n  fabricObject?: FabricObject,\n): fabricObject is Group | ActiveSelection => {\n  return !!fabricObject && Array.isArray((fabricObject as Group)._objects);\n};\n\nexport function createCollectionMixin<TBase extends Constructor>(Base: TBase) {\n  class Collection extends Base {\n    /**\n     * @type {FabricObject[]}\n     * @TODO needs to end up in the constructor too\n     */\n    _objects: FabricObject[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectAdded(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectRemoved(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onStackOrderChanged(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    /**\n     * Adds objects to collection\n     * Objects should be instances of (or inherit from) FabricObject\n     * @param {...FabricObject[]} objects to add\n     * @returns {number} new array length\n     */\n    add(...objects: FabricObject[]): number {\n      const size = this._objects.push(...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return size;\n    }\n\n    /**\n     * Inserts an object into collection at specified index\n     * @param {number} index Index to insert object at\n     * @param {...FabricObject[]} objects Object(s) to insert\n     * @returns {number} new array length\n     */\n    insertAt(index: number, ...objects: FabricObject[]) {\n      this._objects.splice(index, 0, ...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return this._objects.length;\n    }\n\n    /**\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * @private\n     * @param {...FabricObject[]} objects objects to remove\n     * @returns {FabricObject[]} removed objects\n     */\n    remove(...objects: FabricObject[]) {\n      const array = this._objects,\n        removed: FabricObject[] = [];\n      objects.forEach((object) => {\n        const index = array.indexOf(object);\n        // only call onObjectRemoved if an object was actually removed\n        if (index !== -1) {\n          array.splice(index, 1);\n          removed.push(object);\n          this._onObjectRemoved(object);\n        }\n      });\n      return removed;\n    }\n\n    /**\n     * Executes given function for each object in this group\n     * A simple shortcut for getObjects().forEach, before es6 was more complicated,\n     * now is just a shortcut.\n     * @param {Function} callback\n     *                   Callback invoked with current object as first argument,\n     *                   index - as second and an array of all objects - as third.\n     */\n    forEachObject(\n      callback: (\n        object: FabricObject,\n        index: number,\n        array: FabricObject[],\n      ) => any,\n    ) {\n      this.getObjects().forEach((object, index, objects) =>\n        callback(object, index, objects),\n      );\n    }\n\n    /**\n     * Returns an array of children objects of this instance\n     * @param {...String} [types] When specified, only objects of these types are returned\n     * @return {Array}\n     */\n    getObjects(...types: string[]) {\n      if (types.length === 0) {\n        return [...this._objects];\n      }\n      return this._objects.filter((o) => o.isType(...types));\n    }\n\n    /**\n     * Returns object at specified index\n     * @param {Number} index\n     * @return {Object} object at index\n     */\n    item(index: number) {\n      return this._objects[index];\n    }\n\n    /**\n     * Returns true if collection contains no objects\n     * @return {Boolean} true if collection is empty\n     */\n    isEmpty() {\n      return this._objects.length === 0;\n    }\n\n    /**\n     * Returns a size of a collection (i.e: length of an array containing its objects)\n     * @return {Number} Collection size\n     */\n    size() {\n      return this._objects.length;\n    }\n\n    /**\n     * Returns true if collection contains an object.\\\n     * **Prefer using {@link FabricObject#isDescendantOf} for performance reasons**\n     * instead of `a.contains(b)` use `b.isDescendantOf(a)`\n     * @param {Object} object Object to check against\n     * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n     * @return {Boolean} `true` if collection contains an object\n     */\n    contains(object: FabricObject, deep?: boolean): boolean {\n      if (this._objects.includes(object)) {\n        return true;\n      } else if (deep) {\n        return this._objects.some(\n          (obj) =>\n            obj instanceof Collection &&\n            (obj as unknown as Collection).contains(object, true),\n        );\n      }\n      return false;\n    }\n\n    /**\n     * Returns number representation of a collection complexity\n     * @return {Number} complexity\n     */\n    complexity() {\n      return this._objects.reduce((memo, current) => {\n        memo += current.complexity ? current.complexity() : 0;\n        return memo;\n      }, 0);\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectToBack(object: FabricObject) {\n      if (!object || object === this._objects[0]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectToFront(object: FabricObject) {\n      if (!object || object === this._objects[this._objects.length - 1]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, `intersecting` allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectBackwards(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== 0) {\n        // if object is not on the bottom of stack\n        const newIdx = this.findNewLowerIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectForward(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== this._objects.length - 1) {\n        // if object is not on top of stack (last item in an array)\n        const newIdx = this.findNewUpperIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {number} index Position to move to\n     * @returns {boolean} true if change occurred\n     */\n    moveObjectTo(object: FabricObject, index: number) {\n      if (object === this._objects[index]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    findNewLowerIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse down the stack looking for the nearest intersecting object\n        for (let i = idx - 1; i >= 0; --i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    }\n\n    findNewUpperIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse up the stack looking for the nearest intersecting object\n        for (let i = idx + 1; i < this._objects.length; ++i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    }\n\n    /**\n     * Given a bounding box, return all the objects of the collection that are contained in the bounding box.\n     * If `includeIntersecting` is true, return also the objects that intersect the bounding box as well.\n     * This is meant to work with selection. Is not a generic method.\n     * @param {TBBox} bbox a bounding box in scene coordinates\n     * @param {{ includeIntersecting?: boolean }} options an object with includeIntersecting\n     * @returns array of objects contained in the bounding box, ordered from top to bottom stacking wise\n     */\n    collectObjects(\n      { left, top, width, height }: TBBox,\n      { includeIntersecting = true }: { includeIntersecting?: boolean } = {},\n    ) {\n      const objects: InteractiveFabricObject[] = [],\n        tl = new Point(left, top),\n        br = tl.add(new Point(width, height));\n\n      // we iterate reverse order to collect top first in case of click.\n      for (let i = this._objects.length - 1; i >= 0; i--) {\n        const object = this._objects[i] as unknown as InteractiveFabricObject;\n        if (\n          object.selectable &&\n          object.visible &&\n          ((includeIntersecting && object.intersectsWithRect(tl, br)) ||\n            object.isContainedWithinRect(tl, br) ||\n            (includeIntersecting && object.containsPoint(tl)) ||\n            (includeIntersecting && object.containsPoint(br)))\n        ) {\n          objects.push(object);\n        }\n      }\n\n      return objects;\n    }\n  }\n\n  // https://github.com/microsoft/TypeScript/issues/32080\n  return Collection;\n}\n","import { Observable } from './Observable';\n\nexport class CommonMethods<EventSpec> extends Observable<EventSpec> {\n  /**\n   * Sets object's properties from options, for initialization only\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected _setOptions(options: any = {}) {\n    for (const prop in options) {\n      this.set(prop, options[prop]);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setObject(obj: Record<string, any>) {\n    for (const prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  }\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   */\n  set(key: string | Record<string, any>, value?: any) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    } else {\n      this._set(key, value);\n    }\n    return this;\n  }\n\n  _set(key: string, value: any) {\n    this[key as keyof this] = value;\n  }\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   */\n  toggle(property: string) {\n    const value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  }\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get(property: string): any {\n    return this[property as keyof this];\n  }\n}\n","import { getFabricWindow } from '../../env';\n\nexport function requestAnimFrame(callback: FrameRequestCallback): number {\n  return getFabricWindow().requestAnimationFrame(callback);\n}\n\nexport function cancelAnimFrame(handle: number): void {\n  return getFabricWindow().cancelAnimationFrame(handle);\n}\n","let id = 0;\n\nexport const uid = () => id++;\n","import { getFabricDocument } from '../../env';\nimport type { ImageFormat, TSize } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElementFor(canvas);\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\n/**\n * Creates a canvas element as big as another\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElementFor = (\n  canvas: HTMLCanvasElement | ImageData | HTMLImageElement | TSize,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number,\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string,\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n\nexport const toBlob = (\n  canvasEl: HTMLCanvasElement,\n  format?: ImageFormat,\n  quality?: number,\n): Promise<Blob | null> =>\n  new Promise((resolve, _) => {\n    canvasEl.toBlob(resolve, `image/${format}`, quality);\n  });\n","import type { TRadian, TDegree } from '../../typedefs';\nimport { PiBy180 } from '../../constants';\n\n/**\n * Transforms degrees to radians.\n * @param {TDegree} degrees value in degrees\n * @return {TRadian} value in radians\n */\nexport const degreesToRadians = (degrees: TDegree): TRadian =>\n  (degrees * PiBy180) as TRadian;\n\n/**\n * Transforms radians to degrees.\n * @param {TRadian} radians value in radians\n * @return {TDegree} value in degrees\n */\nexport const radiansToDegrees = (radians: TRadian): TDegree =>\n  (radians / PiBy180) as TDegree;\n","import { iMatrix } from '../../constants';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TDegree, TRadian, TMat2D } from '../../typedefs';\nimport { cos } from './cos';\nimport { degreesToRadians, radiansToDegrees } from './radiansDegreesConversion';\nimport { sin } from './sin';\n\nexport type TRotateMatrixArgs = {\n  angle?: TDegree;\n};\n\nexport type TTranslateMatrixArgs = {\n  translateX?: number;\n  translateY?: number;\n};\n\nexport type TScaleMatrixArgs = {\n  scaleX?: number;\n  scaleY?: number;\n  flipX?: boolean;\n  flipY?: boolean;\n  skewX?: TDegree;\n  skewY?: TDegree;\n};\n\nexport type TComposeMatrixArgs = TTranslateMatrixArgs &\n  TRotateMatrixArgs &\n  TScaleMatrixArgs;\n\nexport type TQrDecomposeOut = Required<\n  Omit<TComposeMatrixArgs, 'flipX' | 'flipY'>\n>;\n\nexport const isIdentityMatrix = (mat: TMat2D) =>\n  mat.every((value, index) => value === iMatrix[index]);\n\n/**\n * Apply transform t to point p\n * @deprecated use {@link Point#transform}\n * @param  {Point | XY} p The point to transform\n * @param  {Array} t The transform\n * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n * @return {Point} The transformed point\n */\nexport const transformPoint = (\n  p: XY,\n  t: TMat2D,\n  ignoreOffset?: boolean,\n): Point => new Point(p).transform(t, ignoreOffset);\n\n/**\n * Invert transformation t\n * @param {Array} t The transform\n * @return {Array} The inverted transform\n */\nexport const invertTransform = (t: TMat2D): TMat2D => {\n  const a = 1 / (t[0] * t[3] - t[1] * t[2]),\n    r = [a * t[3], -a * t[1], -a * t[2], a * t[0], 0, 0] as TMat2D,\n    { x, y } = new Point(t[4], t[5]).transform(r, true);\n  r[4] = -x;\n  r[5] = -y;\n  return r;\n};\n\n/**\n * Multiply matrix A by matrix B to nest transformations\n * @param  {TMat2D} a First transformMatrix\n * @param  {TMat2D} b Second transformMatrix\n * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n * @return {TMat2D} The product of the two transform matrices\n */\nexport const multiplyTransformMatrices = (\n  a: TMat2D,\n  b: TMat2D,\n  is2x2?: boolean,\n): TMat2D =>\n  [\n    a[0] * b[0] + a[2] * b[1],\n    a[1] * b[0] + a[3] * b[1],\n    a[0] * b[2] + a[2] * b[3],\n    a[1] * b[2] + a[3] * b[3],\n    is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n    is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5],\n  ] as TMat2D;\n\n/**\n * Multiplies {@link matrices} such that a matrix defines the plane for the rest of the matrices **after** it\n *\n * `multiplyTransformMatrixArray([A, B, C, D])` is equivalent to `A(B(C(D)))`\n *\n * @param matrices an array of matrices\n * @param [is2x2] flag to multiply matrices as 2x2 matrices\n * @returns the multiplication product\n */\nexport const multiplyTransformMatrixArray = (\n  matrices: (TMat2D | undefined | null | false)[],\n  is2x2?: boolean,\n) =>\n  matrices.reduceRight(\n    (product: TMat2D, curr) =>\n      curr && product\n        ? multiplyTransformMatrices(curr, product, is2x2)\n        : curr || product,\n    undefined as unknown as TMat2D,\n  ) || iMatrix.concat();\n\nexport const calcPlaneRotation = ([a, b]: TMat2D) =>\n  Math.atan2(b, a) as TRadian;\n\n/**\n * Decomposes standard 2x3 matrix into transform components\n * @param  {TMat2D} a transformMatrix\n * @return {Object} Components of transform\n */\nexport const qrDecompose = (a: TMat2D): TQrDecomposeOut => {\n  const angle = calcPlaneRotation(a),\n    denom = Math.pow(a[0], 2) + Math.pow(a[1], 2),\n    scaleX = Math.sqrt(denom),\n    scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n    skewX = Math.atan2(a[0] * a[2] + a[1] * a[3], denom);\n  return {\n    angle: radiansToDegrees(angle),\n    scaleX,\n    scaleY,\n    skewX: radiansToDegrees(skewX),\n    skewY: 0 as TDegree,\n    translateX: a[4] || 0,\n    translateY: a[5] || 0,\n  };\n};\n\n/**\n * Generate a translation matrix\n *\n * A translation matrix in the form of\n * [ 1 0 x ]\n * [ 0 1 y ]\n * [ 0 0 1 ]\n *\n * See @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#translate for more details\n *\n * @param {number} x translation on X axis\n * @param {number} [y] translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createTranslateMatrix = (x: number, y = 0): TMat2D => [\n  1,\n  0,\n  0,\n  1,\n  x,\n  y,\n];\n\n/**\n * Generate a rotation matrix around around a point (x,y), defaulting to (0,0)\n *\n * A matrix in the form of\n * [cos(a) -sin(a) -x*cos(a)+y*sin(a)+x]\n * [sin(a)  cos(a) -x*sin(a)-y*cos(a)+y]\n * [0       0      1                 ]\n *\n *\n * @param {TDegree} angle rotation in degrees\n * @param {XY} [pivotPoint] pivot point to rotate around\n * @returns {TMat2D} matrix\n */\nexport function createRotateMatrix(\n  { angle = 0 }: TRotateMatrixArgs = {},\n  { x = 0, y = 0 }: Partial<XY> = {},\n): TMat2D {\n  const angleRadiant = degreesToRadians(angle),\n    cosValue = cos(angleRadiant),\n    sinValue = sin(angleRadiant);\n  return [\n    cosValue,\n    sinValue,\n    -sinValue,\n    cosValue,\n    x ? x - (cosValue * x - sinValue * y) : 0,\n    y ? y - (sinValue * x + cosValue * y) : 0,\n  ];\n}\n\n/**\n * Generate a scale matrix around the point (0,0)\n *\n * A matrix in the form of\n * [x 0 0]\n * [0 y 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#scale\n *\n * @param {number} x scale on X axis\n * @param {number} [y] scale on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createScaleMatrix = (x: number, y: number = x): TMat2D => [\n  x,\n  0,\n  0,\n  y,\n  0,\n  0,\n];\n\nexport const angleToSkew = (angle: TDegree) =>\n  Math.tan(degreesToRadians(angle));\n\nexport const skewToAngle = (value: TRadian) =>\n  radiansToDegrees(Math.atan(value));\n\n/**\n * Generate a skew matrix for the X axis\n *\n * A matrix in the form of\n * [1 x 0]\n * [0 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewx\n *\n * @param {TDegree} skewValue translation on X axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewXMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  0,\n  angleToSkew(skewValue),\n  1,\n  0,\n  0,\n];\n\n/**\n * Generate a skew matrix for the Y axis\n *\n * A matrix in the form of\n * [1 0 0]\n * [y 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewy\n *\n * @param {TDegree} skewValue translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewYMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  angleToSkew(skewValue),\n  0,\n  1,\n  0,\n  0,\n];\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet.\n * is called DimensionsTransformMatrix because those properties are the one that influence\n * the size of the resulting box of the object.\n * @param  {Object} options\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @return {Number[]} transform matrix\n */\nexport const calcDimensionsMatrix = ({\n  scaleX = 1,\n  scaleY = 1,\n  flipX = false,\n  flipY = false,\n  skewX = 0 as TDegree,\n  skewY = 0 as TDegree,\n}: TScaleMatrixArgs) => {\n  let matrix = createScaleMatrix(\n    flipX ? -scaleX : scaleX,\n    flipY ? -scaleY : scaleY,\n  );\n  if (skewX) {\n    matrix = multiplyTransformMatrices(matrix, createSkewXMatrix(skewX), true);\n  }\n  if (skewY) {\n    matrix = multiplyTransformMatrices(matrix, createSkewYMatrix(skewY), true);\n  }\n  return matrix;\n};\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet\n * Before changing this function look at: src/benchmarks/calcTransformMatrix.mjs\n * @param  {Object} options\n * @param  {Number} [options.angle]\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @param  {Number} [options.translateX]\n * @param  {Number} [options.translateY]\n * @return {Number[]} transform matrix\n */\nexport const composeMatrix = (options: TComposeMatrixArgs): TMat2D => {\n  const { translateX = 0, translateY = 0, angle = 0 as TDegree } = options;\n  let matrix = createTranslateMatrix(translateX, translateY);\n  if (angle) {\n    matrix = multiplyTransformMatrices(matrix, createRotateMatrix({ angle }));\n  }\n  const scaleMatrix = calcDimensionsMatrix(options);\n  if (!isIdentityMatrix(scaleMatrix)) {\n    matrix = multiplyTransformMatrices(matrix, scaleMatrix);\n  }\n  return matrix;\n};\n","import { noop } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type {\n  Abortable,\n  Constructor,\n  TCrossOrigin,\n  TFiller,\n} from '../../typedefs';\nimport { createImage } from './dom';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { BaseFilter } from '../../filters/BaseFilter';\nimport type { FabricObject as BaseFabricObject } from '../../shapes/Object/Object';\nimport { FabricError, SignalAbortedError } from '../internals/console';\nimport type { Shadow } from '../../Shadow';\n\nexport type LoadImageOptions = Abortable & {\n  /**\n   * cors value for the image loading, default to anonymous\n   */\n  crossOrigin?: TCrossOrigin;\n};\n\n/**\n * Loads image element from given url and resolve it, or catch.\n * @param {String} url URL representing an image\n * @param {LoadImageOptions} [options] image loading options\n * @returns {Promise<HTMLImageElement>} the loaded image.\n */\nexport const loadImage = (\n  url: string,\n  { signal, crossOrigin = null }: LoadImageOptions = {},\n) =>\n  new Promise<HTMLImageElement>(function (resolve, reject) {\n    if (signal && signal.aborted) {\n      return reject(new SignalAbortedError('loadImage'));\n    }\n    const img = createImage();\n    let abort: EventListenerOrEventListenerObject;\n    if (signal) {\n      abort = function (err: Event) {\n        img.src = '';\n        reject(err);\n      };\n      signal.addEventListener('abort', abort, { once: true });\n    }\n    const done = function () {\n      img.onload = img.onerror = null;\n      abort && signal?.removeEventListener('abort', abort);\n      resolve(img);\n    };\n    if (!url) {\n      done();\n      return;\n    }\n    img.onload = done;\n    img.onerror = function () {\n      abort && signal?.removeEventListener('abort', abort);\n      reject(new FabricError(`Error loading ${img.src}`));\n    };\n    crossOrigin && (img.crossOrigin = crossOrigin);\n    img.src = url;\n  });\n\nexport type EnlivenObjectOptions = Abortable & {\n  /**\n   * Method for further parsing of object elements,\n   * called after each fabric object created.\n   */\n  reviver?: <\n    T extends\n      | BaseFabricObject\n      | FabricObject\n      | BaseFilter<string>\n      | Shadow\n      | TFiller,\n  >(\n    serializedObj: Record<string, any>,\n    instance: T,\n  ) => void;\n};\n\n/**\n * @TODO type this correctly.\n * Creates corresponding fabric instances from their object representations\n * @param {Object[]} objects Objects to enliven\n * @param {EnlivenObjectOptions} [options]\n * @param {(serializedObj: object, instance: FabricObject) => any} [options.reviver] Method for further parsing of object elements,\n * called after each fabric object created.\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<FabricObject[]>}\n */\nexport const enlivenObjects = <\n  T extends\n    | BaseFabricObject\n    | FabricObject\n    | BaseFilter<string>\n    | Shadow\n    | TFiller,\n>(\n  objects: any[],\n  { signal, reviver = noop }: EnlivenObjectOptions = {},\n) =>\n  new Promise<T[]>((resolve, reject) => {\n    const instances: T[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    Promise.all(\n      objects.map((obj) =>\n        classRegistry\n          .getClass<\n            Constructor<T> & {\n              fromObject(options: any, context: Abortable): Promise<T>;\n            }\n          >(obj.type)\n          .fromObject(obj, { signal })\n          .then((fabricInstance) => {\n            reviver(obj, fabricInstance);\n            instances.push(fabricInstance);\n            return fabricInstance;\n          }),\n      ),\n    )\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance) => {\n          (instance as FabricObject).dispose &&\n            (instance as FabricObject).dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n\n/**\n * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n * @param {Object} object with properties to enlive ( fill, stroke, clipPath, path )\n * @param {object} [options]\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<Record<string, FabricObject | TFiller | null>>} the input object with enlived values\n */\nexport const enlivenObjectEnlivables = <\n  R = Record<string, FabricObject | TFiller | null>,\n>(\n  serializedObject: any,\n  { signal }: Abortable = {},\n) =>\n  new Promise<R>((resolve, reject) => {\n    const instances: (FabricObject | TFiller | Shadow)[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    // enlive every possible property\n    const promises = Object.values(serializedObject).map((value: any) => {\n      if (!value) {\n        return value;\n      }\n      /**\n       * clipPath or shadow or gradient or text on a path or a pattern,\n       * or the backgroundImage or overlayImage of canvas\n       * If we have a type and there is a classe registered for it, we enlive it.\n       * If there is no class registered for it we return the value as is\n       * */\n      if (value.type && classRegistry.has(value.type)) {\n        return enlivenObjects<FabricObject | Shadow | TFiller>([value], {\n          signal,\n        }).then(([enlived]) => {\n          instances.push(enlived);\n          return enlived;\n        });\n      }\n      return value;\n    });\n    const keys = Object.keys(serializedObject);\n    Promise.all(promises)\n      .then((enlived) => {\n        return enlived.reduce((acc, instance, index) => {\n          acc[keys[index]] = instance;\n          return acc;\n        }, {});\n      })\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance: any) => {\n          instance.dispose && instance.dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n","/**\n * Populates an object with properties of another object\n * @param {Object} source Source object\n * @param {string[]} properties Properties names to include\n * @returns object populated with the picked keys\n */\nexport const pick = <T extends Record<string, any>>(\n  source: T,\n  keys: (keyof T)[] = [],\n) => {\n  return keys.reduce((o, key) => {\n    if (key in source) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n\nexport const pickBy = <T extends Record<string, any>>(\n  source: T,\n  predicate: <K extends keyof T>(value: T[K], key: K, collection: T) => boolean,\n) => {\n  return (Object.keys(source) as (keyof T)[]).reduce((o, key) => {\n    if (predicate(source[key], key, source)) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n","/**\n * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n * @param {number|string} number number to operate on\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {number}\n */\nexport const toFixed = (number: number | string, fractionDigits: number) =>\n  parseFloat(Number(number).toFixed(fractionDigits));\n","import type { TMat2D } from '../../typedefs';\nimport { toFixed } from './toFixed';\nimport { config } from '../../config';\n\n/**\n * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n * @param {TMat2D} transform an array with 6 numbers\n * @return {String} transform matrix for svg\n */\nexport const matrixToSVG = (transform: TMat2D) =>\n  'matrix(' +\n  transform\n    .map((value) => toFixed(value, config.NUM_FRACTION_DIGITS))\n    .join(' ') +\n  ')';\n","import type { FabricObject } from '../shapes/Object/Object';\nimport type { TFiller } from '../typedefs';\nimport type { FabricText } from '../shapes/Text/Text';\nimport type { Pattern } from '../Pattern';\nimport type { Path } from '../shapes/Path';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\n\nexport const isFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && (filler as TFiller).toLive !== undefined;\n};\n\nexport const isSerializableFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && typeof (filler as TFiller).toObject === 'function';\n};\n\nexport const isPattern = (filler: TFiller): filler is Pattern => {\n  return (\n    !!filler && (filler as Pattern).offsetX !== undefined && 'source' in filler\n  );\n};\n\nexport const isTextObject = (\n  fabricObject?: FabricObject,\n): fabricObject is FabricText => {\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as FabricText)._renderText === 'function'\n  );\n};\n\nexport const isPath = (fabricObject?: FabricObject): fabricObject is Path => {\n  // we could use instanceof but that would mean pulling in Text code for a simple check\n  // @todo discuss what to do and how to do\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as Path)._renderPathCommands === 'function'\n  );\n};\n\nexport const isActiveSelection = (\n  fabricObject?: FabricObject,\n): fabricObject is ActiveSelection =>\n  !!fabricObject && 'multiSelectionStacking' in fabricObject;\n","/**\n * Returns element scroll offsets\n * @param {HTMLElement} element Element to operate on\n * @return {Object} Object with left/top values\n */\nexport function getScrollLeftTop(element: HTMLElement | null) {\n  const doc = element && getDocumentFromElement(element);\n  let left = 0,\n    top = 0;\n  if (!element || !doc) {\n    return { left, top };\n  }\n  let elementLoop: HTMLElement | Document | ShadowRoot = element;\n  const docElement = doc.documentElement,\n    body = doc.body || {\n      scrollLeft: 0,\n      scrollTop: 0,\n    };\n  // While loop checks (and then sets element to) .parentNode OR .host\n  //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n  //  but the .parentNode of a root ShadowDOM node will always be null, instead\n  //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n  while (\n    elementLoop &&\n    (elementLoop.parentNode || (elementLoop as unknown as ShadowRoot).host)\n  ) {\n    elementLoop = (elementLoop.parentNode ||\n      (elementLoop as unknown as ShadowRoot).host) as\n      | HTMLElement\n      | Document\n      | ShadowRoot;\n    if (elementLoop === doc) {\n      left = body.scrollLeft || docElement.scrollLeft || 0;\n      top = body.scrollTop || docElement.scrollTop || 0;\n    } else {\n      left += (elementLoop as HTMLElement).scrollLeft || 0;\n      top += (elementLoop as HTMLElement).scrollTop || 0;\n    }\n\n    if (\n      elementLoop.nodeType === 1 &&\n      (elementLoop as HTMLElement).style.position === 'fixed'\n    ) {\n      break;\n    }\n  }\n\n  return { left, top };\n}\n\nexport const getDocumentFromElement = (el: HTMLElement) =>\n  el.ownerDocument || null;\n\nexport const getWindowFromElement = (el: HTMLElement) =>\n  el.ownerDocument?.defaultView || null;\n","import { NONE } from '../../constants';\nimport type { TSize } from '../../typedefs';\nimport {\n  getDocumentFromElement,\n  getWindowFromElement,\n  getScrollLeftTop,\n} from '../../util/dom_misc';\n\nexport const setCanvasDimensions = (\n  el: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  { width, height }: TSize,\n  retinaScaling = 1,\n) => {\n  el.width = width;\n  el.height = height;\n  if (retinaScaling > 1) {\n    el.setAttribute('width', (width * retinaScaling).toString());\n    el.setAttribute('height', (height * retinaScaling).toString());\n    ctx.scale(retinaScaling, retinaScaling);\n  }\n};\n\nexport type CSSDimensions = {\n  width: number | string;\n  height: number | string;\n};\n\nexport const setCSSDimensions = (\n  el: HTMLElement,\n  { width, height }: Partial<CSSDimensions>,\n) => {\n  width && (el.style.width = typeof width === 'number' ? `${width}px` : width);\n  height &&\n    (el.style.height = typeof height === 'number' ? `${height}px` : height);\n};\n\n/**\n * Returns offset for a given element\n * @param {HTMLElement} element Element to get offset for\n * @return {Object} Object with \"left\" and \"top\" properties\n */\nexport function getElementOffset(element: HTMLElement) {\n  const doc = element && getDocumentFromElement(element),\n    offset = { left: 0, top: 0 };\n\n  if (!doc) {\n    return offset;\n  }\n  const elemStyle: CSSStyleDeclaration =\n    getWindowFromElement(element)?.getComputedStyle(element, null) ||\n    ({} as CSSStyleDeclaration);\n  offset.left += parseInt(elemStyle.borderLeftWidth, 10) || 0;\n  offset.top += parseInt(elemStyle.borderTopWidth, 10) || 0;\n  offset.left += parseInt(elemStyle.paddingLeft, 10) || 0;\n  offset.top += parseInt(elemStyle.paddingTop, 10) || 0;\n\n  let box = { left: 0, top: 0 };\n\n  const docElem = doc.documentElement;\n  if (typeof element.getBoundingClientRect !== 'undefined') {\n    box = element.getBoundingClientRect();\n  }\n\n  const scrollLeftTop = getScrollLeftTop(element);\n\n  return {\n    left:\n      box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n    top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top,\n  };\n}\n\n/**\n * Makes element unselectable\n * @param {HTMLElement} element Element to make unselectable\n * @return {HTMLElement} Element that was passed in\n */\nexport function makeElementUnselectable(element: HTMLElement) {\n  if (typeof element.onselectstart !== 'undefined') {\n    element.onselectstart = () => false;\n  }\n  element.style.userSelect = NONE;\n  return element;\n}\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport type { CSSDimensions } from './util';\nimport { setCSSDimensions, getElementOffset } from './util';\nimport { createCanvasElement, isHTMLCanvas } from '../../util/misc/dom';\nimport { setCanvasDimensions } from './util';\nimport { FabricError } from '../../util/internals/console';\n\nexport type CanvasItem = {\n  el: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nexport class StaticCanvasDOMManager {\n  /**\n   * Keeps a copy of the canvas style before setting retina scaling and other potions\n   * in order to return it to original state on dispose\n   * @type string\n   */\n  private _originalCanvasStyle?: string;\n\n  lower: CanvasItem;\n\n  constructor(arg0?: string | HTMLCanvasElement) {\n    const el = this.createLowerCanvas(arg0);\n    this.lower = { el, ctx: el.getContext('2d')! };\n  }\n\n  protected createLowerCanvas(arg0?: HTMLCanvasElement | string) {\n    // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n    const el = isHTMLCanvas(arg0)\n      ? arg0\n      : (arg0 &&\n          (getFabricDocument().getElementById(arg0) as HTMLCanvasElement)) ||\n        createCanvasElement();\n    if (el.hasAttribute('data-fabric')) {\n      throw new FabricError(\n        'Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?',\n      );\n    }\n    this._originalCanvasStyle = el.style.cssText;\n    el.setAttribute('data-fabric', 'main');\n    el.classList.add('lower-canvas');\n    return el;\n  }\n\n  cleanupDOM({ width, height }: TSize) {\n    const { el } = this.lower;\n    // restore canvas style and attributes\n    el.classList.remove('lower-canvas');\n    el.removeAttribute('data-fabric');\n    // restore canvas size to original size in case retina scaling was applied\n    el.setAttribute('width', `${width}`);\n    el.setAttribute('height', `${height}`);\n    el.style.cssText = this._originalCanvasStyle || '';\n    this._originalCanvasStyle = undefined;\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    const { el, ctx } = this.lower;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>) {\n    setCSSDimensions(this.lower.el, size);\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   */\n  calcOffset() {\n    return getElementOffset(this.lower.el);\n  }\n\n  dispose() {\n    getEnv().dispose(this.lower.el);\n    // @ts-expect-error disposing\n    delete this.lower;\n  }\n}\n","import { iMatrix } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TFiller, TMat2D, TOptions } from '../typedefs';\n\ninterface CanvasDrawableOptions {\n  /**\n   * if set to false background image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  backgroundVpt: boolean;\n\n  /**\n   * Background color of canvas instance.\n   * @type {(String|TFiller)}\n   * @default\n   */\n  backgroundColor: TFiller | string;\n\n  /**\n   * Background image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as background, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  backgroundImage?: FabricObject;\n\n  /**\n   * if set to false overlay image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  overlayVpt: boolean;\n\n  /**\n   * Overlay color of canvas instance.\n   * @since 1.3.9\n   * @type {(String|TFiller)}\n   * @default\n   */\n  overlayColor: TFiller | string;\n\n  /**\n   * Overlay image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  overlayImage?: FabricObject;\n}\n\ninterface CanvasRenderingOptions {\n  /**\n   * Indicates whether {@link StaticCanvas#add}, {@link StaticCanvas#insertAt} and {@link StaticCanvas#remove},\n   * {@link StaticCanvas#moveTo}, {@link StaticCanvas#clear} and many more, should also re-render canvas.\n   * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n   * since the renders are queued and executed one per frame.\n   * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n   * Left default to true to do not break documentation and old app, fiddles.\n   * @type Boolean\n   * @default\n   */\n  renderOnAddRemove: boolean;\n\n  /**\n   * Based on vptCoords and object.aCoords, skip rendering of objects that\n   * are not included in current viewport.\n   * May greatly help in applications with crowded canvas and use of zoom/pan\n   * If One of the corner of the bounding box of the object is on the canvas\n   * the objects get rendered.\n   * @type Boolean\n   * @default true\n   */\n  skipOffscreen: boolean;\n\n  /**\n   * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n   * @type Boolean\n   * @default\n   */\n  enableRetinaScaling: boolean;\n\n  /**\n   * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n   * @type Boolean\n   * @default\n   */\n  imageSmoothingEnabled: boolean;\n\n  /**\n   * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n   * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n   * top left corner of the canvas.\n   * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n   * @type FabricObject\n   */\n  clipPath?: FabricObject;\n}\n\nexport interface CanvasExportOptions {\n  /**\n   * Indicates whether toObject/toDatalessObject should include default values\n   * if set to false, takes precedence over the object value.\n   * @type Boolean\n   * @default\n   */\n  includeDefaultValues: boolean;\n\n  /**\n   * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n   * a zoomed canvas will then produce zoomed SVG output.\n   * @type Boolean\n   * @default\n   */\n  svgViewportTransformation: boolean;\n}\n\nexport interface StaticCanvasOptions\n  extends CanvasDrawableOptions,\n    CanvasRenderingOptions,\n    CanvasExportOptions {\n  /**\n   * Width in virtual/logical pixels of the canvas.\n   * The canvas can be larger than width if retina scaling is active\n   * @type number\n   */\n  width: number;\n\n  /**\n   * Height in virtual/logical pixels of the canvas.\n   * The canvas can be taller than width if retina scaling is active\n   * @type height\n   */\n  height: number;\n\n  /**\n   * Indicates whether object controls (borders/controls) are rendered above overlay image\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: boolean;\n\n  /**\n   * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n   * It gives PRIORITY to DOM scrolling, it doesn't make it always possible.\n   * If is true, when using a touch event on the canvas, the canvas will scroll if scroll is possible.\n   * If we are in drawing mode or if we are selecting an object the canvas preventDefault and so it won't scroll\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: boolean;\n\n  /**\n   * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n   * @type Array\n   * @example <caption>Default transform</caption>\n   * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n   * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n   * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n   * @default\n   */\n  viewportTransform: TMat2D;\n}\n\nexport const staticCanvasDefaults: TOptions<StaticCanvasOptions> = {\n  backgroundVpt: true,\n  backgroundColor: '',\n  overlayVpt: true,\n  overlayColor: '',\n\n  includeDefaultValues: true,\n  svgViewportTransformation: true,\n\n  renderOnAddRemove: true,\n  skipOffscreen: true,\n  enableRetinaScaling: true,\n  imageSmoothingEnabled: true,\n\n  /**\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: false,\n  /**\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: false,\n\n  viewportTransform: [...iMatrix],\n};\n","import { config } from '../config';\nimport { CENTER, VERSION } from '../constants';\nimport type { CanvasEvents, StaticCanvasEvents } from '../EventTypeDefs';\nimport type { Gradient } from '../gradient/Gradient';\nimport { createCollectionMixin, isCollection } from '../Collection';\nimport { CommonMethods } from '../CommonMethods';\nimport type { Pattern } from '../Pattern';\nimport { Point } from '../Point';\nimport type { TCachedFabricObject } from '../shapes/Object/Object';\nimport type {\n  Abortable,\n  Constructor,\n  TCornerPoint,\n  TDataUrlOptions,\n  TFiller,\n  TMat2D,\n  TSize,\n  TSVGReviver,\n  TToCanvasElementOptions,\n  TValidToObjectMethod,\n  TOptions,\n} from '../typedefs';\nimport {\n  cancelAnimFrame,\n  requestAnimFrame,\n} from '../util/animation/AnimationFrameProvider';\nimport { runningAnimations } from '../util/animation/AnimationRegistry';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor, toBlob, toDataURL } from '../util/misc/dom';\nimport { invertTransform, transformPoint } from '../util/misc/matrix';\nimport type { EnlivenObjectOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { toFixed } from '../util/misc/toFixed';\nimport { isFiller, isPattern, isTextObject } from '../util/typeAssertions';\nimport { StaticCanvasDOMManager } from './DOMManagers/StaticCanvasDOMManager';\nimport type { CSSDimensions } from './DOMManagers/util';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\nimport { staticCanvasDefaults } from './StaticCanvasOptions';\nimport { log, FabricError } from '../util/internals/console';\nimport { getDevicePixelRatio } from '../env';\n\n/**\n * Having both options in TCanvasSizeOptions set to true transform the call in a calcOffset\n * Better try to restrict with types to avoid confusion.\n */\nexport type TCanvasSizeOptions =\n  | {\n      backstoreOnly?: true;\n      cssOnly?: false;\n    }\n  | {\n      backstoreOnly?: false;\n      cssOnly?: true;\n    };\n\nexport type TSVGExportOptions = {\n  suppressPreamble?: boolean;\n  viewBox?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  encoding?: 'UTF-8'; // test Encoding type and see what happens\n  width?: string;\n  height?: string;\n  reviver?: TSVGReviver;\n};\n\n/**\n * Static canvas class\n * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n * @fires before:render\n * @fires after:render\n * @fires canvas:cleared\n * @fires object:added\n * @fires object:removed\n */\n// TODO: fix `EventSpec` inheritance https://github.com/microsoft/TypeScript/issues/26154#issuecomment-1366616260\nexport class StaticCanvas<\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EventSpec extends StaticCanvasEvents = StaticCanvasEvents,\n  >\n  extends createCollectionMixin(CommonMethods<CanvasEvents>)\n  implements StaticCanvasOptions\n{\n  declare width: number;\n  declare height: number;\n\n  // background\n  declare backgroundVpt: boolean;\n  declare backgroundColor: TFiller | string;\n  declare backgroundImage?: FabricObject;\n  // overlay\n  declare overlayVpt: boolean;\n  declare overlayColor: TFiller | string;\n  declare overlayImage?: FabricObject;\n\n  declare clipPath?: FabricObject;\n\n  declare includeDefaultValues: boolean;\n\n  // rendering config\n  declare renderOnAddRemove: boolean;\n  declare skipOffscreen: boolean;\n  declare enableRetinaScaling: boolean;\n  declare imageSmoothingEnabled: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare controlsAboveOverlay: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare allowTouchScrolling: boolean;\n\n  declare viewportTransform: TMat2D;\n\n  /**\n   * The viewport bounding box in scene plane coordinates, see {@link calcViewportBoundaries}\n   */\n  declare vptCoords: TCornerPoint;\n\n  /**\n   * A reference to the canvas actual HTMLCanvasElement.\n   * Can be use to read the raw pixels, but never write or manipulate\n   * @type HTMLCanvasElement\n   */\n  get lowerCanvasEl() {\n    return this.elements.lower?.el;\n  }\n\n  get contextContainer() {\n    return this.elements.lower?.ctx;\n  }\n\n  /**\n   * If true the Canvas is in the process or has been disposed/destroyed.\n   * No more rendering operation will be executed on this canvas.\n   * @type boolean\n   */\n  declare destroyed?: boolean;\n\n  /**\n   * Started the process of disposing but not done yet.\n   * WIll likely complete the render cycle already scheduled but stopping adding more.\n   * @type boolean\n   */\n  declare disposed?: boolean;\n\n  declare _offset: { left: number; top: number };\n  declare protected hasLostContext: boolean;\n  declare protected nextRenderHandle: number;\n\n  declare elements: StaticCanvasDOMManager;\n\n  /**\n   * When true control drawing is skipped.\n   * This boolean is used to avoid toDataURL to export controls.\n   * Usage of this boolean to build up other flows and features is not supported\n   * @type Boolean\n   * @default false\n   */\n  declare protected skipControlsDrawing: boolean;\n\n  static ownDefaults = staticCanvasDefaults;\n\n  // reference to\n  declare protected __cleanupTask?: {\n    (): void;\n    kill: (reason?: any) => void;\n  };\n\n  static getDefaults(): Record<string, any> {\n    return StaticCanvas.ownDefaults;\n  }\n\n  constructor(\n    el?: string | HTMLCanvasElement,\n    options: TOptions<StaticCanvasOptions> = {},\n  ) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof StaticCanvas).getDefaults(),\n    );\n    this.set(options);\n    this.initElements(el);\n    this._setDimensionsImpl({\n      width: this.width || this.elements.lower.el.width || 0,\n      height: this.height || this.elements.lower.el.height || 0,\n    });\n    this.skipControlsDrawing = false;\n    this.viewportTransform = [...this.viewportTransform];\n    this.calcViewportBoundaries();\n  }\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new StaticCanvasDOMManager(el);\n  }\n\n  add(...objects: FabricObject[]) {\n    const size = super.add(...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const size = super.insertAt(index, ...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    removed.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return removed;\n  }\n\n  _onObjectAdded(obj: FabricObject) {\n    if (obj.canvas && (obj.canvas as StaticCanvas) !== this) {\n      log(\n        'warn',\n        'Canvas is trying to add an object that belongs to a different canvas.\\n' +\n          'Resulting to default behavior: removing object from previous canvas and adding to new canvas',\n      );\n      obj.canvas.remove(obj);\n    }\n    obj._set('canvas', this);\n    obj.setCoords();\n    this.fire('object:added', { target: obj });\n    obj.fire('added', { target: this });\n  }\n\n  _onObjectRemoved(obj: FabricObject) {\n    obj._set('canvas', undefined);\n    this.fire('object:removed', { target: obj });\n    obj.fire('removed', { target: this });\n  }\n\n  _onStackOrderChanged() {\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   * @return {Number} retinaScaling if applied, otherwise 1;\n   */\n  getRetinaScaling() {\n    return this.enableRetinaScaling ? getDevicePixelRatio() : 1;\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   * This method is also attached as \"resize\" event handler of window\n   */\n  calcOffset() {\n    return (this._offset = this.elements.calcOffset());\n  }\n\n  /**\n   * Returns canvas width (in px)\n   * @return {Number}\n   */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /**\n   * Returns canvas height (in px)\n   * @return {Number}\n   */\n  getHeight(): number {\n    return this.height;\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: Partial<TSize | CSSDimensions>,\n    { cssOnly = false, backstoreOnly = false }: TCanvasSizeOptions = {},\n  ) {\n    if (!cssOnly) {\n      const size = {\n        width: this.width,\n        height: this.height,\n        ...(dimensions as Partial<TSize>),\n      };\n      this.elements.setDimensions(size, this.getRetinaScaling());\n      this.hasLostContext = true;\n      this.width = size.width;\n      this.height = size.height;\n    }\n    if (!backstoreOnly) {\n      this.elements.setCSSDimensions(dimensions);\n    }\n\n    this.calcOffset();\n  }\n\n  /**\n   * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n   * @param {Object}        dimensions                    Object with width/height properties\n   * @param {Number|String} [dimensions.width]            Width of canvas element\n   * @param {Number|String} [dimensions.height]           Height of canvas element\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   */\n  setDimensions(\n    dimensions: Partial<CSSDimensions>,\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setDimensions(\n    dimensions: Partial<TSize>,\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setDimensions(dimensions: Partial<TSize>, options?: never): void;\n  setDimensions(\n    dimensions: Partial<TSize | CSSDimensions>,\n    options?: TCanvasSizeOptions,\n  ) {\n    this._setDimensionsImpl(dimensions, options);\n    if (!options || !options.cssOnly) {\n      this.requestRenderAll();\n    }\n  }\n\n  /**\n   * Returns canvas zoom level\n   * @return {Number}\n   */\n  getZoom() {\n    return this.viewportTransform[0];\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    this.viewportTransform = vpt;\n    this.calcViewportBoundaries();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Sets zoom level of this canvas instance, the zoom centered around point\n   * meaning that following zoom to point with the same point will have the visual\n   * effect of the zoom originating from that point. The point won't move.\n   * It has nothing to do with canvas center or visual center of the viewport.\n   * @param {Point} point to zoom with respect to\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  zoomToPoint(point: Point, value: number) {\n    // TODO: just change the scale, preserve other transformations\n    const before = point,\n      vpt: TMat2D = [...this.viewportTransform];\n    const newPoint = transformPoint(point, invertTransform(vpt));\n    vpt[0] = value;\n    vpt[3] = value;\n    const after = transformPoint(newPoint, vpt);\n    vpt[4] += before.x - after.x;\n    vpt[5] += before.y - after.y;\n    this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Sets zoom level of this canvas instance\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  setZoom(value: number) {\n    this.zoomToPoint(new Point(0, 0), value);\n  }\n\n  /**\n   * Pan viewport so as to place point at top left corner of canvas\n   * @param {Point} point to move to\n   */\n  absolutePan(point: Point) {\n    const vpt: TMat2D = [...this.viewportTransform];\n    vpt[4] = -point.x;\n    vpt[5] = -point.y;\n    return this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Pans viewpoint relatively\n   * @param {Point} point (position vector) to move by\n   */\n  relativePan(point: Point) {\n    return this.absolutePan(\n      new Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5],\n      ),\n    );\n  }\n\n  /**\n   * Returns &lt;canvas> element corresponding to this instance\n   * @return {HTMLCanvasElement}\n   */\n  getElement(): HTMLCanvasElement {\n    return this.elements.lower.el;\n  }\n\n  /**\n   * Clears specified context of canvas element\n   * @param {CanvasRenderingContext2D} ctx Context to clear\n   */\n  clearContext(ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Returns context of canvas where objects are drawn\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.elements.lower.ctx;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    this.remove(...this.getObjects());\n    this.backgroundImage = undefined;\n    this.overlayImage = undefined;\n    this.backgroundColor = '';\n    this.overlayColor = '';\n    this.clearContext(this.getContext());\n    this.fire('canvas:cleared');\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Renders the canvas\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    this.renderCanvas(this.getContext(), this._objects);\n  }\n\n  /**\n   * Function created to be instance bound at initialization\n   * used in requestAnimationFrame rendering\n   * Let the fabricJS call it. If you call it manually you could have more\n   * animationFrame stacking on to of each other\n   * for an imperative rendering, use canvas.renderAll\n   * @private\n   */\n  renderAndReset() {\n    this.nextRenderHandle = 0;\n    this.renderAll();\n  }\n\n  /**\n   * Append a renderAll request to next animation frame.\n   * unless one is already in progress, in that case nothing is done\n   * a boolean flag will avoid appending more.\n   */\n  requestRenderAll() {\n    if (!this.nextRenderHandle && !this.disposed && !this.destroyed) {\n      this.nextRenderHandle = requestAnimFrame(() => this.renderAndReset());\n    }\n  }\n\n  /**\n   * Calculate the position of the 4 corner of canvas with current viewportTransform.\n   * helps to determinate when an object is in the current rendering viewport\n   */\n  calcViewportBoundaries(): TCornerPoint {\n    const width = this.width,\n      height = this.height,\n      iVpt = invertTransform(this.viewportTransform),\n      a = transformPoint({ x: 0, y: 0 }, iVpt),\n      b = transformPoint({ x: width, y: height }, iVpt),\n      // we don't support vpt flipping\n      // but the code is robust enough to mostly work with flipping\n      min = a.min(b),\n      max = a.max(b);\n    return (this.vptCoords = {\n      tl: min,\n      tr: new Point(max.x, min.y),\n      bl: new Point(min.x, max.y),\n      br: max,\n    });\n  }\n\n  cancelRequestedRender() {\n    if (this.nextRenderHandle) {\n      cancelAnimFrame(this.nextRenderHandle);\n      this.nextRenderHandle = 0;\n    }\n  }\n\n  drawControls(_ctx: CanvasRenderingContext2D) {\n    // Static canvas has no controls\n  }\n\n  /**\n   * Renders background, objects, overlay and controls.\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Array} objects to render\n   */\n  renderCanvas(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    if (this.destroyed) {\n      return;\n    }\n\n    const v = this.viewportTransform,\n      path = this.clipPath;\n    this.calcViewportBoundaries();\n    this.clearContext(ctx);\n    ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    // @ts-expect-error node-canvas stuff\n    ctx.patternQuality = 'best';\n    this.fire('before:render', { ctx });\n    this._renderBackground(ctx);\n\n    ctx.save();\n    //apply viewport transform once for all rendering process\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this._renderObjects(ctx, objects);\n    ctx.restore();\n    if (!this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    if (path) {\n      path._set('canvas', this);\n      // needed to setup a couple of variables\n      // todo migrate to the newer one\n      path.shouldCache();\n      path._transformDone = true;\n      (path as TCachedFabricObject).renderCache({ forClipping: true });\n      this.drawClipPathOnCanvas(ctx, path as TCachedFabricObject);\n    }\n    this._renderOverlay(ctx);\n    if (this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    this.fire('after:render', { ctx });\n\n    if (this.__cleanupTask) {\n      this.__cleanupTask();\n      this.__cleanupTask = undefined;\n    }\n  }\n\n  /**\n   * Paint the cached clipPath on the lowerCanvasEl\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawClipPathOnCanvas(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject,\n  ) {\n    const v = this.viewportTransform;\n    ctx.save();\n    ctx.transform(...v);\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4;\n    ctx.globalCompositeOperation = 'destination-in';\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY,\n    );\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} objects to render\n   */\n  _renderObjects(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    for (let i = 0, len = objects.length; i < len; ++i) {\n      objects[i] && objects[i].render(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {string} property 'background' or 'overlay'\n   */\n  _renderBackgroundOrOverlay(\n    ctx: CanvasRenderingContext2D,\n    property: 'background' | 'overlay',\n  ) {\n    const fill = this[`${property}Color`],\n      object = this[`${property}Image`],\n      v = this.viewportTransform,\n      needsVpt = this[`${property}Vpt`];\n    if (!fill && !object) {\n      return;\n    }\n    const isAFiller = isFiller(fill);\n    if (fill) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(this.width, 0);\n      ctx.lineTo(this.width, this.height);\n      ctx.lineTo(0, this.height);\n      ctx.closePath();\n      ctx.fillStyle = isAFiller ? fill.toLive(ctx /* this */)! : fill;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      if (isAFiller) {\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n        const m = ((fill as Gradient<'linear'>).gradientTransform ||\n          (fill as Pattern).patternTransform) as TMat2D;\n        m && ctx.transform(...m);\n      }\n      ctx.fill();\n      ctx.restore();\n    }\n    if (object) {\n      ctx.save();\n      const { skipOffscreen } = this;\n      // if the object doesn't move with the viewport,\n      // the offscreen concept does not apply;\n      this.skipOffscreen = needsVpt;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      object.render(ctx);\n      this.skipOffscreen = skipOffscreen;\n      ctx.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'background');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderOverlay(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'overlay');\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * @return {Point}\n   */\n  getCenterPoint() {\n    return new Point(this.width / 2, this.height / 2);\n  }\n\n  /**\n   * Centers object horizontally in the canvas\n   */\n  centerObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getCenterPoint().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically in the canvas\n   * @param {FabricObject} object Object to center vertically\n   */\n  centerObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically and horizontally in the canvas\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  centerObject(object: FabricObject) {\n    return this._centerObject(object, this.getCenterPoint());\n  }\n\n  /**\n   * Centers object vertically and horizontally in the viewport\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObject(object: FabricObject) {\n    return this._centerObject(object, this.getVpCenter());\n  }\n\n  /**\n   * Centers object horizontally in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getVpCenter().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object Vertically in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getVpCenter().y),\n    );\n  }\n\n  /**\n   * Calculate the point in canvas that correspond to the center of actual viewport.\n   * @return {Point} vpCenter, viewport center\n   */\n  getVpCenter(): Point {\n    return transformPoint(\n      this.getCenterPoint(),\n      invertTransform(this.viewportTransform),\n    );\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object Object to center\n   * @param {Point} center Center point\n   */\n  _centerObject(object: FabricObject, center: Point) {\n    object.setXY(center, CENTER, CENTER);\n    object.setCoords();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Returns dataless JSON representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} json string\n   */\n  toDatalessJSON(propertiesToInclude?: string[]) {\n    return this.toDatalessObject(propertiesToInclude);\n  }\n\n  /**\n   * Returns object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toObject', propertiesToInclude);\n  }\n\n  /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * JSON does not support additional properties because toJSON has its own signature\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON representation of canvas </caption>\n   * const json = canvas.toJSON();\n   * @example <caption>JSON representation of canvas </caption>\n   * const json = JSON.stringify(canvas);\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Returns dataless object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n  }\n\n  /**\n   * @private\n   */\n  _toObjectMethod(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const clipPath = this.clipPath;\n    const clipPathData =\n      clipPath && !clipPath.excludeFromExport\n        ? this._toObject(clipPath, methodName, propertiesToInclude)\n        : null;\n    return {\n      version: VERSION,\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      objects: this._objects\n        .filter((object) => !object.excludeFromExport)\n        .map((instance) =>\n          this._toObject(instance, methodName, propertiesToInclude),\n        ),\n      ...this.__serializeBgOverlay(methodName, propertiesToInclude),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    let originalValue;\n\n    if (!this.includeDefaultValues) {\n      originalValue = instance.includeDefaultValues;\n      instance.includeDefaultValues = false;\n    }\n\n    const object = instance[methodName](propertiesToInclude);\n    if (!this.includeDefaultValues) {\n      instance.includeDefaultValues = !!originalValue;\n    }\n    return object;\n  }\n\n  /**\n   * @private\n   */\n  __serializeBgOverlay(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const data: any = {},\n      bgImage = this.backgroundImage,\n      overlayImage = this.overlayImage,\n      bgColor = this.backgroundColor,\n      overlayColor = this.overlayColor;\n\n    if (isFiller(bgColor)) {\n      if (!bgColor.excludeFromExport) {\n        data.background = bgColor.toObject(propertiesToInclude);\n      }\n    } else if (bgColor) {\n      data.background = bgColor;\n    }\n\n    if (isFiller(overlayColor)) {\n      if (!overlayColor.excludeFromExport) {\n        data.overlay = overlayColor.toObject(propertiesToInclude);\n      }\n    } else if (overlayColor) {\n      data.overlay = overlayColor;\n    }\n\n    if (bgImage && !bgImage.excludeFromExport) {\n      data.backgroundImage = this._toObject(\n        bgImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n    if (overlayImage && !overlayImage.excludeFromExport) {\n      data.overlayImage = this._toObject(\n        overlayImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n\n    return data;\n  }\n\n  /* _TO_SVG_START_ */\n\n  declare svgViewportTransformation: boolean;\n\n  /**\n   * Returns SVG representation of canvas\n   * @function\n   * @param {Object} [options] Options object for SVG output\n   * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n   * @param {Object} [options.viewBox] SVG viewbox object\n   * @param {Number} [options.viewBox.x] x-coordinate of viewbox\n   * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n   * @param {Number} [options.viewBox.width] Width of viewbox\n   * @param {Number} [options.viewBox.height] Height of viewbox\n   * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n   * @param {String} [options.width] desired width of svg with or without units\n   * @param {String} [options.height] desired height of svg with or without units\n   * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n   * @return {String} SVG string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n   * @example <caption>Normal SVG output</caption>\n   * var svg = canvas.toSVG();\n   * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n   * var svg = canvas.toSVG({suppressPreamble: true});\n   * @example <caption>SVG output with viewBox attribute</caption>\n   * var svg = canvas.toSVG({\n   *   viewBox: {\n   *     x: 100,\n   *     y: 100,\n   *     width: 200,\n   *     height: 300\n   *   }\n   * });\n   * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n   * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n   * @example <caption>Modify SVG output with reviver function</caption>\n   * var svg = canvas.toSVG(null, function(svg) {\n   *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n   * });\n   */\n  toSVG(options: TSVGExportOptions = {}, reviver?: TSVGReviver) {\n    options.reviver = reviver;\n    const markup: string[] = [];\n\n    this._setSVGPreamble(markup, options);\n    this._setSVGHeader(markup, options);\n    if (this.clipPath) {\n      markup.push(`<g clip-path=\"url(#${this.clipPath.clipPathId})\" >\\n`);\n    }\n    this._setSVGBgOverlayColor(markup, 'background');\n    this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n    this._setSVGObjects(markup, reviver);\n    if (this.clipPath) {\n      markup.push('</g>\\n');\n    }\n    this._setSVGBgOverlayColor(markup, 'overlay');\n    this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n    markup.push('</svg>');\n\n    return markup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _setSVGPreamble(markup: string[], options: TSVGExportOptions): void {\n    if (options.suppressPreamble) {\n      return;\n    }\n    markup.push(\n      '<?xml version=\"1.0\" encoding=\"',\n      options.encoding || 'UTF-8',\n      '\" standalone=\"no\" ?>\\n',\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n      '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n',\n    );\n  }\n\n  /**\n   * @private\n   */\n  _setSVGHeader(markup: string[], options: TSVGExportOptions): void {\n    const width = options.width || `${this.width}`,\n      height = options.height || `${this.height}`,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      optViewBox = options.viewBox;\n    let viewBox: string;\n    if (optViewBox) {\n      viewBox = `viewBox=\"${optViewBox.x} ${optViewBox.y} ${optViewBox.width} ${optViewBox.height}\" `;\n    } else if (this.svgViewportTransformation) {\n      const vpt = this.viewportTransform;\n      viewBox = `viewBox=\"${toFixed(\n        -vpt[4] / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS)} ${toFixed(\n        this.width / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS)}\" `;\n    } else {\n      viewBox = `viewBox=\"0 0 ${this.width} ${this.height}\" `;\n    }\n\n    markup.push(\n      '<svg ',\n      'xmlns=\"http://www.w3.org/2000/svg\" ',\n      'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n      'version=\"1.1\" ',\n      'width=\"',\n      width,\n      '\" ',\n      'height=\"',\n      height,\n      '\" ',\n      viewBox,\n      'xml:space=\"preserve\">\\n',\n      '<desc>Created with Tetap  qingfengfuyun1@gmail.com version:',\n      VERSION,\n      '</desc>\\n',\n      '<defs>\\n',\n      this.createSVGFontFacesMarkup(),\n      this.createSVGRefElementsMarkup(),\n      this.createSVGClipPathMarkup(options),\n      '</defs>\\n',\n    );\n  }\n\n  createSVGClipPathMarkup(options: TSVGExportOptions): string {\n    const clipPath = this.clipPath;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      return `<clipPath id=\"${clipPath.clipPathId}\" >\\n${clipPath.toClipPathSVG(\n        options.reviver,\n      )}</clipPath>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Creates markup containing SVG referenced elements like patterns, gradients etc.\n   * @return {String}\n   */\n  createSVGRefElementsMarkup(): string {\n    return (['background', 'overlay'] as const)\n      .map((prop) => {\n        const fill = this[`${prop}Color`];\n        if (isFiller(fill)) {\n          const shouldTransform = this[`${prop}Vpt`],\n            vpt = this.viewportTransform,\n            object = {\n              // otherwise circular dependency\n              isType: () => false,\n              width: this.width / (shouldTransform ? vpt[0] : 1),\n              height: this.height / (shouldTransform ? vpt[3] : 1),\n            };\n          return fill.toSVG(object as FabricObject, {\n            additionalTransform: shouldTransform ? matrixToSVG(vpt) : '',\n          });\n        }\n      })\n      .join('');\n  }\n\n  /**\n   * Creates markup containing SVG font faces,\n   * font URLs for font faces must be collected by developers\n   * and are not extracted from the DOM by fabricjs\n   * @param {Array} objects Array of fabric objects\n   * @return {String}\n   */\n  createSVGFontFacesMarkup(): string {\n    const objects: FabricObject[] = [],\n      fontList: Record<string, boolean> = {},\n      fontPaths = config.fontPaths;\n\n    this._objects.forEach(function add(object) {\n      objects.push(object);\n      if (isCollection(object)) {\n        object._objects.forEach(add);\n      }\n    });\n\n    objects.forEach((obj) => {\n      if (!isTextObject(obj)) {\n        return;\n      }\n      const { styles, fontFamily } = obj;\n      if (fontList[fontFamily] || !fontPaths[fontFamily]) {\n        return;\n      }\n      fontList[fontFamily] = true;\n      if (!styles) {\n        return;\n      }\n      Object.values(styles).forEach((styleRow) => {\n        Object.values(styleRow).forEach(({ fontFamily = '' }) => {\n          if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n            fontList[fontFamily] = true;\n          }\n        });\n      });\n    });\n\n    const fontListMarkup = Object.keys(fontList)\n      .map(\n        (fontFamily) =>\n          `\\t\\t@font-face {\\n\\t\\t\\tfont-family: '${fontFamily}';\\n\\t\\t\\tsrc: url('${fontPaths[fontFamily]}');\\n\\t\\t}\\n`,\n      )\n      .join('');\n\n    if (fontListMarkup) {\n      return `\\t<style type=\"text/css\"><![CDATA[\\n${fontListMarkup}]]></style>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObjects(markup: string[], reviver?: TSVGReviver) {\n    this.forEachObject((fabricObject) => {\n      if (fabricObject.excludeFromExport) {\n        return;\n      }\n      this._setSVGObject(markup, fabricObject, reviver);\n    });\n  }\n\n  /**\n   * This is its own function because the Canvas ( non static ) requires extra code here\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    markup.push(instance.toSVG(reviver));\n  }\n\n  /**\n   * @private\n   */\n  _setSVGBgOverlayImage(\n    markup: string[],\n    property: 'overlayImage' | 'backgroundImage',\n    reviver?: TSVGReviver,\n  ) {\n    const bgOrOverlay = this[property];\n    if (bgOrOverlay && !bgOrOverlay.excludeFromExport && bgOrOverlay.toSVG) {\n      markup.push(bgOrOverlay.toSVG(reviver));\n    }\n  }\n\n  /**\n   * @TODO this seems to handle patterns but fail at gradients.\n   * @private\n   */\n  _setSVGBgOverlayColor(markup: string[], property: 'background' | 'overlay') {\n    const filler = this[`${property}Color`];\n    if (!filler) {\n      return;\n    }\n    if (isFiller(filler)) {\n      const repeat = (filler as Pattern).repeat || '',\n        finalWidth = this.width,\n        finalHeight = this.height,\n        shouldInvert = this[`${property}Vpt`],\n        additionalTransform = shouldInvert\n          ? matrixToSVG(invertTransform(this.viewportTransform))\n          : '';\n      markup.push(\n        `<rect transform=\"${additionalTransform} translate(${finalWidth / 2},${\n          finalHeight / 2\n        })\" x=\"${filler.offsetX - finalWidth / 2}\" y=\"${\n          filler.offsetY - finalHeight / 2\n        }\" width=\"${\n          (repeat === 'repeat-y' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).width\n            : finalWidth\n        }\" height=\"${\n          (repeat === 'repeat-x' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).height\n            : finalHeight\n        }\" fill=\"url(#SVGID_${filler.id})\"></rect>\\n`,\n      );\n    } else {\n      markup.push(\n        '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n        'fill=\"',\n        filler,\n        '\"',\n        '></rect>\\n',\n      );\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   *\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   *\n   * @param {String|Object} json JSON string or object\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @param {Object} [options] options\n   * @param {AbortSignal} [options.signal] see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @return {Promise<Canvas | StaticCanvas>} instance\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json).then((canvas) => canvas.requestRenderAll());\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * }).then((canvas) => {\n   *   ... canvas is restored, add your code.\n   * });\n   *\n   */\n  loadFromJSON(\n    json: string | Record<string, any>,\n    reviver?: EnlivenObjectOptions['reviver'],\n    { signal }: Abortable = {},\n  ): Promise<this> {\n    if (!json) {\n      return Promise.reject(new FabricError('`json` is undefined'));\n    }\n\n    // parse json if it wasn't already\n    const serialized = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n      objects = [],\n      backgroundImage,\n      background,\n      overlayImage,\n      overlay,\n      clipPath,\n    } = serialized;\n    const renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, {\n        reviver,\n        signal,\n      }),\n      enlivenObjectEnlivables(\n        {\n          backgroundImage,\n          backgroundColor: background,\n          overlayImage,\n          overlayColor: overlay,\n          clipPath,\n        },\n        { signal },\n      ),\n    ]).then(([enlived, enlivedMap]) => {\n      this.clear();\n      this.add(...enlived);\n      this.set(serialized);\n      this.set(enlivedMap);\n      this.renderOnAddRemove = renderOnAddRemove;\n      return this;\n    });\n  }\n\n  /**\n   * Clones canvas instance\n   * @param {string[]} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone(properties: string[]) {\n    const data = this.toObject(properties);\n    const canvas = this.cloneWithoutData();\n    return canvas.loadFromJSON(data);\n  }\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions since loadFromJSON does not affect canvas size.\n   */\n  cloneWithoutData() {\n    const el = createCanvasElementFor(this);\n    return new (this.constructor as Constructor<this>)(el);\n  }\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link https://jsfiddle.net/xsjua1rd/ demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   * @example <caption>Generate dataURL with objects that overlap a specified object</caption>\n   * var myObject;\n   * var dataURL = canvas.toDataURL({\n   *   filter: (object) => object.isContainedWithinObject(myObject) || object.intersectsWithObject(myObject)\n   * });\n   */\n  toDataURL(options = {} as TDataUrlOptions): string {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toDataURL(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n  toBlob(options = {} as TDataUrlOptions): Promise<Blob | null> {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toBlob(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n\n  /**\n   * Create a new HTMLCanvas element painted with the current canvas content.\n   * No need to resize the actual one or repaint it.\n   * Will transfer object ownership to a new canvas, paint it, and set everything back.\n   * This is an intermediary step used to get to a dataUrl but also it is useful to\n   * create quick image copies of a canvas without passing for the dataUrl string\n   * @param {Number} [multiplier] a zoom factor.\n   * @param {Object} [options] Cropping informations\n   * @param {Number} [options.left] Cropping left offset.\n   * @param {Number} [options.top] Cropping top offset.\n   * @param {Number} [options.width] Cropping width.\n   * @param {Number} [options.height] Cropping height.\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   */\n  toCanvasElement(\n    multiplier = 1,\n    { width, height, left, top, filter } = {} as TToCanvasElementOptions,\n  ): HTMLCanvasElement {\n    const scaledWidth = (width || this.width) * multiplier,\n      scaledHeight = (height || this.height) * multiplier,\n      zoom = this.getZoom(),\n      originalWidth = this.width,\n      originalHeight = this.height,\n      originalSkipControlsDrawing = this.skipControlsDrawing,\n      newZoom = zoom * multiplier,\n      vp = this.viewportTransform,\n      translateX = (vp[4] - (left || 0)) * multiplier,\n      translateY = (vp[5] - (top || 0)) * multiplier,\n      newVp = [newZoom, 0, 0, newZoom, translateX, translateY] as TMat2D,\n      originalRetina = this.enableRetinaScaling,\n      canvasEl = createCanvasElementFor({\n        width: scaledWidth,\n        height: scaledHeight,\n      }),\n      objectsToRender = filter\n        ? this._objects.filter((obj) => filter(obj))\n        : this._objects;\n    this.enableRetinaScaling = false;\n    this.viewportTransform = newVp;\n    this.width = scaledWidth;\n    this.height = scaledHeight;\n    this.skipControlsDrawing = true;\n    this.calcViewportBoundaries();\n    this.renderCanvas(canvasEl.getContext('2d')!, objectsToRender);\n    this.viewportTransform = vp;\n    this.width = originalWidth;\n    this.height = originalHeight;\n    this.calcViewportBoundaries();\n    this.enableRetinaScaling = originalRetina;\n    this.skipControlsDrawing = originalSkipControlsDrawing;\n    return canvasEl;\n  }\n\n  /**\n   * Waits until rendering has settled to destroy the canvas\n   * @returns {Promise<boolean>} a promise resolving to `true` once the canvas has been destroyed or to `false` if the canvas has was already destroyed\n   * @throws if aborted by a consequent call\n   */\n  dispose() {\n    !this.disposed &&\n      this.elements.cleanupDOM({ width: this.width, height: this.height });\n    runningAnimations.cancelByCanvas(this);\n    this.disposed = true;\n    return new Promise<boolean>((resolve, reject) => {\n      const task = () => {\n        this.destroy();\n        resolve(true);\n      };\n      task.kill = reject;\n      if (this.__cleanupTask) {\n        this.__cleanupTask.kill('aborted');\n      }\n\n      if (this.destroyed) {\n        resolve(false);\n      } else if (this.nextRenderHandle) {\n        this.__cleanupTask = task;\n      } else {\n        task();\n      }\n    });\n  }\n\n  /**\n   * Clears the canvas element, disposes objects and frees resources.\n   *\n   * Invoked as part of the **async** operation of {@link dispose}.\n   *\n   * **CAUTION**:\n   *\n   * This method is **UNSAFE**.\n   * You may encounter a race condition using it if there's a requested render.\n   * Call this method only if you are sure rendering has settled.\n   * Consider using {@link dispose} as it is **SAFE**\n   *\n   * @private\n   */\n  destroy() {\n    this.destroyed = true;\n    this.cancelRequestedRender();\n    this.forEachObject((object) => object.dispose());\n    this._objects = [];\n    if (this.backgroundImage) {\n      this.backgroundImage.dispose();\n    }\n    this.backgroundImage = undefined;\n    if (this.overlayImage) {\n      this.overlayImage.dispose();\n    }\n    this.overlayImage = undefined;\n    this.elements.dispose();\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String} string representation of an instance\n   */\n  toString() {\n    return `#<Canvas (${this.complexity()}): { objects: ${\n      this._objects.length\n    } }>`;\n  }\n}\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport { getScrollLeftTop } from './dom_misc';\n\nconst touchEvents = ['touchstart', 'touchmove', 'touchend'];\n\nfunction getTouchInfo(event: TouchEvent | MouseEvent): MouseEvent | Touch {\n  const touchProp = (event as TouchEvent).changedTouches;\n  if (touchProp && touchProp[0]) {\n    return touchProp[0];\n  }\n  return event as MouseEvent;\n}\n\nexport const getPointer = (event: TPointerEvent): Point => {\n  const element = event.target as HTMLElement,\n    scroll = getScrollLeftTop(element),\n    _evt = getTouchInfo(event);\n  return new Point(_evt.clientX + scroll.left, _evt.clientY + scroll.top);\n};\n\nexport const isTouchEvent = (event: TPointerEvent) =>\n  touchEvents.includes(event.type) ||\n  (event as PointerEvent).pointerType === 'touch';\n\nexport const stopEvent = (e: Event) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\n","import type { XY } from '../../Point';\nimport type { TBBox } from '../../typedefs';\n\n/**\n * Calculates bounding box (left, top, width, height) from given `points`\n * @param {XY[]} points\n * @return {Object} Object with left, top, width, height properties\n */\nexport const makeBoundingBoxFromPoints = (points: XY[]): TBBox => {\n  let left = 0,\n    top = 0,\n    width = 0,\n    height = 0;\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const { x, y } = points[i];\n    if (x > width || !i) width = x;\n    if (x < left || !i) left = x;\n    if (y > height || !i) height = y;\n    if (y < top || !i) top = y;\n  }\n\n  return {\n    left,\n    top,\n    width: width - left,\n    height: height - top,\n  };\n};\n","import { Point } from '../../Point';\nimport { CENTER } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { makeBoundingBoxFromPoints } from './boundingBoxFromPoints';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from './matrix';\n\n/**\n * given an object and a transform, apply the inverse transform to the object,\n * this is equivalent to remove from that object that transformation, so that\n * added in a space with the removed transform, the object will be the same as before.\n * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n * Removing from an object a transform that rotate by 30deg is like rotating by 30deg\n * in the opposite direction.\n * This util is used to add objects inside transformed groups or nested groups.\n * @param {FabricObject} object the object you want to transform\n * @param {TMat2D} transform the destination transform\n */\nexport const removeTransformFromObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const inverted = invertTransform(transform),\n    finalTransform = multiplyTransformMatrices(\n      inverted,\n      object.calcOwnMatrix(),\n    );\n  applyTransformToObject(object, finalTransform);\n};\n\n/**\n * given an object and a transform, apply the transform to the object.\n * this is equivalent to change the space where the object is drawn.\n * Adding to an object a transform that scale by 2 is like scaling it by 2.\n * This is used when removing an object from an active selection for example.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const addTransformToObject = (object: FabricObject, transform: TMat2D) =>\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(transform, object.calcOwnMatrix()),\n  );\n\n/**\n * discard an object transform state and apply the one from the matrix.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const applyTransformToObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const { translateX, translateY, scaleX, scaleY, ...otherOptions } =\n      qrDecompose(transform),\n    center = new Point(translateX, translateY);\n  object.flipX = false;\n  object.flipY = false;\n  Object.assign(object, otherOptions);\n  object.set({ scaleX, scaleY });\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n/**\n * reset an object transform state to neutral. Top and left are not accounted for\n * @param  {FabricObject} target object to transform\n */\nexport const resetObjectTransform = (target: FabricObject) => {\n  target.scaleX = 1;\n  target.scaleY = 1;\n  target.skewX = 0;\n  target.skewY = 0;\n  target.flipX = false;\n  target.flipY = false;\n  target.rotate(0);\n};\n\n/**\n * Extract Object transform values\n * @param  {FabricObject} target object to read from\n * @return {Object} Components of transform\n */\nexport const saveObjectTransform = (target: FabricObject) => ({\n  scaleX: target.scaleX,\n  scaleY: target.scaleY,\n  skewX: target.skewX,\n  skewY: target.skewY,\n  angle: target.angle,\n  left: target.left,\n  flipX: target.flipX,\n  flipY: target.flipY,\n  top: target.top,\n});\n\n/**\n * given a width and height, return the size of the bounding box\n * that can contains the box with width/height with applied transform.\n * Use to calculate the boxes around objects for controls.\n * @param {Number} width\n * @param {Number} height\n * @param {TMat2D} t\n * @returns {Point} size\n */\nexport const sizeAfterTransform = (\n  width: number,\n  height: number,\n  t: TMat2D,\n) => {\n  const dimX = width / 2,\n    dimY = height / 2,\n    points = [\n      new Point(-dimX, -dimY),\n      new Point(dimX, -dimY),\n      new Point(-dimX, dimY),\n      new Point(dimX, dimY),\n    ].map((p) => p.transform(t)),\n    bbox = makeBoundingBoxFromPoints(points);\n  return new Point(bbox.width, bbox.height);\n};\n","import { iMatrix } from '../../constants';\nimport type { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { invertTransform, multiplyTransformMatrices } from './matrix';\nimport { applyTransformToObject } from './objectTransforms';\n\n/**\n * We are actually looking for the transformation from the destination plane to the source plane (change of basis matrix)\\\n * The object will exist on the destination plane and we want it to seem unchanged by it so we invert the destination matrix (`to`) and then apply the source matrix (`from`)\n * @param [from]\n * @param [to]\n * @returns\n */\nexport const calcPlaneChangeMatrix = (\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n) => multiplyTransformMatrices(invertTransform(to), from);\n\n/**\n * Sends a point from the source coordinate plane to the destination coordinate plane.\\\n * From the canvas/viewer's perspective the point remains unchanged.\n *\n * @example <caption>Send point from canvas plane to group plane</caption>\n * var obj = new Rect({ left: 20, top: 20, width: 60, height: 60, strokeWidth: 0 });\n * var group = new Group([obj], { strokeWidth: 0 });\n * var sentPoint1 = sendPointToPlane(new Point(50, 50), undefined, group.calcTransformMatrix());\n * var sentPoint2 = sendPointToPlane(new Point(50, 50), iMatrix, group.calcTransformMatrix());\n * console.log(sentPoint1, sentPoint2) //  both points print (0,0) which is the center of group\n *\n * @param {Point} point\n * @param {TMat2D} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `point` exists in the canvas coordinate plane.\n * @param {TMat2D} [to] destination plane matrix to contain object. Passing `undefined` means `point` should be sent to the canvas coordinate plane.\n * @returns {Point} transformed point\n */\nexport const sendPointToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to));\n\n/**\n * See {@link sendPointToPlane}\n */\nexport const sendVectorToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to), true);\n\n/**\n *\n * A util that abstracts applying transform to objects.\\\n * Sends `object` to the destination coordinate plane by applying the relevant transformations.\\\n * Changes the space/plane where `object` is drawn.\\\n * From the canvas/viewer's perspective `object` remains unchanged.\n *\n * @example <caption>Move clip path from one object to another while preserving it's appearance as viewed by canvas/viewer</caption>\n * let obj, obj2;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * // render\n * sendObjectToPlane(clipPath, obj.calcTransformMatrix(), obj2.calcTransformMatrix());\n * obj.clipPath = undefined;\n * obj2.clipPath = clipPath;\n * // render, clipPath now clips obj2 but seems unchanged from the eyes of the viewer\n *\n * @example <caption>Clip an object's clip path with an existing object</caption>\n * let obj, existingObj;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * let transformTo = multiplyTransformMatrices(obj.calcTransformMatrix(), clipPath.calcTransformMatrix());\n * sendObjectToPlane(existingObj, existingObj.group?.calcTransformMatrix(), transformTo);\n * clipPath.clipPath = existingObj;\n *\n * @param {FabricObject} object\n * @param {Matrix} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `object` is a direct child of canvas.\n * @param {Matrix} [to] destination plane matrix to contain object. Passing `undefined` means `object` should be sent to the canvas coordinate plane.\n * @returns {Matrix} the transform matrix that was applied to `object`\n */\nexport const sendObjectToPlane = (\n  object: FabricObject,\n  from?: TMat2D,\n  to?: TMat2D,\n): TMat2D => {\n  const t = calcPlaneChangeMatrix(from, to);\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(t, object.calcOwnMatrix()),\n  );\n  return t;\n};\n","import type {\n  ObjectModificationEvents,\n  TModificationEvents,\n} from '../EventTypeDefs';\n\nexport const fireEvent = (\n  eventName: TModificationEvents,\n  options: ObjectModificationEvents[typeof eventName],\n) => {\n  const {\n    transform: { target },\n  } = options;\n  target.canvas?.fire(`object:${eventName}`, {\n    ...options,\n    target,\n  });\n  target.fire(eventName, options);\n};\n","import type { TOriginX, TOriginY } from '../../typedefs';\n\nconst originOffset = {\n  left: -0.5,\n  top: -0.5,\n  center: 0,\n  bottom: 0.5,\n  right: 0.5,\n};\n/**\n * Resolves origin value relative to center\n * @private\n * @param {TOriginX | TOriginY} originValue originX / originY\n * @returns number\n */\n\nexport const resolveOrigin = (\n  originValue: TOriginX | TOriginY | number,\n): number =>\n  typeof originValue === 'string'\n    ? originOffset[originValue]\n    : originValue - 0.5;\n","import type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n\nconst unitVectorX = new Point(1, 0);\nconst zero = new Point();\n\n/**\n * Rotates `vector` with `radians`\n * @param {Point} vector The vector to rotate (x and y)\n * @param {Number} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotateVector = (vector: Point, radians: TRadian) =>\n  vector.rotate(radians);\n\n/**\n * Creates a vector from points represented as a point\n *\n * @param {Point} from\n * @param {Point} to\n * @returns {Point} vector\n */\nexport const createVector = (from: XY, to: XY): Point =>\n  new Point(to).subtract(from);\n\n/**\n * return the magnitude of a vector\n * @return {number}\n */\nexport const magnitude = (point: Point) => point.distanceFrom(zero);\n\n/**\n * Calculates the angle between 2 vectors\n * @param {Point} a\n * @param {Point} b\n * @returns the angle in radians from `a` to `b`\n */\nexport const calcAngleBetweenVectors = (a: Point, b: Point): TRadian =>\n  Math.atan2(crossProduct(a, b), dotProduct(a, b)) as TRadian;\n\n/**\n * Calculates the angle between the x axis and the vector\n * @param {Point} v\n * @returns the angle in radians of `v`\n */\nexport const calcVectorRotation = (v: Point) =>\n  calcAngleBetweenVectors(unitVectorX, v);\n\n/**\n * @param {Point} v\n * @returns {Point} vector representing the unit vector pointing to the direction of `v`\n */\nexport const getUnitVector = (v: Point): Point =>\n  v.eq(zero) ? v : v.scalarDivide(magnitude(v));\n\n/**\n * @param {Point} v\n * @param {Boolean} [counterClockwise] the direction of the orthogonal vector, defaults to `true`\n * @returns {Point} the unit orthogonal vector\n */\nexport const getOrthonormalVector = (\n  v: Point,\n  counterClockwise = true,\n): Point =>\n  getUnitVector(new Point(-v.y, v.x).scalarMultiply(counterClockwise ? 1 : -1));\n\n/**\n * Cross product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number} the magnitude of Z vector\n */\nexport const crossProduct = (a: Point, b: Point): number =>\n  a.x * b.y - a.y * b.x;\n\n/**\n * Dot product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number}\n */\nexport const dotProduct = (a: Point, b: Point): number => a.x * b.x + a.y * b.y;\n\n/**\n * Checks if the vector is between two others. It is considered\n * to be inside when the vector to be tested is between the\n * initial vector and the final vector (included) in a counterclockwise direction.\n * @param {Point} t vector to be tested\n * @param {Point} a initial vector\n * @param {Point} b final vector\n * @returns {boolean} true if the vector is among the others\n */\nexport const isBetweenVectors = (t: Point, a: Point, b: Point): boolean => {\n  if (t.eq(a) || t.eq(b)) return true;\n  const AxB = crossProduct(a, b),\n    AxT = crossProduct(a, t),\n    BxT = crossProduct(b, t);\n  return AxB >= 0 ? AxT >= 0 && BxT <= 0 : !(AxT <= 0 && BxT >= 0);\n};\n","import type {\n  TPointerEvent,\n  Transform,\n  TransformAction,\n  BasicTransformEvent,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TOriginX, TOriginY } from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { CENTER, quarterPI, twoMathPi } from '../constants';\nimport { calcVectorRotation, createVector } from '../util/misc/vectors';\nimport type { TOCoord } from '../shapes/Object/InteractiveObject';\nimport { sendPointToPlane } from '../util/misc/planeChange';\n\nexport const NOT_ALLOWED_CURSOR = 'not-allowed';\n\n/**\n * @param {Boolean} alreadySelected true if target is already selected\n * @param {String} corner a string representing the corner ml, mr, tl ...\n * @param {Event} e Event object\n * @param {FabricObject} [target] inserted back to help overriding. Unused\n */\nexport const getActionFromCorner = (\n  alreadySelected: boolean,\n  corner: string | undefined,\n  e: TPointerEvent,\n  target: FabricObject,\n) => {\n  if (!corner || !alreadySelected) {\n    return 'drag';\n  }\n  const control = target.controls[corner];\n  return control.getActionName(e, control, target);\n};\n\n/**\n * Checks if transform is centered\n * @param {Object} transform transform data\n * @return {Boolean} true if transform is centered\n */\nexport function isTransformCentered(transform: Transform) {\n  return (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) &&\n    resolveOrigin(transform.originY) === resolveOrigin(CENTER)\n  );\n}\n\nexport function invertOrigin(origin: TOriginX | TOriginY) {\n  return -resolveOrigin(origin) + 0.5;\n}\n\nexport const isLocked = (\n  target: FabricObject,\n  lockingKey:\n    | 'lockMovementX'\n    | 'lockMovementY'\n    | 'lockRotation'\n    | 'lockScalingX'\n    | 'lockScalingY'\n    | 'lockSkewingX'\n    | 'lockSkewingY'\n    | 'lockScalingFlip',\n) => target[lockingKey];\n\nexport const commonEventInfo: TransformAction<\n  Transform,\n  BasicTransformEvent\n> = (eventData, transform, x, y) => {\n  return {\n    e: eventData,\n    transform,\n    pointer: new Point(x, y),\n  };\n};\n\n/**\n * Combine control position and object angle to find the control direction compared\n * to the object center.\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n * @param {Control} control the control class\n * @return {Number} 0 - 7 a quadrant number\n */\nexport function findCornerQuadrant(\n  fabricObject: FabricObject,\n  control: Control,\n  coord: TOCoord,\n): number {\n  const target = coord;\n  const center = sendPointToPlane(\n    fabricObject.getCenterPoint(),\n    fabricObject.canvas!.viewportTransform,\n    undefined,\n  );\n  const angle = calcVectorRotation(createVector(center, target)) + twoMathPi;\n  return Math.round((angle % twoMathPi) / quarterPI);\n}\n\n/**\n * @returns the normalized point (rotated relative to center) in local coordinates\n */\nfunction normalizePoint(\n  target: FabricObject,\n  point: Point,\n  originX: TOriginX,\n  originY: TOriginY,\n): Point {\n  const center = target.getRelativeCenterPoint(),\n    p =\n      typeof originX !== 'undefined' && typeof originY !== 'undefined'\n        ? target.translateToGivenOrigin(\n            center,\n            CENTER,\n            CENTER,\n            originX,\n            originY,\n          )\n        : new Point(target.left, target.top),\n    p2 = target.angle\n      ? point.rotate(-degreesToRadians(target.angle), center)\n      : point;\n  return p2.subtract(p);\n}\n\n/**\n * Transforms a point to the offset from the given origin\n * @param {Object} transform\n * @param {String} originX\n * @param {String} originY\n * @param {number} x\n * @param {number} y\n * @return {Fabric.Point} the normalized point\n */\nexport function getLocalPoint(\n  { target, corner }: Transform,\n  originX: TOriginX,\n  originY: TOriginY,\n  x: number,\n  y: number,\n) {\n  const control = target.controls[corner],\n    zoom = target.canvas?.getZoom() || 1,\n    padding = target.padding / zoom,\n    localPoint = normalizePoint(target, new Point(x, y), originX, originY);\n  if (localPoint.x >= padding) {\n    localPoint.x -= padding;\n  }\n  if (localPoint.x <= -padding) {\n    localPoint.x += padding;\n  }\n  if (localPoint.y >= padding) {\n    localPoint.y -= padding;\n  }\n  if (localPoint.y <= padding) {\n    localPoint.y += padding;\n  }\n  localPoint.x -= control.offsetX;\n  localPoint.y -= control.offsetY;\n  return localPoint;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { LEFT, TOP, MOVING } from '../constants';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo, isLocked } from './util';\n\n/**\n * Action handler\n * @private\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if the translation occurred\n */\nexport const dragHandler: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const { target, offsetX, offsetY } = transform,\n    newLeft = x - offsetX,\n    newTop = y - offsetY,\n    moveX = !isLocked(target, 'lockMovementX') && target.left !== newLeft,\n    moveY = !isLocked(target, 'lockMovementY') && target.top !== newTop;\n  moveX && target.set(LEFT, newLeft);\n  moveY && target.set(TOP, newTop);\n  if (moveX || moveY) {\n    fireEvent(MOVING, commonEventInfo(eventData, transform, x, y));\n  }\n  return moveX || moveY;\n};\n","/**\n * Map of the 148 color names with HEX code\n * @see: https://www.w3.org/TR/css3-color/#svg-color\n */\nexport const ColorNameMap = {\n  aliceblue: '#F0F8FF',\n  antiquewhite: '#FAEBD7',\n  aqua: '#0FF',\n  aquamarine: '#7FFFD4',\n  azure: '#F0FFFF',\n  beige: '#F5F5DC',\n  bisque: '#FFE4C4',\n  black: '#000',\n  blanchedalmond: '#FFEBCD',\n  blue: '#00F',\n  blueviolet: '#8A2BE2',\n  brown: '#A52A2A',\n  burlywood: '#DEB887',\n  cadetblue: '#5F9EA0',\n  chartreuse: '#7FFF00',\n  chocolate: '#D2691E',\n  coral: '#FF7F50',\n  cornflowerblue: '#6495ED',\n  cornsilk: '#FFF8DC',\n  crimson: '#DC143C',\n  cyan: '#0FF',\n  darkblue: '#00008B',\n  darkcyan: '#008B8B',\n  darkgoldenrod: '#B8860B',\n  darkgray: '#A9A9A9',\n  darkgrey: '#A9A9A9',\n  darkgreen: '#006400',\n  darkkhaki: '#BDB76B',\n  darkmagenta: '#8B008B',\n  darkolivegreen: '#556B2F',\n  darkorange: '#FF8C00',\n  darkorchid: '#9932CC',\n  darkred: '#8B0000',\n  darksalmon: '#E9967A',\n  darkseagreen: '#8FBC8F',\n  darkslateblue: '#483D8B',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  darkturquoise: '#00CED1',\n  darkviolet: '#9400D3',\n  deeppink: '#FF1493',\n  deepskyblue: '#00BFFF',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1E90FF',\n  firebrick: '#B22222',\n  floralwhite: '#FFFAF0',\n  forestgreen: '#228B22',\n  fuchsia: '#F0F',\n  gainsboro: '#DCDCDC',\n  ghostwhite: '#F8F8FF',\n  gold: '#FFD700',\n  goldenrod: '#DAA520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#ADFF2F',\n  honeydew: '#F0FFF0',\n  hotpink: '#FF69B4',\n  indianred: '#CD5C5C',\n  indigo: '#4B0082',\n  ivory: '#FFFFF0',\n  khaki: '#F0E68C',\n  lavender: '#E6E6FA',\n  lavenderblush: '#FFF0F5',\n  lawngreen: '#7CFC00',\n  lemonchiffon: '#FFFACD',\n  lightblue: '#ADD8E6',\n  lightcoral: '#F08080',\n  lightcyan: '#E0FFFF',\n  lightgoldenrodyellow: '#FAFAD2',\n  lightgray: '#D3D3D3',\n  lightgrey: '#D3D3D3',\n  lightgreen: '#90EE90',\n  lightpink: '#FFB6C1',\n  lightsalmon: '#FFA07A',\n  lightseagreen: '#20B2AA',\n  lightskyblue: '#87CEFA',\n  lightslategray: '#789',\n  lightslategrey: '#789',\n  lightsteelblue: '#B0C4DE',\n  lightyellow: '#FFFFE0',\n  lime: '#0F0',\n  limegreen: '#32CD32',\n  linen: '#FAF0E6',\n  magenta: '#F0F',\n  maroon: '#800000',\n  mediumaquamarine: '#66CDAA',\n  mediumblue: '#0000CD',\n  mediumorchid: '#BA55D3',\n  mediumpurple: '#9370DB',\n  mediumseagreen: '#3CB371',\n  mediumslateblue: '#7B68EE',\n  mediumspringgreen: '#00FA9A',\n  mediumturquoise: '#48D1CC',\n  mediumvioletred: '#C71585',\n  midnightblue: '#191970',\n  mintcream: '#F5FFFA',\n  mistyrose: '#FFE4E1',\n  moccasin: '#FFE4B5',\n  navajowhite: '#FFDEAD',\n  navy: '#000080',\n  oldlace: '#FDF5E6',\n  olive: '#808000',\n  olivedrab: '#6B8E23',\n  orange: '#FFA500',\n  orangered: '#FF4500',\n  orchid: '#DA70D6',\n  palegoldenrod: '#EEE8AA',\n  palegreen: '#98FB98',\n  paleturquoise: '#AFEEEE',\n  palevioletred: '#DB7093',\n  papayawhip: '#FFEFD5',\n  peachpuff: '#FFDAB9',\n  peru: '#CD853F',\n  pink: '#FFC0CB',\n  plum: '#DDA0DD',\n  powderblue: '#B0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#639',\n  red: '#F00',\n  rosybrown: '#BC8F8F',\n  royalblue: '#4169E1',\n  saddlebrown: '#8B4513',\n  salmon: '#FA8072',\n  sandybrown: '#F4A460',\n  seagreen: '#2E8B57',\n  seashell: '#FFF5EE',\n  sienna: '#A0522D',\n  silver: '#C0C0C0',\n  skyblue: '#87CEEB',\n  slateblue: '#6A5ACD',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#FFFAFA',\n  springgreen: '#00FF7F',\n  steelblue: '#4682B4',\n  tan: '#D2B48C',\n  teal: '#008080',\n  thistle: '#D8BFD8',\n  tomato: '#FF6347',\n  turquoise: '#40E0D0',\n  violet: '#EE82EE',\n  wheat: '#F5DEB3',\n  white: '#FFF',\n  whitesmoke: '#F5F5F5',\n  yellow: '#FF0',\n  yellowgreen: '#9ACD32',\n};\n","import type { TRGBAColorSource } from './typedefs';\n\n/**\n * @param {Number} p\n * @param {Number} q\n * @param {Number} t\n * @return {Number}\n */\nexport const hue2rgb = (p: number, q: number, t: number): number => {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n};\n\n/**\n * Adapted from {@link https://gist.github.com/mjackson/5311256 https://gist.github.com/mjackson}\n * @param {Number} r Red color value\n * @param {Number} g Green color value\n * @param {Number} b Blue color value\n * @param {Number} a Alpha color value pass through\n * @return {TRGBColorSource} Hsl color\n */\nexport const rgb2Hsl = (\n  r: number,\n  g: number,\n  b: number,\n  a: number,\n): TRGBAColorSource => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const maxValue = Math.max(r, g, b),\n    minValue = Math.min(r, g, b);\n\n  let h!: number, s: number;\n  const l = (maxValue + minValue) / 2;\n\n  if (maxValue === minValue) {\n    h = s = 0; // achromatic\n  } else {\n    const d = maxValue - minValue;\n    s = l > 0.5 ? d / (2 - maxValue - minValue) : d / (maxValue + minValue);\n    switch (maxValue) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100), a];\n};\n\nexport const fromAlphaToFloat = (value = '1') =>\n  parseFloat(value) / (value.endsWith('%') ? 100 : 1);\n\n/**\n * Convert a value in the inclusive range [0, 255] to hex\n */\nexport const hexify = (value: number) =>\n  Math.min(Math.round(value), 255).toString(16).toUpperCase().padStart(2, '0');\n\n/**\n * Calculate the grey average value for rgb and pass through alpha\n */\nexport const greyAverage = ([\n  r,\n  g,\n  b,\n  a = 1,\n]: TRGBAColorSource): TRGBAColorSource => {\n  const avg = Math.round(r * 0.3 + g * 0.59 + b * 0.11);\n  return [avg, avg, avg, a];\n};\n","import { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { ColorNameMap } from './color_map';\nimport { reHSLa, reHex, reRGBa } from './constants';\nimport type { TRGBAColorSource, TColorArg } from './typedefs';\nimport {\n  hue2rgb,\n  hexify,\n  rgb2Hsl,\n  fromAlphaToFloat,\n  greyAverage,\n} from './util';\n\n/**\n * @class Color common color operations\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors colors}\n */\nexport class Color {\n  declare private _source: TRGBAColorSource;\n  isUnrecognised = false;\n\n  /**\n   *\n   * @param {string} [color] optional in hex or rgb(a) or hsl format or from known color list\n   */\n  constructor(color?: TColorArg) {\n    if (!color) {\n      // we default to black as canvas does\n      this.setSource([0, 0, 0, 1]);\n    } else if (color instanceof Color) {\n      this.setSource([...color._source]);\n    } else if (Array.isArray(color)) {\n      const [r, g, b, a = 1] = color;\n      this.setSource([r, g, b, a]);\n    } else {\n      this.setSource(this._tryParsingColor(color));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} [color] Color value to parse\n   * @returns {TRGBAColorSource}\n   */\n  protected _tryParsingColor(color: string) {\n    color = color.toLowerCase();\n    if (color in ColorNameMap) {\n      color = ColorNameMap[color as keyof typeof ColorNameMap];\n    }\n    return color === 'transparent'\n      ? ([255, 255, 255, 0] as TRGBAColorSource)\n      : Color.sourceFromHex(color) ||\n          Color.sourceFromRgb(color) ||\n          Color.sourceFromHsl(color) ||\n          // color is not recognized\n          // we default to black as canvas does\n          // eslint-disable-next-line no-constant-binary-expression\n          ((this.isUnrecognised = true) && ([0, 0, 0, 1] as TRGBAColorSource));\n  }\n\n  /**\n   * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @return {TRGBAColorSource}\n   */\n  getSource() {\n    return this._source;\n  }\n\n  /**\n   * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @param {TRGBAColorSource} source\n   */\n  setSource(source: TRGBAColorSource) {\n    this._source = source;\n  }\n\n  /**\n   * Returns color representation in RGB format\n   * @return {String} ex: rgb(0-255,0-255,0-255)\n   */\n  toRgb() {\n    const [r, g, b] = this.getSource();\n    return `rgb(${r},${g},${b})`;\n  }\n\n  /**\n   * Returns color representation in RGBA format\n   * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n   */\n  toRgba() {\n    return `rgba(${this.getSource().join(',')})`;\n  }\n\n  /**\n   * Returns color representation in HSL format\n   * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n   */\n  toHsl() {\n    const [h, s, l] = rgb2Hsl(...this.getSource());\n    return `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /**\n   * Returns color representation in HSLA format\n   * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n   */\n  toHsla() {\n    const [h, s, l, a] = rgb2Hsl(...this.getSource());\n    return `hsla(${h},${s}%,${l}%,${a})`;\n  }\n\n  /**\n   * Returns color representation in HEX format\n   * @return {String} ex: FF5555\n   */\n  toHex() {\n    const fullHex = this.toHexa();\n    return fullHex.slice(0, 6);\n  }\n\n  /**\n   * Returns color representation in HEXA format\n   * @return {String} ex: FF5555CC\n   */\n  toHexa() {\n    const [r, g, b, a] = this.getSource();\n    return `${hexify(r)}${hexify(g)}${hexify(b)}${hexify(Math.round(a * 255))}`;\n  }\n\n  /**\n   * Gets value of alpha channel for this color\n   * @return {Number} 0-1\n   */\n  getAlpha() {\n    return this.getSource()[3];\n  }\n\n  /**\n   * Sets value of alpha channel for this color\n   * @param {Number} alpha Alpha value 0-1\n   * @return {Color} thisArg\n   */\n  setAlpha(alpha: number) {\n    this._source[3] = alpha;\n    return this;\n  }\n\n  /**\n   * Transforms color to its grayscale representation\n   * @return {Color} thisArg\n   */\n  toGrayscale() {\n    this.setSource(greyAverage(this.getSource()));\n    return this;\n  }\n\n  /**\n   * Transforms color to its black and white representation\n   * @param {Number} threshold\n   * @return {Color} thisArg\n   */\n  toBlackWhite(threshold: number) {\n    const [average, , , a] = greyAverage(this.getSource()),\n      bOrW = average < (threshold || 127) ? 0 : 255;\n    this.setSource([bOrW, bOrW, bOrW, a]);\n    return this;\n  }\n\n  /**\n   * Overlays color with another color\n   * @param {String|Color} otherColor\n   * @return {Color} thisArg\n   */\n  overlayWith(otherColor: string | Color) {\n    if (!(otherColor instanceof Color)) {\n      otherColor = new Color(otherColor);\n    }\n\n    const source = this.getSource(),\n      otherAlpha = 0.5,\n      otherSource = otherColor.getSource(),\n      [R, G, B] = source.map((value, index) =>\n        Math.round(value * (1 - otherAlpha) + otherSource[index] * otherAlpha),\n      );\n\n    this.setSource([R, G, B, source[3]]);\n    return this;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {Color}\n   */\n  static fromRgb(color: string): Color {\n    return Color.fromRgba(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromRgba(color: string): Color {\n    return new Color(Color.sourceFromRgb(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromRgb(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reRGBa());\n    if (match) {\n      const [r, g, b] = match.slice(1, 4).map((value) => {\n        const parsedValue = parseFloat(value);\n        return value.endsWith('%')\n          ? Math.round(parsedValue * 2.55)\n          : parsedValue;\n      });\n      return [r, g, b, fromAlphaToFloat(match[4])];\n    }\n  }\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf Color\n   * @return {Color}\n   */\n  static fromHsl(color: string): Color {\n    return Color.fromHsla(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromHsla(color: string): Color {\n    return new Color(Color.sourceFromHsl(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {TRGBAColorSource | undefined} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  static sourceFromHsl(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reHSLa());\n    if (!match) {\n      return;\n    }\n    const match1degrees = Color.parseAngletoDegrees(match[1]);\n\n    const h = (((match1degrees % 360) + 360) % 360) / 360,\n      s = parseFloat(match[2]) / 100,\n      l = parseFloat(match[3]) / 100;\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      const q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n        p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      fromAlphaToFloat(match[4]),\n    ];\n  }\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color Color value ex: FF5555\n   * @return {Color}\n   */\n  static fromHex(color: string): Color {\n    return new Color(Color.sourceFromHex(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromHex(color: string): TRGBAColorSource | undefined {\n    if (color.match(reHex())) {\n      const value = color.slice(color.indexOf('#') + 1),\n        isShortNotation = value.length <= 4;\n      let expandedValue: string[];\n      if (isShortNotation) {\n        expandedValue = value.split('').map((hex) => hex + hex);\n      } else {\n        expandedValue = value.match(/.{2}/g)!;\n      }\n      const [r, g, b, a = 255] = expandedValue.map((hexCouple) =>\n        parseInt(hexCouple, 16),\n      );\n      return [r, g, b, a / 255];\n    }\n  }\n\n  /**\n   * Converts a string that could be any angle notation (50deg, 0.5turn, 2rad)\n   * into degrees without the 'deg' suffix\n   * @static\n   * @memberOf Color\n   * @param {String} value ex: 0deg, 0.5turn, 2rad\n   * @return {Number} number in degrees or NaN if inputs are invalid\n   */\n  static parseAngletoDegrees(value: string): number {\n    const lowercase = value.toLowerCase();\n    const numeric = parseFloat(lowercase);\n\n    if (lowercase.includes('rad')) {\n      return radiansToDegrees(numeric);\n    }\n\n    if (lowercase.includes('turn')) {\n      return numeric * 360;\n    }\n\n    // Value is probably just a number already in degrees eg '50'\n    return numeric;\n  }\n}\n","/**\n * Regex matching color in RGB or RGBA formats (ex: `rgb(0, 0, 0)`, `rgba(255, 100, 10, 0.5)`, `rgba( 255 , 100 , 10 , 0.5 )`, `rgb(1,1,1)`, `rgba(100%, 60%, 10%, 0.5)`)\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb\n * Formal syntax at the time of writing:\n * <rgb()> =\n *  rgb( [ <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )  |\n *  rgb( [ <number> | none ]{3} [ / [ <alpha-value> | none ] ]? )\n * <alpha-value> = <number> | <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an rgba or rgb CSS color value\n *\n * /^          # Beginning of the string\n * rgba?       # \"rgb\" or \"rgba\"\n * \\(\\s*       # Opening parenthesis and optional whitespace\n * (\\d{0,3}    # 0 to three digits R channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the first color component\n * %?          # Optional percent sign after the first color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits G channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the second color component\n * %?          # Optional percent sign after the second color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits B channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the third color component\n * %?          # Optional percent sign after the third color component\n * \\s*         # Optional whitespace\n * (?:         # Beginning of non-capturing group for alpha value\n *  \\s*        # Optional whitespace\n *  [,/]       # Comma or slash separator for alpha value\n *  \\s*        # Optional whitespace\n *  (\\d{0,3}   # Zero to three digits\n *    (?:\\.\\d+)? # Optional decimal with one or more digits\n *  )          # End of capturing group for alpha value\n *  %?         # Optional percent sign after alpha value\n *  \\s*        # Optional whitespace\n * )?          # End of non-capturing group for alpha value (optional)\n * \\)          # Closing parenthesis\n * $           # End of the string\n *\n * The alpha channel can be in the format 0.4 .7 or 1 or 73%\n *\n * WARNING this regex doesn't fail on off spec colors. it matches everything that could be a color.\n * So the spec does not allow for `rgba(30 , 45%  35, 49%)` but this will work anyways for us\n */\nexport const reRGBa = () =>\n  /^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HSL or HSLA formats (ex: hsl(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl\n * Formal syntax at the time of writing:\n * <hsl()> =\n *   hsl( [ <hue> | none ] [ <percentage> | none ] [ <percentage> | none ] [ / [ <alpha-value> | none ] ]? )\n *\n * <hue> =\n *   <number>  |\n *   <angle>\n *\n * <alpha-value> =\n *   <number>      |\n *   <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an hsla or hsl CSS color value\n *\n * /^hsla?\\(         // Matches the beginning of the string and the opening parenthesis of \"hsl\" or \"hsla\"\n * \\s*               // Matches any whitespace characters (space, tab, etc.) zero or more times\n * (\\d{0,3}          // Hue: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Hue: Optional (non capture group) decimal with one or more digits.\n * (?:deg|turn|rad)? // Hue: Optionally include suffix deg or turn or rad\n * )                 // Hue: End capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Saturation: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Saturation: Optional decimal with one or more digits in a non-capturing group\n * %?)               // Saturation: match optional % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Lightness: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Lightness: Optional decimal with one or more digits in a non-capturing group\n * %?)                // Lightness: match % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * (?:               // Alpha: Begins a non-capturing group for the alpha value\n *   \\s*             // Matches any whitespace characters zero or more times\n *   [,/]            // Matches a comma or forward slash\n *   \\s*             // Matches any whitespace characters zero or more times\n *   (\\d*(?:\\.\\d+)?%?) // Matches zero or more digits, optionally followed by a decimal point and one or more digits, followed by an optional percentage sign and captures it in a group\n *   \\s*             // Matches any whitespace characters zero or more times\n * )?                // Makes the alpha value group optional\n * \\)                // Matches the closing parenthesis\n * $/i               // Matches the end of the string and sets the regular expression to case-insensitive mode\n *\n * WARNING this regex doesn't fail on off spec colors. It matches everything that could be a color.\n * So the spec does not allow `hsl(30 , 45%  35, 49%)` but this will work anyways for us.\n */\nexport const reHSLa = () =>\n  /^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n */\nexport const reHex = () => /^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i;\n","import { Color } from '../../color/Color';\nimport { config } from '../../config';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, NONE } from '../../constants';\nimport type { TBBox, SVGElementName, SupportedSVGUnit } from '../../typedefs';\nimport { toFixed } from './toFixed';\n\n/**\n * Returns array of attributes for given svg that fabric parses\n * @param {SVGElementName} type Type of svg element (eg. 'circle')\n * @return {Array} string names of supported attributes\n */\nexport const getSvgAttributes = (type: SVGElementName) => {\n  const commonAttributes = ['instantiated_by_use', 'style', 'id', 'class'];\n  switch (type) {\n    case 'linearGradient':\n      return commonAttributes.concat([\n        'x1',\n        'y1',\n        'x2',\n        'y2',\n        'gradientUnits',\n        'gradientTransform',\n      ]);\n    case 'radialGradient':\n      return commonAttributes.concat([\n        'gradientUnits',\n        'gradientTransform',\n        'cx',\n        'cy',\n        'r',\n        'fx',\n        'fy',\n        'fr',\n      ]);\n    case 'stop':\n      return commonAttributes.concat(['offset', 'stop-color', 'stop-opacity']);\n  }\n  return commonAttributes;\n};\n\n/**\n * Converts from attribute value to pixel value if applicable.\n * Returns converted pixels or original value not converted.\n * @param {string} value number to operate on\n * @param {number} fontSize\n * @return {number}\n */\nexport const parseUnit = (value: string, fontSize = DEFAULT_SVG_FONT_SIZE) => {\n  const unit = /\\D{0,2}$/.exec(value),\n    number = parseFloat(value);\n  const dpi = config.DPI;\n  switch (unit?.[0] as SupportedSVGUnit) {\n    case 'mm':\n      return (number * dpi) / 25.4;\n\n    case 'cm':\n      return (number * dpi) / 2.54;\n\n    case 'in':\n      return number * dpi;\n\n    case 'pt':\n      return (number * dpi) / 72; // or * 4 / 3\n\n    case 'pc':\n      return ((number * dpi) / 72) * 12; // or * 16\n\n    case 'em':\n      return number * fontSize;\n\n    default:\n      return number;\n  }\n};\n\nexport type MeetOrSlice = 'meet' | 'slice';\n\nexport type MinMidMax = 'Min' | 'Mid' | 'Max' | 'none';\n\nexport type TPreserveArParsed = {\n  meetOrSlice: MeetOrSlice;\n  alignX: MinMidMax;\n  alignY: MinMidMax;\n};\n\n// align can be either none or undefined or a combination of mid/max\nconst parseAlign = (align: string): MinMidMax[] => {\n  //divide align in alignX and alignY\n  if (align && align !== NONE) {\n    return [align.slice(1, 4) as MinMidMax, align.slice(5, 8) as MinMidMax];\n  } else if (align === NONE) {\n    return [align, align];\n  }\n  return ['Mid', 'Mid'];\n};\n\n/**\n * Parse preserveAspectRatio attribute from element\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n * @param {string} attribute to be parsed\n * @return {Object} an object containing align and meetOrSlice attribute\n */\nexport const parsePreserveAspectRatioAttribute = (\n  attribute: string,\n): TPreserveArParsed => {\n  const [firstPart, secondPart] = attribute.trim().split(' ') as [\n    MinMidMax,\n    MeetOrSlice | undefined,\n  ];\n  const [alignX, alignY] = parseAlign(firstPart);\n  return {\n    meetOrSlice: secondPart || 'meet',\n    alignX,\n    alignY,\n  };\n};\n\n/**\n * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n * @param prop\n * @param value\n * @param {boolean} inlineStyle The default is inline style, the separator used is \":\", The other is \"=\"\n * @returns\n */\nexport const colorPropToSVG = (\n  prop: string,\n  value?: any,\n  inlineStyle = true,\n) => {\n  let colorValue;\n  let opacityValue;\n  if (!value) {\n    colorValue = 'none';\n  } else if (value.toLive) {\n    colorValue = `url(#SVGID_${value.id})`;\n  } else {\n    const color = new Color(value),\n      opacity = color.getAlpha();\n\n    colorValue = color.toRgb();\n    if (opacity !== 1) {\n      opacityValue = opacity.toString();\n    }\n  }\n  if (inlineStyle) {\n    return `${prop}: ${colorValue}; ${\n      opacityValue ? `${prop}-opacity: ${opacityValue}; ` : ''\n    }`;\n  } else {\n    return `${prop}=\"${colorValue}\" ${\n      opacityValue ? `${prop}-opacity=\"${opacityValue}\" ` : ''\n    }`;\n  }\n};\n\nexport const createSVGRect = (\n  color: string,\n  { left, top, width, height }: TBBox,\n  precision = config.NUM_FRACTION_DIGITS,\n) => {\n  const svgColor = colorPropToSVG(FILL, color, false);\n  const [x, y, w, h] = [left, top, width, height].map((value) =>\n    toFixed(value, precision),\n  );\n  return `<rect ${svgColor} x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\"></rect>`;\n};\n","import type { TSVGReviver } from '../../typedefs';\nimport { uid } from '../../util/internals/uid';\nimport { colorPropToSVG } from '../../util/misc/svgParsing';\nimport { FILL, NONE, STROKE } from '../../constants';\nimport type { FabricObject } from './FabricObject';\nimport { isFiller } from '../../util/typeAssertions';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nexport class FabricObjectSVGExportMixin {\n  /**\n   * When an object is being exported as SVG as a clippath, a reference inside the SVG is needed.\n   * This reference is a UID in the fabric namespace and is temporary stored here.\n   * @type {String}\n   */\n  declare clipPathId?: string;\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    skipShadow?: boolean,\n  ) {\n    const fillRule = this.fillRule ? this.fillRule : 'nonzero',\n      strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n      strokeDashArray = this.strokeDashArray\n        ? this.strokeDashArray.join(' ')\n        : NONE,\n      strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n      strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n      strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n      strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n      opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n      visibility = this.visible ? '' : ' visibility: hidden;',\n      filter = skipShadow ? '' : this.getSvgFilter(),\n      fill = colorPropToSVG(FILL, this.fill),\n      stroke = colorPropToSVG(STROKE, this.stroke);\n\n    return [\n      stroke,\n      'stroke-width: ',\n      strokeWidth,\n      '; ',\n      'stroke-dasharray: ',\n      strokeDashArray,\n      '; ',\n      'stroke-linecap: ',\n      strokeLineCap,\n      '; ',\n      'stroke-dashoffset: ',\n      strokeDashOffset,\n      '; ',\n      'stroke-linejoin: ',\n      strokeLineJoin,\n      '; ',\n      'stroke-miterlimit: ',\n      strokeMiterLimit,\n      '; ',\n      fill,\n      'fill-rule: ',\n      fillRule,\n      '; ',\n      'opacity: ',\n      opacity,\n      ';',\n      filter,\n      visibility,\n    ].join('');\n  }\n\n  /**\n   * Returns filter for svg shadow\n   * @return {String}\n   */\n  getSvgFilter(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.shadow ? `filter: url(#SVGID_${this.shadow.id});` : '';\n  }\n\n  /**\n   * Returns id attribute for svg output\n   * @return {String}\n   */\n  getSvgCommons(\n    this: FabricObjectSVGExportMixin & FabricObject & { id?: string },\n  ) {\n    return [\n      this.id ? `id=\"${this.id}\" ` : '',\n      this.clipPath\n        ? `clip-path=\"url(#${\n            (this.clipPath as FabricObjectSVGExportMixin & FabricObject)\n              .clipPathId\n          })\" `\n        : '',\n    ].join('');\n  }\n\n  /**\n   * Returns transform-string for svg-export\n   * @param {Boolean} use the full transform or the single object one.\n   * @return {String}\n   */\n  getSvgTransform(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    full?: boolean,\n    additionalTransform = '',\n  ) {\n    const transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n      svgTransform = `transform=\"${matrixToSVG(transform)}`;\n    return `${svgTransform}${additionalTransform}\" `;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * This function is implemented in each subclass\n   * This is just because typescript otherwise cryies all the time\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(_reviver?: TSVGReviver): string[] {\n    return [''];\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return this._createBaseSVGMarkup(this._toSVG(reviver), {\n      reviver,\n    });\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {\n        reviver,\n      })\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createBaseClipPathSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      reviver,\n      additionalTransform = '',\n    }: { reviver?: TSVGReviver; additionalTransform?: string } = {},\n  ) {\n    const commonPieces = [\n        this.getSvgTransform(true, additionalTransform),\n        this.getSvgCommons(),\n      ].join(''),\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    objectMarkup[index] = commonPieces;\n    return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      noStyle,\n      reviver,\n      withShadow,\n      additionalTransform,\n    }: {\n      noStyle?: boolean;\n      reviver?: TSVGReviver;\n      withShadow?: boolean;\n      additionalTransform?: string;\n    } = {},\n  ): string {\n    const styleInfo = noStyle ? '' : `style=\"${this.getSvgStyles()}\" `,\n      shadowInfo = withShadow ? `style=\"${this.getSvgFilter()}\" ` : '',\n      clipPath = this.clipPath as FabricObjectSVGExportMixin & FabricObject,\n      vectorEffect = this.strokeUniform\n        ? 'vector-effect=\"non-scaling-stroke\" '\n        : '',\n      absoluteClipPath = clipPath && clipPath.absolutePositioned,\n      stroke = this.stroke,\n      fill = this.fill,\n      shadow = this.shadow,\n      markup = [],\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    let clipPathMarkup;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      clipPathMarkup = `<clipPath id=\"${\n        clipPath.clipPathId\n      }\" >\\n${clipPath.toClipPathSVG(reviver)}</clipPath>\\n`;\n    }\n    if (absoluteClipPath) {\n      markup.push('<g ', shadowInfo, this.getSvgCommons(), ' >\\n');\n    }\n    markup.push(\n      '<g ',\n      this.getSvgTransform(false),\n      !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n      ' >\\n',\n    );\n    const commonPieces = [\n      styleInfo,\n      vectorEffect,\n      noStyle ? '' : this.addPaintOrder(),\n      ' ',\n      additionalTransform ? `transform=\"${additionalTransform}\" ` : '',\n    ].join('');\n    objectMarkup[index] = commonPieces;\n    if (isFiller(fill)) {\n      markup.push(fill.toSVG(this));\n    }\n    if (isFiller(stroke)) {\n      markup.push(stroke.toSVG(this));\n    }\n    if (shadow) {\n      markup.push(shadow.toSVG(this));\n    }\n    if (clipPath) {\n      markup.push(clipPathMarkup);\n    }\n    markup.push(objectMarkup.join(''));\n    markup.push('</g>\\n');\n    absoluteClipPath && markup.push('</g>\\n');\n    return reviver ? reviver(markup.join('')) : markup.join('');\n  }\n\n  addPaintOrder(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.paintFirst !== FILL ? ` paint-order=\"${this.paintFirst}\" ` : '';\n  }\n}\n","export function getSvgRegex(arr: string[]) {\n  return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n}\n","import { FILL, LEFT, STROKE, reNewline } from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { FabricText } from './Text';\n\nexport const TEXT_DECORATION_THICKNESS = 'textDecorationThickness';\n\nconst fontProperties = [\n  'fontSize',\n  'fontWeight',\n  'fontFamily',\n  'fontStyle',\n] as const;\n\nexport const textDecorationProperties = [\n  'underline',\n  'overline',\n  'linethrough',\n] as const;\n\nexport const textLayoutProperties: string[] = [\n  ...fontProperties,\n  'lineHeight',\n  'text',\n  'charSpacing',\n  'textAlign',\n  'styles',\n  'path',\n  'pathStartOffset',\n  'pathSide',\n  'pathAlign',\n];\n\nexport const additionalProps = [\n  ...textLayoutProperties,\n  ...textDecorationProperties,\n  'textBackgroundColor',\n  'direction',\n  TEXT_DECORATION_THICKNESS,\n] as const;\n\nexport type StylePropertiesType =\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'fontSize'\n  | 'fontFamily'\n  | 'fontWeight'\n  | 'fontStyle'\n  | 'textBackgroundColor'\n  | 'deltaY'\n  | 'overline'\n  | 'underline'\n  | 'linethrough'\n  | typeof TEXT_DECORATION_THICKNESS;\n\nexport const styleProperties: Readonly<StylePropertiesType[]> = [\n  ...fontProperties,\n  ...textDecorationProperties,\n  STROKE,\n  'strokeWidth',\n  FILL,\n  'deltaY',\n  'textBackgroundColor',\n  TEXT_DECORATION_THICKNESS,\n] as const;\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textDefaultValues: Partial<TClassProperties<FabricText>> = {\n  _reNewline: reNewline,\n  _reSpacesAndTabs: /[ \\t\\r]/g,\n  _reSpaceAndTab: /[ \\t\\r]/,\n  _reWords: /\\S+/g,\n  fontSize: 40,\n  fontWeight: 'normal',\n  fontFamily: 'Times New Roman',\n  underline: false,\n  overline: false,\n  linethrough: false,\n  textAlign: LEFT,\n  fontStyle: 'normal',\n  lineHeight: 1.16,\n  textBackgroundColor: '',\n  stroke: null,\n  shadow: null,\n  path: undefined,\n  pathStartOffset: 0,\n  pathSide: LEFT,\n  pathAlign: 'baseline',\n  charSpacing: 0,\n  deltaY: 0,\n  direction: 'ltr',\n  CACHE_FONT_SIZE: 400,\n  MIN_TEXT_WIDTH: 2,\n  // Text magic numbers\n  superscript: {\n    size: 0.6, // fontSize factor\n    baseline: -0.35, // baseline-shift factor (upwards)\n  },\n  subscript: {\n    size: 0.6, // fontSize factor\n    baseline: 0.11, // baseline-shift factor (downwards)\n  },\n  _fontSizeFraction: 0.222,\n  offsets: {\n    underline: 0.1,\n    linethrough: -0.28167, // added 1/30 to original number\n    overline: -0.81333, // added 1/15 to original number\n  },\n  _fontSizeMult: 1.13,\n  [TEXT_DECORATION_THICKNESS]: 66.667, // before implementation was 1/15\n};\n\nexport const JUSTIFY = 'justify';\nexport const JUSTIFY_LEFT = 'justify-left';\nexport const JUSTIFY_RIGHT = 'justify-right';\nexport const JUSTIFY_CENTER = 'justify-center';\n","import { getSvgRegex } from './getSvgRegex';\nimport { LEFT, TOP } from '../constants';\nimport { TEXT_DECORATION_THICKNESS } from '../shapes/Text/constants';\n\n// matches, e.g.: +14.56e-12, etc.\nexport const reNum = String.raw`[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?`;\nexport const viewportSeparator = String.raw`(?:\\s*,?\\s+|\\s*,\\s*)`;\n\nexport const svgNS = 'http://www.w3.org/2000/svg';\n\nexport const reFontDeclaration = new RegExp(\n  '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n    reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' +\n    reNum +\n    '))?\\\\s+(.*)',\n);\n\nexport const svgValidTagNames = [\n    'path',\n    'circle',\n    'polygon',\n    'polyline',\n    'ellipse',\n    'rect',\n    'line',\n    'image',\n    'text',\n  ],\n  svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n  svgInvalidAncestors = [\n    'pattern',\n    'defs',\n    'symbol',\n    'metadata',\n    'clipPath',\n    'mask',\n    'desc',\n  ],\n  svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n  attributesMap = {\n    cx: LEFT,\n    x: LEFT,\n    r: 'radius',\n    cy: TOP,\n    y: TOP,\n    display: 'visible',\n    visibility: 'visible',\n    transform: 'transformMatrix',\n    'fill-opacity': 'fillOpacity',\n    'fill-rule': 'fillRule',\n    'font-family': 'fontFamily',\n    'font-size': 'fontSize',\n    'font-style': 'fontStyle',\n    'font-weight': 'fontWeight',\n    'letter-spacing': 'charSpacing',\n    'paint-order': 'paintFirst',\n    'stroke-dasharray': 'strokeDashArray',\n    'stroke-dashoffset': 'strokeDashOffset',\n    'stroke-linecap': 'strokeLineCap',\n    'stroke-linejoin': 'strokeLineJoin',\n    'stroke-miterlimit': 'strokeMiterLimit',\n    'stroke-opacity': 'strokeOpacity',\n    'stroke-width': 'strokeWidth',\n    'text-decoration': 'textDecoration',\n    'text-anchor': 'textAnchor',\n    opacity: 'opacity',\n    'clip-path': 'clipPath',\n    'clip-rule': 'clipRule',\n    'vector-effect': 'strokeUniform',\n    'image-rendering': 'imageSmoothing',\n    'text-decoration-thickness': TEXT_DECORATION_THICKNESS,\n  },\n  fSize = 'font-size',\n  cPath = 'clip-path';\n\nexport const svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n\nexport const svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n\nexport const svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n\nexport const reViewBoxAttrValue = new RegExp(\n  String.raw`^\\s*(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})\\s*$`,\n);\n","import { classRegistry } from './ClassRegistry';\nimport { Color } from './color/Color';\nimport { config } from './config';\nimport { reNum } from './parser/constants';\nimport { Point } from './Point';\nimport type { FabricObject } from './shapes/Object/FabricObject';\nimport type { TClassProperties } from './typedefs';\nimport { uid } from './util/internals/uid';\nimport { pickBy } from './util/misc/pick';\nimport { degreesToRadians } from './util/misc/radiansDegreesConversion';\nimport { toFixed } from './util/misc/toFixed';\nimport { rotateVector } from './util/misc/vectors';\n\n/**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * - (?:\\s|^): This part captures either a whitespace character (\\s) or the beginning of a line (^). It's non-capturing (due to (?:...)), meaning it doesn't create a capturing group.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: This captures the first component of the shadow, which is the horizontal offset. Breaking it down:\n   *   - (-?\\d+): Captures an optional minus sign followed by one or more digits (integer part of the number).\n   *   - (?:\\.\\d*)?: Optionally captures a decimal point followed by zero or more digits (decimal part of the number).\n   *   - (?:px)?: Optionally captures the \"px\" unit.\n   *   - (?:\\s?|$): Captures either an optional whitespace or the end of the line. This whole part is wrapped in a non-capturing group and marked as optional with ?.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: Similar to the previous step, this captures the vertical offset.\n\n(\\d+(?:\\.\\d*)?(?:px)?)?: This captures the blur radius. It's similar to the horizontal offset but without the optional minus sign.\n\n(?:\\s+(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?){0,1}: This captures an optional part for the color. It allows for whitespace followed by a component with an optional minus sign, digits, decimal point, and \"px\" unit.\n\n(?:$|\\s): This captures either the end of the line or a whitespace character. It ensures that the match ends either at the end of the string or with a whitespace character.\n   */\n// eslint-disable-next-line max-len\n\nconst shadowOffsetRegex = '(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?';\n\nconst reOffsetsAndBlur = new RegExp(\n  '(?:\\\\s|^)' +\n    shadowOffsetRegex +\n    shadowOffsetRegex +\n    '(' +\n    reNum +\n    '?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)',\n);\n\nexport const shadowDefaultValues: Partial<TClassProperties<Shadow>> = {\n  color: 'rgb(0,0,0)',\n  blur: 0,\n  offsetX: 0,\n  offsetY: 0,\n  affectStroke: false,\n  includeDefaultValues: true,\n  nonScaling: false,\n};\n\nexport type SerializedShadowOptions = {\n  color: string;\n  blur: number;\n  offsetX: number;\n  offsetY: number;\n  affectStroke: boolean;\n  nonScaling: boolean;\n  type: string;\n};\n\nexport class Shadow {\n  /**\n   * Shadow color\n   * @type String\n   * @default\n   */\n  declare color: string;\n\n  /**\n   * Shadow blur\n   * @type Number\n   */\n  declare blur: number;\n\n  /**\n   * Shadow horizontal offset\n   * @type Number\n   * @default\n   */\n  declare offsetX: number;\n\n  /**\n   * Shadow vertical offset\n   * @type Number\n   * @default\n   */\n  declare offsetY: number;\n\n  /**\n   * Whether the shadow should affect stroke operations\n   * @type Boolean\n   * @default\n   */\n  declare affectStroke: boolean;\n\n  /**\n   * Indicates whether toObject should include default values\n   * @type Boolean\n   * @default\n   */\n  declare includeDefaultValues: boolean;\n\n  /**\n   * When `false`, the shadow will scale with the object.\n   * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\n   * default to false\n   * @type Boolean\n   * @default\n   */\n  declare nonScaling: boolean;\n\n  declare id: number;\n\n  static ownDefaults = shadowDefaultValues;\n\n  static type = 'shadow';\n\n  /**\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n   */\n  constructor(options?: Partial<TClassProperties<Shadow>>);\n  constructor(svgAttribute: string);\n  constructor(arg0: string | Partial<TClassProperties<Shadow>> = {}) {\n    const options: Partial<TClassProperties<Shadow>> =\n      typeof arg0 === 'string' ? Shadow.parseShadow(arg0) : arg0;\n    Object.assign(this, Shadow.ownDefaults, options);\n    this.id = uid();\n  }\n\n  /**\n   * @param {String} value Shadow value to parse\n   * @return {Object} Shadow object with color, offsetX, offsetY and blur\n   */\n  static parseShadow(value: string) {\n    const shadowStr = value.trim(),\n      [, offsetX = 0, offsetY = 0, blur = 0] = (\n        reOffsetsAndBlur.exec(shadowStr) || []\n      ).map((value) => parseFloat(value) || 0),\n      color = (shadowStr.replace(reOffsetsAndBlur, '') || 'rgb(0,0,0)').trim();\n\n    return {\n      color,\n      offsetX,\n      offsetY,\n      blur,\n    };\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n   * @return {String} Returns CSS3 text-shadow declaration\n   */\n  toString() {\n    return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n  }\n\n  /**\n   * Returns SVG representation of a shadow\n   * @param {FabricObject} object\n   * @return {String} SVG representation of a shadow\n   */\n  toSVG(object: FabricObject) {\n    const offset = rotateVector(\n        new Point(this.offsetX, this.offsetY),\n        degreesToRadians(-object.angle),\n      ),\n      BLUR_BOX = 20,\n      color = new Color(this.color);\n    let fBoxX = 40,\n      fBoxY = 40;\n\n    if (object.width && object.height) {\n      //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n      // we add some extra space to filter box to contain the blur ( 20 )\n      fBoxX =\n        toFixed(\n          (Math.abs(offset.x) + this.blur) / object.width,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n      fBoxY =\n        toFixed(\n          (Math.abs(offset.y) + this.blur) / object.height,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n    }\n    if (object.flipX) {\n      offset.x *= -1;\n    }\n    if (object.flipY) {\n      offset.y *= -1;\n    }\n\n    return `<filter id=\"SVGID_${this.id}\" y=\"-${fBoxY}%\" height=\"${\n      100 + 2 * fBoxY\n    }%\" x=\"-${fBoxX}%\" width=\"${\n      100 + 2 * fBoxX\n    }%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${toFixed(\n      this.blur ? this.blur / 2 : 0,\n      config.NUM_FRACTION_DIGITS,\n    )}\"></feGaussianBlur>\\n\\t<feOffset dx=\"${toFixed(\n      offset.x,\n      config.NUM_FRACTION_DIGITS,\n    )}\" dy=\"${toFixed(\n      offset.y,\n      config.NUM_FRACTION_DIGITS,\n    )}\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"${color.toRgb()}\" flood-opacity=\"${color.getAlpha()}\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n`;\n  }\n\n  /**\n   * Returns object representation of a shadow\n   * @return {Object} Object representation of a shadow instance\n   */\n  toObject() {\n    const data: SerializedShadowOptions = {\n      color: this.color,\n      blur: this.blur,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      affectStroke: this.affectStroke,\n      nonScaling: this.nonScaling,\n      type: (this.constructor as typeof Shadow).type,\n    };\n    const defaults = Shadow.ownDefaults as SerializedShadowOptions;\n    return !this.includeDefaultValues\n      ? pickBy(data, (value, key) => value !== defaults[key])\n      : data;\n  }\n\n  static async fromObject(options: Partial<TClassProperties<Shadow>>) {\n    return new this(options);\n  }\n}\n\nclassRegistry.setClass(Shadow, 'shadow');\n","export const capValue = (min: number, value: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n","import {\n  TOP,\n  LEFT,\n  SCALE_Y,\n  SCALE_X,\n  SKEW_X,\n  SKEW_Y,\n  FILL,\n  STROKE,\n} from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { InteractiveFabricObject } from './InteractiveObject';\nimport type { FabricObject } from './Object';\n\nexport const stateProperties = [\n  TOP,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  'flipX',\n  'flipY',\n  'originX',\n  'originY',\n  'angle',\n  'opacity',\n  'globalCompositeOperation',\n  'shadow',\n  'visible',\n  SKEW_X,\n  SKEW_Y,\n];\n\nexport const cacheProperties = [\n  FILL,\n  STROKE,\n  'strokeWidth',\n  'strokeDashArray',\n  'width',\n  'height',\n  'paintFirst',\n  'strokeUniform',\n  'strokeLineCap',\n  'strokeDashOffset',\n  'strokeLineJoin',\n  'strokeMiterLimit',\n  'backgroundColor',\n  'clipPath',\n];\n\nexport const fabricObjectDefaultValues: Partial<\n  TClassProperties<FabricObject>\n> = {\n  // see composeMatrix() to see order of transforms. First defaults listed based on this\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  angle: 0,\n  flipX: false,\n  flipY: false,\n  scaleX: 1,\n  scaleY: 1,\n  minScaleLimit: 0,\n  skewX: 0,\n  skewY: 0,\n  originX: LEFT,\n  originY: TOP,\n  strokeWidth: 1,\n  strokeUniform: false,\n  padding: 0,\n  opacity: 1,\n  paintFirst: FILL,\n  fill: 'rgb(0,0,0)',\n  fillRule: 'nonzero',\n  stroke: null,\n  strokeDashArray: null,\n  strokeDashOffset: 0,\n  strokeLineCap: 'butt',\n  strokeLineJoin: 'miter',\n  strokeMiterLimit: 4,\n  globalCompositeOperation: 'source-over',\n  backgroundColor: '',\n  shadow: null,\n  visible: true,\n  includeDefaultValues: true,\n  excludeFromExport: false,\n  objectCaching: true,\n  clipPath: undefined,\n  inverted: false,\n  absolutePositioned: false,\n  centeredRotation: true,\n  centeredScaling: false,\n  dirty: true,\n} as const;\n\nexport const interactiveObjectDefaultValues: Partial<\n  TClassProperties<InteractiveFabricObject>\n> = {\n  noScaleCache: true,\n  lockMovementX: false,\n  lockMovementY: false,\n  lockRotation: false,\n  lockScalingX: false,\n  lockScalingY: false,\n  lockSkewingX: false,\n  lockSkewingY: false,\n  lockScalingFlip: false,\n  cornerSize: 13,\n  touchCornerSize: 24,\n  transparentCorners: true,\n  cornerColor: 'rgb(178,204,255)',\n  cornerStrokeColor: '',\n  cornerStyle: 'rect',\n  cornerDashArray: null,\n  hasControls: true,\n  borderColor: 'rgb(178,204,255)',\n  borderDashArray: null,\n  borderOpacityWhenMoving: 0.4,\n  borderScaleFactor: 1,\n  hasBorders: true,\n  selectionBackgroundColor: '',\n  selectable: true,\n  evented: true,\n  perPixelTargetFind: false,\n  activeOn: 'down',\n  hoverCursor: null,\n  moveCursor: null,\n};\n","/**\n * Easing functions\n * @see {@link http://gizma.com/easing/ Easing Equations by Robert Penner}\n */\n\nimport { twoMathPi, halfPI } from '../../constants';\nimport type { TEasingFunction } from './types';\n\nconst normalize = (a: number, c: number, p: number, s: number) => {\n  if (a < Math.abs(c)) {\n    a = c;\n    s = p / 4;\n  } else {\n    //handle the 0/0 case:\n    if (c === 0 && a === 0) {\n      s = (p / twoMathPi) * Math.asin(1);\n    } else {\n      s = (p / twoMathPi) * Math.asin(c / a);\n    }\n  }\n  return { a, c, p, s };\n};\n\nconst elastic = (\n  a: number,\n  s: number,\n  p: number,\n  t: number,\n  d: number,\n): number =>\n  a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * twoMathPi) / p);\n\n/**\n * Default sinusoidal easing\n */\nexport const defaultEasing: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Cubic easing in\n */\nexport const easeInCubic: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 3 + b;\n\n/**\n * Cubic easing out\n */\nexport const easeOutCubic: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 3 + 1) + b;\n\n/**\n * Cubic easing in and out\n */\nexport const easeInOutCubic: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 3 + b;\n  }\n  return (c / 2) * ((t - 2) ** 3 + 2) + b;\n};\n\n/**\n * Quartic easing in\n */\nexport const easeInQuart: TEasingFunction = (t, b, c, d) =>\n  c * (t /= d) * t ** 3 + b;\n\n/**\n * Quartic easing out\n */\nexport const easeOutQuart: TEasingFunction = (t, b, c, d) =>\n  -c * ((t = t / d - 1) * t ** 3 - 1) + b;\n\n/**\n * Quartic easing in and out\n */\nexport const easeInOutQuart: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 4 + b;\n  }\n  return (-c / 2) * ((t -= 2) * t ** 3 - 2) + b;\n};\n\n/**\n * Quintic easing in\n */\nexport const easeInQuint: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 5 + b;\n\n/**\n * Quintic easing out\n */\nexport const easeOutQuint: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 5 + 1) + b;\n\n/**\n * Quintic easing in and out\n */\nexport const easeInOutQuint: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 5 + b;\n  }\n  return (c / 2) * ((t - 2) ** 5 + 2) + b;\n};\n\n/**\n * Sinusoidal easing in\n */\nexport const easeInSine: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Sinusoidal easing out\n */\nexport const easeOutSine: TEasingFunction = (t, b, c, d) =>\n  c * Math.sin((t / d) * halfPI) + b;\n\n/**\n * Sinusoidal easing in and out\n */\nexport const easeInOutSine: TEasingFunction = (t, b, c, d) =>\n  (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;\n\n/**\n * Exponential easing in\n */\nexport const easeInExpo: TEasingFunction = (t, b, c, d) =>\n  t === 0 ? b : c * 2 ** (10 * (t / d - 1)) + b;\n\n/**\n * Exponential easing out\n */\nexport const easeOutExpo: TEasingFunction = (t, b, c, d) =>\n  t === d ? b + c : c * -(2 ** ((-10 * t) / d) + 1) + b;\n\n/**\n * Exponential easing in and out\n */\nexport const easeInOutExpo: TEasingFunction = (t, b, c, d) => {\n  if (t === 0) {\n    return b;\n  }\n  if (t === d) {\n    return b + c;\n  }\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * 2 ** (10 * (t - 1)) + b;\n  }\n  return (c / 2) * -(2 ** (-10 * --t) + 2) + b;\n};\n\n/**\n * Circular easing in\n */\nexport const easeInCirc: TEasingFunction = (t, b, c, d) =>\n  -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\n/**\n * Circular easing out\n */\nexport const easeOutCirc: TEasingFunction = (t, b, c, d) =>\n  c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\n/**\n * Circular easing in and out\n */\nexport const easeInOutCirc: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (-c / 2) * (Math.sqrt(1 - t ** 2) - 1) + b;\n  }\n  return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n};\n\n/**\n * Elastic easing in\n */\nexport const easeInElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP } = normalize(a, c, p, s);\n  return -elastic(normA, normS, normP, t, d) + b;\n};\n\n/**\n * Elastic easing out\n */\nexport const easeOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  return (\n    normA * 2 ** (-10 * t) * Math.sin(((t * d - normS) * twoMathPi) / normP) +\n    normC +\n    b\n  );\n};\n\n/**\n * Elastic easing in and out\n */\nexport const easeInOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d / 2;\n  if (t === 2) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * (0.3 * 1.5);\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  if (t < 1) {\n    return -0.5 * elastic(normA, normS, normP, t, d) + b;\n  }\n  return (\n    normA *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t * d - normS) * twoMathPi) / normP) *\n      0.5 +\n    normC +\n    b\n  );\n};\n\n/**\n * Backwards easing in\n */\nexport const easeInBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * (t /= d) * t * ((s + 1) * t - s) + b;\n\n/**\n * Backwards easing out\n */\nexport const easeOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\n/**\n * Backwards easing in and out\n */\nexport const easeInOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n  }\n  return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n};\n\n/**\n * Bouncing easing out\n */\nexport const easeOutBounce: TEasingFunction = (t, b, c, d) => {\n  if ((t /= d) < 1 / 2.75) {\n    return c * (7.5625 * t * t) + b;\n  } else if (t < 2 / 2.75) {\n    return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n  } else if (t < 2.5 / 2.75) {\n    return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n  } else {\n    return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n  }\n};\n\n/**\n * Bouncing easing in\n */\nexport const easeInBounce: TEasingFunction = (t, b, c, d) =>\n  c - easeOutBounce(d - t, 0, c, d) + b;\n\n/**\n * Bouncing easing in and out\n */\nexport const easeInOutBounce: TEasingFunction = (t, b, c, d) =>\n  t < d / 2\n    ? easeInBounce(t * 2, 0, c, d) * 0.5 + b\n    : easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\n/**\n * Quadratic easing in\n */\nexport const easeInQuad: TEasingFunction = (t, b, c, d) => c * (t /= d) * t + b;\n\n/**\n * Quadratic easing out\n */\nexport const easeOutQuad: TEasingFunction = (t, b, c, d) =>\n  -c * (t /= d) * (t - 2) + b;\n\n/**\n * Quadratic easing in and out\n */\nexport const easeInOutQuad: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 2 + b;\n  }\n  return (-c / 2) * (--t * (t - 2) - 1) + b;\n};\n","import { noop } from '../../constants';\nimport { requestAnimFrame } from './AnimationFrameProvider';\nimport { runningAnimations } from './AnimationRegistry';\nimport { defaultEasing } from './easing';\nimport type {\n  AnimationState,\n  TAbortCallback,\n  TBaseAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultAbort = () => false;\n\nexport abstract class AnimationBase<\n  T extends number | number[] = number | number[],\n> {\n  declare readonly startValue: T;\n  declare readonly endValue: T;\n  declare readonly duration: number;\n  declare readonly delay: number;\n\n  declare protected readonly byValue: T;\n  declare protected readonly easing: TEasingFunction<T>;\n\n  declare private readonly _onStart: VoidFunction;\n  declare private readonly _onChange: TOnAnimationChangeCallback<T>;\n  declare private readonly _onComplete: TOnAnimationChangeCallback<T>;\n  declare private readonly _abort: TAbortCallback<T>;\n\n  /**\n   * Used to register the animation to a target object\n   * so that it can be cancelled within the object context\n   */\n  declare readonly target?: unknown;\n\n  private _state: AnimationState = 'pending';\n  /**\n   * Time %, or the ratio of `timeElapsed / duration`\n   * @see tick\n   */\n  durationProgress = 0;\n  /**\n   * Value %, or the ratio of `(currentValue - startValue) / (endValue - startValue)`\n   */\n  valueProgress = 0;\n  /**\n   * Current value\n   */\n  declare value: T;\n  /**\n   * Animation start time ms\n   */\n  declare private startTime: number;\n\n  constructor({\n    startValue,\n    byValue,\n    duration = 500,\n    delay = 0,\n    easing = defaultEasing,\n    onStart = noop,\n    onChange = noop,\n    onComplete = noop,\n    abort = defaultAbort,\n    target,\n  }: TBaseAnimationOptions<T>) {\n    this.tick = this.tick.bind(this);\n\n    this.duration = duration;\n    this.delay = delay;\n    this.easing = easing;\n    this._onStart = onStart;\n    this._onChange = onChange;\n    this._onComplete = onComplete;\n    this._abort = abort;\n    this.target = target;\n\n    this.startValue = startValue;\n    this.byValue = byValue;\n    this.value = this.startValue;\n    this.endValue = Object.freeze(this.calculate(this.duration).value);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  isDone() {\n    return this._state === 'aborted' || this._state === 'completed';\n  }\n\n  /**\n   * Calculate the current value based on the easing parameters\n   * @param timeElapsed in ms\n   * @protected\n   */\n  protected abstract calculate(timeElapsed: number): {\n    value: T;\n    valueProgress: number;\n  };\n\n  start() {\n    const firstTick: FrameRequestCallback = (timestamp) => {\n      if (this._state !== 'pending') return;\n      this.startTime = timestamp || +new Date();\n      this._state = 'running';\n      this._onStart();\n      this.tick(this.startTime);\n    };\n\n    this.register();\n\n    // setTimeout(cb, 0) will run cb on the next frame, causing a delay\n    // we don't want that\n    if (this.delay > 0) {\n      setTimeout(() => requestAnimFrame(firstTick), this.delay);\n    } else {\n      requestAnimFrame(firstTick);\n    }\n  }\n\n  private tick(t: number) {\n    const durationMs = (t || +new Date()) - this.startTime;\n    const boundDurationMs = Math.min(durationMs, this.duration);\n    this.durationProgress = boundDurationMs / this.duration;\n    const { value, valueProgress } = this.calculate(boundDurationMs);\n    this.value = Object.freeze(value);\n    this.valueProgress = valueProgress;\n\n    if (this._state === 'aborted') {\n      return;\n    } else if (\n      this._abort(this.value, this.valueProgress, this.durationProgress)\n    ) {\n      this._state = 'aborted';\n      this.unregister();\n    } else if (durationMs >= this.duration) {\n      this.durationProgress = this.valueProgress = 1;\n      this._onChange(this.endValue, this.valueProgress, this.durationProgress);\n      this._state = 'completed';\n      this._onComplete(\n        this.endValue,\n        this.valueProgress,\n        this.durationProgress,\n      );\n      this.unregister();\n    } else {\n      this._onChange(this.value, this.valueProgress, this.durationProgress);\n      requestAnimFrame(this.tick);\n    }\n  }\n\n  private register() {\n    runningAnimations.push(this as unknown as AnimationBase);\n  }\n\n  private unregister() {\n    runningAnimations.remove(this as unknown as AnimationBase);\n  }\n\n  abort() {\n    this._state = 'aborted';\n    this.unregister();\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ValueAnimationOptions } from './types';\n\nexport class ValueAnimation extends AnimationBase<number> {\n  constructor({\n    startValue = 0,\n    endValue = 100,\n    ...otherOptions\n  }: ValueAnimationOptions) {\n    super({\n      ...otherOptions,\n      startValue,\n      byValue: endValue - startValue,\n    });\n  }\n\n  protected calculate(timeElapsed: number) {\n    const value = this.easing(\n      timeElapsed,\n      this.startValue,\n      this.byValue,\n      this.duration,\n    );\n    return {\n      value,\n      valueProgress: Math.abs((value - this.startValue) / this.byValue),\n    };\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ArrayAnimationOptions } from './types';\n\nexport class ArrayAnimation extends AnimationBase<number[]> {\n  constructor({\n    startValue = [0],\n    endValue = [100],\n    ...options\n  }: ArrayAnimationOptions) {\n    super({\n      ...options,\n      startValue,\n      byValue: endValue.map((value, i) => value - startValue[i]),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const values = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    );\n    return {\n      value: values,\n      valueProgress: Math.abs(\n        (values[0] - this.startValue[0]) / this.byValue[0],\n      ),\n    };\n  }\n}\n","import { Color } from '../../color/Color';\nimport type { TRGBAColorSource } from '../../color/typedefs';\nimport { halfPI } from '../../constants';\nimport { capValue } from '../misc/capValue';\nimport { AnimationBase } from './AnimationBase';\nimport type {\n  ColorAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultColorEasing: TEasingFunction = (\n  timeElapsed,\n  startValue,\n  byValue,\n  duration,\n) => {\n  const durationProgress = 1 - Math.cos((timeElapsed / duration) * halfPI);\n  return startValue + byValue * durationProgress;\n};\n\nconst wrapColorCallback = <R>(\n  callback?: TOnAnimationChangeCallback<string, R>,\n) =>\n  callback &&\n  ((rgba: TRGBAColorSource, valueProgress: number, durationProgress: number) =>\n    callback(new Color(rgba).toRgba(), valueProgress, durationProgress));\n\nexport class ColorAnimation extends AnimationBase<TRGBAColorSource> {\n  constructor({\n    startValue,\n    endValue,\n    easing = defaultColorEasing,\n    onChange,\n    onComplete,\n    abort,\n    ...options\n  }: ColorAnimationOptions) {\n    const startColor = new Color(startValue).getSource();\n    const endColor = new Color(endValue).getSource();\n    super({\n      ...options,\n      startValue: startColor,\n      byValue: endColor.map(\n        (value, i) => value - startColor[i],\n      ) as TRGBAColorSource,\n      easing,\n      onChange: wrapColorCallback(onChange),\n      onComplete: wrapColorCallback(onComplete),\n      abort: wrapColorCallback(abort),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const [r, g, b, a] = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    ) as TRGBAColorSource;\n    const value = [\n      ...[r, g, b].map(Math.round),\n      capValue(0, a, 1),\n    ] as TRGBAColorSource;\n    return {\n      value,\n      valueProgress:\n        // to correctly calculate the change ratio we must find a changed value\n        value\n          .map((p, i) =>\n            this.byValue[i] !== 0\n              ? Math.abs((p - this.startValue[i]) / this.byValue[i])\n              : 0,\n          )\n          .find((p) => p !== 0) || 0,\n    };\n  }\n}\n","import { ValueAnimation } from './ValueAnimation';\nimport { ArrayAnimation } from './ArrayAnimation';\nimport { ColorAnimation } from './ColorAnimation';\nimport type {\n  ValueAnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n} from './types';\nimport type { TColorArg } from '../../color/typedefs';\n\nexport type TAnimation<T extends number | number[] | TColorArg> =\n  T extends TColorArg\n    ? ColorAnimation\n    : T extends number[]\n      ? ArrayAnimation\n      : ValueAnimation;\n\nconst isArrayAnimation = (\n  options: ArrayAnimationOptions | ValueAnimationOptions,\n): options is ArrayAnimationOptions => {\n  return Array.isArray(options.startValue) || Array.isArray(options.endValue);\n};\n\n/**\n * Changes value(s) from startValue to endValue within a certain period of time,\n * invoking callbacks as the value(s) change.\n *\n * @example\n * animate({\n *   startValue: 1,\n *   endValue: 0,\n *   onChange: (v) => {\n *     obj.set('opacity', v);\n *     // since we are running in a requested frame we should call `renderAll` and not `requestRenderAll`\n *     canvas.renderAll();\n *   }\n * });\n *\n * @example Using lists:\n * animate({\n *   startValue: [1, 2, 3],\n *   endValue: [2, 4, 6],\n *   onChange: ([x, y, zoom]) => {\n *     canvas.zoomToPoint(new Point(x, y), zoom);\n *     canvas.renderAll();\n *   }\n * });\n *\n */\nexport function animate(options: ArrayAnimationOptions): ArrayAnimation;\nexport function animate(options: ValueAnimationOptions): ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n>(\n  options: T,\n): T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n  R extends T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation,\n>(options: T): R {\n  const animation = (\n    isArrayAnimation(options)\n      ? new ArrayAnimation(options)\n      : new ValueAnimation(options)\n  ) as R;\n  animation.start();\n  return animation;\n}\n\nexport function animateColor(options: ColorAnimationOptions) {\n  const animation = new ColorAnimation(options);\n  animation.start();\n  return animation;\n}\n","import { Point } from './Point';\nimport { createVector } from './util/misc/vectors';\n\n/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\nexport type IntersectionType = 'Intersection' | 'Coincident' | 'Parallel';\n\nexport class Intersection {\n  declare points: Point[];\n\n  declare status?: IntersectionType;\n\n  constructor(status?: IntersectionType) {\n    this.status = status;\n    this.points = [];\n  }\n\n  /**\n   * Used to verify if a point is alredy in the collection\n   * @param {Point} point\n   * @returns {boolean}\n   */\n  private includes(point: Point): boolean {\n    return this.points.some((p) => p.eq(point));\n  }\n\n  /**\n   * Appends points of intersection\n   * @param {...Point[]} points\n   * @return {Intersection} thisArg\n   * @chainable\n   */\n  private append(...points: Point[]): Intersection {\n    this.points = this.points.concat(\n      points.filter((point) => {\n        return !this.includes(point);\n      }),\n    );\n    return this;\n  }\n\n  /**\n   * check if point T is on the segment or line defined between A and B\n   *\n   * @param {Point} T the point we are checking for\n   * @param {Point} A one extremity of the segment\n   * @param {Point} B the other extremity of the segment\n   * @param [infinite] if true checks if `T` is on the line defined by `A` and `B`\n   * @returns true if `T` is contained\n   */\n  static isPointContained(T: Point, A: Point, B: Point, infinite = false) {\n    if (A.eq(B)) {\n      // Edge case: the segment is a point, we check for coincidence,\n      // infinite param has no meaning because there are infinite lines to consider\n      return T.eq(A);\n    } else if (A.x === B.x) {\n      // Edge case: horizontal line.\n      // we first check if T.x has the same value, and then if T.y is contained between A.y and B.y\n      return (\n        T.x === A.x &&\n        (infinite || (T.y >= Math.min(A.y, B.y) && T.y <= Math.max(A.y, B.y)))\n      );\n    } else if (A.y === B.y) {\n      // Edge case: vertical line.\n      // we first check if T.y has the same value, and then if T.x is contained between A.x and B.x\n      return (\n        T.y === A.y &&\n        (infinite || (T.x >= Math.min(A.x, B.x) && T.x <= Math.max(A.x, B.x)))\n      );\n    } else {\n      // Generic case: sloped line.\n      // we check that AT has the same slope as AB\n      // for the segment case we need both the vectors to have the same direction and for AT to be lte AB in size\n      // for the infinite case we check the absolute value of the slope, since direction is meaningless\n      const AB = createVector(A, B);\n      const AT = createVector(A, T);\n      const s = AT.divide(AB);\n      return infinite\n        ? Math.abs(s.x) === Math.abs(s.y)\n        : s.x === s.y && s.x >= 0 && s.x <= 1;\n    }\n  }\n\n  /**\n   * Use the ray casting algorithm to determine if {@link point} is in the polygon defined by {@link points}\n   * @see https://en.wikipedia.org/wiki/Point_in_polygon\n   * @param point\n   * @param points polygon points\n   * @returns\n   */\n  static isPointInPolygon(point: Point, points: Point[]) {\n    const other = new Point(point).setX(\n      Math.min(point.x - 1, ...points.map((p) => p.x)),\n    );\n    let hits = 0;\n    for (let index = 0; index < points.length; index++) {\n      const inter = this.intersectSegmentSegment(\n        // polygon side\n        points[index],\n        points[(index + 1) % points.length],\n        // ray\n        point,\n        other,\n      );\n      if (inter.includes(point)) {\n        // point is on the polygon side\n        return true;\n      }\n      hits += Number(inter.status === 'Intersection');\n    }\n    return hits % 2 === 1;\n  }\n\n  /**\n   * Checks if a line intersects another\n   * @see {@link https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection line intersection}\n   * @see {@link https://en.wikipedia.org/wiki/Cramer%27s_rule Cramer's rule}\n   * @static\n   * @param {Point} a1\n   * @param {Point} a2\n   * @param {Point} b1\n   * @param {Point} b2\n   * @param {boolean} [aInfinite=true] check segment intersection by passing `false`\n   * @param {boolean} [bInfinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLineLine(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n    aInfinite = true,\n    bInfinite = true,\n  ): Intersection {\n    const a2xa1x = a2.x - a1.x,\n      a2ya1y = a2.y - a1.y,\n      b2xb1x = b2.x - b1.x,\n      b2yb1y = b2.y - b1.y,\n      a1xb1x = a1.x - b1.x,\n      a1yb1y = a1.y - b1.y,\n      uaT = b2xb1x * a1yb1y - b2yb1y * a1xb1x,\n      ubT = a2xa1x * a1yb1y - a2ya1y * a1xb1x,\n      uB = b2yb1y * a2xa1x - b2xb1x * a2ya1y;\n    if (uB !== 0) {\n      const ua = uaT / uB,\n        ub = ubT / uB;\n      if (\n        (aInfinite || (0 <= ua && ua <= 1)) &&\n        (bInfinite || (0 <= ub && ub <= 1))\n      ) {\n        return new Intersection('Intersection').append(\n          new Point(a1.x + ua * a2xa1x, a1.y + ua * a2ya1y),\n        );\n      } else {\n        return new Intersection();\n      }\n    } else {\n      if (uaT === 0 || ubT === 0) {\n        const segmentsCoincide =\n          aInfinite ||\n          bInfinite ||\n          Intersection.isPointContained(a1, b1, b2) ||\n          Intersection.isPointContained(a2, b1, b2) ||\n          Intersection.isPointContained(b1, a1, a2) ||\n          Intersection.isPointContained(b2, a1, a2);\n        return new Intersection(segmentsCoincide ? 'Coincident' : undefined);\n      } else {\n        return new Intersection('Parallel');\n      }\n    }\n  }\n\n  /**\n   * Checks if a segment intersects a line\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} s1 boundary point of segment\n   * @param {Point} s2 other boundary point of segment\n   * @param {Point} l1 point on line\n   * @param {Point} l2 other point on line\n   * @return {Intersection}\n   */\n  static intersectSegmentLine(\n    s1: Point,\n    s2: Point,\n    l1: Point,\n    l2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(s1, s2, l1, l2, false, true);\n  }\n\n  /**\n   * Checks if a segment intersects another\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point} b1 boundary point of segment\n   * @param {Point} b2 other boundary point of segment\n   * @return {Intersection}\n   */\n  static intersectSegmentSegment(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(a1, a2, b1, b2, false, false);\n  }\n\n  /**\n   * Checks if line intersects polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @see {@link intersectSegmentPolygon} for segment intersection\n   * @param {Point} a1 point on line\n   * @param {Point} a2 other point on line\n   * @param {Point[]} points polygon points\n   * @param {boolean} [infinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLinePolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n    infinite = true,\n  ): Intersection {\n    const result = new Intersection();\n    const length = points.length;\n\n    for (let i = 0, b1, b2, inter; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2, infinite, false);\n      if (inter.status === 'Coincident') {\n        return inter;\n      }\n      result.append(...inter.points);\n    }\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if segment intersects polygon\n   * @static\n   * @see {@link intersectLinePolygon} for line intersection\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point[]} points polygon points\n   * @return {Intersection}\n   */\n  static intersectSegmentPolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n  ): Intersection {\n    return Intersection.intersectLinePolygon(a1, a2, points, false);\n  }\n\n  /**\n   * Checks if polygon intersects another polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @param {Point[]} points1\n   * @param {Point[]} points2\n   * @return {Intersection}\n   */\n  static intersectPolygonPolygon(\n    points1: Point[],\n    points2: Point[],\n  ): Intersection {\n    const result = new Intersection(),\n      length = points1.length;\n    const coincidences: Intersection[] = [];\n\n    for (let i = 0; i < length; i++) {\n      const a1 = points1[i],\n        a2 = points1[(i + 1) % length],\n        inter = Intersection.intersectSegmentPolygon(a1, a2, points2);\n      if (inter.status === 'Coincident') {\n        coincidences.push(inter);\n        result.append(a1, a2);\n      } else {\n        result.append(...inter.points);\n      }\n    }\n\n    if (coincidences.length > 0 && coincidences.length === points1.length) {\n      return new Intersection('Coincident');\n    } else if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @see {@link intersectPolygonPolygon} for polygon intersection\n   * @param {Point[]} points polygon points\n   * @param {Point} r1 top left point of rect\n   * @param {Point} r2 bottom right point of rect\n   * @return {Intersection}\n   */\n  static intersectPolygonRectangle(\n    points: Point[],\n    r1: Point,\n    r2: Point,\n  ): Intersection {\n    const min = r1.min(r2),\n      max = r1.max(r2),\n      topRight = new Point(max.x, min.y),\n      bottomLeft = new Point(min.x, max.y);\n\n    return Intersection.intersectPolygonPolygon(points, [\n      min,\n      topRight,\n      max,\n      bottomLeft,\n    ]);\n  }\n}\n","import type {\n  TBBox,\n  TCornerPoint,\n  TDegree,\n  TMat2D,\n  TOriginX,\n  TOriginY,\n} from '../../typedefs';\nimport { SCALE_X, SCALE_Y, iMatrix } from '../../constants';\nimport { Intersection } from '../../Intersection';\nimport { Point } from '../../Point';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  createRotateMatrix,\n  createTranslateMatrix,\n  composeMatrix,\n  invertTransform,\n  multiplyTransformMatrices,\n  transformPoint,\n  calcPlaneRotation,\n} from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { ControlProps } from './types/ControlProps';\nimport { resolveOrigin } from '../../util/misc/resolveOrigin';\nimport type { Group } from '../Group';\nimport { calcDimensionsMatrix } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport { CommonMethods } from '../../CommonMethods';\nimport type { BaseProps } from './types/BaseProps';\nimport type { FillStrokeProps } from './types/FillStrokeProps';\nimport { CENTER, LEFT, TOP } from '../../constants';\n\ntype TMatrixCache = {\n  key: number[];\n  value: TMat2D;\n};\n\ntype TACoords = TCornerPoint;\n\nexport class ObjectGeometry<EventSpec extends ObjectEvents = ObjectEvents>\n  extends CommonMethods<EventSpec>\n  implements\n    Pick<ControlProps, 'padding'>,\n    BaseProps,\n    Pick<FillStrokeProps, 'strokeWidth' | 'strokeUniform'>\n{\n  // #region Geometry\n\n  declare padding: number;\n\n  /**\n   * Describe object's corner position in scene coordinates.\n   * The coordinates are derived from the following:\n   * left, top, width, height, scaleX, scaleY, skewX, skewY, angle, strokeWidth.\n   * The coordinates do not depend on viewport changes.\n   * The coordinates get updated with {@link setCoords}.\n   * You can calculate them without updating with {@link calcACoords()}\n   */\n  declare aCoords: TACoords;\n\n  /**\n   * storage cache for object transform matrix\n   */\n  declare ownMatrixCache?: TMatrixCache;\n\n  /**\n   * storage cache for object full transform matrix\n   */\n  declare matrixCache?: TMatrixCache;\n\n  /**\n   * A Reference of the Canvas where the object is actually added\n   * @type StaticCanvas | Canvas;\n   * @default undefined\n   * @private\n   */\n  declare canvas?: StaticCanvas | Canvas;\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  getX(): number {\n    return this.getXY().x;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  setX(value: number) {\n    this.setXY(this.getXY().setX(value));\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  getY(): number {\n    return this.getXY().y;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  setY(value: number) {\n    this.setXY(this.getXY().setY(value));\n  }\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getX}\n   */\n  getRelativeX(): number {\n    return this.left;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this method is identical to {@link setX}\n   */\n  setRelativeX(value: number) {\n    this.left = value;\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getY}\n   */\n  getRelativeY(): number {\n    return this.top;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link setY}\n   */\n  setRelativeY(value: number) {\n    this.top = value;\n  }\n\n  /**\n   * @returns {Point} x position according to object's {@link originX} {@link originY} properties in canvas coordinate plane\n   */\n  getXY(): Point {\n    const relativePosition = this.getRelativeXY();\n    return this.group\n      ? transformPoint(relativePosition, this.group.calcTransformMatrix())\n      : relativePosition;\n  }\n\n  /**\n   * Set an object position to a particular point, the point is intended in absolute ( canvas ) coordinate.\n   * You can specify {@link originX} and {@link originY} values,\n   * that otherwise are the object's current values.\n   * @example <caption>Set object's bottom left corner to point (5,5) on canvas</caption>\n   * object.setXY(new Point(5, 5), 'left', 'bottom').\n   * @param {Point} point position in scene coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setXY(point: Point, originX?: TOriginX, originY?: TOriginY) {\n    if (this.group) {\n      point = transformPoint(\n        point,\n        invertTransform(this.group.calcTransformMatrix()),\n      );\n    }\n    this.setRelativeXY(point, originX, originY);\n  }\n\n  /**\n   * @returns {Point} x,y position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   */\n  getRelativeXY(): Point {\n    return new Point(this.left, this.top);\n  }\n\n  /**\n   * As {@link setXY}, but in current parent's coordinate plane (the current group if any or the canvas)\n   * @param {Point} point position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setRelativeXY(\n    point: Point,\n    originX: TOriginX = this.originX,\n    originY: TOriginY = this.originY,\n  ) {\n    this.setPositionByOrigin(point, originX, originY);\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return false;\n  }\n\n  /**\n   * @return {Point[]} [tl, tr, br, bl] in the scene plane\n   */\n  getCoords(): Point[] {\n    const { tl, tr, br, bl } =\n      this.aCoords || (this.aCoords = this.calcACoords());\n    const coords = [tl, tr, br, bl];\n    if (this.group) {\n      const t = this.group.calcTransformMatrix();\n      return coords.map((p) => transformPoint(p, t));\n    }\n    return coords;\n  }\n\n  /**\n   * Checks if object intersects with the scene rect formed by {@link tl} and {@link br}\n   */\n  intersectsWithRect(tl: Point, br: Point): boolean {\n    const intersection = Intersection.intersectPolygonRectangle(\n      this.getCoords(),\n      tl,\n      br,\n    );\n    return intersection.status === 'Intersection';\n  }\n\n  /**\n   * Checks if object intersects with another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object intersects with another object\n   */\n  intersectsWithObject(other: ObjectGeometry): boolean {\n    const intersection = Intersection.intersectPolygonPolygon(\n      this.getCoords(),\n      other.getCoords(),\n    );\n\n    return (\n      intersection.status === 'Intersection' ||\n      intersection.status === 'Coincident' ||\n      other.isContainedWithinObject(this) ||\n      this.isContainedWithinObject(other)\n    );\n  }\n\n  /**\n   * Checks if object is fully contained within area of another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object is fully contained within area of another object\n   */\n  isContainedWithinObject(other: ObjectGeometry): boolean {\n    const points = this.getCoords();\n    return points.every((point) => other.containsPoint(point));\n  }\n\n  /**\n   * Checks if object is fully contained within the scene rect formed by {@link tl} and {@link br}\n   */\n  isContainedWithinRect(tl: Point, br: Point): boolean {\n    const { left, top, width, height } = this.getBoundingRect();\n    return (\n      left >= tl.x &&\n      left + width <= br.x &&\n      top >= tl.y &&\n      top + height <= br.y\n    );\n  }\n\n  isOverlapping<T extends ObjectGeometry>(other: T): boolean {\n    return (\n      this.intersectsWithObject(other) ||\n      this.isContainedWithinObject(other) ||\n      other.isContainedWithinObject(this)\n    );\n  }\n\n  /**\n   * Checks if point is inside the object\n   * @param {Point} point Point to check against\n   * @return {Boolean} true if point is inside the object\n   */\n  containsPoint(point: Point): boolean {\n    return Intersection.isPointInPolygon(point, this.getCoords());\n  }\n\n  /**\n   * Checks if object is contained within the canvas with current viewportTransform\n   * the check is done stopping at first point that appears on screen\n   * @return {Boolean} true if object is fully or partially contained within canvas\n   */\n  isOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    const points = this.getCoords();\n    // if some point is on screen, the object is on screen.\n    if (\n      points.some(\n        (point) =>\n          point.x <= br.x &&\n          point.x >= tl.x &&\n          point.y <= br.y &&\n          point.y >= tl.y,\n      )\n    ) {\n      return true;\n    }\n    // no points on screen, check intersection with absolute coordinates\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    // check if the object is so big that it contains the entire viewport\n    return this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Checks if object is partially contained within the canvas with current viewportTransform\n   * @return {Boolean} true if object is partially contained within canvas\n   */\n  isPartiallyOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    const allPointsAreOutside = this.getCoords().every(\n      (point) =>\n        (point.x >= br.x || point.x <= tl.x) &&\n        (point.y >= br.y || point.y <= tl.y),\n    );\n    // check if the object is so big that it contains the entire viewport\n    return allPointsAreOutside && this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Returns coordinates of object's bounding rectangle (left, top, width, height)\n   * the box is intended as aligned to axis of canvas.\n   * @return {Object} Object with left, top, width, height properties\n   */\n  getBoundingRect(): TBBox {\n    return makeBoundingBoxFromPoints(this.getCoords());\n  }\n\n  /**\n   * Returns width of an object's bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} width value\n   */\n  getScaledWidth(): number {\n    return this._getTransformedDimensions().x;\n  }\n\n  /**\n   * Returns height of an object bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} height value\n   */\n  getScaledHeight(): number {\n    return this._getTransformedDimensions().y;\n  }\n\n  /**\n   * Scales an object (equally by x and y)\n   * @param {Number} value Scale factor\n   * @return {void}\n   */\n  scale(value: number): void {\n    this._set(SCALE_X, value);\n    this._set(SCALE_Y, value);\n    this.setCoords();\n  }\n\n  /**\n   * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New width value\n   * @return {void}\n   */\n  scaleToWidth(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().width / this.getScaledWidth();\n    return this.scale(value / this.width / boundingRectFactor);\n  }\n\n  /**\n   * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New height value\n   * @return {void}\n   */\n  scaleToHeight(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().height / this.getScaledHeight();\n    return this.scale(value / this.height / boundingRectFactor);\n  }\n\n  getCanvasRetinaScaling() {\n    return this.canvas?.getRetinaScaling() || 1;\n  }\n\n  /**\n   * Returns the object angle relative to canvas counting also the group property\n   * @returns {TDegree}\n   */\n  getTotalAngle(): TDegree {\n    return this.group\n      ? radiansToDegrees(calcPlaneRotation(this.calcTransformMatrix()))\n      : this.angle;\n  }\n\n  /**\n   * Retrieves viewportTransform from Object's canvas if available\n   * @return {TMat2D}\n   */\n  getViewportTransform(): TMat2D {\n    return this.canvas?.viewportTransform || (iMatrix.concat() as TMat2D);\n  }\n\n  /**\n   * Calculates the coordinates of the 4 corner of the bbox, in absolute coordinates.\n   * those never change with zoom or viewport changes.\n   * @return {TCornerPoint}\n   */\n  calcACoords(): TCornerPoint {\n    const rotateMatrix = createRotateMatrix({ angle: this.angle }),\n      { x, y } = this.getRelativeCenterPoint(),\n      tMatrix = createTranslateMatrix(x, y),\n      finalMatrix = multiplyTransformMatrices(tMatrix, rotateMatrix),\n      dim = this._getTransformedDimensions(),\n      w = dim.x / 2,\n      h = dim.y / 2;\n    return {\n      // corners\n      tl: transformPoint({ x: -w, y: -h }, finalMatrix),\n      tr: transformPoint({ x: w, y: -h }, finalMatrix),\n      bl: transformPoint({ x: -w, y: h }, finalMatrix),\n      br: transformPoint({ x: w, y: h }, finalMatrix),\n    };\n  }\n\n  /**\n   * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n   * aCoords are used to quickly find an object on the canvas.\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   */\n  setCoords(): void {\n    this.aCoords = this.calcACoords();\n  }\n\n  transformMatrixKey(skipGroup = false): number[] {\n    let prefix: number[] = [];\n    if (!skipGroup && this.group) {\n      prefix = this.group.transformMatrixKey(skipGroup);\n    }\n    prefix.push(\n      this.top,\n      this.left,\n      this.width,\n      this.height,\n      this.scaleX,\n      this.scaleY,\n      this.angle,\n      this.strokeWidth,\n      this.skewX,\n      this.skewY,\n      +this.flipX,\n      +this.flipY,\n      resolveOrigin(this.originX),\n      resolveOrigin(this.originY),\n    );\n\n    return prefix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties.\n   * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n   * There are some situation in which this is useful to avoid the fake rotation.\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcTransformMatrix(skipGroup = false): TMat2D {\n    let matrix = this.calcOwnMatrix();\n    if (skipGroup || !this.group) {\n      return matrix;\n    }\n    const key = this.transformMatrixKey(skipGroup),\n      cache = this.matrixCache;\n    if (cache && cache.key.every((x, i) => x === key[i])) {\n      return cache.value;\n    }\n    if (this.group) {\n      matrix = multiplyTransformMatrices(\n        this.group.calcTransformMatrix(false),\n        matrix,\n      );\n    }\n    this.matrixCache = {\n      key,\n      value: matrix,\n    };\n    return matrix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties, this matrix does not include the group transformation\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcOwnMatrix(): TMat2D {\n    const key = this.transformMatrixKey(true),\n      cache = this.ownMatrixCache;\n    if (cache && cache.key === key) {\n      return cache.value;\n    }\n    const center = this.getRelativeCenterPoint(),\n      options = {\n        angle: this.angle,\n        translateX: center.x,\n        translateY: center.y,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        flipX: this.flipX,\n        flipY: this.flipY,\n      },\n      value = composeMatrix(options);\n    this.ownMatrixCache = {\n      key,\n      value,\n    };\n    return value;\n  }\n\n  /**\n   * Calculate object dimensions from its properties\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getNonTransformedDimensions(): Point {\n    return new Point(this.width, this.height).scalarAdd(this.strokeWidth);\n  }\n\n  /**\n   * Calculate object dimensions for controls box, including padding and canvas zoom.\n   * and active selection\n   * @private\n   * @param {object} [options] transform options\n   * @returns {Point} dimensions\n   */\n  _calculateCurrentDimensions(options?: any): Point {\n    return this._getTransformedDimensions(options)\n      .transform(this.getViewportTransform(), true)\n      .scalarAdd(2 * this.padding);\n  }\n\n  // #region Origin\n\n  declare top: number;\n  declare left: number;\n  declare width: number;\n  declare height: number;\n  declare flipX: boolean;\n  declare flipY: boolean;\n  declare scaleX: number;\n  declare scaleY: number;\n  declare skewX: number;\n  declare skewY: number;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originX: TOriginX;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originY: TOriginY;\n  declare angle: TDegree;\n  declare strokeWidth: number;\n  declare strokeUniform: boolean;\n\n  /**\n   * Object containing this object.\n   * can influence its size and position\n   */\n  declare group?: Group;\n\n  /**\n   * Calculate object bounding box dimensions from its properties scale, skew.\n   * This bounding box is aligned with object angle and not with canvas axis or screen.\n   * @param {Object} [options]\n   * @param {Number} [options.scaleX]\n   * @param {Number} [options.scaleY]\n   * @param {Number} [options.skewX]\n   * @param {Number} [options.skewY]\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getTransformedDimensions(options: any = {}): Point {\n    const dimOptions = {\n      // if scaleX or scaleY are negative numbers,\n      // this will return dimensions that are negative.\n      // and this will break assumptions around the codebase\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      width: this.width,\n      height: this.height,\n      strokeWidth: this.strokeWidth,\n      // TODO remove this spread. is visible in the performance inspection\n      ...options,\n    };\n    // stroke is applied before/after transformations are applied according to `strokeUniform`\n    const strokeWidth = dimOptions.strokeWidth;\n    let preScalingStrokeValue = strokeWidth,\n      postScalingStrokeValue = 0;\n\n    if (this.strokeUniform) {\n      preScalingStrokeValue = 0;\n      postScalingStrokeValue = strokeWidth;\n    }\n    const dimX = dimOptions.width + preScalingStrokeValue,\n      dimY = dimOptions.height + preScalingStrokeValue,\n      noSkew = dimOptions.skewX === 0 && dimOptions.skewY === 0;\n    let finalDimensions;\n    if (noSkew) {\n      finalDimensions = new Point(\n        dimX * dimOptions.scaleX,\n        dimY * dimOptions.scaleY,\n      );\n    } else {\n      finalDimensions = sizeAfterTransform(\n        dimX,\n        dimY,\n        calcDimensionsMatrix(dimOptions),\n      );\n    }\n\n    return finalDimensions\n  }\n\n  /**\n   * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @param {TOriginX} toOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToGivenOrigin(\n    point: Point,\n    fromOriginX: TOriginX,\n    fromOriginY: TOriginY,\n    toOriginX: TOriginX,\n    toOriginY: TOriginY,\n  ): Point {\n    let x = point.x,\n      y = point.y;\n    const offsetX = resolveOrigin(toOriginX) - resolveOrigin(fromOriginX),\n      offsetY = resolveOrigin(toOriginY) - resolveOrigin(fromOriginY);\n\n    if (offsetX || offsetY) {\n      const dim = this._getTransformedDimensions();\n      x += offsetX * dim.x;\n      y += offsetY * dim.y;\n    }\n\n    return new Point(x, y);\n  }\n\n  /**\n   * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToCenterPoint(\n    point: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    if (originX === CENTER && originY === CENTER) {\n      return point;\n    }\n    const p = this.translateToGivenOrigin(\n      point,\n      originX,\n      originY,\n      CENTER,\n      CENTER,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), point);\n    }\n    return p;\n  }\n\n  /**\n   * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n   * @param {Point} center The point which corresponds to center of the object\n   * @param {OriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {OriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToOriginPoint(\n    center: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    const p = this.translateToGivenOrigin(\n      center,\n      CENTER,\n      CENTER,\n      originX,\n      originY,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), center);\n    }\n    return p;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to canvas\n   * @return {Point}\n   */\n  getCenterPoint(): Point {\n    const relCenter = this.getRelativeCenterPoint();\n    return this.group\n      ? transformPoint(relCenter, this.group.calcTransformMatrix())\n      : relCenter;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to it's parent\n   * @return {Point}\n   */\n  getRelativeCenterPoint(): Point {\n    return this.translateToCenterPoint(\n      new Point(this.left, this.top),\n      this.originX,\n      this.originY,\n    );\n  }\n\n  /**\n   * Returns the position of the object as if it has a different origin.\n   * Take an object that has left, top set to 100, 100 with origin 'left', 'top'.\n   * Return the values of left top ( wrapped in a point ) that you would need to keep\n   * the same position if origin where different.\n   * Alternatively you can use this to also find which point in the parent plane is a specific origin\n   * ( where is the bottom right corner of my object? )\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  getPointByOrigin(originX: TOriginX, originY: TOriginY): Point {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      originX,\n      originY,\n    );\n  }\n\n  /**\n   * Sets the position of the object taking into consideration the object's origin\n   * @param {Point} pos The new position of the object\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {void}\n   */\n  setPositionByOrigin(pos: Point, originX: TOriginX, originY: TOriginY) {\n    const center = this.translateToCenterPoint(pos, originX, originY),\n      position = this.translateToOriginPoint(\n        center,\n        this.originX,\n        this.originY,\n      );\n    this.set({ left: position.x, top: position.y });\n  }\n\n  /**\n   * @private\n   */\n  _getLeftTopCoords() {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      LEFT,\n      TOP,\n    );\n  }\n}\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  STROKE,\n  FILL,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { capValue } from '../../util/misc/capValue';\nimport {\n  createCanvasElement,\n  createCanvasElementFor,\n  toDataURL,\n  toBlob,\n} from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport { isFiller, isSerializableFiller } from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\nimport type { TColorArg } from '../../color/typedefs';\nimport type { TAnimation } from '../../util/animation/animate';\nimport { animate, animateColor } from '../../util/animation/animate';\nimport type {\n  AnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n  ValueAnimationOptions,\n} from '../../util/animation/types';\nimport { ObjectGeometry } from './ObjectGeometry';\n\ntype TAncestor = FabricObject;\ntype TCollection = Group;\n\nexport type Ancestors =\n  | [FabricObject | Group]\n  | [FabricObject | Group, ...Group[]]\n  | Group[];\n\nexport type AncestryComparison = {\n  /**\n   * common ancestors of `this` and`other`(may include`this` | `other`)\n   */\n  common: Ancestors;\n  /**\n   * ancestors that are of `this` only\n   */\n  fork: Ancestors;\n  /**\n   * ancestors that are of `other` only\n   */\n  otherFork: Ancestors;\n};\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\nexport type DrawContext =\n  | {\n      parentClipPaths: FabricObject[];\n      width: number;\n      height: number;\n      cacheTranslationX: number;\n      cacheTranslationY: number;\n      zoomX: number;\n      zoomY: number;\n    }\n  | Record<string, never>;\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends ObjectGeometry<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return FabricObject.ownDefaults;\n  }\n\n  /**\n   * The class type.\n   * This is used for serialization and deserialization purposes and internally it can be used\n   * to identify classes.\n   * When we transform a class in a plain JS object we need a way to recognize which class it was,\n   * and the type is the way we do that. It has no other purposes and you should not give one.\n   * Hard to reach on instances and please do not use to drive instance's logic (this.constructor.type).\n   * To idenfity a class use instanceof class ( instanceof Rect ).\n   * We do not do that in fabricJS code because we want to try to have code splitting possible.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists to avoid type errors in old code and possibly current deserialization code.\n   * DO NOT build new code around this type value\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, FabricObject.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any,\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: Math.ceil(neededX + ALIASING_LIMIT),\n      height: Math.ceil(neededY + ALIASING_LIMIT),\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas!,\n      context = this._cacheContext,\n      { width, height, zoomX, zoomY, x, y } = this._limitCacheSize(\n        this._getCacheCanvasDimensions(),\n      ),\n      dimensionsChanged = width !== canvas.width || height !== canvas.height,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    const shouldRedraw = dimensionsChanged || zoomChanged;\n\n    if (shouldRedraw) {\n      if (width !== canvas.width || height !== canvas.height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      const drawingWidth = x / 2;\n      const drawingHeight = y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (key === SCALE_X || key === SCALE_Y) {\n      value = this._constrainScale(value);\n    }\n    if (key === SCALE_X && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    }\n\n    const isChanged = this[key as keyof this] !== value;\n    this[key as keyof this] = value;\n\n    // invalidate caches\n    if (\n      isChanged &&\n      (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n    ) {\n      this.dirty = true;\n    }\n    // a dirty child makes the parent dirty.\n    // but a non dirty child does not make the parent not dirty.\n    // the parent could be dirty for some other reason.\n    this.parent &&\n      (this.dirty ||\n        (isChanged &&\n          (this.constructor as typeof FabricObject).stateProperties.includes(\n            key,\n          ))) &&\n      this.parent._set('dirty', true);\n\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      (this as TCachedFabricObject).renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx, false, {});\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(_ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(this: TCachedFabricObject, options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      const { zoomX, zoomY, cacheTranslationX, cacheTranslationY } = this;\n      const { width, height } = this._cacheCanvas;\n      this.drawObject(this._cacheContext, options.forClipping, {\n        zoomX,\n        zoomY,\n        cacheTranslationX,\n        cacheTranslationY,\n        width,\n        height,\n        parentClipPaths: [],\n      });\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke(): boolean {\n    return (\n      !!this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill(): boolean {\n    return !!this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When returns `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    // TODO re-evaluate this shadow condition\n    if (\n      this.paintFirst === STROKE &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      (this.objectCaching && (!this.parent || !this.parent.isOnACache())) ||\n      this.needsItsOwnCache();\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject,\n    canvasWithClipPath: HTMLCanvasElement,\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(canvasWithClipPath, 0, 0);\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   * @param {DrawContext} context additional context for rendering\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath, context);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  private createClipPathLayer(\n    this: TCachedFabricObject,\n    clipPath: FabricObject,\n    context: DrawContext,\n  ) {\n    const canvas = createCanvasElementFor(context as TSize);\n    const ctx = canvas.getContext('2d')!;\n    ctx.translate(context.cacheTranslationX, context.cacheTranslationY);\n    ctx.scale(context.zoomX, context.zoomY);\n    clipPath._cacheCanvas = canvas;\n    context.parentClipPaths.forEach((prevClipPath) => {\n      prevClipPath.transform(ctx);\n    });\n    context.parentClipPaths.push(clipPath);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    clipPath.drawObject(ctx, true, context);\n    return canvas;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject | undefined,\n    context: DrawContext,\n  ) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup _transformDone\n    // TODO find a better solution?\n    clipPath._transformDone = true;\n    const canvas = (this as TCachedFabricObject).createClipPathLayer(\n      clipPath,\n      context,\n    );\n    this.drawClipPathOnCache(ctx, clipPath, canvas);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY,\n    );\n  }\n\n  /**\n   * Check if cache is dirty and if is dirty clear the context.\n   * This check has a big side effect, it changes the underlying cache canvas if necessary.\n   * Do not call this method on your own to check if the cache is dirty, because if it is,\n   * it is also going to wipe the cache. This is badly designed and needs to be fixed.\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    const canvas = this._cacheCanvas;\n    const ctx = this._cacheContext;\n    if (canvas && ctx && !skipCanvas && this._updateCacheCanvas()) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (canvas && ctx && !skipCanvas) {\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    const dim = this._getNonTransformedDimensions();\n    ctx.fillStyle = this.backgroundColor;\n\n    ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >,\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} _ctx Context to render on\n   */\n  _render(_ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling,\n      pCanvas = createCanvasElementFor({\n        // in case width and height are less than 1px, we have to round up.\n        // since the pattern is no-repeat, this is fine\n        width: Math.ceil(width),\n        height: Math.ceil(height),\n      });\n\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling,\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2,\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY,\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm,\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER,\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n  toBlob(options: toDataURLOptions = {}) {\n    return toBlob(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY,\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  // #region Animation methods\n  /**\n   * List of properties to consider for animating colors.\n   * @type String[]\n   */\n  static colorProperties: string[] = [FILL, STROKE, 'backgroundColor'];\n\n  /**\n   * Animates object's properties\n   * @param {Record<string, number | number[] | TColorArg>} animatable map of keys and end values\n   * @param {Partial<AnimationOptions<T>>} options\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {Record<string, TAnimation<T>>} map of animation contexts\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   */\n  animate<T extends number | number[] | TColorArg>(\n    animatable: Record<string, T>,\n    options?: Partial<AnimationOptions<T>>,\n  ): Record<string, TAnimation<T>> {\n    return Object.entries(animatable).reduce(\n      (acc, [key, endValue]) => {\n        acc[key] = this._animate(key, endValue, options);\n        return acc;\n      },\n      {} as Record<string, TAnimation<T>>,\n    );\n  }\n\n  /**\n   * @private\n   * @param {String} key Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   */\n  _animate<T extends number | number[] | TColorArg>(\n    key: string,\n    endValue: T,\n    options: Partial<AnimationOptions<T>> = {},\n  ): TAnimation<T> {\n    const path = key.split('.');\n    const propIsColor = (\n      this.constructor as typeof FabricObject\n    ).colorProperties.includes(path[path.length - 1]);\n    const { abort, startValue, onChange, onComplete } = options;\n    const animationOptions = {\n      ...options,\n      target: this,\n      // path.reduce... is the current value in case start value isn't provided\n      startValue:\n        startValue ?? path.reduce((deep: any, key) => deep[key], this),\n      endValue,\n      abort: abort?.bind(this),\n      onChange: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        path.reduce((deep: Record<string, any>, key, index) => {\n          if (index === path.length - 1) {\n            deep[key] = value;\n          }\n          return deep[key];\n        }, this);\n        onChange &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onChange(value, valueProgress, durationProgress);\n      },\n      onComplete: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        this.setCoords();\n        onComplete &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onComplete(value, valueProgress, durationProgress);\n      },\n    } as AnimationOptions<T>;\n\n    return (\n      propIsColor\n        ? animateColor(animationOptions as ColorAnimationOptions)\n        : animate(\n            animationOptions as ValueAnimationOptions | ArrayAnimationOptions,\n          )\n    ) as TAnimation<T>;\n  }\n\n  // #region Object stacking methods\n\n  /**\n   * A reference to the parent of the object\n   * Used to keep the original parent ref when the object has been added to an ActiveSelection, hence loosing the `group` ref\n   */\n  declare parent?: Group;\n\n  /**\n   * Checks if object is descendant of target\n   * Should be used instead of {@link Group.contains} or {@link StaticCanvas.contains} for performance reasons\n   * @param {TAncestor} target\n   * @returns {boolean}\n   */\n  isDescendantOf(target: TAncestor): boolean {\n    const { parent, group } = this;\n    return (\n      parent === target ||\n      group === target ||\n      // walk up\n      (!!parent && parent.isDescendantOf(target)) ||\n      (!!group && group !== parent && group.isDescendantOf(target))\n    );\n  }\n\n  /**\n   * @returns {Ancestors} ancestors (excluding `ActiveSelection`) from bottom to top\n   */\n  getAncestors(): Ancestors {\n    const ancestors: TAncestor[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let parent: TAncestor | undefined = this;\n    do {\n      parent = parent.parent;\n      parent && ancestors.push(parent);\n    } while (parent);\n    return ancestors as Ancestors;\n  }\n\n  /**\n   * Compare ancestors\n   *\n   * @param {StackedObject} other\n   * @returns {AncestryComparison} an object that represent the ancestry situation.\n   */\n  findCommonAncestors<T extends this>(other: T): AncestryComparison {\n    if (this === other) {\n      return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors()],\n      } as AncestryComparison;\n    }\n    const ancestors = this.getAncestors();\n    const otherAncestors = other.getAncestors();\n    //  if `this` has no ancestors and `this` is top ancestor of `other` we must handle the following case\n    if (\n      ancestors.length === 0 &&\n      otherAncestors.length > 0 &&\n      this === otherAncestors[otherAncestors.length - 1]\n    ) {\n      return {\n        fork: [],\n        otherFork: [\n          other,\n          ...otherAncestors.slice(0, otherAncestors.length - 1),\n        ],\n        common: [this],\n      } as AncestryComparison;\n    }\n    //  compare ancestors\n    for (let i = 0, ancestor; i < ancestors.length; i++) {\n      ancestor = ancestors[i];\n      if (ancestor === other) {\n        return {\n          fork: [this, ...ancestors.slice(0, i)],\n          otherFork: [],\n          common: ancestors.slice(i),\n        } as AncestryComparison;\n      }\n      for (let j = 0; j < otherAncestors.length; j++) {\n        if (this === otherAncestors[j]) {\n          return {\n            fork: [],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: [this, ...ancestors],\n          } as AncestryComparison;\n        }\n        if (ancestor === otherAncestors[j]) {\n          return {\n            fork: [this, ...ancestors.slice(0, i)],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: ancestors.slice(i),\n          } as AncestryComparison;\n        }\n      }\n    }\n    // nothing shared\n    return {\n      fork: [this, ...ancestors],\n      otherFork: [other, ...otherAncestors],\n      common: [],\n    } as AncestryComparison;\n  }\n\n  /**\n   *\n   * @param {StackedObject} other\n   * @returns {boolean}\n   */\n  hasCommonAncestors<T extends this>(other: T): boolean {\n    const commonAncestors = this.findCommonAncestors(other);\n    return commonAncestors && !!commonAncestors.common.length;\n  }\n\n  /**\n   *\n   * @param {FabricObject} other object to compare against\n   * @returns {boolean | undefined} if objects do not share a common ancestor or they are strictly equal it is impossible to determine which is in front of the other; in such cases the function returns `undefined`\n   */\n  isInFrontOf<T extends this>(other: T): boolean | undefined {\n    if (this === other) {\n      return undefined;\n    }\n    const ancestorData = this.findCommonAncestors(other);\n\n    if (ancestorData.fork.includes(other as any)) {\n      return true;\n    }\n    if (ancestorData.otherFork.includes(this as any)) {\n      return false;\n    }\n    // if there isn't a common ancestor, we take the canvas.\n    // if there is no canvas, there is nothing to compare\n    const firstCommonAncestor = ancestorData.common[0] || this.canvas;\n    if (!firstCommonAncestor) {\n      return undefined;\n    }\n    const headOfFork = ancestorData.fork.pop(),\n      headOfOtherFork = ancestorData.otherFork.pop(),\n      thisIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfFork as any,\n      ),\n      otherIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfOtherFork as any,\n      );\n    return thisIndex > -1 && thisIndex > otherIndex;\n  }\n\n  // #region Serialization\n  /**\n   * Define a list of custom properties that will be serialized when\n   * instance.toObject() gets called\n   */\n  static customProperties: string[] = [];\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const propertiesToSerialize = propertiesToInclude.concat(\n      FabricObject.customProperties,\n      (this.constructor as typeof FabricObject).customProperties || [],\n    );\n    let clipPathData: Partial<SerializedObjectProps> | undefined;\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n    const {\n      clipPath,\n      fill,\n      stroke,\n      shadow,\n      strokeDashArray,\n      left,\n      top,\n      originX,\n      originY,\n      width,\n      height,\n      strokeWidth,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit,\n      scaleX,\n      scaleY,\n      angle,\n      flipX,\n      flipY,\n      opacity,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX,\n      skewY,\n    } = this;\n    if (clipPath && !clipPath.excludeFromExport) {\n      clipPathData = clipPath.toObject(\n        propertiesToSerialize.concat('inverted', 'absolutePositioned'),\n      );\n    }\n    const toFixedBound = (val: number) => toFixed(val, NUM_FRACTION_DIGITS);\n    const object = {\n      ...pick(this, propertiesToSerialize as (keyof this)[]),\n      type: (this.constructor as typeof FabricObject).type,\n      version: VERSION,\n      originX,\n      originY,\n      left: toFixedBound(left),\n      top: toFixedBound(top),\n      width: toFixedBound(width),\n      height: toFixedBound(height),\n      fill: isSerializableFiller(fill) ? fill.toObject() : fill,\n      stroke: isSerializableFiller(stroke) ? stroke.toObject() : stroke,\n      strokeWidth: toFixedBound(strokeWidth),\n      strokeDashArray: strokeDashArray\n        ? strokeDashArray.concat()\n        : strokeDashArray,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit: toFixedBound(strokeMiterLimit),\n      scaleX: toFixedBound(scaleX),\n      scaleY: toFixedBound(scaleY),\n      angle: toFixedBound(angle),\n      flipX,\n      flipY,\n      opacity: toFixedBound(opacity),\n      shadow: shadow ? shadow.toObject() : shadow,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX: toFixedBound(skewX),\n      skewY: toFixedBound(skewY),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...serializedObjectOptions }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {},\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(serializedObjectOptions, options).then(\n      (enlivedObjectOptions) => {\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          delete enlivedObjectOptions[extraParam];\n          return new this(\n            serializedObjectOptions[extraParam],\n            // @ts-expect-error different signature\n            enlivedObjectOptions,\n          );\n        } else {\n          return new this(enlivedObjectOptions);\n        }\n      },\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable,\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n","import type {\n  TModificationEvents,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\n/**\n * Wrap an action handler with firing an event if the action is performed\n * @param {TModificationEvents} eventName the event we want to fire\n * @param {TransformActionHandler<T>} actionHandler the function to wrap\n * @param {object} extraEventInfo extra information to pas to the event handler\n * @return {TransformActionHandler<T>} a function with an action handler signature\n */\nexport const wrapWithFireEvent = <\n  T extends Transform,\n  P extends object = Record<string, never>,\n>(\n  eventName: TModificationEvents,\n  actionHandler: TransformActionHandler<T>,\n  extraEventInfo?: P,\n) => {\n  return ((eventData, transform, x, y) => {\n    const actionPerformed = actionHandler(eventData, transform, x, y);\n    if (actionPerformed) {\n      fireEvent(eventName, {\n        ...commonEventInfo(eventData, transform, x, y),\n        ...extraEventInfo,\n      });\n    }\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n};\n","import type { Transform, TransformActionHandler } from '../EventTypeDefs';\n\n/**\n * Wrap an action handler with saving/restoring object position on the transform.\n * this is the code that permits to objects to keep their position while transforming.\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport function wrapWithFixedAnchor<T extends Transform>(\n  actionHandler: TransformActionHandler<T>,\n) {\n  return ((eventData, transform, x, y) => {\n    const { target, originX, originY } = transform,\n      centerPoint = target.getRelativeCenterPoint(),\n      constraint = target.translateToOriginPoint(centerPoint, originX, originY),\n      actionPerformed = actionHandler(eventData, transform, x, y);\n    // flipping requires to change the transform origin, so we read from the mutated transform\n    // instead of leveraging the one destructured before\n    target.setPositionByOrigin(\n      constraint,\n      transform.originX,\n      transform.originY,\n    );\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { CENTER, LEFT, RESIZING, RIGHT } from '../constants';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { getLocalPoint, isTransformCentered } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Action handler to change object's width\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const changeObjectWidth: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const localPoint = getLocalPoint(\n    transform,\n    transform.originX,\n    transform.originY,\n    x,\n    y,\n  );\n  //  make sure the control changes width ONLY from it's side of target\n  if (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(RIGHT) &&\n      localPoint.x < 0) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(LEFT) &&\n      localPoint.x > 0)\n  ) {\n    const { target } = transform,\n      strokePadding =\n        target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\n      multiplier = isTransformCentered(transform) ? 2 : 1,\n      oldWidth = target.width,\n      newWidth =\n        Math.abs((localPoint.x * multiplier) / target.scaleX) - strokePadding;\n    target.set('width', Math.max(newWidth, 1));\n    //  check against actual target width in case `newWidth` was rejected\n    return oldWidth !== target.width;\n  }\n  return false;\n};\n\nexport const changeWidth = wrapWithFireEvent(\n  RESIZING,\n  wrapWithFixedAnchor(changeObjectWidth),\n);\n","import { FILL, STROKE, twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners'\n  >\n>;\n\nexport type ControlRenderer<\n  O extends InteractiveFabricObject = InteractiveFabricObject,\n> = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: O,\n) => void;\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n}\n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  ControlActionHandler,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { Intersection } from '../Intersection';\nimport { Point } from '../Point';\nimport { SCALE } from '../constants';\nimport type {\n  InteractiveFabricObject,\n  TOCoord,\n} from '../shapes/Object/InteractiveObject';\nimport type { TCornerPoint, TDegree, TMat2D } from '../typedefs';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { renderCircleControl, renderSquareControl } from './controlRendering';\n\nexport class Control {\n  /**\n   * keep track of control visibility.\n   * mainly for backward compatibility.\n   * if you do not want to see a control, you can remove it\n   * from the control set.\n   * @type {Boolean}\n   * @default true\n   */\n  visible = true;\n\n  /**\n   * Name of the action that the control will likely execute.\n   * This is optional. FabricJS uses to identify what the user is doing for some\n   * extra optimizations. If you are writing a custom control and you want to know\n   * somewhere else in the code what is going on, you can use this string here.\n   * you can also provide a custom getActionName if your control run multiple actions\n   * depending on some external state.\n   * default to scale since is the most common, used on 4 corners by default\n   * @type {String}\n   * @default 'scale'\n   */\n  actionName = SCALE;\n\n  /**\n   * Drawing angle of the control.\n   * NOT used for now, but name marked as needed for internal logic\n   * example: to reuse the same drawing function for different rotated controls\n   * @type {Number}\n   * @default 0\n   */\n  angle = 0;\n\n  /**\n   * Relative position of the control. X\n   * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  x = 0;\n\n  /**\n   * Relative position of the control. Y\n   * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  y = 0;\n\n  /**\n   * Horizontal offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the right, negative to the left.\n   * It used when you want to have position of control that does not scale with\n   * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n   * the boundind box, with an offset of 30 pixels vertically. Those 30 pixels will\n   * stay 30 pixels no matter how the object is big. Another example is having 2\n   * controls in the corner, that stay in the same position when the object scale.\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  offsetX = 0;\n\n  /**\n   * Vertical offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the bottom, negative to the top.\n   * @type {Number}\n   * @default 0\n   */\n  offsetY = 0;\n\n  /**\n   * Sets the length of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeX = 0;\n\n  /**\n   * Sets the height of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeY = 0;\n\n  /**\n   * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeX = 0;\n\n  /**\n   * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeY = 0;\n\n  /**\n   * Css cursor style to display when the control is hovered.\n   * if the method `cursorStyleHandler` is provided, this property is ignored.\n   * @type {String}\n   * @default 'crosshair'\n   */\n  cursorStyle = 'crosshair';\n\n  /**\n   * If controls has an offsetY or offsetX, draw a line that connects\n   * the control to the bounding box\n   * @type {Boolean}\n   * @default false\n   */\n  withConnection = false;\n\n  constructor(options?: Partial<Control>) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * The control actionHandler, provide one to handle action ( control being moved )\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare actionHandler: TransformActionHandler;\n\n  /**\n   * The control handler for mouse down, provide one to handle mouse down on control\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseDownHandler?: ControlActionHandler;\n\n  /**\n   * The control mouseUpHandler, provide one to handle an effect on mouse up.\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseUpHandler?: ControlActionHandler;\n\n  shouldActivate(\n    controlKey: string,\n    fabricObject: InteractiveFabricObject,\n    pointer: Point,\n    { tl, tr, br, bl }: TCornerPoint,\n  ) {\n    // TODO: locking logic can be handled here instead of in the control handler logic\n    return (\n      fabricObject.canvas?.getActiveObject() === fabricObject &&\n      fabricObject.isControlVisible(controlKey) &&\n      Intersection.isPointInPolygon(pointer, [tl, tr, br, bl])\n    );\n  }\n\n  /**\n   * Returns control actionHandler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getActionHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): TransformActionHandler | undefined {\n    return this.actionHandler;\n  }\n\n  /**\n   * Returns control mouseDown handler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseDownHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseDownHandler;\n  }\n\n  /**\n   * Returns control mouseUp handler.\n   * During actions the fabricObject or the control can be of different obj\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseUpHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseUpHandler;\n  }\n\n  /**\n   * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n   * function you can pass one in the constructor\n   * the cursorStyle property\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  cursorStyleHandler(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n    coord: TOCoord,\n  ) {\n    return control.cursorStyle;\n  }\n\n  /**\n   * Returns the action name. The basic implementation just return the actionName property.\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  getActionName(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.actionName;\n  }\n\n  /**\n   * Returns controls visibility\n   * @param {FabricObject} object on which the control is displayed\n   * @param {String} controlKey key where the control is memorized on the\n   * @return {Boolean}\n   */\n  getVisibility(fabricObject: InteractiveFabricObject, controlKey: string) {\n    return fabricObject._controlsVisibility?.[controlKey] ?? this.visible;\n  }\n\n  /**\n   * Sets controls visibility\n   * @param {Boolean} visibility for the object\n   * @return {Void}\n   */\n  setVisibility(\n    visibility: boolean,\n    name?: string,\n    fabricObject?: InteractiveFabricObject,\n  ) {\n    this.visible = visibility;\n  }\n\n  positionHandler(\n    dim: Point,\n    finalMatrix: TMat2D,\n    fabricObject: InteractiveFabricObject,\n    currentControl: Control,\n  ) {\n    return new Point(\n      this.x * dim.x + this.offsetX,\n      this.y * dim.y + this.offsetY,\n    ).transform(finalMatrix);\n  }\n\n  /**\n   * Returns the coords for this control based on object values.\n   * @param {Number} objectAngle angle from the fabric object holding the control\n   * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n   *   isTouch is true)\n   * @param {Number} centerX x coordinate where the control center should be\n   * @param {Number} centerY y coordinate where the control center should be\n   * @param {boolean} isTouch true if touch corner, false if normal corner\n   */\n  calcCornerCoords(\n    angle: TDegree,\n    objectCornerSize: number,\n    centerX: number,\n    centerY: number,\n    isTouch: boolean,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    const t = multiplyTransformMatrixArray([\n      createTranslateMatrix(centerX, centerY),\n      createRotateMatrix({ angle }),\n      createScaleMatrix(\n        (isTouch ? this.touchSizeX : this.sizeX) || objectCornerSize,\n        (isTouch ? this.touchSizeY : this.sizeY) || objectCornerSize,\n      ),\n    ]);\n    return {\n      tl: new Point(-0.5, -0.5).transform(t),\n      tr: new Point(0.5, -0.5).transform(t),\n      br: new Point(0.5, 0.5).transform(t),\n      bl: new Point(-0.5, 0.5).transform(t),\n    };\n  }\n\n  /**\n   * Render function for the control.\n   * When this function runs the context is unscaled. unrotate. Just retina scaled.\n   * all the functions will have to translate to the point left,top before starting Drawing\n   * if they want to draw a control where the position is detected.\n   * left and top are the result of the positionHandler function\n   * @param {RenderingContext2D} ctx the context where the control will be drawn\n   * @param {Number} left position of the canvas where we are about to render the control.\n   * @param {Number} top position of the canvas where we are about to render the control.\n   * @param {Object} styleOverride\n   * @param {FabricObject} fabricObject the object where the control is about to be rendered\n   */\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    styleOverride = styleOverride || {};\n    switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\n      case 'circle':\n        renderCircleControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n        break;\n      default:\n        renderSquareControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n    }\n  }\n}\n","import type {\n  ControlCursorCallback,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { ROTATING } from '../constants';\nimport { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { isLocked, NOT_ALLOWED_CURSOR } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Find the correct style for the control that is used for rotation.\n * this function is very simple and it just take care of not-allowed or standard cursor\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const rotationStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (fabricObject.lockRotation) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  return control.cursorStyle;\n};\n\n/**\n * Action handler for rotation and snapping, without anchor point.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n * @private\n */\nconst rotateObjectWithSnapping: TransformActionHandler = (\n  eventData,\n  { target, ex, ey, theta, originX, originY },\n  x,\n  y,\n) => {\n  const pivotPoint = target.translateToOriginPoint(\n    target.getRelativeCenterPoint(),\n    originX,\n    originY,\n  );\n\n  if (isLocked(target, 'lockRotation')) {\n    return false;\n  }\n\n  const lastAngle = Math.atan2(ey - pivotPoint.y, ex - pivotPoint.x),\n    curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x);\n  let angle = radiansToDegrees(curAngle - lastAngle + theta);\n\n  if (target.snapAngle && target.snapAngle > 0) {\n    const snapAngle = target.snapAngle,\n      snapThreshold = target.snapThreshold || snapAngle,\n      rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n      leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n    if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n      angle = leftAngleLocked;\n    } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n      angle = rightAngleLocked;\n    }\n  }\n\n  // normalize angle to positive value\n  if (angle < 0) {\n    angle = 360 + angle;\n  }\n  angle %= 360;\n\n  const hasRotated = target.angle !== angle;\n  // TODO: why aren't we using set?\n  target.angle = angle;\n  return hasRotated;\n};\n\nexport const rotationWithSnapping = wrapWithFireEvent(\n  ROTATING,\n  wrapWithFixedAnchor(rotateObjectWithSnapping),\n);\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxis } from '../typedefs';\nimport type { Canvas } from '../canvas/Canvas';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  invertOrigin,\n  isLocked,\n  isTransformCentered,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport { SCALE_X, SCALE_Y, SCALING } from '../constants';\n\ntype ScaleTransform = Transform & {\n  gestureScale?: number;\n  signX?: number;\n  signY?: number;\n};\n\ntype ScaleBy = TAxis | 'equally' | '' | undefined;\n\n/**\n * Inspect event and fabricObject properties to understand if the scaling action\n * @param {Event} eventData from the user action\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @return {Boolean} true if scale is proportional\n */\nexport function scaleIsProportional(\n  eventData: TPointerEvent,\n  fabricObject: FabricObject,\n): boolean {\n  const canvas = fabricObject.canvas as Canvas;\n  const uniformIsToggled = !fabricObject.lockSize;\n  return (\n    (canvas.uniformScaling && !uniformIsToggled) ||\n    (!canvas.uniformScaling && uniformIsToggled)\n  );\n}\n\n/**\n * Inspect fabricObject to understand if the current scaling action is allowed\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @param {String} by 'x' or 'y' or ''\n * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n * @return {Boolean} true if scaling is not allowed at current conditions\n */\nexport function scalingIsForbidden(\n  fabricObject: FabricObject,\n  by: ScaleBy,\n  scaleProportionally: boolean,\n) {\n  const lockX = isLocked(fabricObject, 'lockScalingX'),\n    lockY = isLocked(fabricObject, 'lockScalingY');\n  if (lockX && lockY) {\n    return true;\n  }\n  if (!by && (lockX || lockY) && scaleProportionally) {\n    return true;\n  }\n  if (lockX && by === 'x') {\n    return true;\n  }\n  if (lockY && by === 'y') {\n    return true;\n  }\n  // code crashes because of a division by 0 if a 0 sized object is scaled\n  // forbid to prevent scaling to happen. ISSUE-9475\n  const { width, height, strokeWidth } = fabricObject;\n  if (width === 0 && strokeWidth === 0 && by !== 'y') {\n    return true;\n  }\n  if (height === 0 && strokeWidth === 0 && by !== 'x') {\n    return true;\n  }\n  return false;\n}\n\nconst scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n\n/**\n * return the correct cursor style for the scale action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n  coord,\n) => {\n  const scaleProportionally = scaleIsProportional(eventData, fabricObject),\n    by =\n      control.x !== 0 && control.y === 0\n        ? 'x'\n        : control.x === 0 && control.y !== 0\n          ? 'y'\n          : '';\n  if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control, coord);\n  return `${scaleMap[n]}-resize`;\n};\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObject(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, by, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    // use of sign: We use sign to detect change of direction of an action. sign usually change when\n    // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n    // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n    // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n    // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n    signX = by !== 'y' ? Math.sign(newPoint.x || transform.signX || 1) : 1;\n    signY = by !== 'x' ? Math.sign(newPoint.y || transform.signY || 1) : 1;\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      (transform.signX !== signX || transform.signY !== signY)\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // missing detection of flip and logic to switch the origin\n    if (scaleProportionally && !by) {\n      // uniform scaling\n      const distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\n        { original } = transform,\n        originalDistance =\n          Math.abs((dim.x * original.scaleX) / target.scaleX) +\n          Math.abs((dim.y * original.scaleY) / target.scaleY),\n        scale = distance / originalDistance;\n      scaleX = original.scaleX * scale;\n      scaleY = original.scaleY * scale;\n    } else {\n      scaleX = Math.abs((newPoint.x * target.scaleX) / dim.x);\n      scaleY = Math.abs((newPoint.y * target.scaleY) / dim.y);\n    }\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX && by !== 'y') {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    if (transform.signY !== signY && by !== 'x') {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  // minScale is taken care of in the setter.\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n\n  if (!by) {\n    !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n    !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  } else {\n    // forbidden cases already handled on top here.\n    by === 'x' && target.set(SCALE_X, scaleX);\n    by === 'y' && target.set(SCALE_Y, scaleY);\n  }\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObjectByX(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, undefined, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    signX = Math.sign(newPoint.x || transform.signX || 1);\n    signY = Math.sign(newPoint.y || transform.signY || 1);\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      // (transform.signX !== signX || transform.signY !== signY)\n      transform.signX !== signX\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // uniform scaling\n    const { original } = transform;\n    const distance = Math.sqrt(newPoint.x ** 2 + newPoint.x ** 2);\n    const originalDistance = Math.sqrt(\n      ((dim.x * transform.original.scaleX) / target.scaleX) ** 2 +\n        ((dim.x * transform.original.scaleX) / target.scaleX) ** 2,\n    );\n    const scale = distance / originalDistance;\n    scaleX = original.scaleX * scale;\n    scaleY = original.scaleY * scale;\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX) {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    // if (transform.signY !== signY) {\n    //   transform.originY = invertOrigin(transform.originY);\n    //   scaleY *= -1;\n    //   transform.signY = signY;\n    // }\n  }\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n  !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObjectByY(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, undefined, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    signX = Math.sign(newPoint.x || transform.signX || 1);\n    signY = Math.sign(newPoint.y || transform.signY || 1);\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      // (transform.signX !== signX || transform.signY !== signY)\n      transform.signY !== signY\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // uniform scaling\n    const { original } = transform;\n    const distance = Math.sqrt(newPoint.y ** 2 + newPoint.y ** 2);\n    const originalDistance = Math.sqrt(\n      ((dim.y * transform.original.scaleY) / target.scaleY) ** 2 +\n        ((dim.y * transform.original.scaleY) / target.scaleY) ** 2,\n    );\n    const scale = distance / originalDistance;\n    scaleX = original.scaleX * scale;\n    scaleY = original.scaleY * scale;\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    // if (transform.signX !== signX) {\n    //   transform.originX = invertOrigin(transform.originX);\n    //   scaleX *= -1;\n    //   transform.signX = signX;\n    // }\n    if (transform.signY !== signY) {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n  !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Generic scaling logic, to scale from corners either equally or freely.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scaleObjectFromCorner: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y);\n};\n\n/**\n * Scaling logic for the X axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectX: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const target = transform.target as never as FabricObject;\n  return target.lockSize\n    ? scaleObjectByX(eventData, transform, x, y, { by: 'x' })\n    : scaleObject(eventData, transform, x, y, { by: 'x' });\n};\n\n/**\n * Scaling logic for the Y axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectY: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const target = transform.target as never as FabricObject;\n  return target.lockSize\n    ? scaleObjectByY(eventData, transform, x, y, { by: 'y' })\n    : scaleObject(eventData, transform, x, y, { by: 'y' });\n};\n\nexport const scalingEqually = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectFromCorner),\n);\n\nexport const scalingX = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectX),\n);\n\nexport const scalingY = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectY),\n);\n","import type {\n  ControlCallback,\n  ControlCursorCallback,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { SCALE_X, SCALE_Y, SKEW_X, SKEW_Y } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxisKey } from '../typedefs';\nimport { scaleCursorStyleHandler, scalingX, scalingY } from './scale';\nimport { skewCursorStyleHandler, skewHandlerX, skewHandlerY } from './skew';\n\nfunction isAltAction(eventData: TPointerEvent, target: FabricObject) {\n  return eventData[target.canvas!.altActionKey!];\n}\n\n/**\n * Inspect event, control and fabricObject to return the correct action name\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} an action name\n */\nexport const scaleOrSkewActionName: ControlCallback<\n  TAxisKey<'skew' | 'scale'> | ''\n> = (eventData, control, fabricObject) => {\n  // const isAlternative = isAltAction(eventData, fabricObject);\n  const isAlternative = false;\n  if (control.x === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_X : SCALE_Y;\n  }\n  if (control.y === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_Y : SCALE_X;\n  }\n  return '';\n};\n\n/**\n * Combine skew and scale style handlers to cover fabric standard use case\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleSkewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n  coord,\n) => {\n  return scaleCursorStyleHandler(eventData, control, fabricObject, coord);\n};\n/**\n * Composed action handler to either scale X or skew Y\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingXOrSkewingY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scalingX(eventData, transform, x, y);\n};\n\n/**\n * Composed action handler to either scale Y or skew X\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingYOrSkewingX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scalingY(eventData, transform, x, y);\n};\n","import { RESIZING, ROTATE } from '../constants';\nimport { changeWidth } from './changeWidth';\nimport { Control } from './Control';\nimport { rotationStyleHandler, rotationWithSnapping } from './rotate';\nimport { scaleCursorStyleHandler, scalingEqually } from './scale';\nimport {\n  scaleOrSkewActionName,\n  scaleSkewCursorStyleHandler,\n  scalingXOrSkewingY,\n  scalingYOrSkewingX,\n} from './scaleSkew';\n\n// use this function if you want to generate new controls for every instance\nexport const createObjectDefaultControls = () => ({\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mb: new Control({\n    x: 0,\n    y: 0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mt: new Control({\n    x: 0,\n    y: -0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  tl: new Control({\n    x: -0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  tr: new Control({\n    x: 0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  bl: new Control({\n    x: -0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  br: new Control({\n    x: 0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  mtr: new Control({\n    x: 0,\n    y: -0.5,\n    actionHandler: rotationWithSnapping,\n    cursorStyleHandler: rotationStyleHandler,\n    offsetY: -40,\n    withConnection: true,\n    actionName: ROTATE,\n  }),\n});\n\nexport const createResizeControls = () => ({\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n});\n\nexport const createTextboxDefaultControls = () => ({\n  ...createObjectDefaultControls(),\n  ...createResizeControls(),\n});\n","import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\nimport { SCALE } from '../../constants';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof InteractiveFabricObject).createControls(),\n      InteractiveFabricObject.ownDefaults,\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults\n   * @param {Object} [options] Options object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createObjectDefaultControls() };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith(SCALE)\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  findControl(\n    pointer: Point,\n    forTouch = false,\n  ): { key: string; control: Control; coord: TOCoord } | undefined {\n    if (!this.hasControls || !this.canvas) {\n      return undefined;\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      const control = this.controls[key];\n\n      if (\n        control.shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner,\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        this.__corner = key;\n\n        return { key, control, coord: this.oCoords[key] };\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined;\n    // decomposing could bring negative scaling and `_calculateCurrentDimensions` can't take it\n    if (transformOptions) {\n      transformOptions.scaleX = Math.abs(transformOptions.scaleX);\n      transformOptions.scaleY = Math.abs(transformOptions.scaleY);\n    }\n    const dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position),\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this,\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this,\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject,\n    ) => any,\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {},\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {},\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = this.borderScaleFactor; // 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride,\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options),\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor,\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY,\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * Be aware that since fabric 6.0 this function does not call setCoords anymore.\n   * setCoords needs to be called manually if the object of which we are rendering controls\n   * is outside the standard selection and transform process.\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {},\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility),\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean,\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(_options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {Event} [_options.e] event if the process is generated by an event\n   */\n  onSelect(_options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging(_e: TPointerEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(_e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} _e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(_e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDragSourceEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDropTargetEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  setScaleX(value: number) {\n    this.scaleX = value;\n  }\n\n  setScaleY(value: number) {\n    this.scaleY = value;\n  }\n}\n","import type { Constructor } from '../typedefs';\n\n/***\n * https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern\n */\nexport function applyMixins<T extends Constructor, S extends Constructor>(\n  derivedCtor: T,\n  constructors: S[],\n) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      name !== 'constructor' &&\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n            Object.create(null),\n        );\n    });\n  });\n  return derivedCtor as T & { prototype: InstanceType<T & S> };\n}\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport { FabricObjectSVGExportMixin } from './FabricObjectSVGExportMixin';\nimport { InteractiveFabricObject } from './InteractiveObject';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { classRegistry } from '../../ClassRegistry';\n\n// TODO somehow we have to make a tree-shakeable import\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface FabricObject<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObjectSVGExportMixin {}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class FabricObject<\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends InteractiveFabricObject<Props, SProps, EventSpec> {\n  lockSize: boolean;\n}\n\napplyMixins(FabricObject, [FabricObjectSVGExportMixin]);\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n\nexport { cacheProperties } from './defaultValues';\n","/**\n * Returns true if context has transparent pixel\n * at specified location (taking tolerance into account)\n * @param {CanvasRenderingContext2D} ctx context\n * @param {Number} x x coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} y y coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} tolerance Tolerance pixels around the point, not alpha tolerance, integer\n * @return {boolean} true if transparent\n */\nexport const isTransparent = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  tolerance: number,\n): boolean => {\n  tolerance = Math.round(tolerance);\n  const size = tolerance * 2 + 1;\n  const { data } = ctx.getImageData(x - tolerance, y - tolerance, size, size);\n\n  // Split image data - for tolerance > 1, pixelDataSize = 4;\n  for (let i = 3; i < data.length; i += 4) {\n    const alphaChannel = data[i];\n    if (alphaChannel > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport { createVector } from '../vectors';\nimport type { TProjectStrokeOnPointsOptions, TProjection } from './types';\n\n/**\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n * @todo consider removing skewing from points before calculating stroke projection,\n * see https://github.com/fabricjs/fabric.js/commit/494a10ee2f8c2278ae9a55b20bf50cf6ee25b064#commitcomment-94751537\n */\nexport abstract class StrokeProjectionsBase {\n  declare options: TProjectStrokeOnPointsOptions;\n  declare scale: Point;\n  declare strokeUniformScalar: Point;\n  declare strokeProjectionMagnitude: number;\n\n  constructor(options: TProjectStrokeOnPointsOptions) {\n    this.options = options;\n    this.strokeProjectionMagnitude = this.options.strokeWidth / 2;\n    this.scale = new Point(this.options.scaleX, this.options.scaleY);\n    this.strokeUniformScalar = this.options.strokeUniform\n      ? new Point(1 / this.options.scaleX, 1 / this.options.scaleY)\n      : new Point(1, 1);\n  }\n\n  /**\n   * When the stroke is uniform, scaling affects the arrangement of points. So we must take it into account.\n   */\n  protected createSideVector(from: XY, to: XY) {\n    const v = createVector(from, to);\n    return this.options.strokeUniform ? v.multiply(this.scale) : v;\n  }\n\n  protected abstract calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude?: number,\n  ): Point;\n\n  protected projectOrthogonally(from: Point, to: Point, magnitude?: number) {\n    return this.applySkew(\n      from.add(this.calcOrthogonalProjection(from, to, magnitude)),\n    );\n  }\n\n  protected isSkewed() {\n    return this.options.skewX !== 0 || this.options.skewY !== 0;\n  }\n\n  protected applySkew(point: Point) {\n    const p = new Point(point);\n    // skewY must be applied before skewX as this distortion affects skewX calculation\n    p.y += p.x * Math.tan(degreesToRadians(this.options.skewY));\n    p.x += p.y * Math.tan(degreesToRadians(this.options.skewX));\n    return p;\n  }\n\n  protected scaleUnitVector(unitVector: Point, scalar: number) {\n    return unitVector.multiply(this.strokeUniformScalar).scalarMultiply(scalar);\n  }\n\n  protected abstract projectPoints(): Point[];\n\n  public abstract project(): TProjection[];\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { halfPI, twoMathPi } from '../../../constants';\nimport type { TRadian } from '../../../typedefs';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport {\n  calcAngleBetweenVectors,\n  calcVectorRotation,\n  crossProduct,\n  getOrthonormalVector,\n  getUnitVector,\n  isBetweenVectors,\n  magnitude,\n  rotateVector,\n} from '../vectors';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nconst zeroVector = new Point();\n\n/**\n * class in charge of finding projections for each type of line join\n * @see {@link [Closed path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#2-closed-path)}\n *\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin\n * - Spec: https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n *\n */\nexport class StrokeLineJoinProjections extends StrokeProjectionsBase {\n  /**\n   * The point being projected (the angle ∠BAC)\n   */\n  declare A: Point;\n  /**\n   * The point before A\n   */\n  declare B: Point;\n  /**\n   * The point after A\n   */\n  declare C: Point;\n  /**\n   * The AB vector\n   */\n  AB: Point;\n  /**\n   * The AC vector\n   */\n  AC: Point;\n  /**\n   * The angle of A (∠BAC)\n   */\n  alpha: TRadian;\n  /**\n   * The bisector of A (∠BAC)\n   */\n  bisector: Point;\n\n  static getOrthogonalRotationFactor(vector1: Point, vector2?: Point) {\n    const angle = vector2\n      ? calcAngleBetweenVectors(vector1, vector2)\n      : calcVectorRotation(vector1);\n    return Math.abs(angle) < halfPI ? -1 : 1;\n  }\n\n  constructor(A: XY, B: XY, C: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.B = new Point(B);\n    this.C = new Point(C);\n    this.AB = this.createSideVector(this.A, this.B);\n    this.AC = this.createSideVector(this.A, this.C);\n    this.alpha = calcAngleBetweenVectors(this.AB, this.AC);\n    this.bisector = getUnitVector(\n      // if AC is also the zero vector nothing will be projected\n      // in that case the next point will handle the projection\n      rotateVector(this.AB.eq(zeroVector) ? this.AC : this.AB, this.alpha / 2),\n    );\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    const orthogonalProjection = getOrthonormalVector(vector);\n    const correctSide = StrokeLineJoinProjections.getOrthogonalRotationFactor(\n      orthogonalProjection,\n      this.bisector,\n    );\n    return this.scaleUnitVector(orthogonalProjection, magnitude * correctSide);\n  }\n\n  /**\n   * BEVEL\n   * Calculation: the projection points are formed by the vector orthogonal to the vertex.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-2-bevel\n   */\n  projectBevel() {\n    const projections: Point[] = [];\n    // if `alpha` equals 0 or 2*PI, the projections are the same for `B` and `C`\n    (this.alpha % twoMathPi === 0 ? [this.B] : [this.B, this.C]).forEach(\n      (to) => {\n        projections.push(this.projectOrthogonally(this.A, to));\n        projections.push(\n          this.projectOrthogonally(this.A, to, -this.strokeProjectionMagnitude),\n        );\n      },\n    );\n    return projections;\n  }\n\n  /**\n   * MITER\n   * Calculation: the corner is formed by extending the outer edges of the stroke\n   * at the tangents of the path segments until they intersect.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-1-miter\n   */\n  projectMiter() {\n    const projections: Point[] = [],\n      alpha = Math.abs(this.alpha),\n      hypotUnitScalar = 1 / Math.sin(alpha / 2),\n      miterVector = this.scaleUnitVector(\n        this.bisector,\n        -this.strokeProjectionMagnitude * hypotUnitScalar,\n      );\n\n    // When two line segments meet at a sharp angle, it is possible for the join to extend,\n    // far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes\n    // a limit on the extent of the line join.\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n    // When the stroke is uniform, scaling changes the arrangement of points, this changes the miter-limit\n    const strokeMiterLimit = this.options.strokeUniform\n      ? magnitude(\n          this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit),\n        )\n      : this.options.strokeMiterLimit;\n\n    if (\n      magnitude(miterVector) / this.strokeProjectionMagnitude <=\n      strokeMiterLimit\n    ) {\n      projections.push(this.applySkew(this.A.add(miterVector)));\n    }\n    /* when the miter-limit is reached, the stroke line join becomes of type bevel.\n      We always need two orthogonal projections which are basically bevel-type projections,\n      so regardless of whether the miter-limit was reached or not, we include these projections.\n    */\n    projections.push(...this.projectBevel());\n\n    return projections;\n  }\n\n  /**\n   * ROUND (without skew)\n   * Calculation: the projections are the two vectors parallel to X and Y axes\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-1-round-without-skew\n   */\n  private projectRoundNoSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [],\n      // correctSide is used to only consider projecting for the outer side\n      correctSide = new Point(\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(this.bisector),\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(\n          new Point(this.bisector.y, this.bisector.x),\n        ),\n      ),\n      radiusOnAxisX = new Point(1, 0)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide),\n      radiusOnAxisY = new Point(0, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide);\n\n    [radiusOnAxisX, radiusOnAxisY].forEach((vector) => {\n      if (isBetweenVectors(vector, startCircle, endCircle)) {\n        projections.push(this.A.add(vector));\n      }\n    });\n    return projections;\n  }\n\n  /**\n   * ROUND (with skew)\n   * Calculation: the projections are the points furthest from the vertex in\n   * the direction of the X and Y axes after distortion.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-2-round-skew\n   */\n  private projectRoundWithSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [];\n\n    const { skewX, skewY, scaleX, scaleY, strokeUniform } = this.options,\n      shearing = new Point(\n        Math.tan(degreesToRadians(skewX)),\n        Math.tan(degreesToRadians(skewY)),\n      );\n    // The points furthest from the vertex in the direction of the X and Y axes after distortion\n    const circleRadius = this.strokeProjectionMagnitude,\n      newY = strokeUniform\n        ? circleRadius /\n          scaleY /\n          Math.sqrt(1 / scaleY ** 2 + (1 / scaleX ** 2) * shearing.y ** 2)\n        : circleRadius / Math.sqrt(1 + shearing.y ** 2),\n      furthestY = new Point(\n        // Safe guard due to floating point precision. In some situations the square root\n        // was returning NaN because of a negative number close to zero.\n        Math.sqrt(Math.max(circleRadius ** 2 - newY ** 2, 0)),\n        newY,\n      ),\n      newX = strokeUniform\n        ? circleRadius /\n          Math.sqrt(\n            1 +\n              (shearing.x ** 2 * (1 / scaleY) ** 2) /\n                (1 / scaleX + (1 / scaleX) * shearing.x * shearing.y) ** 2,\n          )\n        : circleRadius /\n          Math.sqrt(1 + shearing.x ** 2 / (1 + shearing.x * shearing.y) ** 2),\n      furthestX = new Point(\n        newX,\n        Math.sqrt(Math.max(circleRadius ** 2 - newX ** 2, 0)),\n      );\n\n    [\n      furthestX,\n      furthestX.scalarMultiply(-1),\n      furthestY,\n      furthestY.scalarMultiply(-1),\n    ]\n      // We need to skew the vector here as this information is used to check if\n      // it is between the start and end of the circle segment\n      .map((vector) =>\n        this.applySkew(\n          strokeUniform ? vector.multiply(this.strokeUniformScalar) : vector,\n        ),\n      )\n      .forEach((vector) => {\n        if (isBetweenVectors(vector, startCircle, endCircle)) {\n          projections.push(this.applySkew(this.A).add(vector));\n        }\n      });\n\n    return projections;\n  }\n\n  projectRound() {\n    const projections: Point[] = [];\n    /* Include the start and end points of the circle segment, so that only\n      the projections contained within it are included */\n    // add the orthogonal projections (start and end points of circle segment)\n    projections.push(...this.projectBevel());\n    // let's determines which one of the orthogonal projection is the beginning and end of the circle segment.\n    // when `alpha` equals 0 or 2*PI, we have a straight line, so the way to find the start/end is different.\n    const isStraightLine = this.alpha % twoMathPi === 0,\n      // change the origin of the projections to point A\n      // so that the cross product calculation is correct\n      newOrigin = this.applySkew(this.A),\n      proj0 = projections[isStraightLine ? 0 : 2].subtract(newOrigin),\n      proj1 = projections[isStraightLine ? 1 : 0].subtract(newOrigin),\n      // when `isStraightLine` === true, we compare with the vector opposite AB, otherwise we compare with the bisector.\n      comparisonVector = isStraightLine\n        ? this.applySkew(this.AB.scalarMultiply(-1))\n        : this.applySkew(\n            this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1),\n          ),\n      // the beginning of the circle segment is always to the right of the comparison vector (cross product > 0)\n      isProj0Start = crossProduct(proj0, comparisonVector) > 0,\n      startCircle = isProj0Start ? proj0 : proj1,\n      endCircle = isProj0Start ? proj1 : proj0;\n    if (!this.isSkewed()) {\n      projections.push(...this.projectRoundNoSkew(startCircle, endCircle));\n    } else {\n      projections.push(...this.projectRoundWithSkew(startCircle, endCircle));\n    }\n    return projections;\n  }\n\n  /**\n   * Project stroke width on points returning projections for each point as follows:\n   * - `miter`: 1 point corresponding to the outer boundary. If the miter limit is exceeded, it will be 2 points (becomes bevel)\n   * - `bevel`: 2 points corresponding to the bevel possible boundaries, orthogonal to the stroke.\n   * - `round`: same as `bevel` when it has no skew, with skew are 4 points.\n   */\n  protected projectPoints() {\n    switch (this.options.strokeLineJoin) {\n      case 'miter':\n        return this.projectMiter();\n      case 'round':\n        return this.projectRound();\n      default:\n        return this.projectBevel();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n      angle: this.alpha,\n      bisector: this.bisector,\n    }));\n  }\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { getOrthonormalVector, getUnitVector } from '../vectors';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\n/**\n * class in charge of finding projections for each type of line cap for start/end of an open path\n * @see {@link [Open path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#1-open-path)}\n *\n * Reference:\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n * - Spec: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-linecap-dev\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n */\nexport class StrokeLineCapProjections extends StrokeProjectionsBase {\n  /**\n   * edge point\n   */\n  declare A: Point;\n  /**\n   * point next to edge point\n   */\n  declare T: Point;\n\n  constructor(A: XY, T: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.T = new Point(T);\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    return this.scaleUnitVector(getOrthonormalVector(vector), magnitude);\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Butt\n   * Calculation: to find the projections, just find the points orthogonal to the stroke\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-1-butt\n   */\n  projectButt() {\n    return [\n      this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude),\n      this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude),\n    ];\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Round\n   * Calculation: same as stroke line join `round`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-2-round\n   */\n  projectRound() {\n    const projections: Point[] = [];\n\n    if (!this.isSkewed() && this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(\n        this.applySkew(this.A.add(projection)),\n        this.applySkew(this.A.subtract(projection)),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(\n          this.A,\n          this.T,\n          this.T,\n          this.options,\n        ).projectRound(),\n      );\n    }\n\n    return projections;\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Square\n   * Calculation: project a rectangle of points on the stroke in the opposite direction of the vector `AT`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-3-square\n   */\n  projectSquare() {\n    const projections: Point[] = [];\n\n    if (this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(this.A.add(projection), this.A.subtract(projection));\n    } else {\n      const orthogonalProjection = this.calcOrthogonalProjection(\n        this.A,\n        this.T,\n        this.strokeProjectionMagnitude,\n      );\n      const strokePointingOut = this.scaleUnitVector(\n        getUnitVector(this.createSideVector(this.A, this.T)),\n        -this.strokeProjectionMagnitude,\n      );\n      const projectedA = this.A.add(strokePointingOut);\n      projections.push(\n        projectedA.add(orthogonalProjection),\n        projectedA.subtract(orthogonalProjection),\n      );\n    }\n\n    return projections.map((p) => this.applySkew(p));\n  }\n\n  protected projectPoints() {\n    switch (this.options.strokeLineCap) {\n      case 'round':\n        return this.projectRound();\n      case 'square':\n        return this.projectSquare();\n      default:\n        return this.projectButt();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n    }));\n  }\n}\n","import { Point, type XY } from '../../../Point';\nimport { findIndexRight } from '../../internals/findRight';\nimport { StrokeLineCapProjections } from './StrokeLineCapProjections';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nexport type * from './types';\n\n/**\n *\n * Used to calculate object's bounding box\n *\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n *\n */\nexport const projectStrokeOnPoints = (\n  points: XY[],\n  options: TProjectStrokeOnPointsOptions,\n  openPath = false,\n): TProjection[] => {\n  const projections: TProjection[] = [];\n\n  if (points.length === 0) {\n    return projections;\n  }\n\n  // first we remove duplicate neighboring points\n  const reduced = points.reduce(\n    (reduced, point) => {\n      if (!reduced[reduced.length - 1].eq(point)) {\n        reduced.push(new Point(point));\n      }\n      return reduced;\n    },\n    [new Point(points[0])],\n  );\n\n  if (reduced.length === 1) {\n    openPath = true;\n  } else if (!openPath) {\n    // remove points from end in case they equal the first point\n    // in order to correctly project the first point\n    const start = reduced[0];\n    const index = findIndexRight(reduced, (point) => !point.eq(start));\n    reduced.splice(index + 1);\n  }\n\n  reduced.forEach((A, index, points) => {\n    let B: XY, C: XY;\n    if (index === 0) {\n      C = points[1];\n      B = openPath ? A : points[points.length - 1];\n    } else if (index === points.length - 1) {\n      B = points[index - 1];\n      C = openPath ? A : points[0];\n    } else {\n      B = points[index - 1];\n      C = points[index + 1];\n    }\n\n    if (openPath && points.length === 1) {\n      projections.push(\n        ...new StrokeLineCapProjections(A, A, options).project(),\n      );\n    } else if (openPath && (index === 0 || index === points.length - 1)) {\n      projections.push(\n        ...new StrokeLineCapProjections(\n          A,\n          index === 0 ? C : B,\n          options,\n        ).project(),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(A, B, C, options).project(),\n      );\n    }\n  });\n\n  return projections;\n};\n","export const findIndexRight = <T>(\n  array: T[],\n  predicate: (value: T, index: number, array: T[]) => boolean,\n) => {\n  for (let index = array.length - 1; index >= 0; index--) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n","import type { TextStyle } from '../../shapes/Text/StyledText';\n\nexport const cloneStyles = (style: TextStyle): TextStyle => {\n  const newObj: TextStyle = {};\n  Object.keys(style).forEach((key) => {\n    newObj[key] = {};\n    Object.keys(style[key]).forEach((keyInner) => {\n      newObj[key][keyInner] = { ...style[key][keyInner] };\n    });\n  });\n  return newObj;\n};\n","import { getFabricWindow } from '../env';\n\n/**\n * Capitalizes a string\n * @param {String} string String to capitalize\n * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n * and other letters stay untouched, if false first letter is capitalized\n * and other letters are converted to lowercase.\n * @return {String} Capitalized version of a string\n */\nexport const capitalize = (string: string, firstLetterOnly = false): string =>\n  `${string.charAt(0).toUpperCase()}${\n    firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase()\n  }`;\n\n/**\n * Escapes XML in a string\n * @param {String} string String to escape\n * @return {String} Escaped version of a string\n */\nexport const escapeXml = (string: string): string =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n\nlet segmenter: Intl.Segmenter | false;\n\nconst getSegmenter = () => {\n  if (!segmenter) {\n    segmenter =\n      'Intl' in getFabricWindow() &&\n      'Segmenter' in Intl &&\n      new Intl.Segmenter(undefined, {\n        granularity: 'grapheme',\n      });\n  }\n  return segmenter;\n};\n\n/**\n * Divide a string in the user perceived single units\n * @param {String} textstring String to escape\n * @return {Array} array containing the graphemes\n */\nexport const graphemeSplit = (textstring: string): string[] => {\n  segmenter || getSegmenter();\n  if (segmenter) {\n    const segments = segmenter.segment(textstring);\n    return Array.from(segments).map(({ segment }) => segment);\n  }\n\n  //Fallback\n  return graphemeSplitImpl(textstring);\n};\n\nconst graphemeSplitImpl = (textstring: string): string[] => {\n  const graphemes: string[] = [];\n  for (let i = 0, chr; i < textstring.length; i++) {\n    if ((chr = getWholeChar(textstring, i)) === false) {\n      continue;\n    }\n    graphemes.push(chr);\n  }\n  return graphemes;\n};\n\n// taken from mdn in the charAt doc page.\nconst getWholeChar = (str: string, i: number): string | false => {\n  const code = str.charCodeAt(i);\n  if (isNaN(code)) {\n    return ''; // Position not found\n  }\n  if (code < 0xd800 || code > 0xdfff) {\n    return str.charAt(i);\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 <= code && code <= 0xdbff) {\n    if (str.length <= i + 1) {\n      throw 'High surrogate without following low surrogate';\n    }\n    const next = str.charCodeAt(i + 1);\n    if (0xdc00 > next || next > 0xdfff) {\n      throw 'High surrogate without following low surrogate';\n    }\n    return str.charAt(i) + str.charAt(i + 1);\n  }\n  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n  if (i === 0) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  const prev = str.charCodeAt(i - 1);\n\n  // (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 > prev || prev > 0xdbff) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  // We can pass over low surrogates now as the second component\n  // in a pair which we have already processed\n  return false;\n};\n","import { reNewline } from '../../constants';\nimport type {\n  TextStyle,\n  TextStyleDeclaration,\n} from '../../shapes/Text/StyledText';\nimport { cloneStyles } from '../internals/cloneStyles';\nimport { graphemeSplit } from '../lang_string';\n\nexport type TextStyleArray = {\n  start: number;\n  end: number;\n  style: TextStyleDeclaration;\n}[];\n\n/**\n * @param {Object} prevStyle first style to compare\n * @param {Object} thisStyle second style to compare\n * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n * @return {boolean} true if the style changed\n */\nexport const hasStyleChanged = (\n  prevStyle: TextStyleDeclaration,\n  thisStyle: TextStyleDeclaration,\n  forTextSpans = false,\n) =>\n  prevStyle.fill !== thisStyle.fill ||\n  prevStyle.stroke !== thisStyle.stroke ||\n  prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n  prevStyle.fontSize !== thisStyle.fontSize ||\n  prevStyle.fontFamily !== thisStyle.fontFamily ||\n  prevStyle.fontWeight !== thisStyle.fontWeight ||\n  prevStyle.fontStyle !== thisStyle.fontStyle ||\n  prevStyle.textDecorationThickness !== thisStyle.textDecorationThickness ||\n  prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n  prevStyle.deltaY !== thisStyle.deltaY ||\n  (forTextSpans &&\n    (prevStyle.overline !== thisStyle.overline ||\n      prevStyle.underline !== thisStyle.underline ||\n      prevStyle.linethrough !== thisStyle.linethrough));\n\n/**\n * Returns the array form of a text object's inline styles property with styles grouped in ranges\n * rather than per character. This format is less verbose, and is better suited for storage\n * so it is used in serialization (not during runtime).\n * @param {object} styles per character styles for a text object\n * @param {String} text the text string that the styles are applied to\n * @return {{start: number, end: number, style: object}[]}\n */\nexport const stylesToArray = (\n  styles: TextStyle,\n  text: string,\n): TextStyleArray => {\n  const textLines = text.split('\\n'),\n    stylesArray = [];\n  let charIndex = -1,\n    prevStyle = {};\n  // clone style structure to prevent mutation\n  styles = cloneStyles(styles);\n\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n    if (!styles[i]) {\n      //no styles exist for this line, so add the line's length to the charIndex total and reset prevStyle\n      charIndex += chars.length;\n      prevStyle = {};\n      continue;\n    }\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      const thisStyle = styles[i][c];\n      //check if style exists for this character\n      if (thisStyle && Object.keys(thisStyle).length > 0) {\n        if (hasStyleChanged(prevStyle, thisStyle, true)) {\n          stylesArray.push({\n            start: charIndex,\n            end: charIndex + 1,\n            style: thisStyle,\n          });\n        } else {\n          //if style is the same as previous character, increase end index\n          stylesArray[stylesArray.length - 1].end++;\n        }\n      }\n      prevStyle = thisStyle || {};\n    }\n  }\n  return stylesArray;\n};\n\n/**\n * Returns the object form of the styles property with styles that are assigned per\n * character rather than grouped by range. This format is more verbose, and is\n * only used during runtime (not for serialization/storage)\n * @param {Array} styles the serialized form of a text object's styles\n * @param {String} text the text string that the styles are applied to\n * @return {Object}\n */\nexport const stylesFromArray = (\n  styles: TextStyleArray | TextStyle,\n  text: string,\n): TextStyle => {\n  if (!Array.isArray(styles)) {\n    // clone to prevent mutation\n    return cloneStyles(styles);\n  }\n  const textLines = text.split(reNewline),\n    stylesObject: TextStyle = {};\n  let charIndex = -1,\n    styleIndex = 0;\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      //check if there's a style collection that includes the current character\n      if (\n        styles[styleIndex] &&\n        styles[styleIndex].start <= charIndex &&\n        charIndex < styles[styleIndex].end\n      ) {\n        //create object for line index if it doesn't exist\n        stylesObject[i] = stylesObject[i] || {};\n        //assign a style at this character's index\n        stylesObject[i][c] = { ...styles[styleIndex].style };\n        //if character is at the end of the current style collection, move to the next\n        if (charIndex === styles[styleIndex].end - 1) {\n          styleIndex++;\n        }\n      }\n    }\n  }\n  return stylesObject;\n};\n","import { FILL, STROKE } from '../constants';\n\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nexport const SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  FILL,\n  'fill-opacity',\n  'fill-rule',\n  'opacity',\n  STROKE,\n  'stroke-dasharray',\n  'stroke-linecap',\n  'stroke-dashoffset',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke-width',\n  'id',\n  'paint-order',\n  'vector-effect',\n  'instantiated_by_use',\n  'clip-path',\n];\n","export function selectorMatches(\n  element: HTMLElement | SVGElement,\n  selector: string,\n) {\n  const nodeName = element.nodeName;\n  const classNames = element.getAttribute('class');\n  const id = element.getAttribute('id');\n  const azAz = '(?![a-zA-Z\\\\-]+)';\n  let matcher;\n  // i check if a selector matches slicing away part from it.\n  // if i get empty string i should match\n  matcher = new RegExp('^' + nodeName, 'i');\n  selector = selector.replace(matcher, '');\n  if (id && selector.length) {\n    matcher = new RegExp('#' + id + azAz, 'i');\n    selector = selector.replace(matcher, '');\n  }\n  if (classNames && selector.length) {\n    const splitClassNames = classNames.split(' ');\n    for (let i = splitClassNames.length; i--; ) {\n      matcher = new RegExp('\\\\.' + splitClassNames[i] + azAz, 'i');\n      selector = selector.replace(matcher, '');\n    }\n  }\n  return selector.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\nimport { doesSomeParentMatch } from './doesSomeParentMatch';\n\n/**\n * @private\n */\n\nexport function elementMatchesRule(\n  element: HTMLElement | SVGElement,\n  selectors: string[],\n) {\n  let parentMatching = true;\n  // start from rightmost selector.\n  const firstMatching = selectorMatches(element, selectors.pop()!);\n  if (firstMatching && selectors.length) {\n    parentMatching = doesSomeParentMatch(element, selectors);\n  }\n  return firstMatching && parentMatching && selectors.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\n\nexport function doesSomeParentMatch(\n  element: HTMLElement | SVGElement,\n  selectors: string[],\n) {\n  let selector: string,\n    parentMatching = true;\n  while (\n    element.parentElement &&\n    element.parentElement.nodeType === 1 &&\n    selectors.length\n  ) {\n    if (parentMatching) {\n      selector = selectors.pop()!;\n    }\n    element = element.parentElement;\n    parentMatching = selectorMatches(element, selector!);\n  }\n  return selectors.length === 0;\n}\n","import { elementMatchesRule } from './elementMatchesRule';\nimport type { CSSRules } from './typedefs';\n\n/**\n * @private\n */\n\nexport function getGlobalStylesForElement(\n  element: HTMLElement | SVGElement,\n  cssRules: CSSRules = {},\n) {\n  let styles: Record<string, string> = {};\n  for (const rule in cssRules) {\n    if (elementMatchesRule(element, rule.split(' '))) {\n      styles = {\n        ...styles,\n        ...cssRules[rule],\n      };\n    }\n  }\n  return styles;\n}\n","import { attributesMap } from './constants';\n\nexport const normalizeAttr = (\n  attr: keyof typeof attributesMap | string,\n): string => attributesMap[attr as keyof typeof attributesMap] ?? attr;\n","import { reNum } from '../../parser/constants';\n\nconst regex = new RegExp(`(${reNum})`, 'gi');\n\nexport const cleanupSvgAttribute = (attributeValue: string) =>\n  attributeValue\n    .replace(regex, ' $1 ')\n    // replace annoying commas and arbitrary whitespace with single spaces\n    .replace(/,/gi, ' ')\n    .replace(/\\s+/gi, ' ');\n","import { ROTATE, SCALE, SKEW_X, SKEW_Y, iMatrix } from '../constants';\nimport { reNum } from './constants';\nimport type { TMat2D } from '../typedefs';\nimport { cleanupSvgAttribute } from '../util/internals/cleanupSvgAttribute';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createSkewXMatrix,\n  createSkewYMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\n\n// == begin transform regexp\nconst p = `(${reNum})`;\nconst skewX = String.raw`(skewX)\\(${p}\\)`;\nconst skewY = String.raw`(skewY)\\(${p}\\)`;\nconst rotate = String.raw`(rotate)\\(${p}(?: ${p} ${p})?\\)`;\nconst scale = String.raw`(scale)\\(${p}(?: ${p})?\\)`;\nconst translate = String.raw`(translate)\\(${p}(?: ${p})?\\)`;\nconst matrix = String.raw`(matrix)\\(${p} ${p} ${p} ${p} ${p} ${p}\\)`;\nconst transform = `(?:${matrix}|${translate}|${rotate}|${scale}|${skewX}|${skewY})`;\nconst transforms = `(?:${transform}*)`;\nconst transformList = String.raw`^\\s*(?:${transforms}?)\\s*$`;\n// http://www.w3.org/TR/SVG/coords.html#TransformAttribute\nconst reTransformList = new RegExp(transformList);\nconst reTransform = new RegExp(transform);\nconst reTransformAll = new RegExp(transform, 'g');\n// == end transform regexp\n\n/**\n * Parses \"transform\" attribute, returning an array of values\n * @static\n * @function\n * @memberOf fabric\n * @param {String} attributeValue String containing attribute value\n * @return {TTransformMatrix} Array of 6 elements representing transformation matrix\n */\nexport function parseTransformAttribute(attributeValue: string): TMat2D {\n  // first we clean the string\n  attributeValue = cleanupSvgAttribute(attributeValue)\n    // remove spaces around front parentheses\n    .replace(/\\s*([()])\\s*/gi, '$1');\n\n  // start with identity matrix\n  const matrices: TMat2D[] = [];\n\n  // return if no argument was given or\n  // an argument does not match transform attribute regexp\n  if (\n    !attributeValue ||\n    (attributeValue && !reTransformList.test(attributeValue))\n  ) {\n    return [...iMatrix];\n  }\n\n  for (const match of attributeValue.matchAll(reTransformAll)) {\n    const transformMatch = reTransform.exec(match[0]);\n    if (!transformMatch) {\n      continue;\n    }\n    let matrix: TMat2D = iMatrix;\n    const matchedParams = transformMatch.filter((m) => !!m);\n    const [, operation, ...rawArgs] = matchedParams;\n    const [arg0, arg1, arg2, arg3, arg4, arg5] = rawArgs.map((arg) =>\n      parseFloat(arg),\n    );\n\n    switch (operation) {\n      case 'translate':\n        matrix = createTranslateMatrix(arg0, arg1);\n        break;\n      case ROTATE:\n        matrix = createRotateMatrix({ angle: arg0 }, { x: arg1, y: arg2 });\n        break;\n      case SCALE:\n        matrix = createScaleMatrix(arg0, arg1);\n        break;\n      case SKEW_X:\n        matrix = createSkewXMatrix(arg0);\n        break;\n      case SKEW_Y:\n        matrix = createSkewYMatrix(arg0);\n        break;\n      case 'matrix':\n        matrix = [arg0, arg1, arg2, arg3, arg4, arg5];\n        break;\n    }\n\n    // snapshot current matrix into matrices array\n    matrices.push(matrix);\n  }\n\n  return multiplyTransformMatrixArray(matrices);\n}\n","import { multiplyTransformMatrices } from '../util/misc/matrix';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { parseTransformAttribute } from './parseTransformAttribute';\nimport { CENTER, LEFT, RIGHT, NONE, FILL, STROKE } from '../constants';\nimport { TEXT_DECORATION_THICKNESS } from '../shapes/Text/constants';\n\nexport function normalizeValue(\n  attr: string,\n  value: any,\n  parentAttributes: Record<string, any>,\n  fontSize: number,\n): string | null | boolean | number[] | number {\n  const isArray = Array.isArray(value);\n  let parsed: number | number[];\n  let ouputValue: string | null | boolean | number[] | number = value;\n  if ((attr === FILL || attr === STROKE) && value === NONE) {\n    ouputValue = '';\n  } else if (attr === 'strokeUniform') {\n    return value === 'non-scaling-stroke';\n  } else if (attr === 'strokeDashArray') {\n    if (value === NONE) {\n      ouputValue = null;\n    } else {\n      ouputValue = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n    }\n  } else if (attr === 'transformMatrix') {\n    if (parentAttributes && parentAttributes.transformMatrix) {\n      ouputValue = multiplyTransformMatrices(\n        parentAttributes.transformMatrix,\n        parseTransformAttribute(value),\n      );\n    } else {\n      ouputValue = parseTransformAttribute(value);\n    }\n  } else if (attr === 'visible') {\n    ouputValue = value !== NONE && value !== 'hidden';\n    // display=none on parent element always takes precedence over child element\n    if (parentAttributes && parentAttributes.visible === false) {\n      ouputValue = false;\n    }\n  } else if (attr === 'opacity') {\n    ouputValue = parseFloat(value);\n    if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n      ouputValue *= parentAttributes.opacity as number;\n    }\n  } else if (attr === 'textAnchor' /* text-anchor */) {\n    ouputValue = value === 'start' ? LEFT : value === 'end' ? RIGHT : CENTER;\n  } else if (attr === 'charSpacing' || attr === TEXT_DECORATION_THICKNESS) {\n    // parseUnit returns px and we convert it to em\n    parsed = (parseUnit(value, fontSize) / fontSize) * 1000;\n  } else if (attr === 'paintFirst') {\n    const fillIndex = value.indexOf(FILL);\n    const strokeIndex = value.indexOf(STROKE);\n    ouputValue = FILL;\n    if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n      ouputValue = STROKE;\n    } else if (fillIndex === -1 && strokeIndex > -1) {\n      ouputValue = STROKE;\n    }\n  } else if (\n    attr === 'href' ||\n    attr === 'xlink:href' ||\n    attr === 'font' ||\n    attr === 'id'\n  ) {\n    return value;\n  } else if (attr === 'imageSmoothing') {\n    return value === 'optimizeQuality';\n  } else {\n    parsed = isArray\n      ? (value as string[]).map(parseUnit)\n      : parseUnit(value, fontSize);\n  }\n\n  return !isArray && isNaN(parsed! as number) ? ouputValue : parsed!;\n}\n","/**\n * Takes a style string and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleString(\n  style: string,\n  oStyle: Record<string, any>,\n): void {\n  style\n    .replace(/;\\s*$/, '')\n    .split(';')\n    .forEach((chunk) => {\n      if (!chunk) return;\n      const [attr, value] = chunk.split(':');\n      oStyle[attr.trim().toLowerCase()] = value.trim();\n    });\n}\n","import { parseStyleObject } from './parseStyleObject';\nimport { parseStyleString } from './parseStyleString';\n\n/**\n * Parses \"style\" attribute, retuning an object with values\n * @static\n * @memberOf fabric\n * @param {SVGElement} element Element to parse\n * @return {Object} Objects with values parsed from style attribute of an element\n */\nexport function parseStyleAttribute(\n  element: HTMLElement | SVGElement,\n): Record<string, any> {\n  const oStyle: Record<string, any> = {},\n    style = element.getAttribute('style');\n\n  if (!style) {\n    return oStyle;\n  }\n\n  if (typeof style === 'string') {\n    parseStyleString(style, oStyle);\n  } else {\n    parseStyleObject(style, oStyle);\n  }\n\n  return oStyle;\n}\n","/**\n * Takes a style object and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleObject(\n  style: Record<string, any>,\n  oStyle: Record<string, any>,\n): void {\n  Object.entries(style).forEach(([prop, value]) => {\n    if (value === undefined) {\n      return;\n    }\n    oStyle[prop.toLowerCase()] = value;\n  });\n}\n","import { Color } from '../color/Color';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject } from '../shapes/Object/FabricObject';\n\nconst colorAttributesMap = {\n  stroke: 'strokeOpacity',\n  fill: 'fillOpacity',\n};\n\n/**\n * @private\n * @param {Object} attributes Array of attributes to parse\n */\n\nexport function setStrokeFillOpacity(\n  attributes: Record<string, any>,\n): Record<string, any> {\n  const defaults = FabricObject.getDefaults();\n  Object.entries(colorAttributesMap).forEach(([attr, colorAttr]) => {\n    if (\n      typeof attributes[colorAttr] === 'undefined' ||\n      attributes[attr] === ''\n    ) {\n      return;\n    }\n    if (typeof attributes[attr] === 'undefined') {\n      if (!defaults[attr]) {\n        return;\n      }\n      attributes[attr] = defaults[attr];\n    }\n    if (attributes[attr].indexOf('url(') === 0) {\n      return;\n    }\n    const color = new Color(attributes[attr]);\n    attributes[attr] = color\n      .setAlpha(toFixed(color.getAlpha() * attributes[colorAttr], 2))\n      .toRgba();\n  });\n  return attributes;\n}\n","import { DEFAULT_SVG_FONT_SIZE } from '../constants';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { cPath, fSize, svgValidParentsRegEx } from './constants';\nimport { getGlobalStylesForElement } from './getGlobalStylesForElement';\nimport { normalizeAttr } from './normalizeAttr';\nimport { normalizeValue } from './normalizeValue';\nimport { parseFontDeclaration } from './parseFontDeclaration';\nimport { parseStyleAttribute } from './parseStyleAttribute';\nimport { setStrokeFillOpacity } from './setStrokeFillOpacity';\nimport type { CSSRules } from './typedefs';\n\n/**\n * Returns an object of attributes' name/value, given element and an array of attribute names;\n * Parses parent \"g\" nodes recursively upwards.\n * @param {SVGElement | HTMLElement} element Element to parse\n * @param {Array} attributes Array of attributes to parse\n * @return {Object} object containing parsed attributes' names/values\n */\nexport function parseAttributes(\n  element: HTMLElement | SVGElement | null,\n  attributes: string[],\n  cssRules?: CSSRules,\n): Record<string, any> {\n  if (!element) {\n    return {};\n  }\n\n  let parentAttributes: Record<string, string> = {},\n    fontSize: number,\n    parentFontSize = DEFAULT_SVG_FONT_SIZE;\n\n  // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n  if (\n    element.parentNode &&\n    svgValidParentsRegEx.test(element.parentNode.nodeName)\n  ) {\n    parentAttributes = parseAttributes(\n      element.parentElement,\n      attributes,\n      cssRules,\n    );\n    if (parentAttributes.fontSize) {\n      fontSize = parentFontSize = parseUnit(parentAttributes.fontSize);\n    }\n  }\n\n  const ownAttributes: Record<string, string> = {\n    ...attributes.reduce<Record<string, string>>((memo, attr) => {\n      const value = element.getAttribute(attr);\n      if (value) {\n        memo[attr] = value;\n      }\n      return memo;\n    }, {}),\n    // add values parsed from style, which take precedence over attributes\n    // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n    ...getGlobalStylesForElement(element, cssRules),\n    ...parseStyleAttribute(element),\n  };\n\n  if (ownAttributes[cPath]) {\n    element.setAttribute(cPath, ownAttributes[cPath]);\n  }\n  if (ownAttributes[fSize]) {\n    // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n    fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\n    ownAttributes[fSize] = `${fontSize}`;\n  }\n\n  // this should have its own complex type\n  const normalizedStyle: Record<\n    string,\n    string | boolean | number | number[] | null\n  > = {};\n  for (const attr in ownAttributes) {\n    const normalizedAttr = normalizeAttr(attr);\n    const normalizedValue = normalizeValue(\n      normalizedAttr,\n      ownAttributes[attr],\n      parentAttributes,\n      fontSize!,\n    );\n    normalizedStyle[normalizedAttr] = normalizedValue;\n  }\n  if (normalizedStyle && normalizedStyle.font) {\n    parseFontDeclaration(normalizedStyle.font as string, normalizedStyle);\n  }\n  const mergedAttrs = { ...parentAttributes, ...normalizedStyle };\n  return svgValidParentsRegEx.test(element.nodeName)\n    ? mergedAttrs\n    : setStrokeFillOpacity(mergedAttrs);\n}\n","import { parseUnit } from '../util/misc/svgParsing';\nimport { reFontDeclaration } from './constants';\n\n/**\n * Parses a short font declaration, building adding its properties to a style object\n * @static\n * @function\n * @memberOf fabric\n * @param {String} value font declaration\n * @param {Object} oStyle definition\n */\nexport function parseFontDeclaration(\n  value: string,\n  oStyle: Record<string, any>,\n): void {\n  const match = value.match(reFontDeclaration);\n\n  if (!match) {\n    return;\n  }\n  const fontStyle = match[1],\n    // font variant is not used\n    // fontVariant = match[2],\n    fontWeight = match[3],\n    fontSize = match[4],\n    lineHeight = match[5],\n    fontFamily = match[6];\n\n  if (fontStyle) {\n    oStyle.fontStyle = fontStyle;\n  }\n  if (fontWeight) {\n    oStyle.fontWeight = isNaN(parseFloat(fontWeight))\n      ? fontWeight\n      : parseFloat(fontWeight);\n  }\n  if (fontSize) {\n    oStyle.fontSize = parseUnit(fontSize);\n  }\n  if (fontFamily) {\n    oStyle.fontFamily = fontFamily;\n  }\n  if (lineHeight) {\n    oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n  }\n}\n","import { kRect } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const rectDefaultValues: Partial<TClassProperties<Rect>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueRectProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedRectProps\n  extends SerializedObjectProps,\n    UniqueRectProps {}\n\nexport interface RectProps extends FabricObjectProps, UniqueRectProps {}\n\nconst RECT_PROPS = ['rx', 'ry'] as const;\n\nexport class Rect<\n    Props extends TOptions<RectProps> = Partial<RectProps>,\n    SProps extends SerializedRectProps = SerializedRectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements RectProps\n{\n  /**\n   * Horizontal border radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical border radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Rect';\n\n  static cacheProperties = [...cacheProperties, ...RECT_PROPS];\n\n  static ownDefaults = rectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Rect.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Rect.ownDefaults);\n    this.setOptions(options);\n    this._initRxRy();\n  }\n  /**\n   * Initializes rx/ry attributes\n   * @private\n   */\n  _initRxRy() {\n    const { rx, ry } = this;\n    if (rx && !ry) {\n      this.ry = rx;\n    } else if (ry && !rx) {\n      this.rx = ry;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const { width: w, height: h } = this;\n    const x = -w / 2;\n    const y = -h / 2;\n    const rx = this.rx ? Math.min(this.rx, w / 2) : 0;\n    const ry = this.ry ? Math.min(this.ry, h / 2) : 0;\n    const isRounded = rx !== 0 || ry !== 0;\n\n    ctx.beginPath();\n\n    ctx.moveTo(x + rx, y);\n\n    ctx.lineTo(x + w - rx, y);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w - kRect * rx,\n        y,\n        x + w,\n        y + kRect * ry,\n        x + w,\n        y + ry,\n      );\n\n    ctx.lineTo(x + w, y + h - ry);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w,\n        y + h - kRect * ry,\n        x + w - kRect * rx,\n        y + h,\n        x + w - rx,\n        y + h,\n      );\n\n    ctx.lineTo(x + rx, y + h);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + kRect * rx,\n        y + h,\n        x,\n        y + h - kRect * ry,\n        x,\n        y + h - ry,\n      );\n\n    ctx.lineTo(x, y + ry);\n    isRounded &&\n      ctx.bezierCurveTo(x, y + kRect * ry, x + kRect * rx, y, x + rx, y);\n\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...RECT_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { width, height, rx, ry } = this;\n    return [\n      '<rect ',\n      'COMMON_PARTS',\n      `x=\"${-width / 2}\" y=\"${\n        -height / 2\n      }\" rx=\"${rx}\" ry=\"${ry}\" width=\"${width}\" height=\"${height}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Rect.fromElement`)\n   * @static\n   * @memberOf Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'rx',\n    'ry',\n    'width',\n    'height',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns {@link Rect} instance from an SVG element\n   * @static\n   * @memberOf Rect\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement | SVGElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      left = 0,\n      top = 0,\n      width = 0,\n      height = 0,\n      visible = true,\n      ...restOfparsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n\n    return new this({\n      ...options,\n      ...restOfparsedAttributes,\n      left,\n      top,\n      width,\n      height,\n      visible: Boolean(visible && width && height),\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Rect);\nclassRegistry.setSVGClass(Rect);\n","export const LAYOUT_TYPE_INITIALIZATION = 'initialization';\nexport const LAYOUT_TYPE_ADDED = 'added';\nexport const LAYOUT_TYPE_REMOVED = 'removed';\nexport const LAYOUT_TYPE_IMPERATIVE = 'imperative';\nexport const LAYOUT_TYPE_OBJECT_MODIFIED = 'object_modified';\nexport const LAYOUT_TYPE_OBJECT_MODIFYING = 'object_modifying';\n","import { Point, ZERO } from '../../Point';\nimport type { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { multiplyTransformMatrixArray } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport {\n  calcPlaneChangeMatrix,\n  sendVectorToPlane,\n} from '../../util/misc/planeChange';\n\n/**\n * @returns 2 points, the tl and br corners of the non rotated bounding box of an object\n * in the {@link group} plane, taking into account objects that {@link group} is their parent\n * but also belong to the active selection.\n */\nexport const getObjectBounds = (\n  destinationGroup: Group,\n  object: FabricObject,\n): Point[] => {\n  const {\n    strokeUniform,\n    strokeWidth,\n    width,\n    height,\n    group: currentGroup,\n  } = object;\n  const t =\n    currentGroup && currentGroup !== destinationGroup\n      ? calcPlaneChangeMatrix(\n          currentGroup.calcTransformMatrix(),\n          destinationGroup.calcTransformMatrix(),\n        )\n      : null;\n  const objectCenter = t\n    ? object.getRelativeCenterPoint().transform(t)\n    : object.getRelativeCenterPoint();\n  const accountForStroke = !object['isStrokeAccountedForInDimensions']();\n  const strokeUniformVector =\n    strokeUniform && accountForStroke\n      ? sendVectorToPlane(\n          new Point(strokeWidth, strokeWidth),\n          undefined,\n          destinationGroup.calcTransformMatrix(),\n        )\n      : ZERO;\n  const scalingStrokeWidth =\n    !strokeUniform && accountForStroke ? strokeWidth : 0;\n  const sizeVector = sizeAfterTransform(\n    width + scalingStrokeWidth,\n    height + scalingStrokeWidth,\n    multiplyTransformMatrixArray([t, object.calcOwnMatrix()], true),\n  )\n    .add(strokeUniformVector)\n    .scalarDivide(2);\n  return [objectCenter.subtract(sizeVector), objectCenter.add(sizeVector)];\n};\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_IMPERATIVE,\n} from '../constants';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { getObjectBounds } from './utils';\n\n/**\n * Exposes a main public method {@link calcLayoutResult} that is used by the `LayoutManager` to perform layout.\n * Returning `undefined` signals the `LayoutManager` to skip the layout.\n *\n * In charge of calculating the bounding box of the passed objects.\n */\nexport abstract class LayoutStrategy {\n  /**\n   * override by subclass for persistence (TS does not support `static abstract`)\n   */\n  static type = 'strategy';\n\n  /**\n   * Used by the `LayoutManager` to perform layout\n   * @TODO/fix: if this method is calcResult, should calc unconditionally.\n   * the condition to not calc should be evaluated by the layoutManager.\n   * @returns layout result **OR** `undefined` to skip layout\n   */\n  public calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    if (this.shouldPerformLayout(context)) {\n      return this.calcBoundingBox(objects, context);\n    }\n  }\n\n  shouldPerformLayout({ type, prevStrategy, strategy }: StrictLayoutContext) {\n    return (\n      type === LAYOUT_TYPE_INITIALIZATION ||\n      type === LAYOUT_TYPE_IMPERATIVE ||\n      (!!prevStrategy && strategy !== prevStrategy)\n    );\n  }\n\n  shouldLayoutClipPath({ type, target: { clipPath } }: StrictLayoutContext) {\n    return (\n      type !== LAYOUT_TYPE_INITIALIZATION &&\n      clipPath &&\n      !clipPath.absolutePositioned\n    );\n  }\n\n  getInitialSize(\n    context: StrictLayoutContext & InitializationLayoutContext,\n    result: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ) {\n    return result.size;\n  }\n\n  /**\n   * Override this method to customize layout.\n   */\n  calcBoundingBox(\n    objects: FabricObject[],\n    context: StrictLayoutContext,\n  ): LayoutStrategyResult | undefined {\n    const { type, target } = context;\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.overrides) {\n      return context.overrides;\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    const { left, top, width, height } = makeBoundingBoxFromPoints(\n      objects\n        .map((object) => getObjectBounds(target, object))\n        .reduce<Point[]>((coords, curr) => coords.concat(curr), []),\n    );\n    const bboxSize = new Point(width, height);\n    const bboxLeftTop = new Point(left, top);\n    const bboxCenter = bboxLeftTop.add(bboxSize.scalarDivide(2));\n\n    if (type === LAYOUT_TYPE_INITIALIZATION) {\n      const actualSize = this.getInitialSize(context, {\n        size: bboxSize,\n        center: bboxCenter,\n      });\n      return {\n        // in `initialization` we do not account for target's transformation matrix\n        center: bboxCenter,\n        // TODO: investigate if this is still necessary\n        relativeCorrection: new Point(0, 0),\n        size: actualSize,\n      };\n    } else {\n      //  we send `relativeCenter` up to group's containing plane\n      const center = bboxCenter.transform(target.calcOwnMatrix());\n      return {\n        center,\n        size: bboxSize,\n      };\n    }\n  }\n}\n","import type { StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to fit target's objects.\n */\nexport class FitContentLayout extends LayoutStrategy {\n  static readonly type = 'fit-content';\n\n  /**\n   * @override layout on all triggers\n   * Override at will\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldPerformLayout(context: StrictLayoutContext) {\n    return true;\n  }\n}\n\nclassRegistry.setClass(FitContentLayout);\n","import { Point } from '../Point';\nimport {\n  CENTER,\n  CHANGED,\n  MODIFIED,\n  MODIFY_PATH,\n  MODIFY_POLY,\n  MOVING,\n  RESIZING,\n  ROTATING,\n  SCALING,\n  SKEWING,\n  iMatrix,\n} from '../constants';\nimport type { Group } from '../shapes/Group';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { invertTransform } from '../util/misc/matrix';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { FitContentLayout } from './LayoutStrategies/FitContentLayout';\nimport type { LayoutStrategy } from './LayoutStrategies/LayoutStrategy';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_OBJECT_MODIFIED,\n  LAYOUT_TYPE_OBJECT_MODIFYING,\n} from './constants';\nimport type {\n  LayoutContext,\n  LayoutResult,\n  RegistrationContext,\n  StrictLayoutContext,\n} from './types';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TModificationEvents } from '../EventTypeDefs';\n\nconst LAYOUT_MANAGER = 'layoutManager';\n\nexport type SerializedLayoutManager = {\n  type: string;\n  strategy: string;\n};\n\nexport class LayoutManager {\n  declare private _prevLayoutStrategy?: LayoutStrategy;\n  declare protected _subscriptions: Map<FabricObject, VoidFunction[]>;\n\n  strategy: LayoutStrategy;\n\n  constructor(strategy: LayoutStrategy = new FitContentLayout()) {\n    this.strategy = strategy;\n    this._subscriptions = new Map();\n  }\n\n  public performLayout(context: LayoutContext) {\n    const strictContext: StrictLayoutContext = {\n      bubbles: true,\n      strategy: this.strategy,\n      ...context,\n      prevStrategy: this._prevLayoutStrategy,\n      stopPropagation() {\n        this.bubbles = false;\n      },\n    };\n\n    this.onBeforeLayout(strictContext);\n\n    const layoutResult = this.getLayoutResult(strictContext);\n    if (layoutResult) {\n      this.commitLayout(strictContext, layoutResult);\n    }\n\n    this.onAfterLayout(strictContext, layoutResult);\n    this._prevLayoutStrategy = strictContext.strategy;\n  }\n\n  /**\n   * Attach handlers for events that we know will invalidate the layout when\n   * performed on child objects ( general transforms ).\n   * Returns the disposers for later unsubscribing and cleanup\n   * @param {FabricObject} object\n   * @param {RegistrationContext & Partial<StrictLayoutContext>} context\n   * @returns {VoidFunction[]} disposers remove the handlers\n   */\n  protected attachHandlers(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): VoidFunction[] {\n    const { target } = context;\n    return (\n      [\n        MODIFIED,\n        MOVING,\n        RESIZING,\n        ROTATING,\n        SCALING,\n        SKEWING,\n        CHANGED,\n        MODIFY_POLY,\n        MODIFY_PATH,\n      ] as (TModificationEvents & 'modified')[]\n    ).map((key) =>\n      object.on(key, (e) =>\n        this.performLayout(\n          key === MODIFIED\n            ? {\n                type: LAYOUT_TYPE_OBJECT_MODIFIED,\n                trigger: key,\n                e,\n                target,\n              }\n            : {\n                type: LAYOUT_TYPE_OBJECT_MODIFYING,\n                trigger: key,\n                e,\n                target,\n              },\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Subscribe an object to transform events that will trigger a layout change on the parent\n   * This is important only for interactive groups.\n   * @param object\n   * @param context\n   */\n  protected subscribe(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    this.unsubscribe(object, context);\n    const disposers = this.attachHandlers(object, context);\n    this._subscriptions.set(object, disposers);\n  }\n\n  /**\n   * unsubscribe object layout triggers\n   */\n  protected unsubscribe(\n    object: FabricObject,\n    _context?: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    (this._subscriptions.get(object) || []).forEach((d) => d());\n    this._subscriptions.delete(object);\n  }\n\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.unsubscribe(object, context));\n  }\n\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.subscribe(object, context));\n  }\n\n  protected onBeforeLayout(context: StrictLayoutContext) {\n    const { target, type } = context;\n    const { canvas } = target;\n    // handle layout triggers subscription\n    // @TODO: gate the registration when the group is interactive\n    if (type === LAYOUT_TYPE_INITIALIZATION || type === LAYOUT_TYPE_ADDED) {\n      this.subscribeTargets(context);\n    } else if (type === LAYOUT_TYPE_REMOVED) {\n      this.unsubscribeTargets(context);\n    }\n    // fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:before', {\n      context,\n    });\n    canvas &&\n      canvas.fire('object:layout:before', {\n        target,\n        context,\n      });\n\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.deep) {\n      const { strategy: _, ...tricklingContext } = context;\n      // traverse the tree\n      target.forEachObject(\n        (object) =>\n          (object as Group).layoutManager &&\n          (object as Group).layoutManager.performLayout({\n            ...tricklingContext,\n            bubbles: false,\n            target: object as Group,\n          }),\n      );\n    }\n  }\n\n  protected getLayoutResult(\n    context: StrictLayoutContext,\n  ): Required<LayoutResult> | undefined {\n    const { target, strategy, type } = context;\n\n    const result = strategy.calcLayoutResult(context, target.getObjects());\n\n    if (!result) {\n      return;\n    }\n\n    const prevCenter =\n      type === LAYOUT_TYPE_INITIALIZATION\n        ? new Point()\n        : target.getRelativeCenterPoint();\n\n    const {\n      center: nextCenter,\n      correction = new Point(),\n      relativeCorrection = new Point(),\n    } = result;\n    const offset = prevCenter\n      .subtract(nextCenter)\n      .add(correction)\n      .transform(\n        // in `initialization` we do not account for target's transformation matrix\n        type === LAYOUT_TYPE_INITIALIZATION\n          ? iMatrix\n          : invertTransform(target.calcOwnMatrix()),\n        true,\n      )\n      .add(relativeCorrection);\n\n    return {\n      result,\n      prevCenter,\n      nextCenter,\n      offset,\n    };\n  }\n\n  protected commitLayout(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    const {\n      result: { size },\n      nextCenter,\n    } = layoutResult;\n    // set dimensions\n    target.set({ width: size.x, height: size.y });\n    // layout descendants\n    this.layoutObjects(context, layoutResult);\n    //  set position\n    // in `initialization` we do not account for target's transformation matrix\n    if (context.type === LAYOUT_TYPE_INITIALIZATION) {\n      // TODO: what about strokeWidth?\n      target.set({\n        left:\n          context.x ?? nextCenter.x + size.x * resolveOrigin(target.originX),\n        top: context.y ?? nextCenter.y + size.y * resolveOrigin(target.originY),\n      });\n    } else {\n      target.setPositionByOrigin(nextCenter, CENTER, CENTER);\n      // invalidate\n      target.setCoords();\n      target.set('dirty', true);\n    }\n  }\n\n  protected layoutObjects(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    //  adjust objects to account for new center\n    target.forEachObject((object) => {\n      object.group === target &&\n        this.layoutObject(context, layoutResult, object);\n    });\n    // adjust clip path to account for new center\n    context.strategy.shouldLayoutClipPath(context) &&\n      this.layoutObject(context, layoutResult, target.clipPath as FabricObject);\n  }\n\n  /**\n   * @param {FabricObject} object\n   * @param {Point} offset\n   */\n  protected layoutObject(\n    context: StrictLayoutContext,\n    { offset }: Required<LayoutResult>,\n    object: FabricObject,\n  ) {\n    // TODO: this is here for cache invalidation.\n    // verify if this is necessary since we have explicit\n    // cache invalidation at the end of commitLayout\n    object.set({\n      left: object.left + offset.x,\n      top: object.top + offset.y,\n    });\n  }\n\n  protected onAfterLayout(\n    context: StrictLayoutContext,\n    layoutResult?: LayoutResult,\n  ) {\n    const {\n      target,\n      strategy,\n      bubbles,\n      prevStrategy: _,\n      ...bubblingContext\n    } = context;\n    const { canvas } = target;\n\n    //  fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:after', {\n      context,\n      result: layoutResult,\n    });\n    canvas &&\n      canvas.fire('object:layout:after', {\n        context,\n        result: layoutResult,\n        target,\n      });\n\n    //  bubble\n    const parent = target.parent;\n    if (bubbles && parent?.layoutManager) {\n      //  add target to context#path\n      (bubblingContext.path || (bubblingContext.path = [])).push(target);\n      //  all parents should invalidate their layout\n      parent.layoutManager.performLayout({\n        ...bubblingContext,\n        target: parent,\n      });\n    }\n    target.set('dirty', true);\n  }\n\n  dispose() {\n    const { _subscriptions } = this;\n    _subscriptions.forEach((disposers) => disposers.forEach((d) => d()));\n    _subscriptions.clear();\n  }\n\n  toObject() {\n    return {\n      type: LAYOUT_MANAGER,\n      strategy: (this.strategy.constructor as typeof LayoutStrategy).type,\n    };\n  }\n\n  toJSON() {\n    return this.toObject();\n  }\n}\n\nclassRegistry.setClass(LayoutManager, LAYOUT_MANAGER);\n","import type { CollectionEvents, ObjectEvents } from '../EventTypeDefs';\nimport { createCollectionMixin } from '../Collection';\nimport type {\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n  Abortable,\n} from '../typedefs';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n} from '../util/misc/matrix';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { applyTransformToObject } from '../util/misc/objectTransforms';\nimport { FabricObject } from './Object/FabricObject';\nimport { Rect } from './Rect';\nimport { classRegistry } from '../ClassRegistry';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport { log } from '../util/internals/console';\nimport type {\n  ImperativeLayoutOptions,\n  LayoutBeforeEvent,\n  LayoutAfterEvent,\n} from '../LayoutManager/types';\nimport { LayoutManager } from '../LayoutManager/LayoutManager';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { SerializedLayoutManager } from '../LayoutManager/LayoutManager';\nimport type { FitContentLayout } from '../LayoutManager';\nimport type { DrawContext } from './Object/Object';\n\n/**\n * This class handles the specific case of creating a group using {@link Group#fromObject} and is not meant to be used in any other case.\n * We could have used a boolean in the constructor, as we did previously, but we think the boolean\n * would stay in the group's constructor interface and create confusion, therefore it was removed.\n * This layout manager doesn't do anything and therefore keeps the exact layout the group had when {@link Group#toObject} was called.\n */\nclass NoopLayoutManager extends LayoutManager {\n  performLayout() {}\n}\n\nexport interface GroupEvents extends ObjectEvents, CollectionEvents {\n  'layout:before': LayoutBeforeEvent;\n  'layout:after': LayoutAfterEvent;\n}\n\nexport interface GroupOwnProps {\n  subTargetCheck: boolean;\n  interactive: boolean;\n}\n\nexport interface SerializedGroupProps\n  extends SerializedObjectProps,\n    GroupOwnProps {\n  objects: SerializedObjectProps[];\n  layoutManager: SerializedLayoutManager;\n}\n\nexport interface GroupProps extends FabricObjectProps, GroupOwnProps {\n  layoutManager: LayoutManager;\n}\n\nexport const groupDefaultValues: Partial<TClassProperties<Group>> = {\n  strokeWidth: 0,\n  subTargetCheck: false,\n  interactive: false,\n};\n\n/**\n * @fires object:added\n * @fires object:removed\n * @fires layout:before\n * @fires layout:after\n */\nexport class Group\n  extends createCollectionMixin(\n    FabricObject<GroupProps, SerializedGroupProps, GroupEvents>,\n  )\n  implements GroupProps\n{\n  /**\n   * Used to optimize performance\n   * set to `false` if you don't need contained objects to be targets of events\n   * @default\n   * @type boolean\n   */\n  declare subTargetCheck: boolean;\n\n  /**\n   * Used to allow targeting of object inside groups.\n   * set to true if you want to select an object inside a group.\\\n   * **REQUIRES** `subTargetCheck` set to true\n   * This will be not removed but slowly replaced with a method setInteractive\n   * that will take care of enabling subTargetCheck and necessary object events.\n   * There is too much attached to group interactivity to just be evaluated by a\n   * boolean in the code\n   * @default\n   * @deprecated\n   * @type boolean\n   */\n  declare interactive: boolean;\n\n  declare layoutManager: LayoutManager;\n\n  /**\n   * Used internally to optimize performance\n   * Once an object is selected, instance is rendered without the selected object.\n   * This way instance is cached only once for the entire interaction with the selected object.\n   * @private\n   */\n  protected _activeObjects: FabricObject[] = [];\n\n  static type = 'Group';\n\n  static ownDefaults: Record<string, any> = groupDefaultValues;\n  private __objectSelectionTracker: (ev: ObjectEvents['selected']) => void;\n  private __objectSelectionDisposer: (ev: ObjectEvents['deselected']) => void;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Group.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {FabricObject[]} [objects] instance objects\n   * @param {Object} [options] Options object\n   */\n  constructor(objects: FabricObject[] = [], options: Partial<GroupProps> = {}) {\n    super();\n    Object.assign(this, Group.ownDefaults);\n    this.setOptions(options);\n    this.groupInit(objects, options);\n  }\n\n  /**\n   * Shared code between group and active selection\n   * Meant to be used by the constructor.\n   */\n  protected groupInit(\n    objects: FabricObject[],\n    options: {\n      layoutManager?: LayoutManager;\n      top?: number;\n      left?: number;\n    },\n  ) {\n    this._objects = [...objects]; // Avoid unwanted mutations of Collection to affect the caller\n\n    this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(\n      this,\n      true,\n    );\n    this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(\n      this,\n      false,\n    );\n\n    this.forEachObject((object) => {\n      this.enterGroup(object, false);\n    });\n\n    // perform initial layout\n    this.layoutManager = options.layoutManager ?? new LayoutManager();\n    this.layoutManager.performLayout({\n      type: LAYOUT_TYPE_INITIALIZATION,\n      target: this,\n      targets: [...objects],\n      // @TODO remove this concept from the layout manager.\n      // Layout manager will calculate the correct position,\n      // group options can override it later.\n      x: options.left,\n      y: options.top,\n    });\n  }\n\n  /**\n   * Checks if object can enter group and logs relevant warnings\n   * @private\n   * @param {FabricObject} object\n   * @returns\n   */\n  canEnterGroup(object: FabricObject) {\n    if (object === this || this.isDescendantOf(object)) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'Group: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    } else if (this._objects.indexOf(object) !== -1) {\n      // is already in the objects array\n      log(\n        'error',\n        'Group: duplicate objects are not supported inside group, this call has no effect',\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Override this method to enhance performance (for groups with a lot of objects).\n   * If Overriding, be sure not pass illegal objects to group - it will break your app.\n   * @private\n   */\n  protected _filterObjectsBeforeEnteringGroup(objects: FabricObject[]) {\n    return objects.filter((object, index, array) => {\n      // can enter AND is the first occurrence of the object in the passed args (to prevent adding duplicates)\n      return this.canEnterGroup(object) && array.indexOf(object) === index;\n    });\n  }\n\n  /**\n   * Add objects\n   * @param {...FabricObject[]} objects\n   */\n  add(...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.add(...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Inserts an object into collection at specified index\n   * @param {FabricObject[]} objects Object to insert\n   * @param {Number} index Index to insert object at\n   */\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.insertAt(index, ...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Remove objects\n   * @param {...FabricObject[]} objects\n   * @returns {FabricObject[]} removed objects\n   */\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_REMOVED, removed);\n    return removed;\n  }\n\n  _onObjectAdded(object: FabricObject) {\n    this.enterGroup(object, true);\n    this.fire('object:added', { target: object });\n    object.fire('added', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _onObjectRemoved(object: FabricObject, removeParentTransform?: boolean) {\n    this.exitGroup(object, removeParentTransform);\n    this.fire('object:removed', { target: object });\n    object.fire('removed', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    this.layoutManager.performLayout({\n      type,\n      targets,\n      target: this,\n    });\n  }\n\n  _onStackOrderChanged() {\n    this._set('dirty', true);\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    const prev = this[key as keyof this];\n    super._set(key, value);\n    if (key === 'canvas' && prev !== value) {\n      (this._objects || []).forEach((object) => {\n        object._set(key, value);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return this.subTargetCheck;\n  }\n\n  /**\n   * Remove all objects\n   * @returns {FabricObject[]} removed objects\n   */\n  removeAll() {\n    this._activeObjects = [];\n    return this.remove(...this._objects);\n  }\n\n  /**\n   * keeps track of the selected objects\n   * @private\n   */\n  __objectSelectionMonitor<T extends boolean>(\n    selected: T,\n    {\n      target: object,\n    }: ObjectEvents[T extends true ? 'selected' : 'deselected'],\n  ) {\n    const activeObjects = this._activeObjects;\n    if (selected) {\n      activeObjects.push(object);\n      this._set('dirty', true);\n    } else if (activeObjects.length > 0) {\n      const index = activeObjects.indexOf(object);\n      if (index > -1) {\n        activeObjects.splice(index, 1);\n        this._set('dirty', true);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {boolean} watch\n   * @param {FabricObject} object\n   */\n  _watchObject(watch: boolean, object: FabricObject) {\n    //  make sure we listen only once\n    watch && this._watchObject(false, object);\n    if (watch) {\n      object.on('selected', this.__objectSelectionTracker);\n      object.on('deselected', this.__objectSelectionDisposer);\n    } else {\n      object.off('selected', this.__objectSelectionTracker);\n      object.off('deselected', this.__objectSelectionDisposer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object.group && object.group.remove(object);\n    object._set('parent', this);\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  _enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    if (removeParentTransform) {\n      // can this be converted to utils (sendObjectToPlane)?\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          invertTransform(this.calcTransformMatrix()),\n          object.calcTransformMatrix(),\n        ),\n      );\n    }\n    this._shouldSetNestedCoords() && object.setCoords();\n    object._set('group', this);\n    object._set('canvas', this.canvas);\n    this._watchObject(true, object);\n    const activeObject =\n      this.canvas &&\n      this.canvas.getActiveObject &&\n      this.canvas.getActiveObject();\n    // if we are adding the activeObject in a group\n    if (\n      activeObject &&\n      (activeObject === object || object.isDescendantOf(activeObject))\n    ) {\n      this._activeObjects.push(object);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    object._set('parent', undefined);\n    object._set('canvas', undefined);\n  }\n\n  /**\n   * Executes the inner fabric logic of exiting a group.\n   * - Stop watching the object\n   * - Remove the object from the optimization map this._activeObjects\n   * - unset the group property of the object\n   * @protected\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object._set('group', undefined);\n    if (!removeParentTransform) {\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          this.calcTransformMatrix(),\n          object.calcTransformMatrix(),\n        ),\n      );\n      object.setCoords();\n    }\n    this._watchObject(false, object);\n    const index =\n      this._activeObjects.length > 0 ? this._activeObjects.indexOf(object) : -1;\n    if (index > -1) {\n      this._activeObjects.splice(index, 1);\n    }\n  }\n\n  /**\n   * Decide if the group should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group is already cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    const ownCache = FabricObject.prototype.shouldCache.call(this);\n    if (ownCache) {\n      for (let i = 0; i < this._objects.length; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          this.ownCaching = false;\n          return false;\n        }\n      }\n    }\n    return ownCache;\n  }\n\n  /**\n   * Check if this object or a child object will cast a shadow\n   * @return {Boolean}\n   */\n  willDrawShadow() {\n    if (super.willDrawShadow()) {\n      return true;\n    }\n    for (let i = 0; i < this._objects.length; i++) {\n      if (this._objects[i].willDrawShadow()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if instance or its group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache(): boolean {\n    return this.ownCaching || (!!this.parent && this.parent.isOnACache());\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    this._renderBackground(ctx);\n    for (let i = 0; i < this._objects.length; i++) {\n      const obj = this._objects[i];\n      // TODO: handle rendering edge case somehow\n      if (this.canvas?.preserveObjectStacking && obj.group !== this) {\n        ctx.save();\n        ctx.transform(...invertTransform(this.calcTransformMatrix()));\n        obj.render(ctx);\n        ctx.restore();\n      } else if (obj.group === this) {\n        obj.render(ctx);\n      }\n    }\n    this._drawClipPath(ctx, this.clipPath, context);\n  }\n\n  /**\n   * @override\n   * @return {Boolean}\n   */\n  setCoords() {\n    super.setCoords();\n    this._shouldSetNestedCoords() &&\n      this.forEachObject((object) => object.setCoords());\n  }\n\n  triggerLayout(options: ImperativeLayoutOptions = {}) {\n    this.layoutManager.performLayout({\n      target: this,\n      type: LAYOUT_TYPE_IMPERATIVE,\n      ...options,\n    });\n  }\n\n  /**\n   * Renders instance on a given context\n   * @param {CanvasRenderingContext2D} ctx context to render instance on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    this._transformDone = true;\n    super.render(ctx);\n    this._transformDone = false;\n  }\n\n  /**\n   *\n   * @private\n   * @param {'toObject'|'toDatalessObject'} [method]\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {FabricObject[]} serialized objects\n   */\n  __serializeObjects(\n    method: 'toObject' | 'toDatalessObject',\n    propertiesToInclude?: string[],\n  ) {\n    const _includeDefaultValues = this.includeDefaultValues;\n    return this._objects\n      .filter(function (obj) {\n        return !obj.excludeFromExport;\n      })\n      .map(function (obj) {\n        const originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        const data = obj[method || 'toObject'](propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        // delete data.version;\n        return data;\n      });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<\n      GroupProps & TClassProperties<this>,\n      keyof SerializedGroupProps\n    >,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SerializedGroupProps {\n    const layoutManager = this.layoutManager.toObject();\n\n    return {\n      ...super.toObject([\n        'subTargetCheck',\n        'interactive',\n        ...propertiesToInclude,\n      ]),\n      ...(layoutManager.strategy !== 'fit-content' || this.includeDefaultValues\n        ? { layoutManager }\n        : {}),\n      objects: this.__serializeObjects(\n        'toObject',\n        propertiesToInclude as string[],\n      ),\n    };\n  }\n\n  toString() {\n    return `#<Group: (${this.complexity()})>`;\n  }\n\n  dispose() {\n    this.layoutManager.unsubscribeTargets({\n      targets: this.getObjects(),\n      target: this,\n    });\n    this._activeObjects = [];\n    this.forEachObject((object) => {\n      this._watchObject(false, object);\n      object.dispose();\n    });\n    super.dispose();\n  }\n\n  /**\n   * @private\n   */\n  _createSVGBgRect(reviver?: TSVGReviver) {\n    if (!this.backgroundColor) {\n      return '';\n    }\n    const fillStroke = Rect.prototype._toSVG.call(this);\n    const commons = fillStroke.indexOf('COMMON_PARTS');\n    fillStroke[commons] = 'for=\"group\" ';\n    const markup = fillStroke.join('');\n    return reviver ? reviver(markup) : markup;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  _toSVG(reviver?: TSVGReviver) {\n    const svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\n    }\n    svgString.push('</g>\\n');\n    return svgString;\n  }\n\n  /**\n   * Returns styles-string for svg-export, specific version for group\n   * @return {String}\n   */\n  getSvgStyles(): string {\n    const opacity =\n        typeof this.opacity !== 'undefined' && this.opacity !== 1\n          ? `opacity: ${this.opacity};`\n          : '',\n      visibility = this.visible ? '' : ' visibility: hidden;';\n    return [opacity, this.getSvgFilter(), visibility].join('');\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const svgString = [];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n    }\n    return this._createBaseClipPathSVGMarkup(svgString, {\n      reviver,\n    });\n  }\n\n  /**\n   * @todo support loading from svg\n   * @private\n   * @static\n   * @memberOf Group\n   * @param {Object} object Object to create a group from\n   * @returns {Promise<Group>}\n   */\n  static fromObject<T extends TOptions<SerializedGroupProps>>(\n    { type, objects = [], layoutManager, ...options }: T,\n    abortable?: Abortable,\n  ) {\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, abortable),\n      enlivenObjectEnlivables(options, abortable),\n    ]).then(([objects, hydratedOptions]) => {\n      const group = new this(objects, {\n        ...options,\n        ...hydratedOptions,\n        layoutManager: new NoopLayoutManager(),\n      });\n      if (layoutManager) {\n        const layoutClass = classRegistry.getClass<typeof LayoutManager>(\n          layoutManager.type,\n        );\n        const strategyClass = classRegistry.getClass<typeof FitContentLayout>(\n          layoutManager.strategy,\n        );\n        group.layoutManager = new layoutClass(new strategyClass());\n      } else {\n        group.layoutManager = new LayoutManager();\n      }\n      group.layoutManager.subscribeTargets({\n        type: LAYOUT_TYPE_INITIALIZATION,\n        target: group,\n        targets: group.getObjects(),\n      });\n      group.setCoords();\n      return group;\n    });\n  }\n}\n\nclassRegistry.setClass(Group);\n","import type { GroupProps } from '../../shapes/Group';\nimport { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\n\n/**\n * TODO experiment with different layout manager and svg results ( fixed fit content )\n * Groups SVG elements (usually those retrieved from SVG document)\n * @static\n * @param {FabricObject[]} elements FabricObject(s) parsed from svg, to group\n * @return {FabricObject | Group}\n */\nexport const groupSVGElements = (\n  elements: FabricObject[],\n  options?: Partial<GroupProps>,\n) => {\n  if (elements && elements.length === 1) {\n    return elements[0];\n  }\n  return new Group(elements, options);\n};\n","import type { TSize } from '../../typedefs';\n\n/**\n * Finds the scale for the object source to fit inside the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to fit into destination\n */\nexport const findScaleToFit = (source: TSize, destination: TSize) =>\n  Math.min(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n\n/**\n * Finds the scale for the object source to cover entirely the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to cover destination\n */\nexport const findScaleToCover = (source: TSize, destination: TSize) =>\n  Math.max(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n","import { reNum } from '../../parser/constants';\n\nconst commaWsp = `\\\\s*,?\\\\s*`;\n\n/**\n * p for param\n * using \"bad naming\" here because it makes the regex much easier to read\n * p is a number that is preceded by an arbitary number of spaces, maybe 0,\n * a comma or not, and then possibly more spaces or not.\n */\nconst p = `${commaWsp}(${reNum})`;\n\n// const reMoveToCommand = `(M) ?(?:${p}${p} ?)+`;\n\n// const reLineCommand = `(L) ?(?:${p}${p} ?)+`;\n\n// const reHorizontalLineCommand = `(H) ?(?:${p} ?)+`;\n\n// const reVerticalLineCommand = `(V) ?(?:${p} ?)+`;\n\n// const reClosePathCommand = String.raw`(Z)\\s*`;\n\n// const reCubicCurveCommand = `(C) ?(?:${p}${p}${p}${p}${p}${p} ?)+`;\n\n// const reCubicCurveShortcutCommand = `(S) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveCommand = `(Q) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveShortcutCommand = `(T) ?(?:${p}${p} ?)+`;\n\nexport const reArcCommandPoints = `${p}${p}${p}${commaWsp}([01])${commaWsp}([01])${p}${p}`;\n// const reArcCommand = `(A) ?(?:${reArcCommandPoints} ?)+`;\n\n// export const rePathCommandGroups =\n//   `(?:(?:${reMoveToCommand})` +\n//   `|(?:${reLineCommand})` +\n//   `|(?:${reHorizontalLineCommand})` +\n//   `|(?:${reVerticalLineCommand})` +\n//   `|(?:${reClosePathCommand})` +\n//   `|(?:${reCubicCurveCommand})` +\n//   `|(?:${reCubicCurveShortcutCommand})` +\n//   `|(?:${reQuadraticCurveCommand})` +\n//   `|(?:${reQuadraticCurveShortcutCommand})` +\n//   `|(?:${reArcCommand}))`;\n\nexport const rePathCommand = '[mzlhvcsqta][^mzlhvcsqta]*';\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport { halfPI, PiBy180 } from '../../constants';\nimport type { TMat2D, TRadian, TRectBounds } from '../../typedefs';\nimport { cos } from '../misc/cos';\nimport { multiplyTransformMatrices, transformPoint } from '../misc/matrix';\nimport { sin } from '../misc/sin';\nimport { toFixed } from '../misc/toFixed';\nimport type {\n  TCurveInfo,\n  TComplexPathData,\n  TParsedAbsoluteCubicCurveCommand,\n  TPathSegmentInfo,\n  TPointAngle,\n  TSimpleParsedCommand,\n  TSimplePathData,\n  TPathSegmentCommandInfo,\n  TComplexParsedCommand,\n  TPathSegmentInfoCommon,\n  TEndPathInfo,\n  TParsedArcCommand,\n  TComplexParsedCommandType,\n} from './typedefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { reArcCommandPoints, rePathCommand } from './regex';\nimport { reNum } from '../../parser/constants';\n\n/**\n * Commands that may be repeated\n */\nconst repeatedCommands: Record<string, 'l' | 'L'> = {\n  m: 'l',\n  M: 'L',\n};\n\n/**\n * Convert an arc of a rotated ellipse to a Bezier Curve\n * @param {TRadian} theta1 start of the arc\n * @param {TRadian} theta2 end of the arc\n * @param cosTh cosine of the angle of rotation\n * @param sinTh sine of the angle of rotation\n * @param rx x-axis radius (before rotation)\n * @param ry y-axis radius (before rotation)\n * @param cx1 center x of the ellipse\n * @param cy1 center y of the ellipse\n * @param mT\n * @param fromX starting point of arc x\n * @param fromY starting point of arc y\n */\nconst segmentToBezier = (\n  theta1: TRadian,\n  theta2: TRadian,\n  cosTh: number,\n  sinTh: number,\n  rx: number,\n  ry: number,\n  cx1: number,\n  cy1: number,\n  mT: number,\n  fromX: number,\n  fromY: number,\n): TParsedAbsoluteCubicCurveCommand => {\n  const costh1 = cos(theta1),\n    sinth1 = sin(theta1),\n    costh2 = cos(theta2),\n    sinth2 = sin(theta2),\n    toX = cosTh * rx * costh2 - sinTh * ry * sinth2 + cx1,\n    toY = sinTh * rx * costh2 + cosTh * ry * sinth2 + cy1,\n    cp1X = fromX + mT * (-cosTh * rx * sinth1 - sinTh * ry * costh1),\n    cp1Y = fromY + mT * (-sinTh * rx * sinth1 + cosTh * ry * costh1),\n    cp2X = toX + mT * (cosTh * rx * sinth2 + sinTh * ry * costh2),\n    cp2Y = toY + mT * (sinTh * rx * sinth2 - cosTh * ry * costh2);\n\n  return ['C', cp1X, cp1Y, cp2X, cp2Y, toX, toY];\n};\n\n/**\n * Adapted from {@link http://dxr.mozilla.org/mozilla-central/source/dom/svg/SVGPathDataParser.cpp}\n * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n * http://mozilla.org/MPL/2.0/\n * @param toX\n * @param toY\n * @param rx\n * @param ry\n * @param {number} large 0 or 1 flag\n * @param {number} sweep 0 or 1 flag\n * @param rotateX\n */\nconst arcToSegments = (\n  toX: number,\n  toY: number,\n  rx: number,\n  ry: number,\n  large: number,\n  sweep: number,\n  rotateX: TRadian,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n  let fromX = 0,\n    fromY = 0,\n    root = 0;\n  const PI = Math.PI,\n    theta = rotateX * PiBy180,\n    sinTheta = sin(theta),\n    cosTh = cos(theta),\n    px = 0.5 * (-cosTh * toX - sinTheta * toY),\n    py = 0.5 * (-cosTh * toY + sinTheta * toX),\n    rx2 = rx ** 2,\n    ry2 = ry ** 2,\n    py2 = py ** 2,\n    px2 = px ** 2,\n    pl = rx2 * ry2 - rx2 * py2 - ry2 * px2;\n  let _rx = Math.abs(rx);\n  let _ry = Math.abs(ry);\n\n  if (pl < 0) {\n    const s = Math.sqrt(1 - pl / (rx2 * ry2));\n    _rx *= s;\n    _ry *= s;\n  } else {\n    root =\n      (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n  }\n\n  const cx = (root * _rx * py) / _ry,\n    cy = (-root * _ry * px) / _rx,\n    cx1 = cosTh * cx - sinTheta * cy + toX * 0.5,\n    cy1 = sinTheta * cx + cosTh * cy + toY * 0.5;\n  let mTheta = calcVectorAngle(1, 0, (px - cx) / _rx, (py - cy) / _ry);\n  let dtheta = calcVectorAngle(\n    (px - cx) / _rx,\n    (py - cy) / _ry,\n    (-px - cx) / _rx,\n    (-py - cy) / _ry,\n  );\n\n  if (sweep === 0 && dtheta > 0) {\n    dtheta -= 2 * PI;\n  } else if (sweep === 1 && dtheta < 0) {\n    dtheta += 2 * PI;\n  }\n\n  // Convert into cubic bezier segments <= 90deg\n  const segments = Math.ceil(Math.abs((dtheta / PI) * 2)),\n    result = [],\n    mDelta = dtheta / segments,\n    mT =\n      ((8 / 3) * Math.sin(mDelta / 4) * Math.sin(mDelta / 4)) /\n      Math.sin(mDelta / 2);\n  let th3 = mTheta + mDelta;\n\n  for (let i = 0; i < segments; i++) {\n    result[i] = segmentToBezier(\n      mTheta,\n      th3,\n      cosTh,\n      sinTheta,\n      _rx,\n      _ry,\n      cx1,\n      cy1,\n      mT,\n      fromX,\n      fromY,\n    );\n    fromX = result[i][5];\n    fromY = result[i][6];\n    mTheta = th3;\n    th3 += mDelta;\n  }\n  return result;\n};\n\n/**\n * @private\n * Calculate the angle between two vectors\n * @param ux u endpoint x\n * @param uy u endpoint y\n * @param vx v endpoint x\n * @param vy v endpoint y\n */\nconst calcVectorAngle = (\n  ux: number,\n  uy: number,\n  vx: number,\n  vy: number,\n): TRadian => {\n  const ta = Math.atan2(uy, ux),\n    tb = Math.atan2(vy, vx);\n  if (tb >= ta) {\n    return tb - ta;\n  } else {\n    return 2 * Math.PI - (ta - tb);\n  }\n};\n\n// functions for the Cubic beizer\n// taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\nconst CB1 = (t: number) => t ** 3;\nconst CB2 = (t: number) => 3 * t ** 2 * (1 - t);\nconst CB3 = (t: number) => 3 * t * (1 - t) ** 2;\nconst CB4 = (t: number) => (1 - t) ** 3;\n\n/**\n * Calculate bounding box of a cubic Bezier curve\n * Taken from http://jsbin.com/ivomiq/56/edit (no credits available)\n * TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n * @param {number} begx starting point\n * @param {number} begy\n * @param {number} cp1x first control point\n * @param {number} cp1y\n * @param {number} cp2x second control point\n * @param {number} cp2y\n * @param {number} endx end of bezier\n * @param {number} endy\n * @return {TRectBounds} the rectangular bounds\n */\nexport function getBoundsOfCurve(\n  begx: number,\n  begy: number,\n  cp1x: number,\n  cp1y: number,\n  cp2x: number,\n  cp2y: number,\n  endx: number,\n  endy: number,\n): TRectBounds {\n  let argsString: string;\n  if (config.cachesBoundsOfCurve) {\n    // eslint-disable-next-line\n    argsString = [...arguments].join();\n    if (cache.boundsOfCurveCache[argsString]) {\n      return cache.boundsOfCurveCache[argsString];\n    }\n  }\n\n  const sqrt = Math.sqrt,\n    abs = Math.abs,\n    tvalues = [],\n    bounds: [[x: number, y: number], [x: number, y: number]] = [\n      [0, 0],\n      [0, 0],\n    ];\n\n  let b = 6 * begx - 12 * cp1x + 6 * cp2x;\n  let a = -3 * begx + 9 * cp1x - 9 * cp2x + 3 * endx;\n  let c = 3 * cp1x - 3 * begx;\n\n  for (let i = 0; i < 2; ++i) {\n    if (i > 0) {\n      b = 6 * begy - 12 * cp1y + 6 * cp2y;\n      a = -3 * begy + 9 * cp1y - 9 * cp2y + 3 * endy;\n      c = 3 * cp1y - 3 * begy;\n    }\n\n    if (abs(a) < 1e-12) {\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n      const t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    const b2ac = b * b - 4 * c * a;\n    if (b2ac < 0) {\n      continue;\n    }\n    const sqrtb2ac = sqrt(b2ac);\n    const t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    const t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  let j = tvalues.length;\n  const jlen = j;\n  const iterator = getPointOnCubicBezierIterator(\n    begx,\n    begy,\n    cp1x,\n    cp1y,\n    cp2x,\n    cp2y,\n    endx,\n    endy,\n  );\n  while (j--) {\n    const { x, y } = iterator(tvalues[j]);\n    bounds[0][j] = x;\n    bounds[1][j] = y;\n  }\n\n  bounds[0][jlen] = begx;\n  bounds[1][jlen] = begy;\n  bounds[0][jlen + 1] = endx;\n  bounds[1][jlen + 1] = endy;\n  const result: TRectBounds = [\n    new Point(Math.min(...bounds[0]), Math.min(...bounds[1])),\n    new Point(Math.max(...bounds[0]), Math.max(...bounds[1])),\n  ];\n  if (config.cachesBoundsOfCurve) {\n    cache.boundsOfCurveCache[argsString!] = result;\n  }\n  return result;\n}\n\n/**\n * Converts arc to a bunch of cubic Bezier curves\n * @param {number} fx starting point x\n * @param {number} fy starting point y\n * @param {TParsedArcCommand} coords Arc command\n */\nexport const fromArcToBeziers = (\n  fx: number,\n  fy: number,\n  [_, rx, ry, rot, large, sweep, tx, ty]: TParsedArcCommand,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  const segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n  for (let i = 0, len = segsNorm.length; i < len; i++) {\n    segsNorm[i][1] += fx;\n    segsNorm[i][2] += fy;\n    segsNorm[i][3] += fx;\n    segsNorm[i][4] += fy;\n    segsNorm[i][5] += fx;\n    segsNorm[i][6] += fy;\n  }\n  return segsNorm;\n};\n\n/**\n * This function takes a parsed SVG path and makes it simpler for fabricJS logic.\n * Simplification consist of:\n * - All commands converted to absolute (lowercase to uppercase)\n * - S converted to C\n * - T converted to Q\n * - A converted to C\n * @param {TComplexPathData} path the array of commands of a parsed SVG path for `Path`\n * @return {TSimplePathData} the simplified array of commands of a parsed SVG path for `Path`\n * TODO: figure out how to remove the type assertions in a nice way\n */\nexport const makePathSimpler = (path: TComplexPathData): TSimplePathData => {\n  // x and y represent the last point of the path, AKA the previous command point.\n  // we add them to each relative command to make it an absolute comment.\n  // we also swap the v V h H with L, because are easier to transform.\n  let x = 0,\n    y = 0;\n  // x1 and y1 represent the last point of the subpath. the subpath is started with\n  // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n  // the last x1 and y1.\n  let x1 = 0,\n    y1 = 0;\n  // previous will host the letter of the previous command, to handle S and T.\n  // controlX and controlY will host the previous reflected control point\n  const destinationPath: TSimplePathData = [];\n  let previous,\n    // placeholders\n    controlX = 0,\n    controlY = 0;\n  for (const parsedCommand of path) {\n    const current: TComplexParsedCommand = [...parsedCommand];\n    let converted: TSimpleParsedCommand | undefined;\n    switch (\n      current[0] // first letter\n    ) {\n      case 'l': // lineto, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'L':\n        x = current[1];\n        y = current[2];\n        converted = ['L', x, y];\n        break;\n      case 'h': // horizontal lineto, relative\n        current[1] += x;\n      // falls through\n      case 'H':\n        x = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'v': // vertical lineto, relative\n        current[1] += y;\n      // falls through\n      case 'V':\n        y = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'm': // moveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'M':\n        x = current[1];\n        y = current[2];\n        x1 = current[1];\n        y1 = current[2];\n        converted = ['M', x, y];\n        break;\n      case 'c': // bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n        current[5] += x;\n        current[6] += y;\n      // falls through\n      case 'C':\n        controlX = current[3];\n        controlY = current[4];\n        x = current[5];\n        y = current[6];\n        converted = ['C', current[1], current[2], controlX, controlY, x, y];\n        break;\n      case 's': // shorthand cubic bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'S':\n        // would be sScC but since we are swapping sSc for C, we check just that.\n        if (previous === 'C') {\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a C, c, S, or s,\n          // the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[3];\n        y = current[4];\n        converted = ['C', controlX, controlY, current[1], current[2], x, y];\n        // converted[3] and converted[4] are NOW the second control point.\n        // we keep it for the next reflection.\n        controlX = converted[3];\n        controlY = converted[4];\n        break;\n      case 'q': // quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'Q':\n        controlX = current[1];\n        controlY = current[2];\n        x = current[3];\n        y = current[4];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 't': // shorthand quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'T':\n        if (previous === 'Q') {\n          // calculate reflection of previous control point\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a Q, q, T or t,\n          // assume the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[1];\n        y = current[2];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 'a':\n        current[6] += x;\n        current[7] += y;\n      // falls through\n      case 'A':\n        fromArcToBeziers(x, y, current).forEach((b) => destinationPath.push(b));\n        x = current[6];\n        y = current[7];\n        break;\n      case 'z':\n      case 'Z':\n        x = x1;\n        y = y1;\n        converted = ['Z'];\n        break;\n      default:\n    }\n    if (converted) {\n      destinationPath.push(converted);\n      previous = converted[0];\n    } else {\n      previous = '';\n    }\n  }\n  return destinationPath;\n};\n\n// todo verify if we can just use the point class here\n/**\n * Calc length from point x1,y1 to x2,y2\n * @param {number} x1 starting point x\n * @param {number} y1 starting point y\n * @param {number} x2 starting point x\n * @param {number} y2 starting point y\n * @return {number} length of segment\n */\nconst calcLineLength = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n): number => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n/**\n * Get an iterator that takes a percentage and returns a point\n * @param {number} begx\n * @param {number} begy\n * @param {number} cp1x\n * @param {number} cp1y\n * @param {number} cp2x\n * @param {number} cp2y\n * @param {number} endx\n * @param {number} endy\n */\nconst getPointOnCubicBezierIterator =\n  (\n    begx: number,\n    begy: number,\n    cp1x: number,\n    cp1y: number,\n    cp2x: number,\n    cp2y: number,\n    endx: number,\n    endy: number,\n  ) =>\n  (pct: number) => {\n    const c1 = CB1(pct),\n      c2 = CB2(pct),\n      c3 = CB3(pct),\n      c4 = CB4(pct);\n    return new Point(\n      endx * c1 + cp2x * c2 + cp1x * c3 + begx * c4,\n      endy * c1 + cp2y * c2 + cp1y * c3 + begy * c4,\n    );\n  };\n\nconst QB1 = (t: number) => t ** 2;\nconst QB2 = (t: number) => 2 * t * (1 - t);\nconst QB3 = (t: number) => (1 - t) ** 2;\n\nconst getTangentCubicIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n    p4x: number,\n    p4y: number,\n  ) =>\n  (pct: number) => {\n    const qb1 = QB1(pct),\n      qb2 = QB2(pct),\n      qb3 = QB3(pct),\n      tangentX =\n        3 * (qb3 * (p2x - p1x) + qb2 * (p3x - p2x) + qb1 * (p4x - p3x)),\n      tangentY =\n        3 * (qb3 * (p2y - p1y) + qb2 * (p3y - p2y) + qb1 * (p4y - p3y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\nconst getPointOnQuadraticBezierIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const c1 = QB1(pct),\n      c2 = QB2(pct),\n      c3 = QB3(pct);\n    return new Point(\n      p3x * c1 + p2x * c2 + p1x * c3,\n      p3y * c1 + p2y * c2 + p1y * c3,\n    );\n  };\n\nconst getTangentQuadraticIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const invT = 1 - pct,\n      tangentX = 2 * (invT * (p2x - p1x) + pct * (p3x - p2x)),\n      tangentY = 2 * (invT * (p2y - p1y) + pct * (p3y - p2y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\n// this will run over a path segment (a cubic or quadratic segment) and approximate it\n// with 100 segments. This will good enough to calculate the length of the curve\nconst pathIterator = (\n  iterator: (pct: number) => Point,\n  x1: number,\n  y1: number,\n) => {\n  let tempP = new Point(x1, y1),\n    tmpLen = 0;\n  for (let perc = 1; perc <= 100; perc += 1) {\n    const p = iterator(perc / 100);\n    tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    tempP = p;\n  }\n  return tmpLen;\n};\n\n/**\n * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n * that correspond to that pixels run over the path.\n * The percentage will be then used to find the correct point on the canvas for the path.\n * @param {Array} segInfo fabricJS collection of information on a parsed path\n * @param {number} distance from starting point, in pixels.\n * @return {TPointAngle} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n */\nconst findPercentageForDistance = (\n  segInfo: TCurveInfo<'Q' | 'C'>,\n  distance: number,\n): TPointAngle => {\n  let perc = 0,\n    tmpLen = 0,\n    tempP: XY = { x: segInfo.x, y: segInfo.y },\n    p: XY = { ...tempP },\n    nextLen: number,\n    nextStep = 0.01,\n    lastPerc = 0;\n  // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n  // the path\n  const iterator = segInfo.iterator,\n    angleFinder = segInfo.angleFinder;\n  while (tmpLen < distance && nextStep > 0.0001) {\n    p = iterator(perc);\n    lastPerc = perc;\n    nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    // compare tmpLen each cycle with distance, decide next perc to test.\n    if (nextLen + tmpLen > distance) {\n      // we discard this step and we make smaller steps.\n      perc -= nextStep;\n      nextStep /= 2;\n    } else {\n      tempP = p;\n      perc += nextStep;\n      tmpLen += nextLen;\n    }\n  }\n  return { ...p, angle: angleFinder(lastPerc) };\n};\n\n/**\n * Run over a parsed and simplified path and extract some information (length of each command and starting point)\n * @param {TSimplePathData} path parsed path commands\n * @return {TPathSegmentInfo[]} path commands information\n */\nexport const getPathSegmentsInfo = (\n  path: TSimplePathData,\n): TPathSegmentInfo[] => {\n  let totalLength = 0,\n    //x2 and y2 are the coords of segment start\n    //x1 and y1 are the coords of the current point\n    x1 = 0,\n    y1 = 0,\n    x2 = 0,\n    y2 = 0,\n    iterator,\n    tempInfo: TPathSegmentInfo;\n  const info: TPathSegmentInfo[] = [];\n  for (const current of path) {\n    const basicInfo: TPathSegmentInfoCommon<keyof TPathSegmentCommandInfo> = {\n      x: x1,\n      y: y1,\n      command: current[0],\n      length: 0,\n    };\n    switch (\n      current[0] //first letter\n    ) {\n      case 'M':\n        tempInfo = <TPathSegmentInfoCommon<'M'>>basicInfo;\n        tempInfo.x = x2 = x1 = current[1];\n        tempInfo.y = y2 = y1 = current[2];\n        break;\n      case 'L':\n        tempInfo = <TPathSegmentInfoCommon<'L'>>basicInfo;\n        tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n        x1 = current[1];\n        y1 = current[2];\n        break;\n      case 'C':\n        iterator = getPointOnCubicBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo = <TCurveInfo<'C'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentCubicIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n\n        x1 = current[5];\n        y1 = current[6];\n        break;\n      case 'Q':\n        iterator = getPointOnQuadraticBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo = <TCurveInfo<'Q'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentQuadraticIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n        x1 = current[3];\n        y1 = current[4];\n        break;\n      case 'Z':\n        // we add those in order to ease calculations later\n        tempInfo = <TEndPathInfo>basicInfo;\n        tempInfo.destX = x2;\n        tempInfo.destY = y2;\n        tempInfo.length = calcLineLength(x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        break;\n    }\n    totalLength += tempInfo.length;\n    info.push(tempInfo);\n  }\n  info.push({ length: totalLength, x: x1, y: y1 });\n  return info;\n};\n\n/**\n * Get the point on the path that is distance along the path\n * @param path\n * @param distance\n * @param infos\n */\nexport const getPointOnPath = (\n  path: TSimplePathData,\n  distance: number,\n  infos: TPathSegmentInfo[] = getPathSegmentsInfo(path),\n): TPointAngle | undefined => {\n  let i = 0;\n  while (distance - infos[i].length > 0 && i < infos.length - 2) {\n    distance -= infos[i].length;\n    i++;\n  }\n  const segInfo = infos[i],\n    segPercent = distance / segInfo.length,\n    segment = path[i];\n\n  switch (segInfo.command) {\n    case 'M':\n      return { x: segInfo.x, y: segInfo.y, angle: 0 };\n    case 'Z':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segInfo.destX, segInfo.destY),\n          segPercent,\n        ),\n        angle: Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x),\n      };\n    case 'L':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segment[1]!, segment[2]!),\n          segPercent,\n        ),\n        angle: Math.atan2(segment[2]! - segInfo.y, segment[1]! - segInfo.x),\n      };\n    case 'C':\n      return findPercentageForDistance(segInfo, distance);\n    case 'Q':\n      return findPercentageForDistance(segInfo, distance);\n    default:\n    // throw Error('Invalid command');\n  }\n};\n\nconst rePathCmdAll = new RegExp(rePathCommand, 'gi');\nconst regExpArcCommandPoints = new RegExp(reArcCommandPoints, 'g');\nconst reMyNum = new RegExp(reNum, 'gi');\nconst commandLengths = {\n  m: 2,\n  l: 2,\n  h: 1,\n  v: 1,\n  c: 6,\n  s: 4,\n  q: 4,\n  t: 2,\n  a: 7,\n} as const;\n/**\n *\n * @param {string} pathString\n * @return {TComplexPathData} An array of SVG path commands\n * @example <caption>Usage</caption>\n * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n *   ['M', 3, 4],\n *   ['Q', 3, 5, 2, 1, 4, 0],\n *   ['Q', 9, 12, 2, 1, 4, 0],\n * ];\n */\nexport const parsePath = (pathString: string): TComplexPathData => {\n  const chain: TComplexPathData = [];\n  const all = pathString.match(rePathCmdAll) ?? [];\n  for (const matchStr of all) {\n    // take match string and save the first letter as the command\n    const commandLetter = matchStr[0] as TComplexParsedCommandType;\n    // in case of Z we have very little to do\n    if (commandLetter === 'z' || commandLetter === 'Z') {\n      chain.push([commandLetter]);\n      continue;\n    }\n    const commandLength =\n      commandLengths[\n        commandLetter.toLowerCase() as keyof typeof commandLengths\n      ];\n\n    let paramArr = [];\n    if (commandLetter === 'a' || commandLetter === 'A') {\n      // the arc command ha some peculariaties that requires a special regex other than numbers\n      // it is possible to avoid using a space between the sweep and large arc flags, making them either\n      // 00, 01, 10 or 11, making them identical to a plain number for the regex reMyNum\n      // reset the regexp\n      regExpArcCommandPoints.lastIndex = 0;\n      for (let out = null; (out = regExpArcCommandPoints.exec(matchStr)); ) {\n        paramArr.push(...out.slice(1));\n      }\n    } else {\n      paramArr = matchStr.match(reMyNum) || [];\n    }\n\n    // inspect the length of paramArr, if is longer than commandLength\n    // we are dealing with repeated commands\n    for (let i = 0; i < paramArr.length; i += commandLength) {\n      const newCommand = new Array(commandLength) as TComplexParsedCommand;\n      const transformedCommand = repeatedCommands[commandLetter];\n      newCommand[0] =\n        i > 0 && transformedCommand ? transformedCommand : commandLetter;\n      for (let j = 0; j < commandLength; j++) {\n        newCommand[j + 1] = parseFloat(paramArr[i + j]);\n      }\n      chain.push(newCommand);\n    }\n  }\n  return chain;\n};\n\n/**\n *\n * Converts points to a smooth SVG path\n * @param {XY[]} points Array of points\n * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n * @return {(string|number)[][]} An array of SVG path commands\n */\nexport const getSmoothPathFromPoints = (\n  points: Point[],\n  correction = 0,\n): TSimplePathData => {\n  let p1 = new Point(points[0]),\n    p2 = new Point(points[1]),\n    multSignX = 1,\n    multSignY = 0;\n  const path: TSimplePathData = [],\n    len = points.length,\n    manyPoints = len > 2;\n\n  if (manyPoints) {\n    multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n    multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n  }\n  path.push([\n    'M',\n    p1.x - multSignX * correction,\n    p1.y - multSignY * correction,\n  ]);\n  let i;\n  for (i = 1; i < len; i++) {\n    if (!p1.eq(p2)) {\n      const midPoint = p1.midPointFrom(p2);\n      // p1 is our bezier control point\n      // midpoint is our endpoint\n      // start point is p(i-1) value.\n      path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\n    }\n    p1 = points[i];\n    if (i + 1 < points.length) {\n      p2 = points[i + 1];\n    }\n  }\n  if (manyPoints) {\n    multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n    multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n  }\n  path.push([\n    'L',\n    p1.x + multSignX * correction,\n    p1.y + multSignY * correction,\n  ]);\n  return path;\n};\n\n/**\n * Transform a path by transforming each segment.\n * it has to be a simplified path or it won't work.\n * WARNING: this depends from pathOffset for correct operation\n * @param {TSimplePathData} path fabricJS parsed and simplified path commands\n * @param {TMat2D} transform matrix that represent the transformation\n * @param {Point} [pathOffset] `Path.pathOffset`\n * @returns {TSimplePathData} the transformed path\n */\nexport const transformPath = (\n  path: TSimplePathData,\n  transform: TMat2D,\n  pathOffset: Point,\n): TSimplePathData => {\n  if (pathOffset) {\n    transform = multiplyTransformMatrices(transform, [\n      1,\n      0,\n      0,\n      1,\n      -pathOffset.x,\n      -pathOffset.y,\n    ]);\n  }\n  return path.map((pathSegment) => {\n    const newSegment: TSimpleParsedCommand = [...pathSegment];\n    for (let i = 1; i < pathSegment.length - 1; i += 2) {\n      // TODO: is there a way to get around casting to any?\n      const { x, y } = transformPoint(\n        {\n          x: pathSegment[i] as number,\n          y: pathSegment[i + 1] as number,\n        },\n        transform,\n      );\n      newSegment[i] = x;\n      newSegment[i + 1] = y;\n    }\n    return newSegment;\n  });\n};\n\n/**\n * Returns an array of path commands to create a regular polygon\n * @param {number} numVertexes\n * @param {number} radius\n * @returns {TSimplePathData} An array of SVG path commands\n */\nexport const getRegularPolygonPath = (\n  numVertexes: number,\n  radius: number,\n): TSimplePathData => {\n  const interiorAngle = (Math.PI * 2) / numVertexes;\n  // rotationAdjustment rotates the path by 1/2 the interior angle so that the polygon always has a flat side on the bottom\n  // This isn't strictly necessary, but it's how we tend to think of and expect polygons to be drawn\n  let rotationAdjustment = -halfPI;\n  if (numVertexes % 2 === 0) {\n    rotationAdjustment += interiorAngle / 2;\n  }\n  const d = new Array(numVertexes + 1);\n  for (let i = 0; i < numVertexes; i++) {\n    const rad = i * interiorAngle + rotationAdjustment;\n    const { x, y } = new Point(cos(rad), sin(rad)).scalarMultiply(radius);\n    d[i] = [i === 0 ? 'M' : 'L', x, y];\n  }\n  d[numVertexes] = ['Z'];\n  return d;\n};\n\n/**\n * Join path commands to go back to svg format\n * @param {TSimplePathData} pathData fabricJS parsed path commands\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {String} joined path 'M 0 0 L 20 30'\n */\nexport const joinPath = (pathData: TSimplePathData, fractionDigits?: number) =>\n  pathData\n    .map((segment) => {\n      return segment\n        .map((arg, i) => {\n          if (i === 0) return arg;\n          return fractionDigits === undefined\n            ? arg\n            : toFixed(arg, fractionDigits);\n        })\n        .join(' ');\n    })\n    .join(' ');\n","/**\n * Returns random number between 2 specified ones.\n * @param {Number} min lower limit\n * @param {Number} max upper limit\n * @return {Number} random value (between min and max)\n */\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n","import { getFabricWindow } from '../../env';\nimport { noop } from '../../constants';\nimport type { Abortable } from '../../typedefs';\nimport { SignalAbortedError } from './console';\n\ntype requestOptions = Abortable & {\n  onComplete?: (xhr: XMLHttpRequest) => void;\n};\n\n/**\n * Cross-browser abstraction for sending XMLHttpRequest\n * @deprecated this has to go away, we can use a modern browser method to do the same.\n * @param {String} url URL to send XMLHttpRequest to\n * @param {Object} [options] Options object\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @param {Function} options.onComplete Callback to invoke when request is completed\n * @return {XMLHttpRequest} request\n */\n\nexport function request(url: string, options: requestOptions = {}) {\n  const onComplete = options.onComplete || noop,\n    xhr = new (getFabricWindow().XMLHttpRequest)(),\n    signal = options.signal,\n    abort = function () {\n      xhr.abort();\n    },\n    removeListener = function () {\n      signal && signal.removeEventListener('abort', abort);\n      xhr.onerror = xhr.ontimeout = noop;\n    };\n\n  if (signal && signal.aborted) {\n    throw new SignalAbortedError('request');\n  } else if (signal) {\n    signal.addEventListener('abort', abort, { once: true });\n  }\n\n  /** @ignore */\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      removeListener();\n      onComplete(xhr);\n      xhr.onreadystatechange = noop;\n    }\n  };\n\n  xhr.onerror = xhr.ontimeout = removeListener;\n\n  xhr.open('get', url, true);\n\n  xhr.send();\n  return xhr;\n}\n","import { CENTER, SCALE_X, SCALE_Y } from '../constants';\nimport type { FabricImage } from '../shapes/Image';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { qrDecompose } from './misc/matrix';\n\ntype FabricObjectWithTransformMatrix = FabricObject & {\n  transformMatrix?: TMat2D;\n};\n\n/**\n * This function is an helper for svg import. it decompose the transformMatrix\n * and assign properties to object.\n * untransformed coordinates\n * @private\n */\nexport const _assignTransformMatrixProps = (\n  object: FabricObjectWithTransformMatrix,\n) => {\n  if (object.transformMatrix) {\n    const { scaleX, scaleY, angle, skewX } = qrDecompose(\n      object.transformMatrix,\n    );\n    object.flipX = false;\n    object.flipY = false;\n    object.set(SCALE_X, scaleX);\n    object.set(SCALE_Y, scaleY);\n    object.angle = angle;\n    object.skewX = skewX;\n    object.skewY = 0;\n  }\n};\n\n/**\n * This function is an helper for svg import. it removes the transform matrix\n * and set to object properties that fabricjs can handle\n * @private\n * @param {Object} preserveAspectRatioOptions\n */\nexport const removeTransformMatrixForSvgParsing = (\n  object: FabricObjectWithTransformMatrix,\n  preserveAspectRatioOptions?: any,\n) => {\n  let center = object._findCenterFromElement();\n  if (object.transformMatrix) {\n    _assignTransformMatrixProps(object);\n    center = center.transform(object.transformMatrix);\n  }\n  delete object.transformMatrix;\n  if (preserveAspectRatioOptions) {\n    object.scaleX *= preserveAspectRatioOptions.scaleX;\n    object.scaleY *= preserveAspectRatioOptions.scaleY;\n    (object as FabricImage).cropX = preserveAspectRatioOptions.cropX;\n    (object as FabricImage).cropY = preserveAspectRatioOptions.cropY;\n    center.x += preserveAspectRatioOptions.offsetLeft;\n    center.y += preserveAspectRatioOptions.offsetTop;\n    object.width = preserveAspectRatioOptions.width;\n    object.height = preserveAspectRatioOptions.height;\n  }\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n","import type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { sendObjectToPlane } from './planeChange';\nimport { Group } from '../../shapes/Group';\n/**\n * Merges 2 clip paths into one visually equal clip path\n *\n * **IMPORTANT**:\\\n * Does **NOT** clone the arguments, clone them proir if necessary.\n *\n * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n *\n * In order to handle the `inverted` property we follow logic described in the following cases:\\\n * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n *\n * @memberOf fabric.util\n * @param {fabric.Object} c1\n * @param {fabric.Object} c2\n * @returns {fabric.Object} merged clip path\n */\nexport const mergeClipPaths = (c1: FabricObject, c2: FabricObject) => {\n  let a = c1,\n    b = c2;\n  if (a.inverted && !b.inverted) {\n    //  case (2)\n    a = c2;\n    b = c1;\n  }\n  //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n  sendObjectToPlane(b, b.group?.calcTransformMatrix(), a.calcTransformMatrix());\n  //  assign the `inverted` prop to the wrapping group\n  const inverted = a.inverted && b.inverted;\n  if (inverted) {\n    //  case (1)\n    a.inverted = b.inverted = false;\n  }\n  return new Group([a], { clipPath: b, inverted });\n};\n","// TODO this file needs to go away, cross browser style support is not fabricjs domain.\n\n/**\n * wrapper for setting element's style\n * @param {HTMLElement} element an HTMLElement\n * @param {Object} styles to apply to element\n */\nexport function setStyle(element: HTMLElement, styles: Record<string, string>) {\n  const elementStyle = element.style;\n  if (!elementStyle) {\n    return;\n  }\n  Object.entries(styles).forEach(([property, value]) =>\n    elementStyle.setProperty(property, value),\n  );\n}\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport { createCanvasElement } from '../../util/misc/dom';\nimport { setStyle } from '../../util/internals/dom_style';\nimport type { CSSDimensions } from './util';\nimport { makeElementUnselectable, setCSSDimensions } from './util';\nimport type { CanvasItem } from './StaticCanvasDOMManager';\nimport { StaticCanvasDOMManager } from './StaticCanvasDOMManager';\nimport { setCanvasDimensions } from './util';\nimport { NONE } from '../../constants';\n\nexport class CanvasDOMManager extends StaticCanvasDOMManager {\n  upper: CanvasItem;\n  container: HTMLDivElement;\n\n  constructor(\n    arg0?: string | HTMLCanvasElement,\n    {\n      allowTouchScrolling = false,\n      containerClass = '',\n    }: {\n      allowTouchScrolling?: boolean;\n      /**\n       * @deprecated here only for backward compatibility\n       */\n      containerClass?: string;\n    } = {},\n  ) {\n    super(arg0);\n    const { el: lowerCanvasEl } = this.lower;\n    const upperCanvasEl = this.createUpperCanvas();\n    this.upper = { el: upperCanvasEl, ctx: upperCanvasEl.getContext('2d')! };\n    this.applyCanvasStyle(lowerCanvasEl, {\n      allowTouchScrolling,\n    });\n    this.applyCanvasStyle(upperCanvasEl, {\n      allowTouchScrolling,\n      styles: {\n        position: 'absolute',\n        left: '0',\n        top: '0',\n      },\n    });\n    const container = this.createContainerElement();\n    container.classList.add(containerClass);\n    if (lowerCanvasEl.parentNode) {\n      lowerCanvasEl.parentNode.replaceChild(container, lowerCanvasEl);\n    }\n    container.append(lowerCanvasEl, upperCanvasEl);\n    this.container = container;\n  }\n\n  protected createUpperCanvas() {\n    const { el: lowerCanvasEl } = this.lower;\n    const el = createCanvasElement();\n    // we assign the same classname of the lowerCanvas\n    el.className = lowerCanvasEl.className;\n    // but then we remove the lower-canvas specific className\n    el.classList.remove('lower-canvas');\n    // we add the specific upper-canvas class\n    el.classList.add('upper-canvas');\n    el.setAttribute('data-fabric', 'top');\n    el.style.cssText = lowerCanvasEl.style.cssText;\n    el.setAttribute('draggable', 'true');\n    return el;\n  }\n\n  protected createContainerElement() {\n    const container = getFabricDocument().createElement('div');\n    container.setAttribute('data-fabric', 'wrapper');\n    setStyle(container, {\n      position: 'relative',\n    });\n    makeElementUnselectable(container);\n    return container;\n  }\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} element canvas element to apply styles on\n   */\n  protected applyCanvasStyle(\n    element: HTMLCanvasElement,\n    options: {\n      allowTouchScrolling?: boolean;\n      styles?: Record<string, string>;\n    },\n  ) {\n    const { styles, allowTouchScrolling } = options;\n    setStyle(element, {\n      ...styles,\n      'touch-action': allowTouchScrolling ? 'manipulation' : NONE,\n    });\n    makeElementUnselectable(element);\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    super.setDimensions(size, retinaScaling);\n    const { el, ctx } = this.upper;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>): void {\n    super.setCSSDimensions(size);\n    setCSSDimensions(this.upper.el, size);\n    setCSSDimensions(this.container, size);\n  }\n\n  cleanupDOM(size: TSize) {\n    const container = this.container,\n      { el: lowerCanvasEl } = this.lower,\n      { el: upperCanvasEl } = this.upper;\n    super.cleanupDOM(size);\n    container.removeChild(upperCanvasEl);\n    container.removeChild(lowerCanvasEl);\n    if (container.parentNode) {\n      container.parentNode.replaceChild(lowerCanvasEl, container);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    getEnv().dispose(this.upper.el);\n    // @ts-expect-error disposing\n    delete this.upper;\n    // @ts-expect-error disposing\n    delete this.container;\n  }\n}\n","import { dragHandler } from '../controls/drag';\nimport { getActionFromCorner } from '../controls/util';\nimport { Point } from '../Point';\nimport { FabricObject } from '../shapes/Object/FabricObject';\nimport type {\n  CanvasEvents,\n  ModifierKey,\n  TOptionalModifierKey,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport {\n  addTransformToObject,\n  saveObjectTransform,\n} from '../util/misc/objectTransforms';\nimport type { TCanvasSizeOptions } from './StaticCanvas';\nimport { StaticCanvas } from './StaticCanvas';\nimport { isCollection } from '../Collection';\nimport { isTransparent } from '../util/misc/isTransparent';\nimport type {\n  TMat2D,\n  TOriginX,\n  TOriginY,\n  TSize,\n  TSVGReviver,\n} from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { getPointer, isTouchEvent } from '../util/dom_event';\nimport type { IText } from '../shapes/IText/IText';\nimport type { BaseBrush } from '../brushes/BaseBrush';\nimport { pick } from '../util/misc/pick';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { cos, createCanvasElement, sin } from '../util';\nimport { CanvasDOMManager } from './DOMManagers/CanvasDOMManager';\nimport {\n  BOTTOM,\n  CENTER,\n  LEFT,\n  MODIFIED,\n  RESIZING,\n  RIGHT,\n  ROTATE,\n  SCALE,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CanvasOptions } from './CanvasOptions';\nimport { canvasDefaults } from './CanvasOptions';\nimport { Intersection } from '../Intersection';\nimport { isActiveSelection } from '../util/typeAssertions';\n\n/**\n * Canvas class\n * @class Canvas\n * @extends StaticCanvas\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n *\n * @fires object:modified at the end of a transform\n * @fires object:rotating while an object is being rotated from the control\n * @fires object:scaling while an object is being scaled by controls\n * @fires object:moving while an object is being dragged\n * @fires object:skewing while an object is being skewed from the controls\n *\n * @fires before:transform before a transform is is started\n * @fires before:selection:cleared\n * @fires selection:cleared\n * @fires selection:updated\n * @fires selection:created\n *\n * @fires path:created after a drawing operation ends and the path is added\n * @fires mouse:down\n * @fires mouse:move\n * @fires mouse:up\n * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n * @fires mouse:over\n * @fires mouse:out\n * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drag:enter object drag enter\n * @fires drag:leave object drag leave\n * @fires drop:before before drop event. Prepare for the drop event (same native event).\n * @fires drop\n * @fires drop:after after drop event. Run logic on canvas after event has been accepted/declined (same native event).\n * @example\n * let a: fabric.Object, b: fabric.Object;\n * let flag = false;\n * canvas.add(a, b);\n * a.on('drop:before', opt => {\n *  //  we want a to accept the drop even though it's below b in the stack\n *  flag = this.canDrop(opt.e);\n * });\n * b.canDrop = function(e) {\n *  !flag && this.draggableTextDelegate.canDrop(e);\n * }\n * b.on('dragover', opt => b.set('fill', opt.dropTarget === b ? 'pink' : 'black'));\n * a.on('drop', opt => {\n *  opt.e.defaultPrevented  //  drop occurred\n *  opt.didDrop             //  drop occurred on canvas\n *  opt.target              //  drop target\n *  opt.target !== a && a.set('text', 'I lost');\n * });\n * canvas.on('drop:after', opt => {\n *  //  inform user who won\n *  if(!opt.e.defaultPrevented) {\n *    // no winners\n *  }\n *  else if(!opt.didDrop) {\n *    //  my objects didn't win, some other lucky object\n *  }\n *  else {\n *    //  we have a winner it's opt.target!!\n *  }\n * })\n *\n * @fires after:render at the end of the render process, receives the context in the callback\n * @fires before:render at start the render process, receives the context in the callback\n *\n * @fires contextmenu:before\n * @fires contextmenu\n * @example\n * let handler;\n * targets.forEach(target => {\n *   target.on('contextmenu:before', opt => {\n *     //  decide which target should handle the event before canvas hijacks it\n *     if (someCaseHappens && opt.targets.includes(target)) {\n *       handler = target;\n *     }\n *   });\n *   target.on('contextmenu', opt => {\n *     //  do something fantastic\n *   });\n * });\n * canvas.on('contextmenu', opt => {\n *   if (!handler) {\n *     //  no one takes responsibility, it's always left to me\n *     //  let's show them how it's done!\n *   }\n * });\n *\n */\nexport class SelectableCanvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends StaticCanvas<EventSpec>\n  implements Omit<CanvasOptions, 'enablePointerEvents'>\n{\n  declare _objects: FabricObject[];\n\n  // transform config\n  declare uniformScaling: boolean;\n  declare uniScaleKey: TOptionalModifierKey;\n  declare centeredScaling: boolean;\n  declare centeredRotation: boolean;\n  declare centeredKey: TOptionalModifierKey;\n  declare altActionKey: TOptionalModifierKey;\n\n  // selection config\n  declare selection: boolean;\n  declare selectionKey: TOptionalModifierKey | ModifierKey[];\n  declare altSelectionKey: TOptionalModifierKey;\n  declare selectionColor: string;\n  declare selectionDashArray: number[];\n  declare selectionBorderColor: string;\n  declare selectionLineWidth: number;\n  declare selectionFullyContained: boolean;\n\n  // cursors\n  declare hoverCursor: CSSStyleDeclaration['cursor'];\n  declare moveCursor: CSSStyleDeclaration['cursor'];\n  declare defaultCursor: CSSStyleDeclaration['cursor'];\n  declare freeDrawingCursor: CSSStyleDeclaration['cursor'];\n  declare notAllowedCursor: CSSStyleDeclaration['cursor'];\n\n  declare containerClass: string;\n\n  // target find config\n  declare perPixelTargetFind: boolean;\n  declare targetFindTolerance: number;\n  declare skipTargetFind: boolean;\n\n  /**\n   * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n   * After mousedown, mousemove creates a shape,\n   * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n   * @type Boolean\n   * @default\n   */\n  declare isDrawingMode: boolean;\n\n  declare preserveObjectStacking: boolean;\n\n  // event config\n  declare stopContextMenu: boolean;\n  declare fireRightClick: boolean;\n  declare fireMiddleClick: boolean;\n\n  /**\n   * Keep track of the subTargets for Mouse Events, ordered bottom up from innermost nested subTarget\n   * @type FabricObject[]\n   */\n  targets: FabricObject[] = [];\n\n  /**\n   * Keep track of the hovered target\n   * @type FabricObject | null\n   * @private\n   */\n  declare _hoveredTarget?: FabricObject;\n\n  /**\n   * hold the list of nested targets hovered\n   * @type FabricObject[]\n   * @private\n   */\n  _hoveredTargets: FabricObject[] = [];\n\n  /**\n   * hold the list of objects to render\n   * @type FabricObject[]\n   * @private\n   */\n  _objectsToRender?: FabricObject[];\n\n  /**\n   * hold a reference to a data structure that contains information\n   * on the current on going transform\n   * @type\n   * @private\n   */\n  _currentTransform: Transform | null = null;\n\n  /**\n   * hold a reference to a data structure used to track the selection\n   * box on canvas drag\n   * on the current on going transform\n   * x, y, deltaX and deltaY are in scene plane\n   * @type\n   * @private\n   */\n  protected _groupSelector: {\n    x: number;\n    y: number;\n    deltaX: number;\n    deltaY: number;\n  } | null = null;\n\n  /**\n   * internal flag used to understand if the context top requires a cleanup\n   * in case this is true, the contextTop will be cleared at the next render\n   * @type boolean\n   * @private\n   */\n  contextTopDirty = false;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _scenePoint holds a reference to the pointer in fabricCanvas/design coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  declare protected _scenePoint?: Point;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _viewportPoint holds a reference to the pointer in html coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  declare protected _viewportPoint?: Point;\n\n  /**\n   * During a mouse event we may need the target multiple times in multiple functions.\n   * _target holds a reference to the target that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * @type {FabricObject}\n   */\n  declare protected _target?: FabricObject;\n\n  static ownDefaults = canvasDefaults;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...SelectableCanvas.ownDefaults };\n  }\n\n  declare elements: CanvasDOMManager;\n  get upperCanvasEl() {\n    return this.elements.upper?.el;\n  }\n  get contextTop() {\n    return this.elements.upper?.ctx;\n  }\n  get wrapperEl() {\n    return this.elements.container;\n  }\n  declare private pixelFindCanvasEl: HTMLCanvasElement;\n  declare private pixelFindContext: CanvasRenderingContext2D;\n\n  declare protected _isCurrentlyDrawing: boolean;\n  declare freeDrawingBrush?: BaseBrush;\n  declare _activeObject?: FabricObject;\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new CanvasDOMManager(el, {\n      allowTouchScrolling: this.allowTouchScrolling,\n      containerClass: this.containerClass,\n    });\n    this._createCacheCanvas();\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was added\n   */\n  _onObjectAdded(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    super._onObjectAdded(obj);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was removed\n   */\n  _onObjectRemoved(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    // removing active object should fire \"selection:cleared\" events\n    if (obj === this._activeObject) {\n      this.fire('before:selection:cleared', { deselected: [obj] });\n      this._discardActiveObject();\n      this.fire('selection:cleared', { deselected: [obj] });\n      obj.fire('deselected', {\n        target: obj,\n      });\n    }\n    if (obj === this._hoveredTarget) {\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n    super._onObjectRemoved(obj);\n  }\n\n  _onStackOrderChanged() {\n    this._objectsToRender = undefined;\n    super._onStackOrderChanged();\n  }\n\n  /**\n   * Divides objects in two groups, one to render immediately\n   * and one to render as activeGroup.\n   * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n   */\n  _chooseObjectsToRender(): FabricObject[] {\n    const activeObject = this._activeObject;\n    return !this.preserveObjectStacking && activeObject\n      ? this._objects\n          .filter((object) => !object.group && object !== activeObject)\n          .concat(activeObject)\n      : this._objects;\n  }\n\n  /**\n   * Renders both the top canvas and the secondary container canvas.\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n      this.clearContext(this.contextTop);\n      this.contextTopDirty = false;\n    }\n    if (this.hasLostContext) {\n      this.renderTopLayer(this.contextTop);\n      this.hasLostContext = false;\n    }\n    !this._objectsToRender &&\n      (this._objectsToRender = this._chooseObjectsToRender());\n    this.renderCanvas(this.getContext(), this._objectsToRender);\n  }\n\n  /**\n   * text selection is rendered by the active text instance during the rendering cycle\n   */\n  renderTopLayer(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this.freeDrawingBrush && this.freeDrawingBrush._render();\n      this.contextTopDirty = true;\n    }\n    // we render the top context - last object\n    if (this.selection && this._groupSelector) {\n      this._drawSelection(ctx);\n      this.contextTopDirty = true;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Method to render only the top canvas.\n   * Also used to render the group selection box.\n   * Does not render text selection.\n   */\n  renderTop() {\n    const ctx = this.contextTop;\n    this.clearContext(ctx);\n    this.renderTopLayer(ctx);\n    // todo: how do i know if the after:render is for the top or normal contex?\n    this.fire('after:render', { ctx });\n  }\n\n  /**\n   * Set the canvas tolerance value for pixel taret find.\n   * Use only integer numbers.\n   * @private\n   */\n  setTargetFindTolerance(value: number) {\n    value = Math.round(value);\n    this.targetFindTolerance = value;\n    const retina = this.getRetinaScaling();\n    const size = Math.ceil((value * 2 + 1) * retina);\n    this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = size;\n    this.pixelFindContext.scale(retina, retina);\n  }\n\n  /**\n   * Returns true if object is transparent at a certain location\n   * Clarification: this is `is target transparent at location X or are controls there`\n   * @TODO this seems dumb that we treat controls with transparency. we can find controls\n   * programmatically without painting them, the cache canvas optimization is always valid\n   * @param {FabricObject} target Object to check\n   * @param {Number} x Left coordinate in viewport space\n   * @param {Number} y Top coordinate in viewport space\n   * @return {Boolean}\n   */\n  isTargetTransparent(target: FabricObject, x: number, y: number): boolean {\n    const tolerance = this.targetFindTolerance;\n    const ctx = this.pixelFindContext;\n    this.clearContext(ctx);\n    ctx.save();\n    ctx.translate(-x + tolerance, -y + tolerance);\n    ctx.transform(...this.viewportTransform);\n    const selectionBgc = target.selectionBackgroundColor;\n    target.selectionBackgroundColor = '';\n    target.render(ctx);\n    target.selectionBackgroundColor = selectionBgc;\n    ctx.restore();\n    // our canvas is square, and made around tolerance.\n    // so tolerance in this case also represent the center of the canvas.\n    const enhancedTolerance = Math.round(tolerance * this.getRetinaScaling());\n    return isTransparent(\n      ctx,\n      enhancedTolerance,\n      enhancedTolerance,\n      enhancedTolerance,\n    );\n  }\n\n  /**\n   * takes an event and determines if selection key has been pressed\n   * @private\n   * @param {TPointerEvent} e Event object\n   */\n  _isSelectionKeyPressed(e: TPointerEvent): boolean {\n    const sKey = this.selectionKey;\n    if (!sKey) {\n      return false;\n    }\n    if (Array.isArray(sKey)) {\n      return !!sKey.find((key) => !!key && e[key] === true);\n    } else {\n      return e[sKey];\n    }\n  }\n\n  /**\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target\n   */\n  _shouldClearSelection(\n    e: TPointerEvent,\n    target?: FabricObject,\n  ): target is undefined {\n    const activeObjects = this.getActiveObjects(),\n      activeObject = this._activeObject;\n\n    return !!(\n      !target ||\n      (target &&\n        activeObject &&\n        activeObjects.length > 1 &&\n        activeObjects.indexOf(target) === -1 &&\n        activeObject !== target &&\n        !this._isSelectionKeyPressed(e)) ||\n      (target && !target.evented) ||\n      (target && !target.selectable && activeObject && activeObject !== target)\n    );\n  }\n\n  /**\n   * This method will take in consideration a modifier key pressed and the control we are\n   * about to drag, and try to guess the anchor point ( origin ) of the transormation.\n   * This should be really in the realm of controls, and we should remove specific code for legacy\n   * embedded actions.\n   * @TODO this probably deserve discussion/rediscovery and change/refactor\n   * @private\n   * @deprecated\n   * @param {FabricObject} target\n   * @param {string} action\n   * @param {boolean} altKey\n   * @returns {boolean} true if the transformation should be centered\n   */\n  private _shouldCenterTransform(\n    target: FabricObject,\n    action: string,\n    modifierKeyPressed: boolean,\n  ) {\n    if (!target) {\n      return;\n    }\n\n    let centerTransform;\n\n    if (\n      action === SCALE ||\n      action === SCALE_X ||\n      action === SCALE_Y ||\n      action === RESIZING\n    ) {\n      centerTransform = this.centeredScaling || target.centeredScaling;\n    } else if (action === ROTATE) {\n      centerTransform = this.centeredRotation || target.centeredRotation;\n    }\n\n    return centerTransform ? !modifierKeyPressed : modifierKeyPressed;\n  }\n\n  /**\n   * Given the control clicked, determine the origin of the transform.\n   * This is bad because controls can totally have custom names\n   * should disappear before release 4.0\n   * @private\n   * @deprecated\n   */\n  _getOriginFromCorner(\n    target: FabricObject,\n    controlName: string,\n  ): { x: TOriginX; y: TOriginY } {\n    const origin = {\n      x: target.originX,\n      y: target.originY,\n    };\n\n    if (!controlName) {\n      return origin;\n    }\n\n    // is a left control ?\n    if (['ml', 'tl', 'bl'].includes(controlName)) {\n      origin.x = RIGHT;\n      // is a right control ?\n    } else if (['mr', 'tr', 'br'].includes(controlName)) {\n      origin.x = LEFT;\n    }\n    // is a top control ?\n    if (['tl', 'mt', 'tr'].includes(controlName)) {\n      origin.y = BOTTOM;\n      // is a bottom control ?\n    } else if (['bl', 'mb', 'br'].includes(controlName)) {\n      origin.y = TOP;\n    }\n    return origin;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @param {FabricObject} target\n   * @param {boolean} [alreadySelected] pass true to setup the active control\n   */\n  _setupCurrentTransform(\n    e: TPointerEvent,\n    target: FabricObject,\n    alreadySelected: boolean,\n  ): void {\n    const pointer = target.group\n      ? // transform pointer to target's containing coordinate plane\n        sendPointToPlane(\n          this.getScenePoint(e),\n          undefined,\n          target.group.calcTransformMatrix(),\n        )\n      : this.getScenePoint(e);\n    const { key: corner = '', control } = target.getActiveControl() || {},\n      actionHandler =\n        alreadySelected && control\n          ? control.getActionHandler(e, target, control)?.bind(control)\n          : dragHandler,\n      action = getActionFromCorner(alreadySelected, corner, e, target),\n      altKey = e[this.centeredKey as ModifierKey],\n      origin = this._shouldCenterTransform(target, action, altKey)\n        ? ({ x: CENTER, y: CENTER } as const)\n        : this._getOriginFromCorner(target, corner),\n      /**\n       * relative to target's containing coordinate plane\n       * both agree on every point\n       **/\n      transform: Transform = {\n        target: target,\n        action,\n        actionHandler,\n        actionPerformed: false,\n        corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        theta: degreesToRadians(target.angle),\n        width: target.width,\n        height: target.height,\n        shiftKey: e.shiftKey,\n        altKey,\n        original: {\n          ...saveObjectTransform(target),\n          originX: origin.x,\n          originY: origin.y,\n        },\n      };\n\n    this._currentTransform = transform;\n\n    this.fire('before:transform', {\n      e,\n      transform,\n    });\n  }\n\n  /**\n   * Set the cursor type of the canvas element\n   * @param {String} value Cursor type of the canvas element.\n   * @see http://www.w3.org/TR/css3-ui/#cursor\n   */\n  setCursor(value: CSSStyleDeclaration['cursor']): void {\n    this.upperCanvasEl.style.cursor = value;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx to draw the selection on\n   */\n  _drawSelection(ctx: CanvasRenderingContext2D): void {\n    const { x, y, deltaX, deltaY } = this._groupSelector!,\n      start = new Point(x, y).transform(this.viewportTransform),\n      extent = new Point(x + deltaX, y + deltaY).transform(\n        this.viewportTransform,\n      ),\n      strokeOffset = this.selectionLineWidth / 2;\n    let minX = Math.min(start.x, extent.x),\n      minY = Math.min(start.y, extent.y),\n      maxX = Math.max(start.x, extent.x),\n      maxY = Math.max(start.y, extent.y);\n\n    if (this.selectionColor) {\n      ctx.fillStyle = this.selectionColor;\n      ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n    }\n\n    if (!this.selectionLineWidth || !this.selectionBorderColor) {\n      return;\n    }\n    ctx.lineWidth = this.selectionLineWidth;\n    ctx.strokeStyle = this.selectionBorderColor;\n\n    minX += strokeOffset;\n    minY += strokeOffset;\n    maxX -= strokeOffset;\n    maxY -= strokeOffset;\n    // selection border\n    // @TODO: is _setLineDash still necessary on modern canvas?\n    FabricObject.prototype._setLineDash.call(\n      this,\n      ctx,\n      this.selectionDashArray,\n    );\n    ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  /**\n   * Method that determines what object we are clicking on\n   * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n   * or the outside part of the corner.\n   * @param {Event} e mouse event\n   * @return {FabricObject | null} the target found\n   */\n  findTarget(e: TPointerEvent): FabricObject | undefined {\n    if (this.skipTargetFind) {\n      return undefined;\n    }\n\n    const pointer = this.getViewportPoint(e),\n      activeObject = this._activeObject,\n      aObjects = this.getActiveObjects();\n\n    this.targets = [];\n\n    if (activeObject && aObjects.length >= 1) {\n      if (activeObject.findControl(pointer, isTouchEvent(e))) {\n        // if we hit the corner of the active object, let's return that.\n        return activeObject;\n      } else if (\n        aObjects.length > 1 &&\n        // check pointer is over active selection and possibly perform `subTargetCheck`\n        this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active selection does not select sub targets like normal groups\n        return activeObject;\n      } else if (\n        activeObject === this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active object is not an active selection\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        } else {\n          const subTargets = this.targets;\n          this.targets = [];\n          const target = this.searchPossibleTargets(this._objects, pointer);\n          if (\n            e[this.altSelectionKey as ModifierKey] &&\n            target &&\n            target !== activeObject\n          ) {\n            // alt selection: select active object even though it is not the top most target\n            // restore targets\n            this.targets = subTargets;\n            return activeObject;\n          }\n          return target;\n        }\n      }\n    }\n\n    return this.searchPossibleTargets(this._objects, pointer);\n  }\n\n  /**\n   * Checks if the point is inside the object selection area including padding\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point in scene coordinates\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  private _pointIsInObjectSelectionArea(obj: FabricObject, point: Point) {\n    // getCoords will already take care of group de-nesting\n    let coords = obj.getCoords();\n    const viewportZoom = this.getZoom();\n    const padding = obj.padding / viewportZoom;\n    if (padding) {\n      const [tl, tr, br, bl] = coords;\n      // what is the angle of the object?\n      // we could use getTotalAngle, but is way easier to look at it\n      // from how coords are oriented, since if something went wrong\n      // at least we are consistent.\n      const angleRadians = Math.atan2(tr.y - tl.y, tr.x - tl.x),\n        cosP = cos(angleRadians) * padding,\n        sinP = sin(angleRadians) * padding,\n        cosPSinP = cosP + sinP,\n        cosPMinusSinP = cosP - sinP;\n\n      coords = [\n        new Point(tl.x - cosPMinusSinP, tl.y - cosPSinP),\n        new Point(tr.x + cosPSinP, tr.y - cosPMinusSinP),\n        new Point(br.x + cosPMinusSinP, br.y + cosPSinP),\n        new Point(bl.x - cosPSinP, bl.y + cosPMinusSinP),\n      ];\n      // in case of padding we calculate the new coords on the fly.\n      // otherwise we have to maintain 2 sets of coordinates for everything.\n      // we can reiterate on storing them.\n      // if this is slow, for now the semplification is large and doesn't impact\n      // rendering.\n      // the idea behind this is that outside target check we don't need ot know\n      // where those coords are\n    }\n    return Intersection.isPointInPolygon(point, coords);\n  }\n\n  /**\n   * Checks point is inside the object selection condition. Either area with padding\n   * or over pixels if perPixelTargetFind is enabled\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point from viewport.\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  _checkTarget(obj: FabricObject, pointer: Point): boolean {\n    if (\n      obj &&\n      obj.visible &&\n      obj.evented &&\n      this._pointIsInObjectSelectionArea(\n        obj,\n        sendPointToPlane(pointer, undefined, this.viewportTransform),\n      )\n    ) {\n      if (\n        (this.perPixelTargetFind || obj.perPixelTargetFind) &&\n        !(obj as unknown as IText).isEditing\n      ) {\n        if (!this.isTargetTransparent(obj, pointer.x, pointer.y)) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Internal Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @param {Array} [objects] objects array to look into\n   * @param {Object} [pointer] x,y object of point coordinates we want to check.\n   * @return {FabricObject} **top most object from given `objects`** that contains pointer\n   * @private\n   */\n  _searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    // Cache all targets where their bounding box contains point.\n    let i = objects.length;\n    // Do not check for currently grouped objects, since we check the parent group itself.\n    // until we call this function specifically to search inside the activeGroup\n    while (i--) {\n      const target = objects[i];\n      if (this._checkTarget(target, pointer)) {\n        if (isCollection(target) && target.subTargetCheck) {\n          const subTarget = this._searchPossibleTargets(\n            target._objects,\n            pointer,\n          );\n          subTarget && this.targets.push(subTarget);\n        }\n        return target;\n      }\n    }\n  }\n\n  /**\n   * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @see {@link _searchPossibleTargets}\n   * @param {FabricObject[]} [objects] objects array to look into\n   * @param {Point} [pointer] coordinates from viewport to check.\n   * @return {FabricObject} **top most object on screen** that contains pointer\n   */\n  searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    const target = this._searchPossibleTargets(objects, pointer);\n\n    // if we found something in this.targets, and the group is interactive, return the innermost subTarget\n    // that is still interactive\n    // TODO: reverify why interactive. the target should be returned always, but selected only\n    // if interactive.\n    if (\n      target &&\n      isCollection(target) &&\n      target.interactive &&\n      this.targets[0]\n    ) {\n      /** targets[0] is the innermost nested target, but it could be inside non interactive groups and so not a selection target */\n      const targets = this.targets;\n      for (let i = targets.length - 1; i > 0; i--) {\n        const t = targets[i];\n        if (!(isCollection(t) && t.interactive)) {\n          // one of the subtargets was not interactive. that is the last subtarget we can return.\n          // we can't dig more deep;\n          return t;\n        }\n      }\n      return targets[0];\n    }\n\n    return target;\n  }\n\n  /**\n   * @returns point existing in the same plane as the {@link HTMLCanvasElement},\n   * `(0, 0)` being the top left corner of the {@link HTMLCanvasElement}.\n   * This means that changes to the {@link viewportTransform} do not change the values of the point\n   * and it remains unchanged from the viewer's perspective.\n   *\n   * @example\n   * const scenePoint = sendPointToPlane(\n   *  this.getViewportPoint(e),\n   *  undefined,\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getViewportPoint(e: TPointerEvent) {\n    if (this._viewportPoint) {\n      return this._viewportPoint;\n    }\n    return this._getPointerImpl(e, true);\n  }\n\n  /**\n   * @returns point existing in the scene (the same plane as the plane {@link FabricObject#getCenterPoint} exists in).\n   * This means that changes to the {@link viewportTransform} do not change the values of the point,\n   * however, from the viewer's perspective, the point is changed.\n   *\n   * @example\n   * const viewportPoint = sendPointToPlane(\n   *  this.getScenePoint(e),\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getScenePoint(e: TPointerEvent) {\n    if (this._scenePoint) {\n      return this._scenePoint;\n    }\n    return this._getPointerImpl(e);\n  }\n\n  /**\n   * Returns pointer relative to canvas.\n   *\n   * Use {@link getViewportPoint} or {@link getScenePoint} instead.\n   *\n   * @param {Event} e\n   * @param {Boolean} [fromViewport] whether to return the point from the viewport or in the scene\n   * @return {Point}\n   */\n  protected _getPointerImpl(e: TPointerEvent, fromViewport = false): Point {\n    const upperCanvasEl = this.upperCanvasEl,\n      bounds = upperCanvasEl.getBoundingClientRect();\n    let pointer = getPointer(e),\n      boundsWidth = bounds.width || 0,\n      boundsHeight = bounds.height || 0;\n\n    if (!boundsWidth || !boundsHeight) {\n      if (TOP in bounds && BOTTOM in bounds) {\n        boundsHeight = Math.abs(bounds.top - bounds.bottom);\n      }\n      if (RIGHT in bounds && LEFT in bounds) {\n        boundsWidth = Math.abs(bounds.right - bounds.left);\n      }\n    }\n\n    this.calcOffset();\n    pointer.x = pointer.x - this._offset.left;\n    pointer.y = pointer.y - this._offset.top;\n    if (!fromViewport) {\n      pointer = sendPointToPlane(pointer, undefined, this.viewportTransform);\n    }\n\n    const retinaScaling = this.getRetinaScaling();\n    if (retinaScaling !== 1) {\n      pointer.x /= retinaScaling;\n      pointer.y /= retinaScaling;\n    }\n\n    // If bounds are not available (i.e. not visible), do not apply scale.\n    const cssScale =\n      boundsWidth === 0 || boundsHeight === 0\n        ? new Point(1, 1)\n        : new Point(\n            upperCanvasEl.width / boundsWidth,\n            upperCanvasEl.height / boundsHeight,\n          );\n\n    return pointer.multiply(cssScale);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: TSize,\n    options?: TCanvasSizeOptions,\n  ) {\n    // @ts-expect-error this method exists in the subclass - should be moved or declared as abstract\n    this._resetTransformEventData();\n    super._setDimensionsImpl(dimensions, options);\n    if (this._isCurrentlyDrawing) {\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n  }\n\n  protected _createCacheCanvas() {\n    this.pixelFindCanvasEl = createCanvasElement();\n    this.pixelFindContext = this.pixelFindCanvasEl.getContext('2d', {\n      willReadFrequently: true,\n    })!;\n    this.setTargetFindTolerance(this.targetFindTolerance);\n  }\n\n  /**\n   * Returns context of top canvas where interactions are drawn\n   * @returns {CanvasRenderingContext2D}\n   */\n  getTopContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns context of canvas where object selection is drawn\n   * @alias\n   * @return {CanvasRenderingContext2D}\n   */\n  getSelectionContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns &lt;canvas> element on which object selection is drawn\n   * @return {HTMLCanvasElement}\n   */\n  getSelectionElement(): HTMLCanvasElement {\n    return this.elements.upper.el;\n  }\n\n  /**\n   * Returns currently active object\n   * @return {FabricObject | null} active object\n   */\n  getActiveObject(): FabricObject | undefined {\n    return this._activeObject;\n  }\n\n  /**\n   * Returns an array with the current selected objects\n   * @return {FabricObject[]} active objects array\n   */\n  getActiveObjects(): FabricObject[] {\n    const active = this._activeObject;\n    return isActiveSelection(active)\n      ? active.getObjects()\n      : active\n        ? [active]\n        : [];\n  }\n\n  /**\n   * @private\n   * Compares the old activeObject with the current one and fires correct events\n   * @param {FabricObject[]} oldObjects old activeObject\n   * @param {TPointerEvent} e mouse event triggering the selection events\n   */\n  _fireSelectionEvents(oldObjects: FabricObject[], e?: TPointerEvent) {\n    let somethingChanged = false,\n      invalidate = false;\n    const objects = this.getActiveObjects(),\n      added: FabricObject[] = [],\n      removed: FabricObject[] = [];\n\n    oldObjects.forEach((target) => {\n      if (!objects.includes(target)) {\n        somethingChanged = true;\n        target.fire('deselected', {\n          e,\n          target,\n        });\n        removed.push(target);\n      }\n    });\n\n    objects.forEach((target) => {\n      if (!oldObjects.includes(target)) {\n        somethingChanged = true;\n        target.fire('selected', {\n          e,\n          target,\n        });\n        added.push(target);\n      }\n    });\n\n    if (oldObjects.length > 0 && objects.length > 0) {\n      invalidate = true;\n      somethingChanged &&\n        this.fire('selection:updated', {\n          e,\n          selected: added,\n          deselected: removed,\n        });\n    } else if (objects.length > 0) {\n      invalidate = true;\n      this.fire('selection:created', {\n        e,\n        selected: added,\n      });\n    } else if (oldObjects.length > 0) {\n      invalidate = true;\n      this.fire('selection:cleared', {\n        e,\n        deselected: removed,\n      });\n    }\n    invalidate && (this._objectsToRender = undefined);\n  }\n\n  /**\n   * Sets given object as the only active object on canvas\n   * @param {FabricObject} object Object to set as an active one\n   * @param {TPointerEvent} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    // we can't inline this, since _setActiveObject will change what getActiveObjects returns\n    const currentActives = this.getActiveObjects();\n    const selected = this._setActiveObject(object, e);\n    this._fireSelectionEvents(currentActives, e);\n    return selected;\n  }\n\n  /**\n   * This is supposed to be equivalent to setActiveObject but without firing\n   * any event. There is commitment to have this stay this way.\n   * This is the functional part of setActiveObject.\n   * @param {Object} object to set as active\n   * @param {Event} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  _setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    const prevActiveObject = this._activeObject;\n    if (prevActiveObject === object) {\n      return false;\n    }\n    // after calling this._discardActiveObject, this,_activeObject could be undefined\n    if (!this._discardActiveObject(e, object) && this._activeObject) {\n      // refused to deselect\n      return false;\n    }\n    if (object.onSelect({ e })) {\n      return false;\n    }\n\n    this._activeObject = object;\n\n    if (isActiveSelection(object) && prevActiveObject !== object) {\n      object.set('canvas', this);\n    }\n    object.setCoords();\n\n    return true;\n  }\n\n  /**\n   * This is supposed to be equivalent to discardActiveObject but without firing\n   * any selection events ( can still fire object transformation events ). There is commitment to have this stay this way.\n   * This is the functional part of discardActiveObject.\n   * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n   * @param {Object} object the next object to set as active, reason why we are discarding this\n   * @return {Boolean} true if the active object has been discarded\n   */\n  _discardActiveObject(\n    e?: TPointerEvent,\n    object?: FabricObject,\n  ): this is { _activeObject: undefined } {\n    const obj = this._activeObject;\n    if (obj) {\n      // onDeselect return TRUE to cancel selection;\n      if (obj.onDeselect({ e, object })) {\n        return false;\n      }\n      if (this._currentTransform && this._currentTransform.target === obj) {\n        this.endCurrentTransform(e);\n      }\n      if (isActiveSelection(obj) && obj === this._hoveredTarget) {\n        this._hoveredTarget = undefined;\n      }\n      this._activeObject = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Discards currently active object and fire events. If the function is called by fabric\n   * as a consequence of a mouse event, the event is passed as a parameter and\n   * sent to the fire function for the custom events. When used as a method the\n   * e param does not have any application.\n   * @param {event} e\n   * @return {Boolean} true if the active object has been discarded\n   */\n  discardActiveObject(e?: TPointerEvent): this is { _activeObject: undefined } {\n    const currentActives = this.getActiveObjects(),\n      activeObject = this.getActiveObject();\n    if (currentActives.length) {\n      this.fire('before:selection:cleared', {\n        e,\n        deselected: [activeObject!],\n      });\n    }\n    const discarded = this._discardActiveObject(e);\n    this._fireSelectionEvents(currentActives, e);\n    return discarded;\n  }\n\n  /**\n   * End the current transform.\n   * You don't usually need to call this method unless you are interrupting a user initiated transform\n   * because of some other event ( a press of key combination, or something that block the user UX )\n   * @param {Event} [e] send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  endCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform;\n    this._finalizeCurrentTransform(e);\n    if (transform && transform.target) {\n      // this could probably go inside _finalizeCurrentTransform\n      transform.target.isMoving = false;\n    }\n    this._currentTransform = null;\n  }\n\n  /**\n   * @private\n   * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  _finalizeCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform!,\n      target = transform.target,\n      options = {\n        e,\n        target,\n        transform,\n        action: transform.action,\n      };\n\n    if (target._scaling) {\n      target._scaling = false;\n    }\n\n    target.setCoords();\n\n    if (transform.actionPerformed) {\n      this.fire('object:modified', options);\n      target.fire(MODIFIED, options);\n    }\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    super.setViewportTransform(vpt);\n    const activeObject = this._activeObject;\n    if (activeObject) {\n      activeObject.setCoords();\n    }\n  }\n\n  /**\n   * @override clears active selection ref and interactive canvas elements and contexts\n   */\n  destroy() {\n    // dispose of active selection\n    const activeObject = this._activeObject;\n    if (isActiveSelection(activeObject)) {\n      activeObject.removeAll();\n      activeObject.dispose();\n    }\n\n    delete this._activeObject;\n\n    super.destroy();\n\n    // free resources\n\n    // pixel find canvas\n    // @ts-expect-error disposing\n    this.pixelFindContext = null;\n    // @ts-expect-error disposing\n    this.pixelFindCanvasEl = undefined;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    // discard active object and fire events\n    this.discardActiveObject();\n    // make sure we clear the active object in case it refused to be discarded\n    this._activeObject = undefined;\n    this.clearContext(this.contextTop);\n    super.clear();\n  }\n\n  /**\n   * Draws objects' controls (borders/controls)\n   * @param {CanvasRenderingContext2D} ctx Context to render controls on\n   */\n  drawControls(ctx: CanvasRenderingContext2D) {\n    const activeObject = this._activeObject;\n\n    if (activeObject) {\n      activeObject._renderControls(ctx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: 'toObject' | 'toDatalessObject',\n    propertiesToInclude: string[],\n  ): Record<string, any> {\n    // If the object is part of the current selection group, it should\n    // be transformed appropriately\n    // i.e. it should be serialised as it would appear if the selection group\n    // were to be destroyed.\n    const originalProperties = this._realizeGroupTransformOnObject(instance),\n      object = super._toObject(instance, methodName, propertiesToInclude);\n    //Undo the damage we did by changing all of its properties\n    instance.set(originalProperties);\n    return object;\n  }\n\n  /**\n   * Realizes an object's group transformation on it\n   * @private\n   * @param {FabricObject} [instance] the object to transform (gets mutated)\n   * @returns the original values of instance which were changed\n   */\n  private _realizeGroupTransformOnObject(\n    instance: FabricObject,\n  ): Partial<typeof instance> {\n    const { group } = instance;\n    if (group && isActiveSelection(group) && this._activeObject === group) {\n      const layoutProps = [\n        'angle',\n        'flipX',\n        'flipY',\n        LEFT,\n        SCALE_X,\n        SCALE_Y,\n        SKEW_X,\n        SKEW_Y,\n        TOP,\n      ] as (keyof typeof instance)[];\n      const originalValues = pick<typeof instance>(instance, layoutProps);\n      addTransformToObject(instance, group.calcOwnMatrix());\n      return originalValues;\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    // If the object is in a selection group, simulate what would happen to that\n    // object when the group is deselected\n    const originalProperties = this._realizeGroupTransformOnObject(instance);\n    super._setSVGObject(markup, instance, reviver);\n    instance.set(originalProperties);\n  }\n}\n","import type { ModifierKey, TOptionalModifierKey } from '../EventTypeDefs';\nimport type { TOptions } from '../typedefs';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\n\nexport interface CanvasTransformOptions {\n  /**\n   * When true, objects can be transformed by one side (unproportionately)\n   * when dragged on the corners that normally would not do that.\n   * @type Boolean\n   * @default\n   * @since fabric 4.0 // changed name and default value\n   */\n  uniformScaling: boolean;\n\n  /**\n   * Indicates which key switches uniform scaling.\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * totally wrong named. this sounds like `uniform scaling`\n   * if Canvas.uniformScaling is true, pressing this will set it to false\n   * and viceversa.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  uniScaleKey: TOptionalModifierKey;\n\n  /**\n   * When true, objects use center point as the origin of scale transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredScaling: boolean;\n\n  /**\n   * When true, objects use center point as the origin of rotate transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredRotation: boolean;\n\n  /**\n   * Indicates which key enable centered Transform\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  centeredKey: TOptionalModifierKey;\n\n  /**\n   * Indicates which key enable alternate action on corner\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  altActionKey: TOptionalModifierKey;\n}\n\nexport interface CanvasSelectionOptions {\n  /**\n   * Indicates whether group selection should be enabled\n   * @type Boolean\n   * @default\n   */\n  selection: boolean;\n\n  /**\n   * Indicates which key or keys enable multiple click selection\n   * Pass value as a string or array of strings\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or empty or containing any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.2\n   * @type ModifierKey|ModifierKey[]\n   * @default\n   */\n  selectionKey: TOptionalModifierKey | ModifierKey[];\n\n  /**\n   * Indicates which key enable alternative selection\n   * in case of target overlapping with active object\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * For a series of reason that come from the general expectations on how\n   * things should work, this feature works only for preserveObjectStacking true.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.5\n   * @type null|ModifierKey\n   * @default\n   */\n  altSelectionKey: TOptionalModifierKey;\n\n  /**\n   * Color of selection\n   * @type String\n   * @default\n   */\n  selectionColor: string;\n\n  /**\n   * Default dash array pattern\n   * If not empty the selection border is dashed\n   * @type Array\n   */\n  selectionDashArray: number[];\n\n  /**\n   * Color of the border of selection (usually slightly darker than color of selection itself)\n   * @type String\n   * @default\n   */\n  selectionBorderColor: string;\n\n  /**\n   * Width of a line used in object/group selection\n   * @type Number\n   * @default\n   */\n  selectionLineWidth: number;\n\n  /**\n   * Select only shapes that are fully contained in the dragged selection rectangle.\n   * @type Boolean\n   * @default\n   */\n  selectionFullyContained: boolean;\n}\n\nexport interface CanvasCursorOptions {\n  /**\n   * Default cursor value used when hovering over an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  hoverCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used when moving an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  moveCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used for the entire canvas\n   * @type String\n   * @default default\n   */\n  defaultCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used during free drawing\n   * @type String\n   * @default crosshair\n   */\n  freeDrawingCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used for disabled elements ( corners with disabled action )\n   * @type String\n   * @since 2.0.0\n   * @default not-allowed\n   */\n  notAllowedCursor: CSSStyleDeclaration['cursor'];\n}\n\nexport interface TargetFindOptions {\n  /**\n   * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n   * @type Boolean\n   * @default\n   */\n  perPixelTargetFind: boolean;\n\n  /**\n   * Number of pixels around target pixel to tolerate (consider active) during object detection\n   * @type Number\n   * @default\n   */\n  targetFindTolerance: number;\n\n  /**\n   * When true, target detection is skipped. Target detection will return always undefined.\n   * click selection won't work anymore, events will fire with no targets.\n   * if something is selected before setting it to true, it will be deselected at the first click.\n   * area selection will still work. check the `selection` property too.\n   * if you deactivate both, you should look into staticCanvas.\n   * @type Boolean\n   * @default\n   */\n  skipTargetFind: boolean;\n}\n\nexport interface CanvasEventsOptions {\n  /**\n   * Indicates if the right click on canvas can output the context menu or not\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  stopContextMenu: boolean;\n\n  /**\n   * Indicates if the canvas can fire right click events\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  fireRightClick: boolean;\n\n  /**\n   * Indicates if the canvas can fire middle click events\n   * @type Boolean\n   * @since 1.7.8\n   * @default\n   */\n  fireMiddleClick: boolean;\n\n  /**\n   * When the option is enabled, PointerEvent is used instead of TPointerEvent.\n   * @type Boolean\n   * @default\n   */\n  enablePointerEvents: boolean;\n}\n\nexport interface CanvasOptions\n  extends StaticCanvasOptions,\n    CanvasTransformOptions,\n    CanvasSelectionOptions,\n    CanvasCursorOptions,\n    TargetFindOptions,\n    CanvasEventsOptions {\n  /**\n   * Default element class that's given to wrapper (div) element of canvas\n   * @type String\n   * @default\n   * @deprecated customize {@link CanvasDOMManager} instead or access {@link elements} directly\n   */\n  containerClass: string;\n\n  /**\n   * Indicates whether objects should remain in current stack position when selected.\n   * When false objects are brought to top and rendered as part of the selection group\n   * @type Boolean\n   * @default true\n   */\n  preserveObjectStacking: boolean;\n}\n\nexport type TCanvasOptions = TOptions<CanvasOptions>;\n\nexport const canvasDefaults: TOptions<CanvasOptions> = {\n  uniformScaling: true,\n  uniScaleKey: 'shiftKey',\n  centeredScaling: false,\n  centeredRotation: false,\n  centeredKey: 'altKey',\n  altActionKey: 'shiftKey',\n\n  selection: true,\n  selectionKey: 'shiftKey',\n  selectionColor: 'rgba(100, 100, 255, 0.3)',\n  selectionDashArray: [],\n  selectionBorderColor: 'rgba(255, 255, 255, 0.3)',\n  selectionLineWidth: 1,\n  selectionFullyContained: false,\n\n  hoverCursor: 'move',\n  moveCursor: 'move',\n  defaultCursor: 'default',\n  freeDrawingCursor: 'crosshair',\n  notAllowedCursor: 'not-allowed',\n\n  perPixelTargetFind: false,\n  targetFindTolerance: 0,\n  skipTargetFind: false,\n\n  stopContextMenu: false,\n  fireRightClick: false,\n  fireMiddleClick: false,\n  enablePointerEvents: false,\n\n  containerClass: 'canvas-container',\n  preserveObjectStacking: true,\n};\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport type { ITextBehavior } from '../shapes/IText/ITextBehavior';\nimport { removeFromArray } from '../util/internals/removeFromArray';\nimport type { Canvas } from './Canvas';\n\n/**\n * In charge of synchronizing all interactive text instances of a canvas\n */\nexport class TextEditingManager {\n  private targets: ITextBehavior[] = [];\n  declare private target?: ITextBehavior;\n  private __disposer: VoidFunction;\n\n  constructor(canvas: Canvas) {\n    const cb = () => {\n      const { hiddenTextarea } =\n        (canvas.getActiveObject() as ITextBehavior) || {};\n      hiddenTextarea && hiddenTextarea.focus();\n    };\n    const el = canvas.upperCanvasEl;\n    el.addEventListener('click', cb);\n    this.__disposer = () => el.removeEventListener('click', cb);\n  }\n\n  exitTextEditing() {\n    this.target = undefined;\n    this.targets.forEach((target) => {\n      if (target.isEditing) {\n        target.exitEditing();\n      }\n    });\n  }\n\n  add(target: ITextBehavior) {\n    this.targets.push(target);\n  }\n\n  remove(target: ITextBehavior) {\n    this.unregister(target);\n    removeFromArray(this.targets, target);\n  }\n\n  register(target: ITextBehavior) {\n    this.target = target;\n  }\n\n  unregister(target: ITextBehavior) {\n    if (target === this.target) {\n      this.target = undefined;\n    }\n  }\n\n  onMouseMove(e: TPointerEvent) {\n    this.target?.isEditing && this.target.updateSelectionOnMouseMove(e);\n  }\n\n  clear() {\n    this.targets = [];\n    this.target = undefined;\n  }\n\n  dispose() {\n    this.clear();\n    this.__disposer();\n    // @ts-expect-error disposing\n    delete this.__disposer;\n  }\n}\n","import { classRegistry } from '../ClassRegistry';\nimport { NONE } from '../constants';\nimport type {\n  CanvasEvents,\n  DragEventData,\n  ObjectEvents,\n  TEventsExtraData,\n  TPointerEvent,\n  TPointerEventNames,\n  Transform,\n} from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\nimport type { Group } from '../shapes/Group';\nimport type { IText } from '../shapes/IText/IText';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { isTouchEvent, stopEvent } from '../util/dom_event';\nimport { getDocumentFromElement, getWindowFromElement } from '../util/dom_misc';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { isActiveSelection } from '../util/typeAssertions';\nimport type { CanvasOptions, TCanvasOptions } from './CanvasOptions';\nimport { SelectableCanvas } from './SelectableCanvas';\nimport { TextEditingManager } from './TextEditingManager';\n\nconst addEventOptions = { passive: false } as EventListenerOptions;\n\nconst getEventPoints = (canvas: Canvas, e: TPointerEvent) => {\n  const viewportPoint = canvas.getViewportPoint(e);\n  const scenePoint = canvas.getScenePoint(e);\n  return {\n    viewportPoint,\n    scenePoint,\n  };\n};\n\n// just to be clear, the utils are now deprecated and those are here exactly as minifier helpers\n// because el.addEventListener can't me be minified while a const yes and we use it 47 times in this file.\n// few bytes but why give it away.\nconst addListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['addEventListener']>\n) => el.addEventListener(...args);\nconst removeListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['removeEventListener']>\n) => el.removeEventListener(...args);\n\nconst syntheticEventConfig = {\n  mouse: {\n    in: 'over',\n    out: 'out',\n    targetIn: 'mouseover',\n    targetOut: 'mouseout',\n    canvasIn: 'mouse:over',\n    canvasOut: 'mouse:out',\n  },\n  drag: {\n    in: 'enter',\n    out: 'leave',\n    targetIn: 'dragenter',\n    targetOut: 'dragleave',\n    canvasIn: 'drag:enter',\n    canvasOut: 'drag:leave',\n  },\n} as const;\n\ntype TSyntheticEventContext = {\n  mouse: { e: TPointerEvent };\n  drag: DragEventData;\n};\n\nexport class Canvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends SelectableCanvas<EventSpec>\n  implements CanvasOptions\n{\n  /**\n   * Contains the id of the touch event that owns the fabric transform\n   * @type Number\n   * @private\n   */\n  declare mainTouchId?: number;\n\n  declare enablePointerEvents: boolean;\n\n  /**\n   * Holds a reference to a setTimeout timer for event synchronization\n   * @type number\n   * @private\n   */\n  declare private _willAddMouseDown: number;\n\n  /**\n   * Holds a reference to an object on the canvas that is receiving the drag over event.\n   * @type FabricObject\n   * @private\n   */\n  declare private _draggedoverTarget?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas from where the drag operation started\n   * @type FabricObject\n   * @private\n   */\n  declare private _dragSource?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas that is the current drop target\n   * May differ from {@link _draggedoverTarget}\n   * @todo inspect whether {@link _draggedoverTarget} and {@link _dropTarget} should be merged somehow\n   * @type FabricObject\n   * @private\n   */\n  declare private _dropTarget: FabricObject<ObjectEvents> | undefined;\n\n  /**\n   * a boolean that keeps track of the click state during a cycle of mouse down/up.\n   * If a mouse move occurs it becomes false.\n   * Is true by default, turns false on mouse move.\n   * Used to determine if a mouseUp is a click\n   */\n  private _isClick: boolean;\n\n  textEditingManager = new TextEditingManager(this);\n\n  constructor(el?: string | HTMLCanvasElement, options: TCanvasOptions = {}) {\n    super(el, options);\n    // bind event handlers\n    (\n      [\n        '_onMouseDown',\n        '_onTouchStart',\n        '_onMouseMove',\n        '_onMouseUp',\n        '_onTouchEnd',\n        '_onResize',\n        // '_onGesture',\n        // '_onDrag',\n        // '_onShake',\n        // '_onLongPress',\n        // '_onOrientationChange',\n        '_onMouseWheel',\n        '_onMouseOut',\n        '_onMouseEnter',\n        '_onContextMenu',\n        '_onClick',\n        '_onDragStart',\n        '_onDragEnd',\n        '_onDragProgress',\n        '_onDragOver',\n        '_onDragEnter',\n        '_onDragLeave',\n        '_onDrop',\n      ] as (keyof this)[]\n    ).forEach((eventHandler) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n      this[eventHandler] = (this[eventHandler] as Function).bind(this);\n    });\n    // register event handlers\n    this.addOrRemove(addListener, 'add');\n  }\n\n  /**\n   * return an event prefix pointer or mouse.\n   * @private\n   */\n  private _getEventPrefix() {\n    return this.enablePointerEvents ? 'pointer' : 'mouse';\n  }\n\n  addOrRemove(functor: any, _eventjsFunctor: 'add' | 'remove') {\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    functor(getWindowFromElement(canvasElement), 'resize', this._onResize);\n    functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n    functor(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove,\n      addEventOptions,\n    );\n    functor(canvasElement, `${eventTypePrefix}out`, this._onMouseOut);\n    functor(canvasElement, `${eventTypePrefix}enter`, this._onMouseEnter);\n    functor(canvasElement, 'wheel', this._onMouseWheel);\n    functor(canvasElement, 'contextmenu', this._onContextMenu);\n    functor(canvasElement, 'click', this._onClick);\n    // decide if to remove in fabric 7.0\n    functor(canvasElement, 'dblclick', this._onClick);\n    functor(canvasElement, 'dragstart', this._onDragStart);\n    functor(canvasElement, 'dragend', this._onDragEnd);\n    functor(canvasElement, 'dragover', this._onDragOver);\n    functor(canvasElement, 'dragenter', this._onDragEnter);\n    functor(canvasElement, 'dragleave', this._onDragLeave);\n    functor(canvasElement, 'drop', this._onDrop);\n    if (!this.enablePointerEvents) {\n      functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\n    }\n    // if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n    //   eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\n    //   eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\n    //   eventjs[eventjsFunctor](\n    //     canvasElement,\n    //     'orientation',\n    //     this._onOrientationChange\n    //   );\n    //   eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\n    //   eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\n    // }\n  }\n\n  /**\n   * Removes all event listeners, used when disposing the instance\n   */\n  removeListeners() {\n    this.addOrRemove(removeListener, 'remove');\n    // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      `${eventTypePrefix}up`,\n      this._onMouseUp as EventListener,\n    );\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    clearTimeout(this._willAddMouseDown);\n  }\n\n  /**\n   * @private\n   * @param {Event} [e] Event object fired on wheel event\n   */\n  private _onMouseWheel(e: MouseEvent) {\n    this.__onMouseWheel(e);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onMouseOut(e: TPointerEvent) {\n    const target = this._hoveredTarget;\n    const shared = {\n      e,\n      ...getEventPoints(this, e),\n    };\n    this.fire('mouse:out', { ...shared, target });\n    this._hoveredTarget = undefined;\n    target && target.fire('mouseout', { ...shared });\n    this._hoveredTargets.forEach((nestedTarget) => {\n      this.fire('mouse:out', { ...shared, target: nestedTarget });\n      nestedTarget && nestedTarget.fire('mouseout', { ...shared });\n    });\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseenter\n   */\n  private _onMouseEnter(e: TPointerEvent) {\n    // This find target and consequent 'mouse:over' is used to\n    // clear old instances on hovered target.\n    // calling findTarget has the side effect of killing target.__corner.\n    // as a short term fix we are not firing this if we are currently transforming.\n    // as a long term fix we need to separate the action of finding a target with the\n    // side effects we added to it.\n    if (!this._currentTransform && !this.findTarget(e)) {\n      this.fire('mouse:over', {\n        e,\n        ...getEventPoints(this, e),\n      });\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n  }\n\n  /**\n   * supports native like text dragging\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragStart(e: DragEvent) {\n    this._isClick = false;\n    const activeObject = this.getActiveObject();\n    if (activeObject && activeObject.onDragStart(e)) {\n      this._dragSource = activeObject;\n      const options = { e, target: activeObject };\n      this.fire('dragstart', options);\n      activeObject.fire('dragstart', options);\n      addListener(\n        this.upperCanvasEl,\n        'drag',\n        this._onDragProgress as EventListener,\n      );\n      return;\n    }\n    stopEvent(e);\n  }\n\n  /**\n   * First we clear top context where the effects are being rendered.\n   * Then we render the effects.\n   * Doing so will render the correct effect for all cases including an overlap between `source` and `target`.\n   * @private\n   */\n  private _renderDragEffects(\n    e: DragEvent,\n    source?: FabricObject,\n    target?: FabricObject,\n  ) {\n    let dirty = false;\n    // clear top context\n    const dropTarget = this._dropTarget;\n    if (dropTarget && dropTarget !== source && dropTarget !== target) {\n      dropTarget.clearContextTop();\n      dirty = true;\n    }\n    source?.clearContextTop();\n    target !== source && target?.clearContextTop();\n    // render effects\n    const ctx = this.contextTop;\n    ctx.save();\n    ctx.transform(...this.viewportTransform);\n    if (source) {\n      ctx.save();\n      source.transform(ctx);\n      source.renderDragSourceEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    if (target) {\n      ctx.save();\n      target.transform(ctx);\n      target.renderDropTargetEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    ctx.restore();\n    dirty && (this.contextTopDirty = true);\n  }\n\n  /**\n   * supports native like text dragging\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragEnd(e: DragEvent) {\n    const didDrop = !!e.dataTransfer && e.dataTransfer.dropEffect !== NONE,\n      dropTarget = didDrop ? this._activeObject : undefined,\n      options = {\n        e,\n        target: this._dragSource as FabricObject,\n        subTargets: this.targets,\n        dragSource: this._dragSource as FabricObject,\n        didDrop,\n        dropTarget: dropTarget as FabricObject,\n      };\n    removeListener(\n      this.upperCanvasEl,\n      'drag',\n      this._onDragProgress as EventListener,\n    );\n    this.fire('dragend', options);\n    this._dragSource && this._dragSource.fire('dragend', options);\n    delete this._dragSource;\n    // we need to call mouse up synthetically because the browser won't\n    this._onMouseUp(e);\n  }\n\n  /**\n   * fire `drag` event on canvas and drag source\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragProgress(e: DragEvent) {\n    const options = {\n      e,\n      target: this._dragSource,\n      dragSource: this._dragSource,\n      dropTarget: this._draggedoverTarget as FabricObject,\n    };\n    this.fire('drag', options);\n    this._dragSource && this._dragSource.fire('drag', options);\n  }\n\n  /**\n   * As opposed to {@link findTarget} we want the top most object to be returned w/o the active object cutting in line.\n   * Override at will\n   */\n  protected findDragTargets(e: DragEvent) {\n    this.targets = [];\n    const target = this._searchPossibleTargets(\n      this._objects,\n      this.getViewportPoint(e),\n    );\n    return {\n      target,\n      targets: [...this.targets],\n    };\n  }\n\n  /**\n   * prevent default to allow drop event to be fired\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#specifying_drop_targets\n   * @private\n   * @param {DragEvent} [e] Event object fired on Event.js shake\n   */\n  private _onDragOver(e: DragEvent) {\n    const eventType = 'dragover';\n    const { target, targets } = this.findDragTargets(e);\n    const dragSource = this._dragSource as FabricObject;\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource,\n      canDrop: false,\n      dropTarget: undefined,\n    };\n    let dropTarget;\n    //  fire on canvas\n    this.fire(eventType, options);\n    //  make sure we fire dragenter events before dragover\n    //  if dragleave is needed, object will not fire dragover so we don't need to trouble ourselves with it\n    this._fireEnterLeaveEvents(target, options);\n    if (target) {\n      if (target.canDrop(e)) {\n        dropTarget = target;\n      }\n      target.fire(eventType, options);\n    }\n    //  propagate the event to subtargets\n    for (let i = 0; i < targets.length; i++) {\n      const subTarget = targets[i];\n      // accept event only if previous targets didn't (the accepting target calls `preventDefault` to inform that the event is taken)\n      // TODO: verify if those should loop in inverse order then?\n      // what is the order of subtargets?\n      if (subTarget.canDrop(e)) {\n        dropTarget = subTarget;\n      }\n      subTarget.fire(eventType, options);\n    }\n    //  render drag effects now that relations between source and target is clear\n    this._renderDragEffects(e, dragSource, dropTarget);\n    this._dropTarget = dropTarget;\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragEnter(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragenter', options);\n    //  fire dragenter on targets\n    this._fireEnterLeaveEvents(target, options);\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragLeave(e: DragEvent) {\n    const options = {\n      e,\n      target: this._draggedoverTarget,\n      subTargets: this.targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragleave', options);\n\n    //  fire dragleave on targets\n    this._fireEnterLeaveEvents(undefined, options);\n    this._renderDragEffects(e, this._dragSource);\n    this._dropTarget = undefined;\n    //  clear targets\n    this.targets = [];\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * `drop:before` is a an event that allows you to schedule logic\n   * before the `drop` event. Prefer `drop` event always, but if you need\n   * to run some drop-disabling logic on an event, since there is no way\n   * to handle event handlers ordering, use `drop:before`\n   * @private\n   * @param {Event} e\n   */\n  private _onDrop(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = this._basicEventHandler('drop:before', {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n      ...getEventPoints(this, e),\n    });\n    //  will be set by the drop target\n    options.didDrop = false;\n    //  will be set by the drop target, used in case options.target refuses the drop\n    options.dropTarget = undefined;\n    //  fire `drop`\n    this._basicEventHandler('drop', options);\n    //  inform canvas of the drop\n    //  we do this because canvas was unaware of what happened at the time the `drop` event was fired on it\n    //  use for side effects\n    this.fire('drop:after', options);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onContextMenu(e: TPointerEvent): false {\n    const target = this.findTarget(e),\n      subTargets = this.targets || [];\n    const options = this._basicEventHandler('contextmenu:before', {\n      e,\n      target,\n      subTargets,\n    });\n    // TODO: this line is silly because the dev can subscribe to the event and prevent it themselves\n    this.stopContextMenu && stopEvent(e);\n    this._basicEventHandler('contextmenu', options);\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onClick(e: TPointerEvent) {\n    const clicks = e.detail;\n    if (clicks > 3 || clicks < 2) return;\n    this._cacheTransformEventData(e);\n    clicks == 2 && e.type === 'dblclick' && this._handleEvent(e, 'dblclick');\n    clicks == 3 && this._handleEvent(e, 'tripleclick');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Return a the id of an event.\n   * returns either the pointerId or the identifier or 0 for the mouse event\n   * @private\n   * @param {Event} evt Event object\n   */\n  getPointerId(evt: TouchEvent | PointerEvent): number {\n    const changedTouches = (evt as TouchEvent).changedTouches;\n\n    if (changedTouches) {\n      return changedTouches[0] && changedTouches[0].identifier;\n    }\n\n    if (this.enablePointerEvents) {\n      return (evt as PointerEvent).pointerId;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines if an event has the id of the event that is considered main\n   * @private\n   * @param {evt} event Event object\n   */\n  _isMainEvent(evt: TPointerEvent): boolean {\n    if ((evt as PointerEvent).isPrimary === true) {\n      return true;\n    }\n    if ((evt as PointerEvent).isPrimary === false) {\n      return false;\n    }\n    if (evt.type === 'touchend' && (evt as TouchEvent).touches.length === 0) {\n      return true;\n    }\n    if ((evt as TouchEvent).changedTouches) {\n      return (\n        (evt as TouchEvent).changedTouches[0].identifier === this.mainTouchId\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchStart(e: TouchEvent) {\n    // we will prevent scrolling if allowTouchScrolling is not enabled and\n    let shouldPreventScrolling = !this.allowTouchScrolling;\n    const currentActiveObject = this._activeObject;\n    if (this.mainTouchId === undefined) {\n      this.mainTouchId = this.getPointerId(e);\n    }\n    this.__onMouseDown(e);\n    // after executing fabric logic for mouse down let's see\n    // if we didn't change target or if we are drawing\n    // we want to prevent scrolling anyway\n    if (\n      this.isDrawingMode ||\n      (currentActiveObject && this._target === currentActiveObject)\n    ) {\n      shouldPreventScrolling = true;\n    }\n    // prevent default, will block scrolling from start\n    shouldPreventScrolling && e.preventDefault();\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    // if we scroll don't register the touch move event\n    shouldPreventScrolling &&\n      addListener(\n        doc,\n        'touchmove',\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    // Unbind mousedown to prevent double triggers from touch devices\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}down`,\n      this._onMouseDown as EventListener,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDown(e: TPointerEvent) {\n    this.__onMouseDown(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(doc, `${eventTypePrefix}up`, this._onMouseUp as EventListener);\n    addListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchEnd(e: TouchEvent) {\n    if (e.touches.length > 0) {\n      // if there are still touches stop here\n      return;\n    }\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    delete this.mainTouchId;\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    if (this._willAddMouseDown) {\n      clearTimeout(this._willAddMouseDown);\n    }\n    this._willAddMouseDown = setTimeout(() => {\n      // Wait 400ms before rebinding mousedown to prevent double triggers\n      // from touch devices\n      addListener(\n        this.upperCanvasEl,\n        `${eventTypePrefix}down`,\n        this._onMouseDown as EventListener,\n      );\n      this._willAddMouseDown = 0;\n    }, 400) as unknown as number;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUp(e: TPointerEvent) {\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    if (this._isMainEvent(e)) {\n      const doc = getDocumentFromElement(this.upperCanvasEl);\n      removeListener(\n        doc,\n        `${eventTypePrefix}up`,\n        this._onMouseUp as EventListener,\n      );\n      removeListener(\n        doc,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n      addListener(\n        canvasElement,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMove(e: TPointerEvent) {\n    const activeObject = this.getActiveObject();\n    !this.allowTouchScrolling &&\n      (!activeObject ||\n        // a drag event sequence is started by the active object flagging itself on mousedown / mousedown:before\n        // we must not prevent the event's default behavior in order for the window to start dragging\n        !activeObject.shouldStartDragging(e)) &&\n      e.preventDefault &&\n      e.preventDefault();\n    this.__onMouseMove(e);\n  }\n\n  /**\n   * @private\n   */\n  _onResize() {\n    this.calcOffset();\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n   * @private\n   * @param {Object} target\n   */\n  _shouldRender(target: FabricObject | undefined) {\n    const activeObject = this.getActiveObject();\n    // if just one of them is available or if they are both but are different objects\n    // this covers: switch of target, from target to no target, selection of target\n    // multiSelection with key and mouse\n    return (\n      !!activeObject !== !!target ||\n      (activeObject && target && activeObject !== target)\n    );\n  }\n\n  /**\n   * Method that defines the actions when mouse is released on canvas.\n   * The method resets the currentTransform parameters, store the image corner\n   * position in the image object and render the canvas on top.\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseUp(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'up:before');\n\n    const transform = this._currentTransform;\n    const isClick = this._isClick;\n    const target = this._target;\n\n    // if right/middle click just fire events and return\n    // target undefined will make the _handleEvent search the target\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'up');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this._onMouseUpInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n    let shouldRender = false;\n    if (transform) {\n      this._finalizeCurrentTransform(e);\n      shouldRender = transform.actionPerformed;\n    }\n    if (!isClick) {\n      const targetWasActive = target === this._activeObject;\n      this.handleSelection(e);\n      if (!shouldRender) {\n        shouldRender =\n          this._shouldRender(target) ||\n          (!targetWasActive && target === this._activeObject);\n      }\n    }\n    let pointer, corner;\n    if (target) {\n      const found = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      const { key, control } = found || {};\n      corner = key;\n      if (\n        target.selectable &&\n        target !== this._activeObject &&\n        target.activeOn === 'up'\n      ) {\n        this.setActiveObject(target, e);\n        shouldRender = true;\n      } else if (control) {\n        const mouseUpHandler = control.getMouseUpHandler(e, target, control);\n        if (mouseUpHandler) {\n          pointer = this.getScenePoint(e);\n          mouseUpHandler.call(control, e, transform!, pointer.x, pointer.y);\n        }\n      }\n      target.isMoving = false;\n    }\n    // if we are ending up a transform on a different control or a new object\n    // fire the original mouse up from the corner that started the transform\n    if (\n      transform &&\n      (transform.target !== target || transform.corner !== corner)\n    ) {\n      const originalControl =\n          transform.target && transform.target.controls[transform.corner],\n        originalMouseUpHandler =\n          originalControl &&\n          originalControl.getMouseUpHandler(\n            e,\n            transform.target,\n            originalControl,\n          );\n      pointer = pointer || this.getScenePoint(e);\n      originalMouseUpHandler &&\n        originalMouseUpHandler.call(\n          originalControl,\n          e,\n          transform,\n          pointer.x,\n          pointer.y,\n        );\n    }\n    this._setCursorFromEvent(e, target);\n    this._handleEvent(e, 'up');\n    this._groupSelector = null;\n    this._currentTransform = null;\n    // reset the target information about which corner is selected\n    target && (target.__corner = undefined);\n    if (shouldRender) {\n      this.requestRenderAll();\n    } else if (!isClick && !(this._activeObject as IText)?.isEditing) {\n      this.renderTop();\n    }\n  }\n\n  _basicEventHandler<T extends keyof (CanvasEvents | ObjectEvents)>(\n    eventType: T,\n    options: (CanvasEvents & ObjectEvents)[T],\n  ) {\n    const { target, subTargets = [] } = options as {\n      target?: FabricObject;\n      subTargets: FabricObject[];\n    };\n    this.fire(eventType, options);\n    target && target.fire(eventType, options);\n    for (let i = 0; i < subTargets.length; i++) {\n      subTargets[i] !== target && subTargets[i].fire(eventType, options);\n    }\n    return options;\n  }\n\n  /**\n   * @private\n   * Handle event firing for target and subtargets\n   * @param {TPointerEvent} e event from mouse\n   * @param {TPointerEventNames} eventType\n   */\n  _handleEvent<T extends TPointerEventNames>(\n    e: TPointerEvent,\n    eventType: T,\n    extraData?: TEventsExtraData[T],\n  ) {\n    const target = this._target,\n      targets = this.targets || [],\n      options: CanvasEvents[`mouse:${T}`] = {\n        e,\n        target,\n        subTargets: targets,\n        ...getEventPoints(this, e),\n        transform: this._currentTransform,\n        ...(eventType === 'up:before' || eventType === 'up'\n          ? {\n              isClick: this._isClick,\n              currentTarget: this.findTarget(e),\n              // set by the preceding `findTarget` call\n              currentSubTargets: this.targets,\n            }\n          : {}),\n        ...(eventType === 'down:before' || eventType === 'down'\n          ? extraData\n          : {}),\n      } as CanvasEvents[`mouse:${T}`];\n    this.fire(`mouse:${eventType}`, options);\n    // this may be a little be more complicated of what we want to handle\n    target && target.fire(`mouse${eventType}`, options);\n    for (let i = 0; i < targets.length; i++) {\n      targets[i] !== target && targets[i].fire(`mouse${eventType}`, options);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDownInDrawingMode(e: TPointerEvent) {\n    this._isCurrentlyDrawing = true;\n    if (this.getActiveObject()) {\n      this.discardActiveObject(e);\n      this.requestRenderAll();\n    }\n    // TODO: this is a scene point so it should be renamed\n    const pointer = this.getScenePoint(e);\n    this.freeDrawingBrush &&\n      this.freeDrawingBrush.onMouseDown(pointer, { e, pointer });\n    this._handleEvent(e, 'down', { alreadySelected: false });\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMoveInDrawingMode(e: TPointerEvent) {\n    if (this._isCurrentlyDrawing) {\n      const pointer = this.getScenePoint(e);\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush.onMouseMove(pointer, {\n          e,\n          // this is an absolute pointer, the naming is wrong\n          pointer,\n        });\n    }\n    this.setCursor(this.freeDrawingCursor);\n    this._handleEvent(e, 'move');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUpInDrawingMode(e: TPointerEvent) {\n    const pointer = this.getScenePoint(e);\n    if (this.freeDrawingBrush) {\n      this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n        e: e,\n        // this is an absolute pointer, the naming is wrong\n        pointer,\n      });\n    } else {\n      this._isCurrentlyDrawing = false;\n    }\n    this._handleEvent(e, 'up');\n  }\n\n  /**\n   * Method that defines the actions when mouse is clicked on canvas.\n   * The method inits the currentTransform parameters and renders all the\n   * canvas so the current image can be placed on the top canvas and the rest\n   * in on the container one.\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  __onMouseDown(e: TPointerEvent) {\n    this._isClick = true;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'down:before');\n\n    let target: FabricObject | undefined = this._target;\n    let alreadySelected = !!target && target === this._activeObject;\n    // if right/middle click just fire events\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'down', {\n          alreadySelected,\n        });\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode) {\n      this._onMouseDownInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    // ignore if some object is being transformed at this moment\n    if (this._currentTransform) {\n      return;\n    }\n\n    let shouldRender = this._shouldRender(target);\n    let grouped = false;\n    if (this.handleMultiSelection(e, target)) {\n      // active object might have changed while grouping\n      target = this._activeObject;\n      grouped = true;\n      shouldRender = true;\n    } else if (this._shouldClearSelection(e, target)) {\n      this.discardActiveObject(e);\n    }\n    // we start a group selector rectangle if\n    // selection is enabled\n    // and there is no target, or the following 3 conditions are satisfied:\n    // target is not selectable ( otherwise we selected it )\n    // target is not editing\n    // target is not already selected ( otherwise we drag )\n    if (\n      this.selection &&\n      (!target ||\n        (!target.selectable &&\n          !(target as IText).isEditing &&\n          target !== this._activeObject))\n    ) {\n      const p = this.getScenePoint(e);\n      this._groupSelector = {\n        x: p.x,\n        y: p.y,\n        deltaY: 0,\n        deltaX: 0,\n      };\n    }\n\n    // check again because things could have changed\n    alreadySelected = !!target && target === this._activeObject;\n    if (target) {\n      if (target.selectable && target.activeOn === 'down') {\n        this.setActiveObject(target, e);\n      }\n      const handle = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      if (target === this._activeObject && (handle || !grouped)) {\n        this._setupCurrentTransform(e, target, alreadySelected);\n        const control = handle ? handle.control : undefined,\n          pointer = this.getScenePoint(e),\n          mouseDownHandler =\n            control && control.getMouseDownHandler(e, target, control);\n        mouseDownHandler &&\n          mouseDownHandler.call(\n            control,\n            e,\n            this._currentTransform!,\n            pointer.x,\n            pointer.y,\n          );\n      }\n    }\n    //  we clear `_objectsToRender` in case of a change in order to repopulate it at rendering\n    //  run before firing the `down` event to give the dev a chance to populate it themselves\n    shouldRender && (this._objectsToRender = undefined);\n    this._handleEvent(e, 'down', { alreadySelected: alreadySelected });\n    // we must renderAll so that we update the visuals\n    shouldRender && this.requestRenderAll();\n  }\n\n  /**\n   * reset cache form common information needed during event processing\n   * @private\n   */\n  _resetTransformEventData() {\n    this._target = this._viewportPoint = this._scenePoint = undefined;\n  }\n\n  /**\n   * Cache common information needed during event processing\n   * @private\n   * @param {Event} e Event object fired on event\n   */\n  _cacheTransformEventData(e: TPointerEvent) {\n    // reset in order to avoid stale caching\n    this._resetTransformEventData();\n    this._viewportPoint = this.getViewportPoint(e);\n    this._scenePoint = sendPointToPlane(\n      this._viewportPoint,\n      undefined,\n      this.viewportTransform,\n    );\n    this._target = this._currentTransform\n      ? this._currentTransform.target\n      : this.findTarget(e);\n  }\n\n  /**\n   * Method that defines the actions when mouse is hovering the canvas.\n   * The currentTransform parameter will define whether the user is rotating/scaling/translating\n   * an image or neither of them (only hovering). A group selection is also possible and would cancel\n   * all any other type of action.\n   * In case of an image transformation only the top canvas will be rendered.\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  __onMouseMove(e: TPointerEvent) {\n    this._isClick = false;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'move:before');\n\n    if (this.isDrawingMode) {\n      this._onMouseMoveInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    const groupSelector = this._groupSelector;\n\n    // We initially clicked in an empty area, so we draw a box for multiple selection\n    if (groupSelector) {\n      const pointer = this.getScenePoint(e);\n\n      groupSelector.deltaX = pointer.x - groupSelector.x;\n      groupSelector.deltaY = pointer.y - groupSelector.y;\n\n      this.renderTop();\n    } else if (!this._currentTransform) {\n      const target = this.findTarget(e);\n      this._setCursorFromEvent(e, target);\n      this._fireOverOutEvents(e, target);\n    } else {\n      this._transformObject(e);\n    }\n    this.textEditingManager.onMouseMove(e);\n    this._handleEvent(e, 'move');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Manage the mouseout, mouseover events for the fabric object on the canvas\n   * @param {Fabric.Object} target the target where the target from the mousemove event\n   * @param {Event} e Event object fired on mousemove\n   * @private\n   */\n  _fireOverOutEvents(e: TPointerEvent, target?: FabricObject) {\n    const _hoveredTarget = this._hoveredTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('mouse', {\n      e,\n      target,\n      oldTarget: _hoveredTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('mouse', {\n        e,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._hoveredTarget = target;\n    this._hoveredTargets = this.targets.concat();\n  }\n\n  /**\n   * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the onDrag event\n   * @param {Object} data Event object fired on dragover\n   * @private\n   */\n  _fireEnterLeaveEvents(target: FabricObject | undefined, data: DragEventData) {\n    const draggedoverTarget = this._draggedoverTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('drag', {\n      ...data,\n      target,\n      oldTarget: draggedoverTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('drag', {\n        ...data,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._draggedoverTarget = target;\n  }\n\n  /**\n   * Manage the synthetic in/out events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the supported events\n   * @param {Object} data Event object fired\n   * @param {Object} config configuration for the function to work\n   * @param {String} config.targetName property on the canvas where the old target is stored\n   * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n   * @param {String} config.evtOut name of the event to fire for out\n   * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n   * @param {String} config.evtIn name of the event to fire for in\n   * @private\n   */\n  fireSyntheticInOutEvents<T extends keyof TSyntheticEventContext>(\n    type: T,\n    {\n      target,\n      oldTarget,\n      fireCanvas,\n      e,\n      ...data\n    }: TSyntheticEventContext[T] & {\n      target?: FabricObject;\n      oldTarget?: FabricObject;\n      fireCanvas?: boolean;\n    },\n  ) {\n    const { targetIn, targetOut, canvasIn, canvasOut } =\n      syntheticEventConfig[type];\n    const targetChanged = oldTarget !== target;\n\n    if (oldTarget && targetChanged) {\n      const outOpt: CanvasEvents[typeof canvasOut] = {\n        ...data,\n        e,\n        target: oldTarget,\n        nextTarget: target,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasOut, outOpt);\n      oldTarget.fire(targetOut, outOpt);\n    }\n    if (target && targetChanged) {\n      const inOpt: CanvasEvents[typeof canvasIn] = {\n        ...data,\n        e,\n        target,\n        previousTarget: oldTarget,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasIn, inOpt);\n      target.fire(targetIn, inOpt);\n    }\n  }\n\n  /**\n   * Method that defines actions when an Event Mouse Wheel\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseWheel(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'wheel');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event fired on mousemove\n   */\n  _transformObject(e: TPointerEvent) {\n    const scenePoint = this.getScenePoint(e),\n      transform = this._currentTransform!,\n      target = transform.target,\n      //  transform pointer to target's containing coordinate plane\n      //  both pointer and object should agree on every point\n      localPointer = target.group\n        ? sendPointToPlane(\n            scenePoint,\n            undefined,\n            target.group.calcTransformMatrix(),\n          )\n        : scenePoint;\n    transform.shiftKey = e.shiftKey;\n    transform.altKey = !!this.centeredKey && e[this.centeredKey];\n\n    this._performTransformAction(e, transform, localPointer);\n    transform.actionPerformed && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   */\n  _performTransformAction(\n    e: TPointerEvent,\n    transform: Transform,\n    pointer: Point,\n  ) {\n    const { action, actionHandler, target } = transform;\n\n    const actionPerformed =\n      !!actionHandler && actionHandler(e, transform, pointer.x, pointer.y);\n    actionPerformed && target.setCoords();\n\n    // this object could be created from the function in the control handlers\n    if (action === 'drag' && actionPerformed) {\n      transform.target.isMoving = true;\n      this.setCursor(transform.target.moveCursor || this.moveCursor);\n    }\n    transform.actionPerformed = transform.actionPerformed || actionPerformed;\n  }\n\n  /**\n   * Sets the cursor depending on where the canvas is being hovered.\n   * Note: very buggy in Opera\n   * @param {Event} e Event object\n   * @param {Object} target Object that the mouse is hovering, if so.\n   */\n  _setCursorFromEvent(e: TPointerEvent, target?: FabricObject) {\n    if (!target) {\n      this.setCursor(this.defaultCursor);\n      return;\n    }\n    let hoverCursor = target.hoverCursor || this.hoverCursor;\n    const activeSelection = isActiveSelection(this._activeObject)\n        ? this._activeObject\n        : null,\n      // only show proper corner when group selection is not active\n      corner =\n        (!activeSelection || target.group !== activeSelection) &&\n        // here we call findTargetCorner always with undefined for the touch parameter.\n        // we assume that if you are using a cursor you do not need to interact with\n        // the bigger touch area.\n        target.findControl(this.getViewportPoint(e));\n\n    if (!corner) {\n      if ((target as Group).subTargetCheck) {\n        // hoverCursor should come from top-most subTarget,\n        // so we walk the array backwards\n        this.targets\n          .concat()\n          .reverse()\n          .map((_target) => {\n            hoverCursor = _target.hoverCursor || hoverCursor;\n          });\n      }\n      this.setCursor(hoverCursor);\n    } else {\n      const { control, coord } = corner;\n      this.setCursor(control.cursorStyleHandler(e, control, target, coord));\n    }\n  }\n\n  /**\n   * ## Handles multiple selection\n   * - toggles `target` selection (selects/deselects `target` if it isn't/is selected respectively)\n   * - sets the active object in case it is not set or in case there is a single active object left under active selection.\n   * ---\n   * - If the active object is the active selection we add/remove `target` from it\n   * - If not, add the active object and `target` to the active selection and make it the active object.\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target target of event to select/deselect\n   * @returns true if grouping occurred\n   */\n  protected handleMultiSelection(e: TPointerEvent, target?: FabricObject) {\n    const activeObject = this._activeObject;\n    const isAS = isActiveSelection(activeObject);\n    if (\n      // check if an active object exists on canvas and if the user is pressing the `selectionKey` while canvas supports multi selection.\n      !!activeObject &&\n      this._isSelectionKeyPressed(e) &&\n      this.selection &&\n      // on top of that the user also has to hit a target that is selectable.\n      !!target &&\n      target.selectable &&\n      // group target and active object only if they are different objects\n      // else we try to find a subtarget of `ActiveSelection`\n      (activeObject !== target || isAS) &&\n      //  make sure `activeObject` and `target` aren't ancestors of each other in case `activeObject` is not `ActiveSelection`\n      // if it is then we want to remove `target` from it\n      (isAS ||\n        (!target.isDescendantOf(activeObject) &&\n          !activeObject.isDescendantOf(target))) &&\n      //  target accepts selection\n      !target.onSelect({ e }) &&\n      // make sure we are not on top of a control\n      !activeObject.getActiveControl()\n    ) {\n      if (isAS) {\n        const prevActiveObjects = activeObject.getObjects();\n        if (target === activeObject) {\n          const pointer = this.getViewportPoint(e);\n          target =\n            // first search active objects for a target to remove\n            this.searchPossibleTargets(prevActiveObjects, pointer) ||\n            //  if not found, search under active selection for a target to add\n            // `prevActiveObjects` will be searched but we already know they will not be found\n            this.searchPossibleTargets(this._objects, pointer);\n          // if nothing is found bail out\n          if (!target || !target.selectable) {\n            return false;\n          }\n        }\n        if (target.group === activeObject) {\n          // `target` is part of active selection => remove it\n          activeObject.remove(target);\n          this._hoveredTarget = target;\n          this._hoveredTargets = [...this.targets];\n          // if after removing an object we are left with one only...\n          if (activeObject.size() === 1) {\n            // activate last remaining object\n            // deselecting the active selection will remove the remaining object from it\n            this._setActiveObject(activeObject.item(0), e);\n          }\n        } else {\n          // `target` isn't part of active selection => add it\n          activeObject.multiSelectAdd(target);\n          this._hoveredTarget = activeObject;\n          this._hoveredTargets = [...this.targets];\n        }\n        this._fireSelectionEvents(prevActiveObjects, e);\n      } else {\n        (activeObject as IText).isEditing &&\n          (activeObject as IText).exitEditing();\n        // add the active object and the target to the active selection and set it as the active object\n        const klass =\n          classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n        const newActiveSelection = new klass([], {\n          /**\n           * it is crucial to pass the canvas ref before calling {@link ActiveSelection#multiSelectAdd}\n           * since it uses {@link FabricObject#isInFrontOf} which relies on the canvas ref\n           */\n          canvas: this,\n        });\n        newActiveSelection.multiSelectAdd(activeObject, target);\n        this._hoveredTarget = newActiveSelection;\n        // ISSUE 4115: should we consider subTargets here?\n        // this._hoveredTargets = [];\n        // this._hoveredTargets = this.targets.concat();\n        this._setActiveObject(newActiveSelection, e);\n        this._fireSelectionEvents([activeObject], e);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ## Handles selection\n   * - selects objects that are contained in (and possibly intersecting) the selection bounding box\n   * - sets the active object\n   * ---\n   * runs on mouse up after a mouse move\n   */\n  protected handleSelection(e: TPointerEvent) {\n    if (!this.selection || !this._groupSelector) {\n      return false;\n    }\n    const { x, y, deltaX, deltaY } = this._groupSelector,\n      point1 = new Point(x, y),\n      point2 = point1.add(new Point(deltaX, deltaY)),\n      tl = point1.min(point2),\n      br = point1.max(point2),\n      size = br.subtract(tl);\n\n    const collectedObjects = this.collectObjects(\n      {\n        left: tl.x,\n        top: tl.y,\n        width: size.x,\n        height: size.y,\n      },\n      { includeIntersecting: !this.selectionFullyContained },\n    ) as FabricObject[];\n\n    const objects =\n      // though this method runs only after mouse move the pointer could do a mouse up on the same position as mouse down\n      // should it be handled as is?\n      point1.eq(point2)\n        ? collectedObjects[0]\n          ? [collectedObjects[0]]\n          : []\n        : collectedObjects.length > 1\n          ? collectedObjects\n              .filter((object) => !object.onSelect({ e }))\n              .reverse()\n          : // `setActiveObject` will call `onSelect(collectedObjects[0])` in this case\n            collectedObjects;\n\n    // set active object\n    if (objects.length === 1) {\n      // set as active object\n      this.setActiveObject(objects[0], e);\n    } else if (objects.length > 1) {\n      // add to active selection and make it the active object\n      const klass =\n        classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n      this.setActiveObject(new klass(objects, { canvas: this }), e);\n    }\n\n    // cleanup\n    this._groupSelector = null;\n    return true;\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  clear() {\n    this.textEditingManager.clear();\n    super.clear();\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  destroy() {\n    this.removeListeners();\n    this.textEditingManager.dispose();\n    super.destroy();\n  }\n}\n","export const linearDefaultCoords = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n};\n\nexport const radialDefaultCoords = {\n  ...linearDefaultCoords,\n  r1: 0,\n  r2: 0,\n};\n","/**\n *\n * @param value value to check if NaN\n * @param [valueIfNaN]\n * @returns `fallback` is `value is NaN\n */\nexport const ifNaN = (value: number, valueIfNaN?: number) => {\n  return isNaN(value) && typeof valueIfNaN === 'number' ? valueIfNaN : value;\n};\n","import { ifNaN } from '../util/internals/ifNaN';\nimport { capValue } from '../util/misc/capValue';\n\nconst RE_PERCENT = /^(\\d+\\.\\d+)%|(\\d+)%$/;\n\nexport function isPercent(value: string | null) {\n  return value && RE_PERCENT.test(value);\n}\n\n/**\n *\n * @param value\n * @param valueIfNaN\n * @returns ∈ [0, 1]\n */\nexport function parsePercent(\n  value: string | number | null | undefined,\n  valueIfNaN?: number,\n) {\n  const parsed =\n    typeof value === 'number'\n      ? value\n      : typeof value === 'string'\n        ? parseFloat(value) / (isPercent(value) ? 100 : 1)\n        : NaN;\n  return capValue(0, ifNaN(parsed, valueIfNaN), 1);\n}\n","import { Color } from '../../color/Color';\nimport { parsePercent } from '../../parser/percent';\nimport { ifNaN } from '../../util/internals/ifNaN';\nimport type { ColorStop } from '../typedefs';\n\nconst RE_KEY_VALUE_PAIRS = /\\s*;\\s*/;\nconst RE_KEY_VALUE = /\\s*:\\s*/;\n\nfunction parseColorStop(el: SVGStopElement, opacityMultiplier: number) {\n  let colorValue, opacityValue;\n  const style = el.getAttribute('style');\n  if (style) {\n    const keyValuePairs = style.split(RE_KEY_VALUE_PAIRS);\n\n    if (keyValuePairs[keyValuePairs.length - 1] === '') {\n      keyValuePairs.pop();\n    }\n\n    for (let i = keyValuePairs.length; i--; ) {\n      const [key, value] = keyValuePairs[i]\n        .split(RE_KEY_VALUE)\n        .map((s) => s.trim());\n      if (key === 'stop-color') {\n        colorValue = value;\n      } else if (key === 'stop-opacity') {\n        opacityValue = value;\n      }\n    }\n  }\n\n  colorValue = colorValue || el.getAttribute('stop-color') || 'rgb(0,0,0)';\n  opacityValue = ifNaN(\n    parseFloat(opacityValue || el.getAttribute('stop-opacity') || ''),\n    1,\n  );\n\n  const color = new Color(colorValue);\n\n  color.setAlpha(color.getAlpha() * opacityValue * opacityMultiplier);\n\n  return {\n    offset: parsePercent(el.getAttribute('offset'), 0),\n    color: color.toRgba(),\n  };\n}\n\nexport function parseColorStops(\n  el: SVGGradientElement,\n  opacityAttr: string | null,\n) {\n  const colorStops: ColorStop[] = [],\n    colorStopEls = el.getElementsByTagName('stop'),\n    multiplier = parsePercent(opacityAttr, 1);\n  for (let i = colorStopEls.length; i--; ) {\n    colorStops.push(parseColorStop(colorStopEls[i], multiplier));\n  }\n  return colorStops;\n}\n","import type { GradientType, GradientUnits } from '../typedefs';\n\nexport function parseType(el: SVGGradientElement): GradientType {\n  return el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT'\n    ? 'linear'\n    : 'radial';\n}\n\nexport function parseGradientUnits(el: SVGGradientElement): GradientUnits {\n  return el.getAttribute('gradientUnits') === 'userSpaceOnUse'\n    ? 'pixels'\n    : 'percentage';\n}\n","import { isPercent } from '../../parser/percent';\nimport type { TSize } from '../../typedefs';\nimport type { GradientCoords, GradientType, GradientUnits } from '../typedefs';\nimport { parseGradientUnits, parseType } from './misc';\n\nfunction convertPercentUnitsToValues<\n  T extends GradientType,\n  K extends keyof GradientCoords<T>,\n>(\n  valuesToConvert: Record<K, string | number>,\n  { width, height, gradientUnits }: TSize & { gradientUnits: GradientUnits },\n) {\n  let finalValue;\n  return (Object.keys(valuesToConvert) as K[]).reduce(\n    (acc, prop) => {\n      const propValue = valuesToConvert[prop];\n      if (propValue === 'Infinity') {\n        finalValue = 1;\n      } else if (propValue === '-Infinity') {\n        finalValue = 0;\n      } else {\n        finalValue =\n          typeof propValue === 'string' ? parseFloat(propValue) : propValue;\n        if (typeof propValue === 'string' && isPercent(propValue)) {\n          finalValue *= 0.01;\n          if (gradientUnits === 'pixels') {\n            // then we need to fix those percentages here in svg parsing\n            if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n              finalValue *= width;\n            }\n            if (prop === 'y1' || prop === 'y2') {\n              finalValue *= height;\n            }\n          }\n        }\n      }\n      acc[prop] = finalValue;\n      return acc;\n    },\n    {} as Record<K, number>,\n  );\n}\n\nfunction getValue(el: SVGGradientElement, key: string) {\n  return el.getAttribute(key);\n}\n\nexport function parseLinearCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'x1') || 0,\n    y1: getValue(el, 'y1') || 0,\n    x2: getValue(el, 'x2') || '100%',\n    y2: getValue(el, 'y2') || 0,\n  };\n}\n\nexport function parseRadialCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'fx') || getValue(el, 'cx') || '50%',\n    y1: getValue(el, 'fy') || getValue(el, 'cy') || '50%',\n    r1: 0,\n    x2: getValue(el, 'cx') || '50%',\n    y2: getValue(el, 'cy') || '50%',\n    r2: getValue(el, 'r') || '50%',\n  };\n}\n\nexport function parseCoords(el: SVGGradientElement, size: TSize) {\n  return convertPercentUnitsToValues(\n    parseType(el) === 'linear' ? parseLinearCoords(el) : parseRadialCoords(el),\n    {\n      ...size,\n      gradientUnits: parseGradientUnits(el),\n    },\n  );\n}\n","import { iMatrix } from '../constants';\nimport { parseTransformAttribute } from '../parser/parseTransformAttribute';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { linearDefaultCoords, radialDefaultCoords } from './constants';\nimport { parseColorStops } from './parser/parseColorStops';\nimport { parseCoords } from './parser/parseCoords';\nimport { parseType, parseGradientUnits } from './parser/misc';\nimport type {\n  ColorStop,\n  GradientCoords,\n  GradientOptions,\n  GradientType,\n  GradientUnits,\n  SVGOptions,\n  SerializedGradientProps,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { isPath } from '../util/typeAssertions';\n\n/**\n * Gradient class\n * @class Gradient\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n */\nexport class Gradient<\n  S,\n  T extends GradientType = S extends GradientType ? S : 'linear',\n> {\n  /**\n   * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetX: number;\n\n  /**\n   * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetY: number;\n\n  /**\n   * A transform matrix to apply to the gradient before painting.\n   * Imported from svg gradients, is not applied with the current transform in the center.\n   * Before this transform is applied, the origin point is at the top left corner of the object\n   * plus the addition of offsetY and offsetX.\n   * @type Number[]\n   * @default null\n   */\n  declare gradientTransform?: TMat2D;\n\n  /**\n   * coordinates units for coords.\n   * If `pixels`, the number of coords are in the same unit of width / height.\n   * If set as `percentage` the coords are still a number, but 1 means 100% of width\n   * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\n   * allowed values pixels or percentage.\n   * @type GradientUnits\n   * @default 'pixels'\n   */\n  declare gradientUnits: GradientUnits;\n\n  /**\n   * Gradient type linear or radial\n   * @type GradientType\n   * @default 'linear'\n   */\n  declare type: T;\n\n  /**\n   * Defines how the gradient is located in space and spread\n   * @type GradientCoords\n   */\n  declare coords: GradientCoords<T>;\n\n  /**\n   * Defines how many colors a gradient has and how they are located on the axis\n   * defined by coords\n   * @type GradientCoords\n   */\n  declare colorStops: ColorStop[];\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number | string\n   */\n  declare readonly id: string | number;\n\n  static type = 'Gradient';\n\n  constructor(options: GradientOptions<T>) {\n    const {\n      type = 'linear' as T,\n      gradientUnits = 'pixels',\n      coords = {},\n      colorStops = [],\n      offsetX = 0,\n      offsetY = 0,\n      gradientTransform,\n      id,\n    } = options || {};\n    Object.assign(this, {\n      type,\n      gradientUnits,\n      coords: {\n        ...(type === 'radial' ? radialDefaultCoords : linearDefaultCoords),\n        ...coords,\n      },\n      colorStops,\n      offsetX,\n      offsetY,\n      gradientTransform,\n      id: id ? `${id}_${uid()}` : uid(),\n    });\n  }\n\n  /**\n   * Adds another colorStop\n   * @param {Record<string, string>} colorStop Object with offset and color\n   * @return {Gradient} thisArg\n   */\n  addColorStop(colorStops: Record<string, string>) {\n    for (const position in colorStops) {\n      this.colorStops.push({\n        offset: parseFloat(position),\n        color: colorStops[position],\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Returns object representation of a gradient\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object}\n   */\n  toObject(\n    propertiesToInclude?: (keyof this | string)[],\n  ): SerializedGradientProps<T> {\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: this.type,\n      coords: { ...this.coords },\n      colorStops: this.colorStops.map((colorStop) => ({ ...colorStop })),\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      gradientUnits: this.gradientUnits,\n      gradientTransform: this.gradientTransform\n        ? [...this.gradientTransform]\n        : undefined,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of an gradient\n   * @param {FabricObject} object Object to create a gradient for\n   * @return {String} SVG representation of an gradient (linear/radial)\n   */\n  toSVG(\n    object: FabricObject,\n    {\n      additionalTransform: preTransform,\n    }: { additionalTransform?: string } = {},\n  ) {\n    const markup = [],\n      transform = (\n        this.gradientTransform\n          ? this.gradientTransform.concat()\n          : iMatrix.concat()\n      ) as TMat2D,\n      gradientUnits =\n        this.gradientUnits === 'pixels'\n          ? 'userSpaceOnUse'\n          : 'objectBoundingBox';\n    // colorStops must be sorted ascending, and guarded against deep mutations\n    const colorStops = this.colorStops\n      .map((colorStop) => ({ ...colorStop }))\n      .sort((a, b) => {\n        return a.offset - b.offset;\n      });\n\n    let offsetX = -this.offsetX,\n      offsetY = -this.offsetY;\n    if (gradientUnits === 'objectBoundingBox') {\n      offsetX /= object.width;\n      offsetY /= object.height;\n    } else {\n      offsetX += object.width / 2;\n      offsetY += object.height / 2;\n    }\n    // todo what about polygon/polyline?\n    if (isPath(object) && this.gradientUnits !== 'percentage') {\n      offsetX -= object.pathOffset.x;\n      offsetY -= object.pathOffset.y;\n    }\n    transform[4] -= offsetX;\n    transform[5] -= offsetY;\n\n    const commonAttributes = [\n      `id=\"SVGID_${this.id}\"`,\n      `gradientUnits=\"${gradientUnits}\"`,\n      `gradientTransform=\"${\n        preTransform ? preTransform + ' ' : ''\n      }${matrixToSVG(transform)}\"`,\n      '',\n    ].join(' ');\n\n    if (this.type === 'linear') {\n      const { x1, y1, x2, y2 } = this.coords;\n      markup.push(\n        '<linearGradient ',\n        commonAttributes,\n        ' x1=\"',\n        x1,\n        '\" y1=\"',\n        y1,\n        '\" x2=\"',\n        x2,\n        '\" y2=\"',\n        y2,\n        '\">\\n',\n      );\n    } else if (this.type === 'radial') {\n      const { x1, y1, x2, y2, r1, r2 } = this\n        .coords as GradientCoords<'radial'>;\n      const needsSwap = r1 > r2;\n      // svg radial gradient has just 1 radius. the biggest.\n      markup.push(\n        '<radialGradient ',\n        commonAttributes,\n        ' cx=\"',\n        needsSwap ? x1 : x2,\n        '\" cy=\"',\n        needsSwap ? y1 : y2,\n        '\" r=\"',\n        needsSwap ? r1 : r2,\n        '\" fx=\"',\n        needsSwap ? x2 : x1,\n        '\" fy=\"',\n        needsSwap ? y2 : y1,\n        '\">\\n',\n      );\n      if (needsSwap) {\n        // svg goes from internal to external radius. if radius are inverted, swap color stops.\n        colorStops.reverse(); //  mutates array\n        colorStops.forEach((colorStop) => {\n          colorStop.offset = 1 - colorStop.offset;\n        });\n      }\n      const minRadius = Math.min(r1, r2);\n      if (minRadius > 0) {\n        // i have to shift all colorStops and add new one in 0.\n        const maxRadius = Math.max(r1, r2),\n          percentageShift = minRadius / maxRadius;\n        colorStops.forEach((colorStop) => {\n          colorStop.offset += percentageShift * (1 - colorStop.offset);\n        });\n      }\n    }\n\n    colorStops.forEach(({ color, offset }) => {\n      markup.push(\n        `<stop offset=\"${offset * 100}%\" style=\"stop-color:${color};\"/>\\n`,\n      );\n    });\n\n    markup.push(\n      this.type === 'linear' ? '</linearGradient>' : '</radialGradient>',\n      '\\n',\n    );\n\n    return markup.join('');\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasGradient\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {CanvasGradient}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasGradient {\n    const { x1, y1, x2, y2, r1, r2 } = this.coords as GradientCoords<'radial'>;\n    const gradient =\n      this.type === 'linear'\n        ? ctx.createLinearGradient(x1, y1, x2, y2)\n        : ctx.createRadialGradient(x1, y1, r1, x2, y2, r2);\n\n    this.colorStops.forEach(({ color, offset }) => {\n      gradient.addColorStop(offset, color);\n    });\n\n    return gradient;\n  }\n\n  static async fromObject(\n    options: GradientOptions<'linear'>,\n  ): Promise<Gradient<'linear'>>;\n  static async fromObject(\n    options: GradientOptions<'radial'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'linear'> | GradientOptions<'radial'>,\n  ) {\n    const { colorStops, gradientTransform } = options;\n    return new this({\n      ...options,\n      colorStops: colorStops\n        ? colorStops.map((colorStop) => ({ ...colorStop }))\n        : undefined,\n      gradientTransform: gradientTransform ? [...gradientTransform] : undefined,\n    });\n  }\n\n  /* _FROM_SVG_START_ */\n  /**\n   * Returns {@link Gradient} instance from an SVG element\n   * @static\n   * @memberOf Gradient\n   * @param {SVGGradientElement} el SVG gradient element\n   * @param {FabricObject} instance\n   * @param {String} opacity A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\n   * @param {SVGOptions} svgOptions an object containing the size of the SVG in order to parse correctly gradients\n   * that uses gradientUnits as 'userSpaceOnUse' and percentages.\n   * @return {Gradient} Gradient instance\n   * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n   * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n   *\n   *  @example\n   *\n   *  <linearGradient id=\"linearGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\"/>\n   *    <stop offset=\"100%\" stop-color=\"black\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <linearGradient id=\"linearGrad2\">\n   *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n   *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n   *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *  </radialGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad2\">\n   *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n   *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n   *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n   *  </radialGradient>\n   *\n   */\n  static fromElement(\n    el: SVGGradientElement,\n    instance: FabricObject,\n    svgOptions: SVGOptions,\n  ): Gradient<GradientType> {\n    const gradientUnits = parseGradientUnits(el);\n    const center = instance._findCenterFromElement();\n    return new this({\n      id: el.getAttribute('id') || undefined,\n      type: parseType(el),\n      coords: parseCoords(el, {\n        width: svgOptions.viewBoxWidth || svgOptions.width,\n        height: svgOptions.viewBoxHeight || svgOptions.height,\n      }),\n      colorStops: parseColorStops(el, svgOptions.opacity),\n      gradientUnits,\n      gradientTransform: parseTransformAttribute(\n        el.getAttribute('gradientTransform') || '',\n      ),\n      ...(gradientUnits === 'pixels'\n        ? {\n            offsetX: instance.width / 2 - center.x,\n            offsetY: instance.height / 2 - center.y,\n          }\n        : {\n            offsetX: 0,\n            offsetY: 0,\n          }),\n    });\n  }\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Gradient, 'gradient');\nclassRegistry.setClass(Gradient, 'linear');\nclassRegistry.setClass(Gradient, 'radial');\n","import { config } from '../config';\nimport type { Abortable, TCrossOrigin, TMat2D, TSize } from '../typedefs';\nimport { ifNaN } from '../util/internals/ifNaN';\nimport { uid } from '../util/internals/uid';\nimport { loadImage } from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { toFixed } from '../util/misc/toFixed';\nimport { classRegistry } from '../ClassRegistry';\nimport type {\n  PatternRepeat,\n  PatternOptions,\n  SerializedPatternOptions,\n} from './types';\nimport { log } from '../util/internals/console';\n\n/**\n * @see {@link http://fabricjs.com/patterns demo}\n * @see {@link http://fabricjs.com/dynamic-patterns demo}\n */\nexport class Pattern {\n  static type = 'Pattern';\n\n  /**\n   * Legacy identifier of the class. Prefer using this.constructor.type 'Pattern'\n   * or utils like isPattern, or instance of to indentify a pattern in your code.\n   * Will be removed in future versiones\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    return 'pattern';\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * @type PatternRepeat\n   * @defaults\n   */\n  repeat: PatternRepeat = 'repeat';\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX = 0;\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY = 0;\n\n  /**\n   * @type TCrossOrigin\n   * @default\n   */\n  crossOrigin: TCrossOrigin = '';\n\n  /**\n   * transform matrix to change the pattern, imported from svgs.\n   * @todo verify if using the identity matrix as default makes the rest of the code more easy\n   * @type Array\n   * @default\n   */\n  declare patternTransform?: TMat2D;\n\n  /**\n   * The actual pixel source of the pattern\n   */\n  declare source: CanvasImageSource;\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number\n   */\n  declare readonly id: number;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @param {option.source} [source] the pattern source, eventually empty or a drawable\n   */\n  constructor(options: PatternOptions) {\n    this.id = uid();\n    Object.assign(this, options);\n  }\n\n  /**\n   * @returns true if {@link source} is an <img> element\n   */\n  isImageSource(): this is { source: HTMLImageElement } {\n    return (\n      !!this.source && typeof (this.source as HTMLImageElement).src === 'string'\n    );\n  }\n\n  /**\n   * @returns true if {@link source} is a <canvas> element\n   */\n  isCanvasSource(): this is { source: HTMLCanvasElement } {\n    return !!this.source && !!(this.source as HTMLCanvasElement).toDataURL;\n  }\n\n  sourceToString(): string {\n    return this.isImageSource()\n      ? this.source.src\n      : this.isCanvasSource()\n        ? this.source.toDataURL()\n        : '';\n  }\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasPattern | null {\n    if (\n      // if the image failed to load, return, and allow rest to continue loading\n      !this.source ||\n      // if an image\n      (this.isImageSource() &&\n        (!this.source.complete ||\n          this.source.naturalWidth === 0 ||\n          this.source.naturalHeight === 0))\n    ) {\n      return null;\n    }\n\n    return ctx.createPattern(this.source, this.repeat)!;\n  }\n\n  /**\n   * Returns object representation of a pattern\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object} Object representation of a pattern instance\n   */\n  toObject(propertiesToInclude: string[] = []): Record<string, any> {\n    const { repeat, crossOrigin } = this;\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: 'pattern',\n      source: this.sourceToString(),\n      repeat,\n      crossOrigin,\n      offsetX: toFixed(this.offsetX, config.NUM_FRACTION_DIGITS),\n      offsetY: toFixed(this.offsetY, config.NUM_FRACTION_DIGITS),\n      patternTransform: this.patternTransform\n        ? [...this.patternTransform]\n        : null,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   */\n  toSVG({ width, height }: TSize): string {\n    const { source: patternSource, repeat, id } = this,\n      patternOffsetX = ifNaN(this.offsetX / width, 0),\n      patternOffsetY = ifNaN(this.offsetY / height, 0),\n      patternWidth =\n        repeat === 'repeat-y' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetX || 0)\n          : ifNaN((patternSource as HTMLImageElement).width / width, 0),\n      patternHeight =\n        repeat === 'repeat-x' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetY || 0)\n          : ifNaN((patternSource as HTMLImageElement).height / height, 0);\n\n    return [\n      `<pattern id=\"SVGID_${id}\" x=\"${patternOffsetX}\" y=\"${patternOffsetY}\" width=\"${patternWidth}\" height=\"${patternHeight}\">`,\n      `<image x=\"0\" y=\"0\" width=\"${\n        (patternSource as HTMLImageElement).width\n      }\" height=\"${\n        (patternSource as HTMLImageElement).height\n      }\" xlink:href=\"${this.sourceToString()}\"></image>`,\n      `</pattern>`,\n      '',\n    ].join('\\n');\n  }\n  /* _TO_SVG_END_ */\n\n  static async fromObject(\n    {\n      type,\n      source,\n      patternTransform,\n      ...otherOptions\n    }: SerializedPatternOptions,\n    options?: Abortable,\n  ): Promise<Pattern> {\n    const img = await loadImage(source, {\n      ...options,\n      crossOrigin: otherOptions.crossOrigin,\n    });\n    return new this({\n      ...otherOptions,\n      patternTransform:\n        patternTransform && (patternTransform.slice(0) as TMat2D),\n      source: img,\n    });\n  }\n}\n\nclassRegistry.setClass(Pattern);\n// kept for compatibility reason\nclassRegistry.setClass(Pattern, 'pattern');\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport type { Shadow } from '../Shadow';\nimport type { Canvas } from '../canvas/Canvas';\nimport type { TBrushEventData } from './typedefs';\n\n/**\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nexport abstract class BaseBrush {\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color = 'rgb(0, 0, 0)';\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width = 1;\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type Shadow\n   * @default\n   */\n  shadow: Shadow | null = null;\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: CanvasLineCap = 'round';\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: CanvasLineJoin = 'round';\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit = 10;\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: number[] | null = null;\n\n  /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n   */\n\n  limitedToCanvasSize = false;\n\n  /**\n   * @todo add type\n   */\n  declare canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  abstract _render(): void;\n  abstract onMouseDown(pointer: Point, ev: TBrushEventData): void;\n  abstract onMouseMove(pointer: Point, ev: TBrushEventData): void;\n  /**\n   * @returns true if brush should continue blocking interaction\n   */\n  abstract onMouseUp(ev: TBrushEventData): boolean | void;\n\n  /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.setLineDash(this.strokeDashArray || []);\n  }\n\n  /**\n   * Sets the transformation on given context\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @private\n   */\n  protected _saveAndTransform(ctx: CanvasRenderingContext2D) {\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  }\n\n  protected needsFullRender() {\n    const color = new Color(this.color);\n    return color.getAlpha() < 1 || !!this.shadow;\n  }\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  protected _setShadow() {\n    if (!this.shadow || !this.canvas) {\n      return;\n    }\n\n    const canvas = this.canvas,\n      shadow = this.shadow,\n      ctx = canvas.contextTop,\n      zoom = canvas.getZoom() * canvas.getRetinaScaling();\n\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur = shadow.blur * zoom;\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\n  }\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  protected _resetShadow() {\n    const ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n   */\n  protected _isOutSideCanvas(pointer: Point) {\n    return (\n      pointer.x < 0 ||\n      pointer.x > this.canvas.getWidth() ||\n      pointer.y < 0 ||\n      pointer.y > this.canvas.getHeight()\n    );\n  }\n}\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { toFixed } from '../util/misc/toFixed';\nimport {\n  getBoundsOfCurve,\n  joinPath,\n  makePathSimpler,\n  parsePath,\n} from '../util/path';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type {\n  TComplexPathData,\n  TPathSegmentInfo,\n  TSimplePathData,\n} from '../util/path/typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type {\n  TBBox,\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n} from '../typedefs';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\ninterface UniquePathProps {\n  sourcePath?: string;\n  path?: TSimplePathData;\n}\n\nexport interface SerializedPathProps\n  extends SerializedObjectProps,\n    UniquePathProps {}\n\nexport interface PathProps extends FabricObjectProps, UniquePathProps {}\n\nexport interface IPathBBox extends TBBox {\n  left: number;\n  top: number;\n  pathOffset: Point;\n}\n\nexport class Path<\n  Props extends TOptions<PathProps> = Partial<PathProps>,\n  SProps extends SerializedPathProps = SerializedPathProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Array of path points\n   * @type Array\n   * @default\n   */\n  declare path: TSimplePathData;\n\n  declare pathOffset: Point;\n\n  declare sourcePath?: string;\n\n  declare segmentsInfo?: TPathSegmentInfo[];\n\n  static type = 'Path';\n\n  static cacheProperties = [...cacheProperties, 'path', 'fillRule'];\n\n  /**\n   * Constructor\n   * @param {TComplexPathData} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {Partial<PathProps>} [options] Options object\n   * @return {Path} thisArg\n   */\n  constructor(\n    path: TComplexPathData | string,\n    // todo: evaluate this spread here\n    { path: _, left, top, ...options }: Partial<Props> = {},\n  ) {\n    super();\n    Object.assign(this, Path.ownDefaults);\n    this.setOptions(options);\n    this._setPath(path || [], true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {TComplexPathData | string} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {boolean} [adjustPosition] pass true to reposition the object according to the bounding box\n   * @returns {Point} top left position of the bounding box, useful for complementary positioning\n   */\n  _setPath(path: TComplexPathData | string, adjustPosition?: boolean) {\n    this.path = makePathSimpler(Array.isArray(path) ? path : parsePath(path));\n    this.setBoundingBox(adjustPosition);\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = this._calcBoundsFromPath();\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _renderPathCommands(ctx: CanvasRenderingContext2D) {\n    const l = -this.pathOffset.x,\n      t = -this.pathOffset.y;\n\n    ctx.beginPath();\n\n    for (const command of this.path) {\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          ctx.lineTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'M': // moveTo, absolute\n          ctx.moveTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          ctx.bezierCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n            command[5] + l,\n            command[6] + t,\n          );\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          ctx.quadraticCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n          );\n          break;\n\n        case 'Z':\n          ctx.closePath();\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    this._renderPathCommands(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {string} string representation of an instance\n   */\n  toString() {\n    return `#<Path (${this.complexity()}): { \"top\": ${this.top}, \"left\": ${\n      this.left\n    } }>`;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      path: this.path.map((pathCmd) => pathCmd.slice()),\n    };\n  }\n\n  /**\n   * Returns dataless object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const o = this.toObject<T, K>(propertiesToInclude);\n    if (this.sourcePath) {\n      delete o.path;\n      o.sourcePath = this.sourcePath;\n    }\n    return o;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const path = joinPath(this.path, config.NUM_FRACTION_DIGITS);\n    return [\n      '<path ',\n      'COMMON_PARTS',\n      `d=\"${path}\" stroke-linecap=\"round\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @return the path command's translate transform attribute\n   */\n  _getOffsetTransform() {\n    const digits = config.NUM_FRACTION_DIGITS;\n    return ` translate(${toFixed(-this.pathOffset.x, digits)}, ${toFixed(\n      -this.pathOffset.y,\n      digits,\n    )})`;\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(), {\n        reviver,\n        additionalTransform: additionalTransform,\n      })\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      additionalTransform: additionalTransform,\n    });\n  }\n\n  /**\n   * Returns number representation of an instance complexity\n   * @return {number} complexity of this instance\n   */\n  complexity() {\n    return this.path.length;\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { width, height, pathOffset } = this._calcDimensions();\n    this.set({ width, height, pathOffset });\n    // using pathOffset because it match the use case.\n    // if pathOffset change here we need to use left + width/2 , top + height/2\n    adjustPosition && this.setPositionByOrigin(pathOffset, CENTER, CENTER);\n  }\n\n  _calcBoundsFromPath(): TBBox {\n    const bounds: XY[] = [];\n    let subpathStartX = 0,\n      subpathStartY = 0,\n      x = 0, // current x\n      y = 0; // current y\n\n    for (const command of this.path) {\n      // current instruction\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          x = command[1];\n          y = command[2];\n          bounds.push({ x: subpathStartX, y: subpathStartY }, { x, y });\n          break;\n\n        case 'M': // moveTo, absolute\n          x = command[1];\n          y = command[2];\n          subpathStartX = x;\n          subpathStartY = y;\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n              command[5],\n              command[6],\n            ),\n          );\n          x = command[5];\n          y = command[6];\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n            ),\n          );\n          x = command[3];\n          y = command[4];\n          break;\n\n        case 'Z':\n          x = subpathStartX;\n          y = subpathStartY;\n          break;\n      }\n    }\n    return makeBoundingBoxFromPoints(bounds);\n  }\n\n  /**\n   * @private\n   */\n  _calcDimensions(): IPathBBox {\n    const bbox = this._calcBoundsFromPath();\n\n    return {\n      ...bbox,\n      pathOffset: new Point(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2,\n      ),\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Path.fromElement`)\n   * @static\n   * @memberOf Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'd'];\n\n  /**\n   * Creates an instance of Path from an object\n   * @static\n   * @memberOf Path\n   * @param {Object} object\n   * @returns {Promise<Path>}\n   */\n  static fromObject<T extends TOptions<SerializedPathProps>>(object: T) {\n    return this._fromObject<Path>(object, {\n      extraParam: 'path',\n    });\n  }\n\n  /**\n   * Creates an instance of Path from an SVG <path> element\n   * @static\n   * @memberOf Path\n   * @param {HTMLElement} element to parse\n   * @param {Partial<PathProps>} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement | SVGElement,\n    options?: Partial<PathProps>,\n    cssRules?: CSSRules,\n  ) {\n    const { d, ...parsedAttributes } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return new this(d, {\n      ...parsedAttributes,\n      ...options,\n      // we pass undefined to instruct the constructor to position the object using the bbox\n      left: undefined,\n      top: undefined,\n    });\n  }\n}\n\nclassRegistry.setClass(Path);\nclassRegistry.setSVGClass(Path);\n\n/* _FROM_SVG_START_ */\n","import type { ModifierKey, TEvent } from '../EventTypeDefs';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Path } from '../shapes/Path';\nimport { getSmoothPathFromPoints, joinPath } from '../util/path';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\n/**\n * @private\n * @param {TSimplePathData} pathData SVG path commands\n * @returns {boolean}\n */\nfunction isEmptySVGPath(pathData: TSimplePathData): boolean {\n  return joinPath(pathData) === 'M 0 0 Q 0 0 0 0 L 0 0';\n}\n\nexport class PencilBrush extends BaseBrush {\n  /**\n   * Discard points that are less than `decimate` pixel distant from each other\n   * @type Number\n   * @default 0.4\n   */\n  decimate = 0.4;\n\n  /**\n   * Draws a straight line between last recorded point to current pointer\n   * Used for `shift` functionality\n   *\n   * @type boolean\n   * @default false\n   */\n  drawStraightLine = false;\n\n  /**\n   * The event modifier key that makes the brush draw a straight line.\n   * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n   * @type {ModifierKey | undefined | null}\n   */\n  straightLineKey: ModifierKey | undefined | null = 'shiftKey';\n\n  declare protected _points: Point[];\n  declare protected _hasStraightLine: boolean;\n  declare protected oldEnd?: Point;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this._points = [];\n    this._hasStraightLine = false;\n  }\n\n  needsFullRender() {\n    return super.needsFullRender() || this._hasStraightLine;\n  }\n\n  static drawSegment(ctx: CanvasRenderingContext2D, p1: Point, p2: Point) {\n    const midPoint = p1.midPointFrom(p2);\n    ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n    return midPoint;\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    this._prepareForDrawing(pointer);\n    // capture coordinates immediately\n    // this allows to draw dots (when movement never occurs)\n    this._addPoint(pointer);\n    this._render();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this._addPoint(pointer) && this._points.length > 1) {\n      if (this.needsFullRender()) {\n        // redraw curve\n        // clear top canvas\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._render();\n      } else {\n        const points = this._points,\n          length = points.length,\n          ctx = this.canvas.contextTop;\n        // draw the curve update\n        this._saveAndTransform(ctx);\n        if (this.oldEnd) {\n          ctx.beginPath();\n          ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n        }\n        this.oldEnd = PencilBrush.drawSegment(\n          ctx,\n          points[length - 2],\n          points[length - 1],\n        );\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp({ e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return true;\n    }\n    this.drawStraightLine = false;\n    this.oldEnd = undefined;\n    this._finalizeAndAddPath();\n\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Point} pointer Actual mouse position related to the canvas.\n   */\n  _prepareForDrawing(pointer: Point) {\n    this._reset();\n    this._addPoint(pointer);\n    this.canvas.contextTop.moveTo(pointer.x, pointer.y);\n  }\n\n  /**\n   * @private\n   * @param {Point} point Point to be added to points array\n   */\n  _addPoint(point: Point) {\n    if (\n      this._points.length > 1 &&\n      point.eq(this._points[this._points.length - 1])\n    ) {\n      return false;\n    }\n    if (this.drawStraightLine && this._points.length > 1) {\n      this._hasStraightLine = true;\n      this._points.pop();\n    }\n    this._points.push(point);\n    return true;\n  }\n\n  /**\n   * Clear points array and set contextTop canvas style.\n   * @private\n   */\n  _reset() {\n    this._points = [];\n    this._setBrushStyles(this.canvas.contextTop);\n    this._setShadow();\n    this._hasStraightLine = false;\n  }\n\n  /**\n   * Draw a smooth path on the topCanvas using quadraticCurveTo\n   * @private\n   * @param {CanvasRenderingContext2D} [ctx]\n   */\n  _render(ctx: CanvasRenderingContext2D = this.canvas.contextTop) {\n    let p1 = this._points[0],\n      p2 = this._points[1];\n    this._saveAndTransform(ctx);\n    ctx.beginPath();\n    //if we only have 2 points in the path and they are the same\n    //it means that the user only clicked the canvas without moving the mouse\n    //then we should be drawing a dot. A path isn't drawn between two identical dots\n    //that's why we set them apart a bit\n    if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n      const width = this.width / 1000;\n      p1.x -= width;\n      p2.x += width;\n    }\n    ctx.moveTo(p1.x, p1.y);\n\n    for (let i = 1; i < this._points.length; i++) {\n      // we pick the point between pi + 1 & pi + 2 as the\n      // end point and p1 as our control point.\n      PencilBrush.drawSegment(ctx, p1, p2);\n      p1 = this._points[i];\n      p2 = this._points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * Converts points to SVG path\n   * @param {Point[]} points Array of points\n   * @return {TSimplePathData} SVG path commands\n   */\n  convertPointsToSVGPath(points: Point[]): TSimplePathData {\n    const correction = this.width / 1000;\n    return getSmoothPathFromPoints(points, correction);\n  }\n\n  /**\n   * Creates a Path object to add on canvas\n   * @param {TSimplePathData} pathData Path data\n   * @return {Path} Path to add on canvas\n   */\n  createPath(pathData: TSimplePathData): Path {\n    const path = new Path(pathData, {\n      fill: null,\n      stroke: this.color,\n      strokeWidth: this.width,\n      strokeLineCap: this.strokeLineCap,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeDashArray: this.strokeDashArray,\n    });\n    if (this.shadow) {\n      this.shadow.affectStroke = true;\n      path.shadow = new Shadow(this.shadow);\n    }\n\n    return path;\n  }\n\n  /**\n   * Decimate points array with the decimate value\n   */\n  decimatePoints(points: Point[], distance: number) {\n    if (points.length <= 2) {\n      return points;\n    }\n    let lastPoint = points[0],\n      cDistance;\n    const zoom = this.canvas.getZoom(),\n      adjustedDistance = Math.pow(distance / zoom, 2),\n      l = points.length - 1,\n      newPoints = [lastPoint];\n    // TODO investigate why this is not i < l\n    for (let i = 1; i < l - 1; i++) {\n      cDistance =\n        Math.pow(lastPoint.x - points[i].x, 2) +\n        Math.pow(lastPoint.y - points[i].y, 2);\n      if (cDistance >= adjustedDistance) {\n        lastPoint = points[i];\n        newPoints.push(lastPoint);\n      }\n    }\n    // Add the last point from the original line to the end of the array.\n    // This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n    newPoints.push(points[l]);\n    return newPoints;\n  }\n\n  /**\n   * On mouseup after drawing the path on contextTop canvas\n   * we use the points captured to create an new Path object\n   * and add it to the canvas.\n   */\n  _finalizeAndAddPath() {\n    const ctx = this.canvas.contextTop;\n    ctx.closePath();\n    if (this.decimate) {\n      this._points = this.decimatePoints(this._points, this.decimate);\n    }\n    const pathData = this.convertPointsToSVGPath(this._points);\n    if (isEmptySVGPath(pathData)) {\n      // do not create 0 width/height paths, as they are\n      // rendered inconsistently across browsers\n      // Firefox 4, for example, renders a dot,\n      // whereas Chrome 10 renders nothing\n      this.canvas.requestRenderAll();\n      return;\n    }\n\n    const path = this.createPath(pathData);\n    this.canvas.clearContext(this.canvas.contextTop);\n    this.canvas.fire('before:path:created', { path: path });\n    this.canvas.add(path);\n    this.canvas.requestRenderAll();\n    path.setCoords();\n    this._resetShadow();\n\n    // fire event 'path' created\n    this.canvas.fire('path:created', { path: path });\n  }\n}\n","import type { ObjectEvents } from '../EventTypeDefs';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { cos } from '../util/misc/cos';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { sin } from '../util/misc/sin';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { CSSRules } from '../parser/typedefs';\nimport { SCALE_X, SCALE_Y } from '../constants';\n\ninterface UniqueCircleProps {\n  /**\n   * Radius of this circle\n   * @type Number\n   * @default 0\n   */\n  radius: number;\n\n  /**\n   * Angle for the start of the circle, in degrees.\n   * @type TDegree 0 - 359\n   * @default 0\n   */\n  startAngle: number;\n\n  /**\n   * Angle for the end of the circle, in degrees\n   * @type TDegree 1 - 360\n   * @default 360\n   */\n  endAngle: number;\n\n  /**\n   * Orientation for the direction of the circle.\n   * Setting to true will switch the arc of the circle to traverse from startAngle to endAngle in a counter-clockwise direction.\n   * Note: this will only change how the circle is drawn, and does not affect rotational transformation.\n   * @default false\n   */\n  counterClockwise: boolean;\n}\n\nexport interface SerializedCircleProps\n  extends SerializedObjectProps,\n    UniqueCircleProps {}\n\nexport interface CircleProps extends FabricObjectProps, UniqueCircleProps {}\n\nconst CIRCLE_PROPS = [\n  'radius',\n  'startAngle',\n  'endAngle',\n  'counterClockwise',\n] as const;\n\nexport const circleDefaultValues: Partial<TClassProperties<Circle>> = {\n  radius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  counterClockwise: false,\n};\n\nexport class Circle<\n    Props extends TOptions<CircleProps> = Partial<CircleProps>,\n    SProps extends SerializedCircleProps = SerializedCircleProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueCircleProps\n{\n  declare radius: number;\n  declare startAngle: number;\n  declare endAngle: number;\n  declare counterClockwise: boolean;\n\n  static type = 'Circle';\n\n  static cacheProperties = [...cacheProperties, ...CIRCLE_PROPS];\n\n  static ownDefaults = circleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Circle.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Circle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n\n    if (key === 'radius') {\n      this.setRadius(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(\n      0,\n      0,\n      this.radius,\n      degreesToRadians(this.startAngle),\n      degreesToRadians(this.endAngle),\n      this.counterClockwise,\n    );\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusX(): number {\n    return this.get('radius') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusY(): number {\n    return this.get('radius') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Sets radius of an object (and updates width accordingly)\n   */\n  setRadius(value: number) {\n    this.radius = value;\n    this.set({ width: value * 2, height: value * 2 });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...CIRCLE_PROPS, ...propertiesToInclude]);\n  }\n\n  /* _TO_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    const angle = (this.endAngle - this.startAngle) % 360;\n\n    if (angle === 0) {\n      return [\n        '<circle ',\n        'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'r=\"',\n        `${this.radius}`,\n        '\" />\\n',\n      ];\n    } else {\n      const { radius } = this;\n      const start = degreesToRadians(this.startAngle),\n        end = degreesToRadians(this.endAngle),\n        startX = cos(start) * radius,\n        startY = sin(start) * radius,\n        endX = cos(end) * radius,\n        endY = sin(end) * radius,\n        largeFlag = angle > 180 ? 1 : 0,\n        sweepFlag = this.counterClockwise ? 0 : 1;\n      return [\n        `<path d=\"M ${startX} ${startY} A ${radius} ${radius} 0 ${largeFlag} ${sweepFlag} ${endX} ${endY}\" `,\n        'COMMON_PARTS',\n        ' />\\n',\n      ];\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Circle.fromElement})\n   * @static\n   * @memberOf Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  static ATTRIBUTE_NAMES = ['cx', 'cy', 'r', ...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns {@link Circle} instance from an SVG element\n   * @static\n   * @memberOf Circle\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Partial Circle object to default missing properties on the element.\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ): Promise<Circle> {\n    const {\n      left = 0,\n      top = 0,\n      radius = 0,\n      ...otherParsedAttributes\n    } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    ) as Partial<CircleProps>;\n\n    // this probably requires to be fixed for default origins not being top/left.\n\n    return new this({\n      ...otherParsedAttributes,\n      radius,\n      left: left - radius,\n      top: top - radius,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * @todo how do we declare this??\n   */\n  static fromObject<T extends TOptions<SerializedCircleProps>>(object: T) {\n    return super._fromObject<Circle>(object);\n  }\n}\n\nclassRegistry.setClass(Circle);\nclassRegistry.setSVGClass(Circle);\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Circle } from '../shapes/Circle';\nimport { Group } from '../shapes/Group';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { CircleBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\nexport class CircleBrush extends BaseBrush {\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  declare points: CircleBrushPoint[];\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.points = [];\n  }\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Point} pointer\n   */\n  drawDot(pointer: Point) {\n    const point = this.addPoint(pointer),\n      ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    this.dot(ctx, point);\n    ctx.restore();\n  }\n\n  dot(ctx: CanvasRenderingContext2D, point: CircleBrushPoint) {\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown(pointer: Point) {\n    this.points = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  }\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render() {\n    const ctx = this.canvas.contextTop,\n      points = this.points;\n    this._saveAndTransform(ctx);\n    for (let i = 0; i < points.length; i++) {\n      this.dot(ctx, points[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this.needsFullRender()) {\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.addPoint(pointer);\n      this._render();\n    } else {\n      this.drawDot(pointer);\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const circles: Circle[] = [];\n\n    for (let i = 0; i < this.points.length; i++) {\n      const point = this.points[i],\n        circle = new Circle({\n          radius: point.radius,\n          left: point.x,\n          top: point.y,\n          originX: CENTER,\n          originY: CENTER,\n          fill: point.fill,\n        });\n\n      this.shadow && (circle.shadow = new Shadow(this.shadow));\n\n      circles.push(circle);\n    }\n    const group = new Group(circles, { canvas: this.canvas });\n\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  /**\n   * @param {Object} pointer\n   * @return {Point} Just added pointer point\n   */\n  addPoint({ x, y }: Point) {\n    const pointerPoint: CircleBrushPoint = {\n      x,\n      y,\n      radius: getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2,\n      fill: new Color(this.color).setAlpha(getRandomInt(0, 100) / 100).toRgba(),\n    };\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n}\n","import type { Point } from '../Point';\nimport { Group } from '../shapes/Group';\nimport { Shadow } from '../Shadow';\nimport { Rect } from '../shapes/Rect';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { SprayBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\n/**\n *\n * @param rects\n * @returns\n */\nfunction getUniqueRects(rects: Rect[]) {\n  const uniqueRects: Record<string, boolean> = {};\n  const uniqueRectsArray: Rect[] = [];\n\n  for (let i = 0, key: string; i < rects.length; i++) {\n    key = `${rects[i].left}${rects[i].top}`;\n    if (!uniqueRects[key]) {\n      uniqueRects[key] = true;\n      uniqueRectsArray.push(rects[i]);\n    }\n  }\n\n  return uniqueRectsArray;\n}\n\nexport class SprayBrush extends BaseBrush {\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density = 20;\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth = 1;\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance = 1;\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity = false;\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping = true;\n\n  declare private sprayChunks: SprayBrushPoint[][];\n\n  declare private sprayChunk: SprayBrushPoint[];\n\n  /**\n   * Constructor\n   * @param {Canvas} canvas\n   * @return {SprayBrush} Instance of a spray brush\n   */\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.sprayChunks = [];\n    this.sprayChunk = [];\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point) {\n    this.sprayChunks = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const rects: Rect[] = [];\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      const sprayChunk = this.sprayChunks[i];\n      for (let j = 0; j < sprayChunk.length; j++) {\n        const chunck = sprayChunk[j];\n        const rect = new Rect({\n          width: chunck.width,\n          height: chunck.width,\n          left: chunck.x + 1,\n          top: chunck.y + 1,\n          originX: CENTER,\n          originY: CENTER,\n          fill: this.color,\n        });\n        rects.push(rect);\n      }\n    }\n\n    const group = new Group(\n      this.optimizeOverlapping ? getUniqueRects(rects) : rects,\n      {\n        objectCaching: true,\n        subTargetCheck: false,\n        interactive: false,\n      },\n    );\n    this.shadow && group.set('shadow', new Shadow(this.shadow));\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  renderChunck(sprayChunck: SprayBrushPoint[]) {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < sprayChunck.length; i++) {\n      const point = sprayChunck[i];\n      ctx.globalAlpha = point.opacity;\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Render all spray chunks\n   */\n  _render() {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      this.renderChunck(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @param {Point} pointer\n   */\n  addSprayChunk(pointer: Point) {\n    this.sprayChunk = [];\n    const radius = this.width / 2;\n\n    for (let i = 0; i < this.density; i++) {\n      this.sprayChunk.push({\n        x: getRandomInt(pointer.x - radius, pointer.x + radius),\n        y: getRandomInt(pointer.y - radius, pointer.y + radius),\n        width: this.dotWidthVariance\n          ? getRandomInt(\n              // bottom clamp width to 1\n              Math.max(1, this.dotWidth - this.dotWidthVariance),\n              this.dotWidth + this.dotWidthVariance,\n            )\n          : this.dotWidth,\n        opacity: this.randomOpacity ? getRandomInt(0, 100) / 100 : 1,\n      });\n    }\n\n    this.sprayChunks.push(this.sprayChunk);\n  }\n}\n","import { Pattern } from '../Pattern';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { Canvas } from '../canvas/Canvas';\nimport { PencilBrush } from './PencilBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\nexport class PatternBrush extends PencilBrush {\n  declare source?: CanvasImageSource;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n  }\n\n  getPatternSrc() {\n    const dotWidth = 20,\n      dotDistance = 5,\n      patternCanvas = createCanvasElement(),\n      patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n    if (patternCtx) {\n      patternCtx.fillStyle = this.color;\n      patternCtx.beginPath();\n      patternCtx.arc(\n        dotWidth / 2,\n        dotWidth / 2,\n        dotWidth / 2,\n        0,\n        Math.PI * 2,\n        false,\n      );\n      patternCtx.closePath();\n      patternCtx.fill();\n    }\n    return patternCanvas;\n  }\n\n  /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  getPattern(ctx: CanvasRenderingContext2D) {\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  }\n\n  /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    super._setBrushStyles(ctx);\n    const pattern = this.getPattern(ctx);\n    pattern && (ctx.strokeStyle = pattern);\n  }\n\n  /**\n   * Creates path\n   */\n  createPath(pathData: TSimplePathData) {\n    const path = super.createPath(pathData),\n      topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new Pattern({\n      source: this.source || this.getPatternSrc(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y,\n    });\n    return path;\n  }\n}\n","import { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport { Point } from '../Point';\nimport { isFiller } from '../util/typeAssertions';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { makeBoundingBoxFromPoints } from '../util';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\n// @TODO this code is terrible and Line should be a special case of polyline.\n\nconst coordProps = ['x1', 'x2', 'y1', 'y2'] as const;\n\ninterface UniqueLineProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\nexport interface SerializedLineProps\n  extends SerializedObjectProps,\n    UniqueLineProps {}\n\n/**\n * A Class to draw a line\n * A bunch of methods will be added to Polyline to handle the line case\n * The line class is very strange to work with, is all special, it hardly aligns\n * to what a developer want everytime there is an angle\n * @deprecated\n */\nexport class Line<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedLineProps = SerializedLineProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueLineProps\n{\n  /**\n   * x value or first line edge\n   * @type number\n   * @default\n   */\n  declare x1: number;\n\n  /**\n   * y value or first line edge\n   * @type number\n   * @default\n   */\n  declare y1: number;\n\n  /**\n   * x value or second line edge\n   * @type number\n   * @default\n   */\n  declare x2: number;\n\n  /**\n   * y value or second line edge\n   * @type number\n   * @default\n   */\n  declare y2: number;\n\n  static type = 'Line';\n\n  static cacheProperties = [...cacheProperties, ...coordProps];\n  /**\n   * Constructor\n   * @param {Array} [points] Array of points\n   * @param {Object} [options] Options object\n   * @return {Line} thisArg\n   */\n  constructor([x1, y1, x2, y2] = [0, 0, 0, 0], options: Partial<Props> = {}) {\n    super();\n    Object.assign(this, Line.ownDefaults);\n    this.setOptions(options);\n    this.x1 = x1;\n    this.x2 = x2;\n    this.y1 = y1;\n    this.y2 = y2;\n    this._setWidthHeight();\n    const { left, top } = options;\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {Object} [options] Options\n   */\n  _setWidthHeight() {\n    const { x1, y1, x2, y2 } = this;\n    this.width = Math.abs(x2 - x1);\n    this.height = Math.abs(y2 - y1);\n    const { left, top, width, height } = makeBoundingBoxFromPoints([\n      { x: x1, y: y1 },\n      { x: x2, y: y2 },\n    ]);\n    const position = new Point(left + width / 2, top + height / 2);\n    this.setPositionByOrigin(position, CENTER, CENTER);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    if (coordProps.includes(key as keyof UniqueLineProps)) {\n      // this doesn't make sense very much, since setting x1 when top or left\n      // are already set, is just going to show a strange result since the\n      // line will move way more than the developer expect.\n      // in fabric5 it worked only when the line didn't have extra transformations,\n      // in fabric6 too. With extra transform they behave bad in different ways.\n      // This needs probably a good rework or a tutorial if you have to create a dynamic line\n      this._setWidthHeight();\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n\n    const p = this.calcLinePoints();\n    ctx.moveTo(p.x1, p.y1);\n    ctx.lineTo(p.x2, p.y2);\n\n    ctx.lineWidth = this.strokeWidth;\n\n    // TODO: test this\n    // make sure setting \"fill\" changes color of a line\n    // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n    const origStrokeStyle = ctx.strokeStyle;\n    if (isFiller(this.stroke)) {\n      ctx.strokeStyle = this.stroke.toLive(ctx)!;\n    } else {\n      ctx.strokeStyle = this.stroke ?? ctx.fillStyle;\n    }\n    this.stroke && this._renderStroke(ctx);\n    ctx.strokeStyle = origStrokeStyle;\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    return new Point((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      ...this.calcLinePoints(),\n    };\n  }\n\n  /*\n   * Calculate object dimensions from its properties\n   * @private\n   */\n  _getNonTransformedDimensions(): Point {\n    const dim = super._getNonTransformedDimensions();\n    if (this.strokeLineCap === 'butt') {\n      if (this.width === 0) {\n        dim.y -= this.strokeWidth;\n      }\n      if (this.height === 0) {\n        dim.x -= this.strokeWidth;\n      }\n    }\n    return dim;\n  }\n\n  /**\n   * Recalculates line points given width and height\n   * Those points are simply placed around the center,\n   * This is not useful outside internal render functions and svg output\n   * Is not meant to be for the developer.\n   * @private\n   */\n  calcLinePoints(): UniqueLineProps {\n    const { x1: _x1, x2: _x2, y1: _y1, y2: _y2, width, height } = this;\n    const xMult = _x1 <= _x2 ? -1 : 1,\n      yMult = _y1 <= _y2 ? -1 : 1,\n      x1 = (xMult * width) / 2,\n      y1 = (yMult * height) / 2,\n      x2 = (xMult * -width) / 2,\n      y2 = (yMult * -height) / 2;\n\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { x1, x2, y1, y2 } = this.calcLinePoints();\n    return [\n      '<line ',\n      'COMMON_PARTS',\n      `x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Line.fromElement})\n   * @static\n   * @memberOf Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(coordProps);\n\n  /**\n   * Returns Line instance from an SVG element\n   * @static\n   * @memberOf Line\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      x1 = 0,\n      y1 = 0,\n      x2 = 0,\n      y2 = 0,\n      ...parsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n    return new this([x1, y1, x2, y2], parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Line instance from an object representation\n   * @static\n   * @memberOf Line\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Line>}\n   */\n  static fromObject<T extends TOptions<SerializedLineProps>>({\n    x1,\n    y1,\n    x2,\n    y2,\n    ...object\n  }: T) {\n    return this._fromObject<Line>(\n      {\n        ...object,\n        points: [x1, y1, x2, y2],\n      },\n      {\n        extraParam: 'points',\n      },\n    );\n  }\n}\n\nclassRegistry.setClass(Line);\nclassRegistry.setSVGClass(Line);\n","import { classRegistry } from '../ClassRegistry';\nimport { FabricObject } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { TClassProperties, TOptions } from '../typedefs';\nimport type { ObjectEvents } from '../EventTypeDefs';\n\nexport const triangleDefaultValues: Partial<TClassProperties<Triangle>> = {\n  width: 100,\n  height: 100,\n};\n\nexport class Triangle<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  static type = 'Triangle';\n\n  static ownDefaults = triangleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...Triangle.ownDefaults };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Triangle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(-widthBy2, heightBy2);\n    ctx.lineTo(0, -heightBy2);\n    ctx.lineTo(widthBy2, heightBy2);\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2,\n      points = `${-widthBy2} ${heightBy2},0 ${-heightBy2},${widthBy2} ${heightBy2}`;\n    return ['<polygon ', 'COMMON_PARTS', 'points=\"', points, '\" />'];\n  }\n}\n\nclassRegistry.setClass(Triangle);\nclassRegistry.setSVGClass(Triangle);\n","import { SCALE_X, SCALE_Y, twoMathPi } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const ellipseDefaultValues: Partial<TClassProperties<Ellipse>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueEllipseProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedEllipseProps\n  extends SerializedObjectProps,\n    UniqueEllipseProps {}\n\nexport interface EllipseProps extends FabricObjectProps, UniqueEllipseProps {}\n\nconst ELLIPSE_PROPS = ['rx', 'ry'] as const;\n\nexport class Ellipse<\n    Props extends TOptions<EllipseProps> = Partial<EllipseProps>,\n    SProps extends SerializedEllipseProps = SerializedEllipseProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements EllipseProps\n{\n  /**\n   * Horizontal radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Ellipse';\n\n  static cacheProperties = [...cacheProperties, ...ELLIPSE_PROPS];\n\n  static ownDefaults = ellipseDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Ellipse.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Ellipse.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   * @return {Ellipse} thisArg\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    switch (key) {\n      case 'rx':\n        this.rx = value;\n        this.set('width', value * 2);\n        break;\n\n      case 'ry':\n        this.ry = value;\n        this.set('height', value * 2);\n        break;\n    }\n    return this;\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRx() {\n    return this.get('rx') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns Vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRy() {\n    return this.get('ry') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...ELLIPSE_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    return [\n      '<ellipse ',\n      'COMMON_PARTS',\n      `cx=\"0\" cy=\"0\" rx=\"${this.rx}\" ry=\"${this.ry}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n    ctx.arc(0, 0, this.rx, 0, twoMathPi, false);\n    ctx.restore();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Ellipse.fromElement})\n   * @static\n   * @memberOf Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'cx', 'cy', 'rx', 'ry'];\n\n  /**\n   * Returns {@link Ellipse} instance from an SVG element\n   * @static\n   * @memberOf Ellipse\n   * @param {HTMLElement} element Element to parse\n   * @return {Ellipse}\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    return new this(parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Ellipse);\nclassRegistry.setSVGClass(Ellipse);\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { parsePointsAttribute } from '../parser/parsePointsAttribute';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { calcDimensionsMatrix, transformPoint } from '../util/misc/matrix';\nimport { projectStrokeOnPoints } from '../util/misc/projectStroke';\nimport type { TProjectStrokeOnPointsOptions } from '../util/misc/projectStroke/types';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport {\n  CENTER,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const polylineDefaultValues: Partial<TClassProperties<Polyline>> = {\n  /**\n   * @deprecated transient option soon to be removed in favor of a different design\n   */\n  exactBoundingBox: false,\n};\n\nexport interface SerializedPolylineProps extends SerializedObjectProps {\n  points: XY[];\n}\n\nexport class Polyline<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedPolylineProps = SerializedPolylineProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Points array\n   * @type Array\n   * @default\n   */\n  declare points: XY[];\n\n  /**\n   * WARNING: Feature in progress\n   * Calculate the exact bounding box taking in account strokeWidth on acute angles\n   * this will be turned to true by default on fabric 6.0\n   * maybe will be left in as an optimization since calculations may be slow\n   * @deprecated transient option soon to be removed in favor of a different design\n   * @type Boolean\n   * @default false\n   */\n  declare exactBoundingBox: boolean;\n\n  declare private initialized: true | undefined;\n\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polyline';\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Polyline.ownDefaults,\n    };\n  }\n\n  /**\n   * A list of properties that if changed trigger a recalculation of dimensions\n   * @todo check if you really need to recalculate for all cases\n   */\n  static layoutProperties: (keyof Polyline)[] = [\n    SKEW_X,\n    SKEW_Y,\n    'strokeLineCap',\n    'strokeLineJoin',\n    'strokeMiterLimit',\n    'strokeWidth',\n    'strokeUniform',\n    'points',\n  ];\n\n  declare pathOffset: Point;\n\n  declare strokeOffset: Point;\n\n  static cacheProperties = [...cacheProperties, 'points'];\n\n  strokeDiff: Point;\n\n  /**\n   * Constructor\n   * @param {Array} points Array of points (where each point is an object with x and y)\n   * @param {Object} [options] Options object\n   * @return {Polyline} thisArg\n   * @example\n   * var poly = new Polyline([\n   *     { x: 10, y: 10 },\n   *     { x: 50, y: 30 },\n   *     { x: 40, y: 70 },\n   *     { x: 60, y: 50 },\n   *     { x: 100, y: 150 },\n   *     { x: 40, y: 100 }\n   *   ], {\n   *   stroke: 'red',\n   *   left: 100,\n   *   top: 100\n   * });\n   */\n  constructor(points: XY[] = [], options: Props = {} as Props) {\n    super();\n    Object.assign(this, Polyline.ownDefaults);\n    this.setOptions(options);\n    this.points = points;\n    const { left, top } = options;\n    this.initialized = true;\n    this.setBoundingBox(true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  protected isOpen() {\n    return true;\n  }\n\n  private _projectStrokeOnPoints(options: TProjectStrokeOnPointsOptions) {\n    return projectStrokeOnPoints(this.points, options, this.isOpen());\n  }\n\n  /**\n   * Calculate the polygon bounding box\n   * @private\n   */\n  _calcDimensions(options?: Partial<TProjectStrokeOnPointsOptions>) {\n    options = {\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      strokeLineCap: this.strokeLineCap,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeUniform: this.strokeUniform,\n      strokeWidth: this.strokeWidth,\n      ...(options || {}),\n    };\n    const points = this.exactBoundingBox\n      ? this._projectStrokeOnPoints(\n          options as TProjectStrokeOnPointsOptions,\n        ).map((projection) => projection.projectedPoint)\n      : this.points;\n    if (points.length === 0) {\n      return {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        pathOffset: new Point(),\n        strokeOffset: new Point(),\n        strokeDiff: new Point(),\n      };\n    }\n    const bbox = makeBoundingBoxFromPoints(points),\n      // Remove scale effect, since it's applied after\n      matrix = calcDimensionsMatrix({ ...options, scaleX: 1, scaleY: 1 }),\n      bboxNoStroke = makeBoundingBoxFromPoints(\n        this.points.map((p) => transformPoint(p, matrix, true)),\n      ),\n      scale = new Point(this.scaleX, this.scaleY);\n    let offsetX = bbox.left + bbox.width / 2,\n      offsetY = bbox.top + bbox.height / 2;\n    if (this.exactBoundingBox) {\n      offsetX = offsetX - offsetY * Math.tan(degreesToRadians(this.skewX));\n      // Order of those assignments is important.\n      // offsetY relies on offsetX being already changed by the line above\n      offsetY = offsetY - offsetX * Math.tan(degreesToRadians(this.skewY));\n    }\n\n    return {\n      ...bbox,\n      pathOffset: new Point(offsetX, offsetY),\n      strokeOffset: new Point(bboxNoStroke.left, bboxNoStroke.top)\n        .subtract(new Point(bbox.left, bbox.top))\n        .multiply(scale),\n      strokeDiff: new Point(bbox.width, bbox.height)\n        .subtract(new Point(bboxNoStroke.width, bboxNoStroke.height))\n        .multiply(scale),\n    };\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = makeBoundingBoxFromPoints(this.points);\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { left, top, width, height, pathOffset, strokeOffset, strokeDiff } =\n      this._calcDimensions();\n    this.set({ width, height, pathOffset, strokeOffset, strokeDiff });\n    adjustPosition &&\n      this.setPositionByOrigin(\n        new Point(left + width / 2, top + height / 2),\n        CENTER,\n        CENTER,\n      );\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return this.exactBoundingBox;\n  }\n\n  /**\n   * @override stroke is taken in account in size\n   */\n  _getNonTransformedDimensions() {\n    return this.exactBoundingBox\n      ? // TODO: fix this\n        new Point(this.width, this.height)\n      : super._getNonTransformedDimensions();\n  }\n\n  /**\n   * @override stroke and skewing are taken into account when projecting stroke on points,\n   * therefore we don't want the default calculation to account for skewing as well.\n   * Though it is possible to pass `width` and `height` in `options`, doing so is very strange, use with discretion.\n   *\n   * @private\n   */\n  _getTransformedDimensions(options: any = {}) {\n    if (this.exactBoundingBox) {\n      let size: Point;\n      /* When `strokeUniform = true`, any changes to the properties require recalculating the `width` and `height` because\n        the stroke projections are affected.\n        When `strokeUniform = false`, we don't need to recalculate for scale transformations, as the effect of scale on\n        projections follows a linear function (e.g. scaleX of 2 just multiply width by 2)*/\n      if (\n        Object.keys(options).some(\n          (key) =>\n            this.strokeUniform ||\n            (this.constructor as typeof Polyline).layoutProperties.includes(\n              key as keyof TProjectStrokeOnPointsOptions,\n            ),\n        )\n      ) {\n        const { width, height } = this._calcDimensions(options);\n        size = new Point(options.width ?? width, options.height ?? height);\n      } else {\n        size = new Point(\n          options.width ?? this.width,\n          options.height ?? this.height,\n        );\n      }\n      return size.multiply(\n        new Point(options.scaleX || this.scaleX, options.scaleY || this.scaleY),\n      );\n    } else {\n      return super._getTransformedDimensions(options);\n    }\n  }\n\n  /**\n   * Recalculates dimensions when changing skew and scale\n   * @private\n   */\n  _set(key: string, value: any) {\n    const changed = this.initialized && this[key as keyof this] !== value;\n    const output = super._set(key, value);\n    if (\n      this.exactBoundingBox &&\n      changed &&\n      (((key === SCALE_X || key === SCALE_Y) &&\n        this.strokeUniform &&\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          'strokeUniform',\n        )) ||\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          key as keyof Polyline,\n        ))\n    ) {\n      this.setDimensions();\n    }\n    return output;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      points: this.points.map(({ x, y }) => ({ x, y })),\n    };\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const points = [],\n      diffX = this.pathOffset.x,\n      diffY = this.pathOffset.y,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n\n    for (let i = 0, len = this.points.length; i < len; i++) {\n      points.push(\n        toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS),\n        ',',\n        toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS),\n        ' ',\n      );\n    }\n    return [\n      `<${\n        (this.constructor as typeof Polyline).type.toLowerCase() as\n          | 'polyline'\n          | 'polygon'\n      } `,\n      'COMMON_PARTS',\n      `points=\"${points.join('')}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const len = this.points.length,\n      x = this.pathOffset.x,\n      y = this.pathOffset.y;\n\n    if (!len || isNaN(this.points[len - 1].y)) {\n      // do not draw if no points or odd points\n      // NaN comes from parseFloat of a empty string in parser\n      return;\n    }\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n    for (let i = 0; i < len; i++) {\n      const point = this.points[i];\n      ctx.lineTo(point.x - x, point.y - y);\n    }\n    !this.isOpen() && ctx.closePath();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance\n   */\n  complexity(): number {\n    return this.points.length;\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Polyline.fromElement})\n   * @static\n   * @memberOf Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns Polyline instance from an SVG element\n   * @static\n   * @memberOf Polyline\n   * @param {HTMLElement} element Element to parser\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement | SVGElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const points = parsePointsAttribute(element.getAttribute('points')),\n      // we omit left and top to instruct the constructor to position the object using the bbox\n\n      { left, top, ...parsedAttributes } = parseAttributes(\n        element,\n        this.ATTRIBUTE_NAMES,\n        cssRules,\n      );\n    return new this(points, {\n      ...parsedAttributes,\n      ...options,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Polyline instance from an object representation\n   * @static\n   * @memberOf Polyline\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Polyline>}\n   */\n  static fromObject<T extends TOptions<SerializedPolylineProps>>(object: T) {\n    return this._fromObject<Polyline>(object, {\n      extraParam: 'points',\n    });\n  }\n}\n\nclassRegistry.setClass(Polyline);\nclassRegistry.setSVGClass(Polyline);\n","import type { XY } from '../Point';\n\n/**\n * Parses \"points\" attribute, returning an array of values\n * @static\n * @memberOf fabric\n * @param {String} points points attribute string\n * @return {Array} array of points\n */\nexport function parsePointsAttribute(points: string | null): XY[] {\n  // points attribute is required and must not be empty\n  if (!points) {\n    return [];\n  }\n\n  // replace commas with whitespace and remove bookending whitespace\n  const pointsSplit: string[] = points.replace(/,/g, ' ').trim().split(/\\s+/);\n\n  const parsedPoints = [];\n\n  for (let i = 0; i < pointsSplit.length; i += 2) {\n    parsedPoints.push({\n      x: parseFloat(pointsSplit[i]),\n      y: parseFloat(pointsSplit[i + 1]),\n    });\n  }\n\n  // odd number of points is an error\n  // if (parsedPoints.length % 2 !== 0) {\n  //   return null;\n  // }\n  return parsedPoints;\n}\n","import { classRegistry } from '../ClassRegistry';\nimport { Polyline, polylineDefaultValues } from './Polyline';\n\nexport class Polygon extends Polyline {\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polygon';\n\n  protected isOpen() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Polygon);\nclassRegistry.setSVGClass(Polygon);\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { TOptions } from '../../typedefs';\nimport { FabricObject } from '../Object/FabricObject';\nimport { styleProperties } from './constants';\nimport type { StylePropertiesType } from './constants';\nimport type { FabricText } from './Text';\nimport { pick } from '../../util';\nimport { pickBy } from '../../util/misc/pick';\n\nexport type CompleteTextStyleDeclaration = Pick<\n  FabricText,\n  StylePropertiesType\n>;\n\nexport type TextStyleDeclaration = Partial<CompleteTextStyleDeclaration>;\n\nexport type TextStyle = {\n  [line: number | string]: { [char: number | string]: TextStyleDeclaration };\n};\n\nexport abstract class StyledText<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  declare abstract styles: TextStyle;\n  declare protected abstract _textLines: string[][];\n  declare protected _forceClearCache: boolean;\n  static _styleProperties: Readonly<StylePropertiesType[]> = styleProperties;\n  abstract get2DCursorLocation(\n    selectionStart: number,\n    skipWrapping?: boolean,\n  ): { charIndex: number; lineIndex: number };\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex?: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return true;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        // eslint-disable-next-line no-unused-vars\n        for (const p3 in obj[p1][p2]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if object has a style property or has it ina specified line\n   * This function is used to detect if a text will use a particular property or not.\n   * @param {String} property to check for\n   * @param {Number} lineIndex to check the style on\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex?: number): boolean {\n    if (!this.styles) {\n      return false;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return false;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { 0: this.styles[lineIndex] };\n    // eslint-disable-next-line\n    for (const p1 in obj) {\n      // eslint-disable-next-line\n      for (const p2 in obj[p1]) {\n        if (typeof obj[p1][p2][property] !== 'undefined') {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if characters in a text have a value for a property\n   * whose value matches the textbox's value for that property.  If so,\n   * the character-level property is deleted.  If the character\n   * has no other properties, then it is also deleted.  Finally,\n   * if the line containing that character has no other characters\n   * then it also is deleted.\n   */\n  cleanStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return false;\n    }\n    const obj = this.styles;\n    let stylesCount = 0,\n      letterCount,\n      stylePropertyValue,\n      allStyleObjectPropertiesMatch = true,\n      graphemeCount = 0;\n    for (const p1 in obj) {\n      letterCount = 0;\n      for (const p2 in obj[p1]) {\n        const styleObject = obj[p1][p2] || {},\n          stylePropertyHasBeenSet = styleObject[property] !== undefined;\n\n        stylesCount++;\n\n        if (stylePropertyHasBeenSet) {\n          if (!stylePropertyValue) {\n            stylePropertyValue = styleObject[property];\n          } else if (styleObject[property] !== stylePropertyValue) {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (styleObject[property] === this[property as keyof this]) {\n            delete styleObject[property];\n          }\n        } else {\n          allStyleObjectPropertiesMatch = false;\n        }\n\n        if (Object.keys(styleObject).length !== 0) {\n          letterCount++;\n        } else {\n          delete obj[p1][p2];\n        }\n      }\n\n      if (letterCount === 0) {\n        delete obj[p1];\n      }\n    }\n    // if every grapheme has the same style set then\n    // delete those styles and set it on the parent\n    for (let i = 0; i < this._textLines.length; i++) {\n      graphemeCount += this._textLines[i].length;\n    }\n    if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n      this[property as keyof this] = stylePropertyValue as any;\n      this.removeStyle(property);\n    }\n  }\n\n  /**\n   * Remove a style property or properties from all individual character styles\n   * in a text object.  Deletes the character style object if it contains no other style\n   * props.  Deletes a line style object if it contains no other character styles.\n   *\n   * @param {String} props The property to remove from character styles.\n   */\n  removeStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return;\n    }\n    const obj = this.styles;\n    let line, lineNum, charNum;\n    for (lineNum in obj) {\n      line = obj[lineNum];\n      for (charNum in line) {\n        delete line[charNum][property];\n        if (Object.keys(line[charNum]).length === 0) {\n          delete line[charNum];\n        }\n      }\n      if (Object.keys(line).length === 0) {\n        delete obj[lineNum];\n      }\n    }\n  }\n\n  private _extendStyles(index: number, style: TextStyleDeclaration): void {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(index);\n\n    if (!this._getLineStyle(lineIndex)) {\n      this._setLineStyle(lineIndex);\n    }\n\n    const newStyle = pickBy(\n      {\n        // first create a new object that is a merge of existing and new\n        ...this._getStyleDeclaration(lineIndex, charIndex),\n        ...style,\n        // use the predicate to discard undefined values\n      },\n      (value) => value !== undefined,\n    );\n\n    // finally assign to the old position the new style\n    this._setStyleDeclaration(lineIndex, charIndex, newStyle);\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number,\n    endIndex?: number,\n    complete?: boolean,\n  ): TextStyleDeclaration[] {\n    const styles: TextStyleDeclaration[] = [];\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      styles.push(this.getStyleAtPosition(i, complete));\n    }\n    return styles;\n  }\n\n  /**\n   * Gets style of a current selection/cursor position\n   * @param {Number} position  to get styles at\n   * @param {Boolean} [complete] full style if true\n   * @return {Object} style Style object at a specified index\n   * @private\n   */\n  getStyleAtPosition(position: number, complete?: boolean) {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(position);\n    return complete\n      ? this.getCompleteStyleDeclaration(lineIndex, charIndex)\n      : this._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} styles Styles object\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified startIndex + 1\n   */\n  setSelectionStyles(styles: object, startIndex: number, endIndex?: number) {\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      this._extendStyles(i, styles);\n    }\n    /* not included in _extendStyles to avoid clearing cache more than once */\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Get a reference, not a clone, to the style object for a given character,\n   * if no style is set for a line or char, return a new empty object.\n   * This is tricky and confusing because when you get an empty object you can't\n   * determine if it is a reference or a new one.\n   * @TODO this should always return a reference or always a clone or undefined when necessary.\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    const lineStyle = this.styles && this.styles[lineIndex];\n    return lineStyle ? (lineStyle[charIndex] ?? {}) : {};\n  }\n\n  /**\n   * return a new object that contains all the style property for a character\n   * the object returned is newly created\n   * @param {Number} lineIndex of the line where the character is\n   * @param {Number} charIndex position of the character on the line\n   * @return {Object} style object\n   */\n  getCompleteStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): CompleteTextStyleDeclaration {\n    return {\n      ...pick(\n        this,\n        (this.constructor as typeof StyledText)\n          ._styleProperties as (keyof this)[],\n      ),\n      ...this._getStyleDeclaration(lineIndex, charIndex),\n    } as CompleteTextStyleDeclaration;\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    this.styles[lineIndex][charIndex] = style;\n  }\n\n  /**\n   *\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    delete this.styles[lineIndex][charIndex];\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @return {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    return !!this.styles[lineIndex];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    this.styles[lineIndex] = {};\n  }\n\n  protected _deleteLineStyle(lineIndex: number) {\n    delete this.styles[lineIndex];\n  }\n}\n","import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText, GraphemeBBox } from './Text';\nimport { STROKE, FILL } from '../../constants';\nimport { createRotateMatrix } from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport { Point } from '../../Point';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver?: TSVGReviver): string {\n    const textSvg = this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      noStyle: true,\n      withShadow: true,\n    });\n    return textSvg;\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    },\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n\n    return [textSpans.join('')];\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `,\n      `font-size=\"${this.fontSize}\" `,\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number,\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height,\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number,\n    charBox: GraphemeBBox,\n  ) {\n    const numFractionDigit = config.NUM_FRACTION_DIGITS,\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, numFractionDigit)}\" ` : '',\n      { angle, renderLeft, renderTop, width } = charBox;\n    let angleAttr = '';\n    if (renderLeft !== undefined) {\n      const wBy2 = width / 2;\n      angle &&\n        (angleAttr = ` rotate=\"${toFixed(radiansToDegrees(angle), numFractionDigit)}\"`);\n      const m = createRotateMatrix({ angle: radiansToDegrees(angle!) });\n      m[4] = renderLeft!;\n      m[5] = renderTop!;\n      const renderPoint = new Point(-wBy2, 0).transform(m);\n      left = renderPoint.x;\n      top = renderPoint.y;\n    }\n\n    const value = char;\n    const path = (this as any).font.getPath(value, 0, 0, this.fontSize, {\n      kerning: true,\n      features: {\n        liga: true,\n      },\n    });\n    const pathData = path.toPathData(2);\n\n    const style = this.getSvgStyles(true);\n\n    return `<path style=\"${style}\" vector-effect=\"non-scaling-stroke\" transform=\"translate(${toFixed(\n      left,\n      numFractionDigit,\n    )}, ${toFixed(top, numFractionDigit)})\" d=\"${pathData}\" ${dySpan} ${angleAttr}></path>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || this.path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing or a path, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset,\n            charBox,\n          ),\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number,\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine,\n            ),\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine,\n        ),\n      );\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    return `${super.getSvgStyles(skipShadow)} text-decoration-thickness: ${toFixed((this.textDecorationThickness * this.getObjectScaling().y) / 10, config.NUM_FRACTION_DIGITS)}%; white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean,\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n      textDecorationThickness,\n      linethrough,\n      overline,\n      underline,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration({\n      underline: underline ?? this.underline,\n      overline: overline ?? this.overline,\n      linethrough: linethrough ?? this.linethrough,\n    });\n    const thickness = textDecorationThickness || this.textDecorationThickness;\n    return [\n      stroke ? colorPropToSVG(STROKE, stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration\n        ? `text-decoration: ${textDecoration}; text-decoration-thickness: ${toFixed((thickness * this.getObjectScaling().y) / 10, config.NUM_FRACTION_DIGITS)}%; `\n        : '',\n      fill ? colorPropToSVG(FILL, fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ],\n      )\n      .join(' ');\n  }\n}\n","import { cache } from '../../cache';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, STROKE } from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type {\n  CompleteTextStyleDeclaration,\n  TextStyle,\n  TextStyleDeclaration,\n} from './StyledText';\nimport { StyledText } from './StyledText';\nimport { SHARED_ATTRIBUTES } from '../../parser/attributes';\nimport { parseAttributes } from '../../parser/parseAttributes';\nimport type {\n  Abortable,\n  TCacheCanvasDimensions,\n  TClassProperties,\n  TFiller,\n  TOptions,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { graphemeSplit } from '../../util/lang_string';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport type { TextStyleArray } from '../../util/misc/textStyles';\nimport {\n  hasStyleChanged,\n  stylesFromArray,\n  stylesToArray,\n} from '../../util/misc/textStyles';\nimport { getPathSegmentsInfo, getPointOnPath } from '../../util/path';\nimport { cacheProperties } from '../Object/FabricObject';\nimport type { Path } from '../Path';\nimport { TextSVGExportMixin } from './TextSVGExportMixin';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { StylePropertiesType } from './constants';\nimport {\n  additionalProps,\n  textDefaultValues,\n  textLayoutProperties,\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n  TEXT_DECORATION_THICKNESS,\n} from './constants';\nimport { CENTER, LEFT, RIGHT, TOP, BOTTOM } from '../../constants';\nimport { isFiller } from '../../util/typeAssertions';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { CSSRules } from '../../parser/typedefs';\n\nlet measuringContext: CanvasRenderingContext2D | null;\n\n/**\n * Return a context for measurement of text string.\n * if created it gets stored for reuse\n */\nexport function getMeasuringContext() {\n  if (!measuringContext) {\n    const canvas = createCanvasElementFor({\n      width: 0,\n      height: 0,\n    });\n    measuringContext = canvas.getContext('2d');\n  }\n  return measuringContext;\n}\n\nexport type TPathSide = 'left' | 'right';\n\nexport type TPathAlign = 'baseline' | 'center' | 'ascender' | 'descender';\n\nexport type TextLinesInfo = {\n  lines: string[];\n  graphemeLines: string[][];\n  graphemeText: string[];\n  _unwrappedLines: string[][];\n};\n\n/**\n * Measure and return the info of a single grapheme.\n * needs the the info of previous graphemes already filled\n * Override to customize measuring\n */\nexport type GraphemeBBox = {\n  width: number;\n  height: number;\n  kernedWidth: number;\n  left: number;\n  deltaY: number;\n  renderLeft?: number;\n  renderTop?: number;\n  angle?: number;\n};\n\n// @TODO this is not complete\ninterface UniqueTextProps {\n  charSpacing: number;\n  lineHeight: number;\n  fontSize: number;\n  fontWeight: string | number;\n  fontFamily: string;\n  fontStyle: string;\n  pathSide: TPathSide;\n  pathAlign: TPathAlign;\n  underline: boolean;\n  overline: boolean;\n  linethrough: boolean;\n  textAlign: string;\n  direction: CanvasDirection;\n  path?: Path;\n  textDecorationThickness: number;\n}\n\nexport interface SerializedTextProps\n  extends SerializedObjectProps,\n    UniqueTextProps {\n  styles: TextStyleArray | TextStyle;\n}\n\nexport interface TextProps extends FabricObjectProps, UniqueTextProps {\n  styles: TextStyle;\n}\n\n/**\n * Text class\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n */\nexport class FabricText<\n    Props extends TOptions<TextProps> = Partial<TextProps>,\n    SProps extends SerializedTextProps = SerializedTextProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends StyledText<Props, SProps, EventSpec>\n  implements UniqueTextProps\n{\n  /**\n   * Properties that requires a text layout recalculation when changed\n   * @type string[]\n   * @protected\n   */\n  static textLayoutProperties: string[] = textLayoutProperties;\n\n  /**\n   * @private\n   */\n  declare _reNewline: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespaces that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpacesAndTabs: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespace that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpaceAndTab: RegExp;\n\n  /**\n   * Use this regular expression to filter consecutive groups of non spaces.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reWords: RegExp;\n\n  declare text: string;\n\n  /**\n   * Font size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare fontSize: number;\n\n  /**\n   * Font weight (e.g. bold, normal, 400, 600, 800)\n   * @type {(Number|String)}\n   * @default\n   */\n  declare fontWeight: string | number;\n\n  /**\n   * Font family\n   * @type String\n   * @default\n   */\n  declare fontFamily: string;\n\n  /**\n   * Text decoration underline.\n   * @type Boolean\n   * @default\n   */\n  declare underline: boolean;\n\n  /**\n   * Text decoration overline.\n   * @type Boolean\n   * @default\n   */\n  declare overline: boolean;\n\n  /**\n   * Text decoration linethrough.\n   * @type Boolean\n   * @default\n   */\n  declare linethrough: boolean;\n\n  /**\n   * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n   * \"justify-left\", \"justify-center\" or \"justify-right\".\n   * @type String\n   * @default\n   */\n  declare textAlign: string;\n\n  /**\n   * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n   * @type String\n   * @default\n   */\n  declare fontStyle: string;\n\n  /**\n   * Line height\n   * @type Number\n   * @default\n   */\n  declare lineHeight: number;\n\n  /**\n   * Superscript schema object (minimum overlap)\n   */\n  declare superscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (upwards)\n     * @default -0.35\n     */\n    baseline: number;\n  };\n\n  /**\n   * Subscript schema object (minimum overlap)\n   */\n  declare subscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (downwards)\n     * @default 0.11\n     */\n    baseline: number;\n  };\n\n  /**\n   * Background color of text lines\n   * @type String\n   * @default\n   */\n  declare textBackgroundColor: string;\n\n  declare styles: TextStyle;\n\n  /**\n   * Path that the text should follow.\n   * since 4.6.0 the path will be drawn automatically.\n   * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n   * if you want it to be hidden, assign visible = false to the path.\n   * This feature is in BETA, and SVG import/export is not yet supported.\n   * @type Path\n   * @example\n   * const textPath = new Text('Text on a path', {\n   *     top: 150,\n   *     left: 150,\n   *     textAlign: 'center',\n   *     charSpacing: -50,\n   *     path: new Path('M 0 0 C 50 -100 150 -100 200 0', {\n   *         strokeWidth: 1,\n   *         visible: false\n   *     }),\n   *     pathSide: 'left',\n   *     pathStartOffset: 0\n   * });\n   * @default\n   */\n  declare path?: Path;\n\n  /**\n   * The text decoration tickness for underline, overline and strikethrough\n   * The tickness is expressed in thousandths of fontSize ( em ).\n   * The original value was 1/15 that translates to 66.6667 thousandths.\n   * The choice of unit of measure is to align with charSpacing.\n   * You can slim the tickness without issues, while large underline or overline may end up\n   * outside the bounding box of the text. In order to fix that a bigger refactor of the code\n   * is needed and is out of scope for now. If you need such large overline on the first line\n   * of text or large underline on the last line of text, consider disabling caching as a\n   * workaround\n   * @default 66.667\n   */\n  declare textDecorationThickness: number;\n\n  /**\n   * Offset amount for text path starting position\n   * Only used when text has a path\n   * @default\n   */\n  declare pathStartOffset: number;\n\n  /**\n   * Which side of the path the text should be drawn on.\n   * Only used when text has a path\n   * @type {TPathSide} 'left|right'\n   * @default\n   */\n  declare pathSide: TPathSide;\n\n  /**\n   * How text is aligned to the path. This property determines\n   * the perpendicular position of each character relative to the path.\n   * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n   * This feature is in BETA, and its behavior may change\n   * @type TPathAlign\n   * @default\n   */\n  declare pathAlign: TPathAlign;\n\n  /**\n   * @private\n   */\n  declare _fontSizeFraction: number;\n\n  /**\n   * @private\n   */\n  declare offsets: { underline: number; linethrough: number; overline: number };\n\n  /**\n   * Text Line proportion to font Size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare _fontSizeMult: number;\n\n  /**\n   * additional space between characters\n   * expressed in thousands of em unit\n   * @type Number\n   * @default\n   */\n  declare charSpacing: number;\n\n  /**\n   * Baseline shift, styles only, keep at 0 for the main text object\n   * @type {Number}\n   * @default\n   */\n  declare deltaY: number;\n\n  /**\n   * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n   * determine the direction of the text.\n   * This has to be set manually together with textAlign and originX for proper\n   * experience.\n   * some interesting link for the future\n   * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n   * @since 4.5.0\n   * @type {CanvasDirection} 'ltr|rtl'\n   * @default\n   */\n  declare direction: CanvasDirection;\n\n  /**\n   * contains characters bounding boxes\n   * This variable is considered to be protected.\n   * But for how mixins are implemented right now, we can't leave it private\n   * @protected\n   */\n  __charBounds: GraphemeBBox[][] = [];\n\n  /**\n   * use this size when measuring text. To avoid IE11 rounding errors\n   * @type {Number}\n   * @default\n   * @readonly\n   * @private\n   */\n  declare CACHE_FONT_SIZE: number;\n\n  /**\n   * contains the min text width to avoid getting 0\n   * @type {Number}\n   * @default\n   */\n  declare MIN_TEXT_WIDTH: number;\n\n  /**\n   * contains the the text of the object, divided in lines as they are displayed\n   * on screen. Wrapping will divide the text independently of line breaks\n   * @type {string[]}\n   * @default\n   */\n  declare textLines: string[];\n\n  /**\n   * same as textlines, but each line is an array of graphemes as split by splitByGrapheme\n   * @type {string[]}\n   * @default\n   */\n  declare _textLines: string[][];\n\n  declare _unwrappedTextLines: string[][];\n  declare _text: string[];\n  declare cursorWidth: number;\n  declare __lineHeights: number[];\n  declare __lineWidths: number[];\n  declare initialized?: true;\n\n  static cacheProperties = [...cacheProperties, ...additionalProps];\n\n  static ownDefaults = textDefaultValues;\n\n  static type = 'Text';\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...FabricText.ownDefaults };\n  }\n\n  constructor(text: string, options?: Props) {\n    super();\n    Object.assign(this, FabricText.ownDefaults);\n    this.setOptions(options);\n    if (!this.styles) {\n      this.styles = {};\n    }\n    this.text = text;\n    this.initialized = true;\n    if (this.path) {\n      this.setPathInfo();\n    }\n    this.initDimensions();\n    this.setCoords();\n  }\n\n  /**\n   * If text has a path, it will add the extra information needed\n   * for path and text calculations\n   */\n  setPathInfo() {\n    const path = this.path;\n    if (path) {\n      path.segmentsInfo = getPathSegmentsInfo(path.path);\n    }\n  }\n\n  /**\n   * @private\n   * Divides text into lines of text and lines of graphemes.\n   */\n  _splitText(): TextLinesInfo {\n    const newLines = this._splitTextIntoLines(this.text);\n    this.textLines = newLines.lines;\n    this._textLines = newLines.graphemeLines;\n    this._unwrappedTextLines = newLines._unwrappedLines;\n    this._text = newLines.graphemeText;\n    return newLines;\n  }\n\n  /**\n   * Initialize or update text dimensions.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   */\n  initDimensions() {\n    this._splitText();\n    this._clearCache();\n    this.dirty = true;\n    if (this.path) {\n      this.width = this.path.width;\n      this.height = this.path.height;\n    } else {\n      this.width =\n        this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      this.height = this.calcTextHeight();\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n  }\n\n  /**\n   * Enlarge space boxes and shift the others\n   */\n  enlargeSpaces() {\n    let diffSpace,\n      currentLineWidth,\n      numberOfSpaces,\n      accumulatedSpace,\n      line,\n      charBound,\n      spaces;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      if (\n        this.textAlign !== JUSTIFY &&\n        (i === len - 1 || this.isEndOfWrapping(i))\n      ) {\n        continue;\n      }\n      accumulatedSpace = 0;\n      line = this._textLines[i];\n      currentLineWidth = this.getLineWidth(i);\n      if (\n        currentLineWidth < this.width &&\n        (spaces = this.textLines[i].match(this._reSpacesAndTabs))\n      ) {\n        numberOfSpaces = spaces.length;\n        diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n        for (let j = 0; j <= line.length; j++) {\n          charBound = this.__charBounds[i][j];\n          if (this._reSpaceAndTab.test(line[j])) {\n            charBound.width += diffSpace;\n            charBound.kernedWidth += diffSpace;\n            charBound.left += accumulatedSpace;\n            accumulatedSpace += diffSpace;\n          } else {\n            charBound.left += accumulatedSpace;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    return lineIndex === this._textLines.length - 1;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * It return always 1 for text and Itext. Textbox has its own implementation\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1;\n  missingNewlineOffset(_lineIndex: number): 1 {\n    return 1;\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor\n   * @param {Number} selectionStart\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(selectionStart: number, skipWrapping?: boolean) {\n    const lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n    let i: number;\n    for (i = 0; i < lines.length; i++) {\n      if (selectionStart <= lines[i].length) {\n        return {\n          lineIndex: i,\n          charIndex: selectionStart,\n        };\n      }\n      selectionStart -=\n        lines[i].length + this.missingNewlineOffset(i, skipWrapping);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex:\n        lines[i - 1].length < selectionStart\n          ? lines[i - 1].length\n          : selectionStart,\n    };\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of text object\n   */\n  toString(): string {\n    return `#<Text (${this.complexity()}): { \"text\": \"${\n      this.text\n    }\", \"fontFamily\": \"${this.fontFamily}\" }>`;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @param {Object} dim.x width of object to be cached\n   * @param {Object} dim.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const dims = super._getCacheCanvasDimensions();\n    const fontSize = this.fontSize;\n    dims.width += fontSize * dims.zoomX;\n    dims.height += fontSize * dims.zoomY;\n    return dims;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const path = this.path;\n    path && !path.isNotVisible() && path._render(ctx);\n    this._setTextStyles(ctx);\n    this._renderTextLinesBackground(ctx);\n    this._renderTextDecoration(ctx, 'underline');\n    this._renderText(ctx);\n    this._renderTextDecoration(ctx, 'overline');\n    this._renderTextDecoration(ctx, 'linethrough');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderText(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderTextStroke(ctx);\n      this._renderTextFill(ctx);\n    } else {\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n    }\n  }\n\n  /**\n   * Set the font parameter of the context with the object properties or with charStyle\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [charStyle] object with font style properties\n   * @param {String} [charStyle.fontFamily] Font Family\n   * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n   * @param {String} [charStyle.fontWeight] Font weight\n   * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n   */\n  _setTextStyles(\n    ctx: CanvasRenderingContext2D,\n    charStyle?: any,\n    forMeasuring?: boolean,\n  ) {\n    ctx.textBaseline = 'alphabetic';\n    if (this.path) {\n      switch (this.pathAlign) {\n        case CENTER:\n          ctx.textBaseline = 'middle';\n          break;\n        case 'ascender':\n          ctx.textBaseline = TOP;\n          break;\n        case 'descender':\n          ctx.textBaseline = BOTTOM;\n          break;\n      }\n    }\n    ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n  }\n\n  /**\n   * calculate and return the text Width measuring each line.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {Number} Maximum width of Text object\n   */\n  calcTextWidth(): number {\n    let maxWidth = this.getLineWidth(0);\n\n    for (let i = 1, len = this._textLines.length; i < len; i++) {\n      const currentLineWidth = this.getLineWidth(i);\n      if (currentLineWidth > maxWidth) {\n        maxWidth = currentLineWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  /**\n   * @private\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} line Text to render\n   * @param {Number} left Left position of text\n   * @param {Number} top Top position of text\n   * @param {Number} lineIndex Index of a line in a text\n   */\n  _renderTextLine(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: string[],\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    this._renderChars(method, ctx, line, left, top, lineIndex);\n  }\n\n  /**\n   * Renders the text background for lines, taking care of style\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextLinesBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n      return;\n    }\n    const originalFill = ctx.fillStyle,\n      leftOffset = this._getLeftOffset();\n    let lineTopOffset = this._getTopOffset();\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (\n        !this.textBackgroundColor &&\n        !this.styleHas('textBackgroundColor', i)\n      ) {\n        lineTopOffset += heightOfLine;\n        continue;\n      }\n      const jlen = this._textLines[i].length;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxWidth = 0;\n      let boxStart = 0;\n      let drawStart;\n      let currentColor;\n      let lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (let j = 0; j < jlen; j++) {\n        // at this point charbox are either standard or full with pathInfo if there is a path.\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (this.path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillStyle = currentColor;\n          currentColor &&\n            ctx.fillRect(\n              -charBox.width / 2,\n              (-heightOfLine / this.lineHeight) * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight,\n            );\n          ctx.restore();\n        } else if (currentColor !== lastColor) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = lastColor;\n          lastColor &&\n            ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight,\n            );\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      if (currentColor && !this.path) {\n        drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentColor;\n        ctx.fillRect(\n          drawStart,\n          lineTopOffset,\n          boxWidth,\n          heightOfLine / this.lineHeight,\n        );\n      }\n      lineTopOffset += heightOfLine;\n    }\n    ctx.fillStyle = originalFill;\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * measure and return the width of a single character.\n   * possibly overridden to accommodate different measure logic or\n   * to hook some external lib for character measurement\n   * @private\n   * @param {String} _char, char to be measured\n   * @param {Object} charStyle style of char to be measured\n   * @param {String} [previousChar] previous char\n   * @param {Object} [prevCharStyle] style of previous char\n   */\n  _measureChar(\n    _char: string,\n    charStyle: CompleteTextStyleDeclaration,\n    previousChar: string | undefined,\n    prevCharStyle: CompleteTextStyleDeclaration | Record<string, never>,\n  ) {\n    const fontCache = cache.getFontCache(charStyle),\n      fontDeclaration = this._getFontDeclaration(charStyle),\n      couple = previousChar + _char,\n      stylesAreEqual =\n        previousChar &&\n        fontDeclaration === this._getFontDeclaration(prevCharStyle),\n      fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE;\n    let width: number | undefined,\n      coupleWidth: number | undefined,\n      previousWidth: number | undefined,\n      kernedWidth: number | undefined;\n\n    if (previousChar && fontCache[previousChar] !== undefined) {\n      previousWidth = fontCache[previousChar];\n    }\n    if (fontCache[_char] !== undefined) {\n      kernedWidth = width = fontCache[_char];\n    }\n    if (stylesAreEqual && fontCache[couple] !== undefined) {\n      coupleWidth = fontCache[couple];\n      kernedWidth = coupleWidth - previousWidth!;\n    }\n    if (\n      width === undefined ||\n      previousWidth === undefined ||\n      coupleWidth === undefined\n    ) {\n      const ctx = getMeasuringContext()!;\n      // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n      this._setTextStyles(ctx, charStyle, true);\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        // safe to use the non-null since if undefined we defined it before.\n        kernedWidth = coupleWidth - previousWidth!;\n      }\n    }\n    return {\n      width: width * fontMultiplier,\n      kernedWidth: kernedWidth! * fontMultiplier,\n    };\n  }\n\n  /**\n   * Computes height of character at given position\n   * @param {Number} line the line index number\n   * @param {Number} _char the character index number\n   * @return {Number} fontSize of the character\n   */\n  getHeightOfChar(line: number, _char: number): number {\n    return this.getValueOfPropertyAt(line, _char, 'fontSize');\n  }\n\n  /**\n   * measure a text line measuring all characters.\n   * @param {Number} lineIndex line number\n   */\n  measureLine(lineIndex: number) {\n    const lineInfo = this._measureLine(lineIndex);\n    if (this.charSpacing !== 0) {\n      lineInfo.width -= this._getWidthOfCharSpacing();\n    }\n    if (lineInfo.width < 0) {\n      lineInfo.width = 0;\n    }\n    return lineInfo;\n  }\n\n  /**\n   * measure every grapheme of a line, populating __charBounds\n   * @param {Number} lineIndex\n   * @return {Object} object.width total width of characters\n   * @return {Object} object.numOfSpaces length of chars that match this._reSpacesAndTabs\n   */\n  _measureLine(lineIndex: number) {\n    let width = 0,\n      prevGrapheme: string | undefined,\n      graphemeInfo: GraphemeBBox | undefined;\n\n    const reverse = this.pathSide === RIGHT,\n      path = this.path,\n      line = this._textLines[lineIndex],\n      llength = line.length,\n      lineBounds = new Array<GraphemeBBox>(llength);\n\n    this.__charBounds[lineIndex] = lineBounds;\n    for (let i = 0; i < llength; i++) {\n      const grapheme = line[i];\n      graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n      lineBounds[i] = graphemeInfo;\n      width += graphemeInfo.kernedWidth;\n      prevGrapheme = grapheme;\n    }\n    // this latest bound box represent the last character of the line\n    // to simplify cursor handling in interactive mode.\n    lineBounds[llength] = {\n      left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0,\n    } as GraphemeBBox;\n    if (path && path.segmentsInfo) {\n      let positionInPath = 0;\n      const totalPathLength =\n        path.segmentsInfo[path.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case LEFT:\n          positionInPath = reverse ? totalPathLength - width : 0;\n          break;\n        case CENTER:\n          positionInPath = (totalPathLength - width) / 2;\n          break;\n        case RIGHT:\n          positionInPath = reverse ? 0 : totalPathLength - width;\n          break;\n        //todo - add support for justify\n      }\n      positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n      for (\n        let i = reverse ? llength - 1 : 0;\n        reverse ? i >= 0 : i < llength;\n        reverse ? i-- : i++\n      ) {\n        graphemeInfo = lineBounds[i];\n        if (positionInPath > totalPathLength) {\n          positionInPath %= totalPathLength;\n        } else if (positionInPath < 0) {\n          positionInPath += totalPathLength;\n        }\n        // it would probably much faster to send all the grapheme position for a line\n        // and calculate path position/angle at once.\n        this._setGraphemeOnPath(positionInPath, graphemeInfo);\n        positionInPath += graphemeInfo.kernedWidth;\n      }\n    }\n    return { width: width, numOfSpaces: 0 };\n  }\n\n  /**\n   * Calculate the angle  and the left,top position of the char that follow a path.\n   * It appends it to graphemeInfo to be reused later at rendering\n   * @private\n   * @param {Number} positionInPath to be measured\n   * @param {GraphemeBBox} graphemeInfo current grapheme box information\n   * @param {Object} startingPoint position of the point\n   */\n  _setGraphemeOnPath(positionInPath: number, graphemeInfo: GraphemeBBox) {\n    const centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n      path = this.path!;\n\n    // we are at currentPositionOnPath. we want to know what point on the path is.\n    const info = getPointOnPath(path.path, centerPosition, path.segmentsInfo)!;\n    graphemeInfo.renderLeft = info.x - path.pathOffset.x;\n    graphemeInfo.renderTop = info.y - path.pathOffset.y;\n    graphemeInfo.angle = info.angle + (this.pathSide === RIGHT ? Math.PI : 0);\n  }\n\n  /**\n   *\n   * @param {String} grapheme to be measured\n   * @param {Number} lineIndex index of the line where the char is\n   * @param {Number} charIndex position in the line\n   * @param {String} [prevGrapheme] character preceding the one to be measured\n   * @returns {GraphemeBBox} grapheme bbox\n   */\n  _getGraphemeBox(\n    grapheme: string,\n    lineIndex: number,\n    charIndex: number,\n    prevGrapheme?: string,\n    skipLeft?: boolean,\n  ): GraphemeBBox {\n    const style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      prevStyle = prevGrapheme\n        ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1)\n        : {},\n      info = this._measureChar(grapheme, style, prevGrapheme, prevStyle);\n    let kernedWidth = info.kernedWidth,\n      width = info.width,\n      charSpacing;\n\n    if (this.charSpacing !== 0) {\n      charSpacing = this._getWidthOfCharSpacing();\n      width += charSpacing;\n      kernedWidth += charSpacing;\n    }\n\n    const box: GraphemeBBox = {\n      width,\n      left: 0,\n      height: style.fontSize,\n      kernedWidth,\n      deltaY: style.deltaY,\n    };\n    if (charIndex > 0 && !skipLeft) {\n      const previousBox = this.__charBounds[lineIndex][charIndex - 1];\n      box.left =\n        previousBox.left + previousBox.width + info.kernedWidth - info.width;\n    }\n    return box;\n  }\n\n  /**\n   * Calculate height of line at 'lineIndex'\n   * @param {Number} lineIndex index of line to calculate\n   * @return {Number}\n   */\n  getHeightOfLine(lineIndex: number): number {\n    if (this.__lineHeights[lineIndex]) {\n      return this.__lineHeights[lineIndex];\n    }\n\n    // char 0 is measured before the line cycle because it needs to char\n    // emptylines\n    let maxHeight = this.getHeightOfChar(lineIndex, 0);\n    for (let i = 1, len = this._textLines[lineIndex].length; i < len; i++) {\n      maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n    }\n\n    return (this.__lineHeights[lineIndex] =\n      maxHeight * this.lineHeight * this._fontSizeMult);\n  }\n\n  /**\n   * Calculate text box height\n   */\n  calcTextHeight() {\n    let lineHeight,\n      height = 0;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineHeight = this.getHeightOfLine(i);\n      height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n    }\n    return height;\n  }\n\n  /**\n   * @private\n   * @return {Number} Left offset\n   */\n  _getLeftOffset(): number {\n    return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n  }\n\n  /**\n   * @private\n   * @return {Number} Top offset\n   */\n  _getTopOffset(): number {\n    return -this.height / 2;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   */\n  _renderTextCommon(\n    ctx: CanvasRenderingContext2D,\n    method: 'fillText' | 'strokeText',\n  ) {\n    ctx.save();\n    let lineHeights = 0;\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset();\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i),\n        maxHeight = heightOfLine / this.lineHeight,\n        leftOffset = this._getLineLeftOffset(i);\n      this._renderTextLine(\n        method,\n        ctx,\n        this._textLines[i],\n        left + leftOffset,\n        top + lineHeights + maxHeight,\n        i,\n      );\n      lineHeights += heightOfLine;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill && !this.styleHas(FILL)) {\n      return;\n    }\n\n    this._renderTextCommon(ctx, 'fillText');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextStroke(ctx: CanvasRenderingContext2D) {\n    if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    this._setLineDash(ctx, this.strokeDashArray);\n    ctx.beginPath();\n    this._renderTextCommon(ctx, 'strokeText');\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {String} method fillText or strokeText.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} line Content of the line, splitted in an array by grapheme\n   * @param {Number} left\n   * @param {Number} top\n   * @param {Number} lineIndex\n   */\n  _renderChars(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: Array<any>,\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      path = this.path,\n      shortCut =\n        !isJustify &&\n        this.charSpacing === 0 &&\n        this.isEmptyStyles(lineIndex) &&\n        !path,\n      isLtr = this.direction === 'ltr',\n      sign = this.direction === 'ltr' ? 1 : -1,\n      // this was changed in the PR #7674\n      // currentDirection = ctx.canvas.getAttribute('dir');\n      currentDirection = ctx.direction;\n\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      boxWidth = 0,\n      timeToRender,\n      drawingLeft;\n\n    ctx.save();\n    if (currentDirection !== this.direction) {\n      ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n      ctx.direction = isLtr ? 'ltr' : 'rtl';\n      ctx.textAlign = isLtr ? LEFT : RIGHT;\n    }\n    top -= (lineHeight * this._fontSizeFraction) / this.lineHeight;\n    if (shortCut) {\n      // render all the line in one pass without checking\n      // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n      this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top);\n      ctx.restore();\n      return;\n    }\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i] as Required<GraphemeBBox>;\n      if (boxWidth === 0) {\n        left += sign * (charBox.kernedWidth - charBox.width);\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, false);\n      }\n      if (timeToRender) {\n        if (path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            -boxWidth / 2,\n            0,\n          );\n          ctx.restore();\n        } else {\n          drawingLeft = left;\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            drawingLeft,\n            top,\n          );\n        }\n        charsToRender = '';\n        actualStyle = nextStyle;\n        left += sign * boxWidth;\n        boxWidth = 0;\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {TFiller} filler a fabric gradient instance\n   * @return {CanvasPattern} a pattern to use as fill/stroke style\n   */\n  _applyPatternGradientTransformText(filler: TFiller) {\n    // TODO: verify compatibility with strokeUniform\n    const width = this.width + this.strokeWidth,\n      height = this.height + this.strokeWidth,\n      pCanvas = createCanvasElementFor({\n        width,\n        height,\n      }),\n      pCtx = pCanvas.getContext('2d')!;\n    pCanvas.width = width;\n    pCanvas.height = height;\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.fillStyle = filler.toLive(pCtx)!;\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fill();\n    return pCtx.createPattern(pCanvas, 'no-repeat')!;\n  }\n\n  handleFiller<T extends 'fill' | 'stroke'>(\n    ctx: CanvasRenderingContext2D,\n    property: `${T}Style`,\n    filler: TFiller | string,\n  ): { offsetX: number; offsetY: number } {\n    let offsetX: number, offsetY: number;\n    if (isFiller(filler)) {\n      if (\n        (filler as Gradient<'linear'>).gradientUnits === 'percentage' ||\n        (filler as Gradient<'linear'>).gradientTransform ||\n        (filler as Pattern).patternTransform\n      ) {\n        // need to transform gradient in a pattern.\n        // this is a slow process. If you are hitting this codepath, and the object\n        // is not using caching, you should consider switching it on.\n        // we need a canvas as big as the current object caching canvas.\n        offsetX = -this.width / 2;\n        offsetY = -this.height / 2;\n        ctx.translate(offsetX, offsetY);\n        ctx[property] = this._applyPatternGradientTransformText(filler);\n        return { offsetX, offsetY };\n      } else {\n        // is a simple gradient or pattern\n        ctx[property] = filler.toLive(ctx)!;\n        return this._applyPatternGradientTransform(ctx, filler);\n      }\n    } else {\n      // is a color\n      ctx[property] = filler;\n    }\n    return { offsetX: 0, offsetY: 0 };\n  }\n\n  /**\n   * This function prepare the canvas for a stroke style, and stroke and strokeWidth\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with stroke and strokeWidth defined\n   * @returns\n   */\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    {\n      stroke,\n      strokeWidth,\n    }: Pick<CompleteTextStyleDeclaration, 'stroke' | 'strokeWidth'>,\n  ) {\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineDashOffset = this.strokeDashOffset;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.miterLimit = this.strokeMiterLimit;\n    return this.handleFiller(ctx, 'strokeStyle', stroke!);\n  }\n\n  /**\n   * This function prepare the canvas for a ill style, and fill\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with ill defined\n   * @returns\n   */\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    return this.handleFiller(ctx, 'fillStyle', fill!);\n  }\n\n  /**\n   * @private\n   * @param {String} method\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {String} _char\n   * @param {Number} left Left coordinate\n   * @param {Number} top Top coordinate\n   * @param {Number} lineHeight Height of the line\n   */\n  _renderChar(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    lineIndex: number,\n    charIndex: number,\n    _char: string,\n    left: number,\n    top: number,\n  ) {\n    const decl = this._getStyleDeclaration(lineIndex, charIndex),\n      fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      shouldFill = method === 'fillText' && fullDecl.fill,\n      shouldStroke =\n        method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n    if (!shouldStroke && !shouldFill) {\n      return;\n    }\n    ctx.save();\n\n    ctx.font = this._getFontDeclaration(fullDecl);\n\n    if (decl.textBackgroundColor) {\n      this._removeShadow(ctx);\n    }\n    if (decl.deltaY) {\n      top += decl.deltaY;\n    }\n\n    if (shouldFill) {\n      const fillOffsets = this._setFillStyles(ctx, fullDecl);\n      ctx.fillText(\n        _char,\n        left - fillOffsets.offsetX,\n        top - fillOffsets.offsetY,\n      );\n    }\n\n    if (shouldStroke) {\n      const strokeOffsets = this._setStrokeStyles(ctx, fullDecl);\n      ctx.strokeText(\n        _char,\n        left - strokeOffsets.offsetX,\n        top - strokeOffsets.offsetY,\n      );\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Turns the character into a 'superior figure' (i.e. 'superscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSuperscript(start: number, end: number) {\n    this._setScript(start, end, this.superscript);\n  }\n\n  /**\n   * Turns the character into an 'inferior figure' (i.e. 'subscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSubscript(start: number, end: number) {\n    this._setScript(start, end, this.subscript);\n  }\n\n  /**\n   * Applies 'schema' at given position\n   * @private\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   * @param {Number} schema\n   */\n  protected _setScript(\n    start: number,\n    end: number,\n    schema: {\n      size: number;\n      baseline: number;\n    },\n  ) {\n    const loc = this.get2DCursorLocation(start, true),\n      fontSize = this.getValueOfPropertyAt(\n        loc.lineIndex,\n        loc.charIndex,\n        'fontSize',\n      ),\n      dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n      style = {\n        fontSize: fontSize * schema.size,\n        deltaY: dy + fontSize * schema.baseline,\n      };\n    this.setSelectionStyles(style, start, end);\n  }\n\n  /**\n   * @private\n   * @param {Number} lineIndex index text line\n   * @return {Number} Line left offset\n   */\n  _getLineLeftOffset(lineIndex: number): number {\n    const lineWidth = this.getLineWidth(lineIndex),\n      lineDiff = this.width - lineWidth,\n      textAlign = this.textAlign,\n      direction = this.direction,\n      isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n    let leftOffset = 0;\n    if (\n      textAlign === JUSTIFY ||\n      (textAlign === JUSTIFY_CENTER && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_RIGHT && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_LEFT && !isEndOfWrapping)\n    ) {\n      return 0;\n    }\n    if (textAlign === CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (textAlign === JUSTIFY_CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === JUSTIFY_RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (direction === 'rtl') {\n      if (\n        textAlign === RIGHT ||\n        textAlign === JUSTIFY ||\n        textAlign === JUSTIFY_RIGHT\n      ) {\n        leftOffset = 0;\n      } else if (textAlign === LEFT || textAlign === JUSTIFY_LEFT) {\n        leftOffset = -lineDiff;\n      } else if (textAlign === CENTER || textAlign === JUSTIFY_CENTER) {\n        leftOffset = -lineDiff / 2;\n      }\n    }\n    return leftOffset;\n  }\n\n  /**\n   * @private\n   */\n  _clearCache() {\n    this._forceClearCache = false;\n    this.__lineWidths = [];\n    this.__lineHeights = [];\n    this.__charBounds = [];\n  }\n\n  /**\n   * Measure a single line given its index. Used to calculate the initial\n   * text bounding box. The values are calculated and stored in __lineWidths cache.\n   * @private\n   * @param {Number} lineIndex line number\n   * @return {Number} Line width\n   */\n  getLineWidth(lineIndex: number): number {\n    if (this.__lineWidths[lineIndex] !== undefined) {\n      return this.__lineWidths[lineIndex];\n    }\n\n    const { width } = this.measureLine(lineIndex);\n    this.__lineWidths[lineIndex] = width;\n    return width;\n  }\n\n  _getWidthOfCharSpacing() {\n    if (this.charSpacing !== 0) {\n      return (this.fontSize * this.charSpacing) / 1000;\n    }\n    return 0;\n  }\n\n  /**\n   * Retrieves the value of property at given character position\n   * @param {Number} lineIndex the line number\n   * @param {Number} charIndex the character number\n   * @param {String} property the property name\n   * @returns the value of 'property'\n   */\n  getValueOfPropertyAt<T extends StylePropertiesType>(\n    lineIndex: number,\n    charIndex: number,\n    property: T,\n  ): this[T] {\n    const charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n    return (charStyle[property] ?? this[property]) as this[T];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextDecoration(\n    ctx: CanvasRenderingContext2D,\n    type: 'underline' | 'linethrough' | 'overline',\n  ) {\n    if (!this[type] && !this.styleHas(type)) {\n      return;\n    }\n    let topOffset = this._getTopOffset();\n    const leftOffset = this._getLeftOffset(),\n      path = this.path,\n      charSpacing = this._getWidthOfCharSpacing(),\n      offsetAligner =\n        type === 'linethrough' ? 0.5 : type === 'overline' ? 1 : 0,\n      offsetY = this.offsets[type];\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (!this[type] && !this.styleHas(type, i)) {\n        topOffset += heightOfLine;\n        continue;\n      }\n      const line = this._textLines[i];\n      const maxHeight = heightOfLine / this.lineHeight;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxStart = 0;\n      let boxWidth = 0;\n      let lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n      let lastFill = this.getValueOfPropertyAt(i, 0, FILL);\n      let lastTickness = this.getValueOfPropertyAt(\n        i,\n        0,\n        TEXT_DECORATION_THICKNESS,\n      );\n      let currentDecoration = lastDecoration;\n      let currentFill = lastFill;\n      let currentTickness = lastTickness;\n      const top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n      let size = this.getHeightOfChar(i, 0);\n      let dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n      for (let j = 0, jlen = line.length; j < jlen; j++) {\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentDecoration = this.getValueOfPropertyAt(i, j, type);\n        currentFill = this.getValueOfPropertyAt(i, j, FILL);\n        currentTickness = this.getValueOfPropertyAt(\n          i,\n          j,\n          TEXT_DECORATION_THICKNESS,\n        );\n        const currentSize = this.getHeightOfChar(i, j);\n        const currentDy = this.getValueOfPropertyAt(i, j, 'deltaY');\n        if (path && currentDecoration && currentFill) {\n          const finalTickness = (this.fontSize * currentTickness) / 1000;\n          ctx.save();\n          // bug? verify lastFill is a valid fill here.\n          ctx.fillStyle = lastFill as string;\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillRect(\n            -charBox.kernedWidth / 2,\n            offsetY * currentSize + currentDy - offsetAligner * finalTickness,\n            charBox.kernedWidth,\n            finalTickness,\n          );\n          ctx.restore();\n        } else if (\n          (currentDecoration !== lastDecoration ||\n            currentFill !== lastFill ||\n            currentSize !== size ||\n            currentTickness !== lastTickness ||\n            currentDy !== dy) &&\n          boxWidth > 0\n        ) {\n          const finalTickness = (this.fontSize * lastTickness) / 1000;\n          let drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          if (lastDecoration && lastFill && lastTickness) {\n            // bug? verify lastFill is a valid fill here.\n            ctx.fillStyle = lastFill as string;\n            ctx.fillRect(\n              drawStart,\n              top + offsetY * size + dy - offsetAligner * finalTickness,\n              boxWidth,\n              finalTickness,\n            );\n          }\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastDecoration = currentDecoration;\n          lastTickness = currentTickness;\n          lastFill = currentFill;\n          size = currentSize;\n          dy = currentDy;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      let drawStart = leftOffset + lineLeftOffset + boxStart;\n      if (this.direction === 'rtl') {\n        drawStart = this.width - drawStart - boxWidth;\n      }\n      ctx.fillStyle = currentFill as string;\n      const finalTickness = (this.fontSize * currentTickness) / 1000;\n      currentDecoration &&\n        currentFill &&\n        currentTickness &&\n        ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy - offsetAligner * finalTickness,\n          boxWidth - charSpacing,\n          finalTickness,\n        );\n      topOffset += heightOfLine;\n    }\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * return font declaration string for canvas context\n   * @param {Object} [styleObject] object\n   * @returns {String} font declaration formatted for canvas context.\n   */\n  _getFontDeclaration(\n    {\n      fontFamily = this.fontFamily,\n      fontStyle = this.fontStyle,\n      fontWeight = this.fontWeight,\n      fontSize = this.fontSize,\n    }: Partial<\n      Pick<\n        TextStyleDeclaration,\n        'fontFamily' | 'fontStyle' | 'fontWeight' | 'fontSize'\n      >\n    > = {},\n    forMeasuring?: boolean,\n  ): string {\n    const parsedFontFamily =\n      fontFamily.includes(\"'\") ||\n      fontFamily.includes('\"') ||\n      fontFamily.includes(',') ||\n      FabricText.genericFonts.includes(fontFamily.toLowerCase())\n        ? fontFamily\n        : `\"${fontFamily}\"`;\n    return [\n      fontStyle,\n      fontWeight,\n      `${forMeasuring ? this.CACHE_FONT_SIZE : fontSize}px`,\n      parsedFontFamily,\n    ].join(' ');\n  }\n\n  /**\n   * Renders text instance on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    if (!this.visible) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    if (this._forceClearCache) {\n      this.initDimensions();\n    }\n    super.render(ctx);\n  }\n\n  /**\n   * Override this method to customize grapheme splitting\n   * @todo the util `graphemeSplit` needs to be injectable in some way.\n   * is more comfortable to inject the correct util rather than having to override text\n   * in the middle of the prototype chain\n   * @param {string} value\n   * @returns {string[]} array of graphemes\n   */\n  graphemeSplit(value: string): string[] {\n    return graphemeSplit(value);\n  }\n\n  /**\n   * Returns the text as an array of lines.\n   * @param {String} text text to split\n   * @returns  Lines in the text\n   */\n  _splitTextIntoLines(text: string): TextLinesInfo {\n    const lines = text.split(this._reNewline),\n      newLines = new Array<string[]>(lines.length),\n      newLine = ['\\n'];\n    let newText: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      newLines[i] = this.graphemeSplit(lines[i]);\n      newText = newText.concat(newLines[i], newLine);\n    }\n    newText.pop();\n    return {\n      _unwrappedLines: newLines,\n      lines: lines,\n      graphemeText: newText,\n      graphemeLines: newLines,\n    };\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject([...additionalProps, ...propertiesToInclude] as K[]),\n      styles: stylesToArray(this.styles, this.text),\n      ...(this.path ? { path: this.path.toObject() } : {}),\n    };\n  }\n\n  set(key: string | any, value?: any) {\n    const { textLayoutProperties } = this.constructor as typeof FabricText;\n    super.set(key, value);\n    let needsDims = false;\n    let isAddingPath = false;\n    if (typeof key === 'object') {\n      for (const _key in key) {\n        if (_key === 'path') {\n          this.setPathInfo();\n        }\n        needsDims = needsDims || textLayoutProperties.includes(_key);\n        isAddingPath = isAddingPath || _key === 'path';\n      }\n    } else {\n      needsDims = textLayoutProperties.includes(key);\n      isAddingPath = key === 'path';\n    }\n    if (isAddingPath) {\n      this.setPathInfo();\n    }\n    if (needsDims && this.initialized) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    return this;\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity\n   */\n  complexity(): number {\n    return 1;\n  }\n\n  /**\n   * List of generic font families\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#generic-name\n   */\n  static genericFonts = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n    'ui-serif',\n    'ui-sans-serif',\n    'ui-monospace',\n    'ui-rounded',\n    'math',\n    'emoji',\n    'fangsong',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricText.fromElement})\n   * @static\n   * @memberOf Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(\n    'x',\n    'y',\n    'dx',\n    'dy',\n    'font-family',\n    'font-style',\n    'font-weight',\n    'font-size',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor',\n  );\n\n  /**\n   * Returns FabricText instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf Text\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement | SVGElement,\n    options?: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      FabricText.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    const {\n      textAnchor = LEFT as typeof LEFT | typeof CENTER | typeof RIGHT,\n      textDecoration = '',\n      dx = 0,\n      dy = 0,\n      top = 0,\n      left = 0,\n      fontSize = DEFAULT_SVG_FONT_SIZE,\n      strokeWidth = 1,\n      ...restOfOptions\n    } = { ...options, ...parsedAttributes };\n\n    const textContent = (element.textContent || '')\n      .replace(/^\\s+|\\s+$|\\n+/g, '')\n      .replace(/\\s+/g, ' ');\n\n    // this code here is probably the usual issue for SVG center find\n    // this can later looked at again and probably removed.\n\n    const text = new this(textContent, {\n        left: left + dx,\n        top: top + dy,\n        underline: textDecoration.includes('underline'),\n        overline: textDecoration.includes('overline'),\n        linethrough: textDecoration.includes('line-through'),\n        // we initialize this as 0\n        strokeWidth: 0,\n        fontSize,\n        ...restOfOptions,\n      }),\n      textHeightScaleFactor = text.getScaledHeight() / text.height,\n      lineHeightDiff =\n        (text.height + text.strokeWidth) * text.lineHeight - text.height,\n      scaledDiff = lineHeightDiff * textHeightScaleFactor,\n      textHeight = text.getScaledHeight() + scaledDiff;\n\n    let offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (textAnchor === CENTER) {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (textAnchor === RIGHT) {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top:\n        text.top -\n        (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) /\n          text.lineHeight,\n      strokeWidth,\n    });\n    return text;\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns FabricText instance from an object representation\n   * @param {Object} object plain js Object to create an instance from\n   * @returns {Promise<FabricText>}\n   */\n  static fromObject<\n    T extends TOptions<SerializedTextProps>,\n    S extends FabricText,\n  >(object: T) {\n    return this._fromObject<S>(\n      {\n        ...object,\n        styles: stylesFromArray(object.styles || {}, object.text),\n      },\n      {\n        extraParam: 'text',\n      },\n    );\n  }\n}\n\napplyMixins(FabricText, [TextSVGExportMixin]);\nclassRegistry.setClass(FabricText);\nclassRegistry.setSVGClass(FabricText);\n","import type {\n  DragEventData,\n  DropEventData,\n  TPointerEvent,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { IText } from './IText';\nimport { setStyle } from '../../util/internals/dom_style';\nimport { cloneStyles } from '../../util/internals/cloneStyles';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, NONE } from '../../constants';\n\n/**\n * #### Dragging IText/Textbox Lifecycle\n * - {@link start} is called from `mousedown` {@link IText#_mouseDownHandler} and determines if dragging should start by testing {@link isPointerOverSelection}\n * - if true `mousedown` {@link IText#_mouseDownHandler} is blocked to keep selection\n * - if the pointer moves, canvas fires numerous mousemove {@link Canvas#_onMouseMove} that we make sure **aren't** prevented ({@link IText#shouldStartDragging}) in order for the window to start a drag session\n * - once/if the session starts canvas calls {@link onDragStart} on the active object to determine if dragging should occur\n * - canvas fires relevant drag events that are handled by the handlers defined in this scope\n * - {@link end} is called from `mouseup` {@link IText#mouseUpHandler}, blocking IText default click behavior\n * - in case the drag session didn't occur, {@link end} handles a click, since logic to do so was blocked during `mousedown`\n */\nexport class DraggableTextDelegate {\n  readonly target: IText;\n  private __mouseDownInPlace = false;\n  private __dragStartFired = false;\n  private __isDraggingOver = false;\n  private __dragStartSelection?: {\n    selectionStart: number;\n    selectionEnd: number;\n  };\n  private __dragImageDisposer?: VoidFunction;\n  private _dispose?: () => void;\n\n  constructor(target: IText) {\n    this.target = target;\n    const disposers = [\n      this.target.on('dragenter', this.dragEnterHandler.bind(this)),\n      this.target.on('dragover', this.dragOverHandler.bind(this)),\n      this.target.on('dragleave', this.dragLeaveHandler.bind(this)),\n      this.target.on('dragend', this.dragEndHandler.bind(this)),\n      this.target.on('drop', this.dropHandler.bind(this)),\n    ];\n    this._dispose = () => {\n      disposers.forEach((d) => d());\n      this._dispose = undefined;\n    };\n  }\n\n  isPointerOverSelection(e: TPointerEvent) {\n    const target = this.target;\n    const newSelection = target.getSelectionStartFromPointer(e);\n    return (\n      target.isEditing &&\n      newSelection >= target.selectionStart &&\n      newSelection <= target.selectionEnd &&\n      target.selectionStart < target.selectionEnd\n    );\n  }\n\n  /**\n   * @public override this method to disable dragging and default to mousedown logic\n   */\n  start(e: TPointerEvent) {\n    return (this.__mouseDownInPlace = this.isPointerOverSelection(e));\n  }\n\n  /**\n   * @public override this method to disable dragging without discarding selection\n   */\n  isActive() {\n    return this.__mouseDownInPlace;\n  }\n\n  /**\n   * Ends interaction and sets cursor in case of a click\n   * @returns true if was active\n   */\n  end(e: TPointerEvent) {\n    const active = this.isActive();\n    if (active && !this.__dragStartFired) {\n      // mousedown has been blocked since `active` is true => cursor has not been set.\n      // `__dragStartFired` is false => dragging didn't occur, pointer didn't move and is over selection.\n      // meaning this is actually a click, `active` is a false positive.\n      this.target.setCursorByClick(e);\n      this.target.initDelayedCursor(true);\n    }\n    this.__mouseDownInPlace = false;\n    this.__dragStartFired = false;\n    this.__isDraggingOver = false;\n    return active;\n  }\n\n  getDragStartSelection() {\n    return this.__dragStartSelection;\n  }\n\n  /**\n   * Override to customize the drag image\n   * https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage\n   */\n  setDragImage(\n    e: DragEvent,\n    {\n      selectionStart,\n      selectionEnd,\n    }: {\n      selectionStart: number;\n      selectionEnd: number;\n    },\n  ) {\n    const target = this.target;\n    const canvas = target.canvas!;\n    const flipFactor = new Point(target.flipX ? -1 : 1, target.flipY ? -1 : 1);\n    const boundaries = target._getCursorBoundaries(selectionStart);\n    const selectionPosition = new Point(\n      boundaries.left + boundaries.leftOffset,\n      boundaries.top + boundaries.topOffset,\n    ).multiply(flipFactor);\n    const pos = selectionPosition.transform(target.calcTransformMatrix());\n    const pointer = canvas.getScenePoint(e);\n    const diff = pointer.subtract(pos);\n    const retinaScaling = target.getCanvasRetinaScaling();\n    const bbox = target.getBoundingRect();\n    const correction = pos.subtract(new Point(bbox.left, bbox.top));\n    const vpt = canvas.viewportTransform;\n    const offset = correction.add(diff).transform(vpt, true);\n    //  prepare instance for drag image snapshot by making all non selected text invisible\n    const bgc = target.backgroundColor;\n    const styles = cloneStyles(target.styles);\n    target.backgroundColor = '';\n    const styleOverride = {\n      stroke: 'transparent',\n      fill: 'transparent',\n      textBackgroundColor: 'transparent',\n    };\n    target.setSelectionStyles(styleOverride, 0, selectionStart);\n    target.setSelectionStyles(styleOverride, selectionEnd, target.text.length);\n    target.dirty = true;\n    const dragImage = target.toCanvasElement({\n      enableRetinaScaling: canvas.enableRetinaScaling,\n      viewportTransform: true,\n    });\n    // restore values\n    target.backgroundColor = bgc;\n    target.styles = styles;\n    target.dirty = true;\n    //  position drag image offscreen\n    setStyle(dragImage, {\n      position: 'fixed',\n      left: `${-dragImage.width}px`,\n      border: NONE,\n      width: `${dragImage.width / retinaScaling}px`,\n      height: `${dragImage.height / retinaScaling}px`,\n    });\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    this.__dragImageDisposer = () => {\n      dragImage.remove();\n    };\n    getDocumentFromElement(\n      (e.target || this.target.hiddenTextarea)! as HTMLElement,\n    ).body.appendChild(dragImage);\n    e.dataTransfer?.setDragImage(dragImage, offset.x, offset.y);\n  }\n\n  /**\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drag source\n   */\n  onDragStart(e: DragEvent): boolean {\n    this.__dragStartFired = true;\n    const target = this.target;\n    const active = this.isActive();\n    if (active && e.dataTransfer) {\n      const selection = (this.__dragStartSelection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n      });\n      const value = target._text\n        .slice(selection.selectionStart, selection.selectionEnd)\n        .join('');\n      const data = { text: target.text, value, ...selection };\n      e.dataTransfer.setData('text/plain', value);\n      e.dataTransfer.setData(\n        'application/fabric',\n        JSON.stringify({\n          value: value,\n          styles: target.getSelectionStyles(\n            selection.selectionStart,\n            selection.selectionEnd,\n            true,\n          ),\n        }),\n      );\n      e.dataTransfer.effectAllowed = 'copyMove';\n      this.setDragImage(e, data);\n    }\n    target.abortCursorAnimation();\n    return active;\n  }\n\n  /**\n   * use {@link targetCanDrop} to respect overriding\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent): boolean {\n    if (\n      this.target.editable &&\n      !this.target.getActiveControl() &&\n      !e.defaultPrevented\n    ) {\n      if (this.isActive() && this.__dragStartSelection) {\n        //  drag source trying to drop over itself\n        //  allow dropping only outside of drag start selection\n        const index = this.target.getSelectionStartFromPointer(e);\n        const dragStartSelection = this.__dragStartSelection;\n        return (\n          index < dragStartSelection.selectionStart ||\n          index > dragStartSelection.selectionEnd\n        );\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * in order to respect overriding {@link IText#canDrop} we call that instead of calling {@link canDrop} directly\n   */\n  protected targetCanDrop(e: DragEvent) {\n    return this.target.canDrop(e);\n  }\n\n  dragEnterHandler({ e }: DragEventData) {\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    }\n  }\n\n  dragOverHandler(ev: DragEventData) {\n    const { e } = ev;\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    } else if (this.__isDraggingOver && !canDrop) {\n      //  drop state has changed\n      this.__isDraggingOver = false;\n    }\n    if (this.__isDraggingOver) {\n      //  can be dropped, inform browser\n      e.preventDefault();\n      //  inform event subscribers\n      ev.canDrop = true;\n      ev.dropTarget = this.target;\n    }\n  }\n\n  dragLeaveHandler() {\n    if (this.__isDraggingOver || this.isActive()) {\n      this.__isDraggingOver = false;\n    }\n  }\n\n  /**\n   * Override the `text/plain | application/fabric` types of {@link DragEvent#dataTransfer}\n   * in order to change the drop value or to customize styling respectively, by listening to the `drop:before` event\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#performing_a_drop\n   */\n  dropHandler(ev: DropEventData) {\n    const { e } = ev;\n    const didDrop = e.defaultPrevented;\n    this.__isDraggingOver = false;\n    // inform browser that the drop has been accepted\n    e.preventDefault();\n    let insert = e.dataTransfer?.getData('text/plain');\n    if (insert && !didDrop) {\n      const target = this.target;\n      const canvas = target.canvas!;\n      let insertAt = target.getSelectionStartFromPointer(e);\n      const { styles } = (\n        e.dataTransfer!.types.includes('application/fabric')\n          ? JSON.parse(e.dataTransfer!.getData('application/fabric'))\n          : {}\n      ) as { styles: TextStyleDeclaration[] };\n      const trailing = insert[Math.max(0, insert.length - 1)];\n      const selectionStartOffset = 0;\n      //  drag and drop in same instance\n      if (this.__dragStartSelection) {\n        const selectionStart = this.__dragStartSelection.selectionStart;\n        const selectionEnd = this.__dragStartSelection.selectionEnd;\n        if (insertAt > selectionStart && insertAt <= selectionEnd) {\n          insertAt = selectionStart;\n        } else if (insertAt > selectionEnd) {\n          insertAt -= selectionEnd - selectionStart;\n        }\n        target.removeChars(selectionStart, selectionEnd);\n        // prevent `dragend` from handling event\n        delete this.__dragStartSelection;\n      }\n      //  remove redundant line break\n      if (\n        target._reNewline.test(trailing) &&\n        (target._reNewline.test(target._text[insertAt]) ||\n          insertAt === target._text.length)\n      ) {\n        insert = insert.trimEnd();\n      }\n      //  inform subscribers\n      ev.didDrop = true;\n      ev.dropTarget = target;\n      //  finalize\n      target.insertChars(insert, styles, insertAt);\n      // can this part be moved in an outside event? andrea to check.\n      canvas.setActiveObject(target);\n      target.enterEditing(e);\n      target.selectionStart = Math.min(\n        insertAt + selectionStartOffset,\n        target._text.length,\n      );\n      target.selectionEnd = Math.min(\n        target.selectionStart + insert.length,\n        target._text.length,\n      );\n      target.hiddenTextarea!.value = target.text;\n      target._updateTextarea();\n      target.hiddenTextarea!.focus();\n      target.fire(CHANGED, {\n        index: insertAt + selectionStartOffset,\n        action: 'drop',\n      });\n      canvas.fire('text:changed', { target });\n      canvas.contextTopDirty = true;\n      canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * fired only on the drag source after drop (if occurred)\n   * handle changes to the drag source in case of a drop on another object or a cancellation\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   */\n  dragEndHandler({ e }: DragEventData) {\n    if (this.isActive() && this.__dragStartFired) {\n      //  once the drop event finishes we check if we need to change the drag source\n      //  if the drag source received the drop we bail out since the drop handler has already handled logic\n      if (this.__dragStartSelection) {\n        const target = this.target;\n        const canvas = this.target.canvas!;\n        const { selectionStart, selectionEnd } = this.__dragStartSelection;\n        const dropEffect = e.dataTransfer?.dropEffect || NONE;\n        if (dropEffect === NONE) {\n          // pointer is back over selection\n          target.selectionStart = selectionStart;\n          target.selectionEnd = selectionEnd;\n          target._updateTextarea();\n          target.hiddenTextarea!.focus();\n        } else {\n          target.clearContextTop();\n          if (dropEffect === 'move') {\n            target.removeChars(selectionStart, selectionEnd);\n            target.selectionStart = target.selectionEnd = selectionStart;\n            target.hiddenTextarea &&\n              (target.hiddenTextarea.value = target.text);\n            target._updateTextarea();\n            target.fire(CHANGED, {\n              index: selectionStart,\n              action: 'dragend',\n            });\n            canvas.fire('text:changed', { target });\n            canvas.requestRenderAll();\n          }\n          target.exitEditing();\n        }\n      }\n    }\n\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    delete this.__dragImageDisposer;\n    delete this.__dragStartSelection;\n    this.__isDraggingOver = false;\n  }\n\n  dispose() {\n    this._dispose && this._dispose();\n  }\n}\n","import type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { FabricText } from '../Text/Text';\nimport { animate } from '../../util/animation/animate';\nimport type { TOnAnimationChangeCallback } from '../../util/animation/types';\nimport type { ValueAnimation } from '../../util/animation/ValueAnimation';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport type { TOptions } from '../../typedefs';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, MODIFIED, RIGHT, reNewline } from '../../constants';\nimport type { IText } from './IText';\n\n/**\n *  extend this regex to support non english languages\n *\n *  - ` `      Matches a SPACE character (char code 32).\n *  - `\\n`     Matches a LINE FEED character (char code 10).\n *  - `\\.`     Matches a \".\" character (char code 46).\n *  - `,`      Matches a \",\" character (char code 44).\n *  - `;`      Matches a \";\" character (char code 59).\n *  - `!`      Matches a \"!\" character (char code 33).\n *  - `\\?`     Matches a \"?\" character (char code 63).\n *  - `\\-`     Matches a \"-\" character (char code 45).\n */\n// eslint-disable-next-line no-useless-escape\nconst reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\nexport type ITextEvents = ObjectEvents & {\n  'selection:changed': never;\n  changed: never | { index: number; action: string };\n  'editing:entered': never | { e: TPointerEvent };\n  'editing:exited': never;\n};\n\nexport abstract class ITextBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends FabricText<Props, SProps, EventSpec> {\n  declare abstract isEditing: boolean;\n  declare abstract cursorDelay: number;\n  declare abstract selectionStart: number;\n  declare abstract selectionEnd: number;\n  declare abstract cursorDuration: number;\n  declare abstract editable: boolean;\n  declare abstract editingBorderColor: string;\n\n  declare abstract compositionStart: number;\n  declare abstract compositionEnd: number;\n\n  declare abstract hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * Helps determining when the text is in composition, so that the cursor\n   * rendering is altered.\n   */\n  declare protected inCompositionMode: boolean;\n\n  declare protected _reSpace: RegExp;\n  declare private _currentTickState?: ValueAnimation;\n  declare private _currentTickCompleteState?: ValueAnimation;\n  protected _currentCursorOpacity = 1;\n  declare private _textBeforeEdit: string;\n  declare protected __selectionStartOnMouseDown: number;\n\n  /**\n   * Keeps track if the IText object was selected before the actual click.\n   * This because we want to delay enter editing by a click.\n   */\n  declare protected selected: boolean;\n  declare protected cursorOffsetCache: { left?: number; top?: number };\n  declare protected _savedProps?: {\n    hasControls: boolean;\n    borderColor: string;\n    lockMovementX: boolean;\n    lockMovementY: boolean;\n    selectable: boolean;\n    hoverCursor: CSSStyleDeclaration['cursor'] | null;\n    defaultCursor?: CSSStyleDeclaration['cursor'];\n    moveCursor?: CSSStyleDeclaration['cursor'];\n  };\n  declare protected _selectionDirection: 'left' | 'right' | null;\n\n  abstract initHiddenTextarea(): void;\n  abstract _fireSelectionChanged(): void;\n  abstract renderCursorOrSelection(): void;\n  abstract getSelectionStartFromPointer(e: TPointerEvent): number;\n  abstract _getCursorBoundaries(\n    index: number,\n    skipCaching?: boolean,\n  ): {\n    left: number;\n    top: number;\n    leftOffset: number;\n    topOffset: number;\n  };\n\n  /**\n   * Initializes all the interactive behavior of IText\n   */\n  initBehavior() {\n    this._tick = this._tick.bind(this);\n    this._onTickComplete = this._onTickComplete.bind(this);\n    this.updateSelectionOnMouseMove =\n      this.updateSelectionOnMouseMove.bind(this);\n  }\n\n  onDeselect(options?: { e?: TPointerEvent; object?: FabricObject }) {\n    this.isEditing && this.exitEditing();\n    this.selected = false;\n    return super.onDeselect(options);\n  }\n\n  /**\n   * @private\n   */\n  _animateCursor({\n    toValue,\n    duration,\n    delay,\n    onComplete,\n  }: {\n    toValue: number;\n    duration: number;\n    delay?: number;\n    onComplete?: TOnAnimationChangeCallback<number>;\n  }) {\n    return animate({\n      startValue: this._currentCursorOpacity,\n      endValue: toValue,\n      duration,\n      delay,\n      onComplete,\n      abort: () =>\n        !this.canvas ||\n        // we do not want to animate a selection, only cursor\n        this.selectionStart !== this.selectionEnd,\n      onChange: (value) => {\n        this._currentCursorOpacity = value;\n        this.renderCursorOrSelection();\n      },\n    });\n  }\n\n  /**\n   * changes the cursor from visible to invisible\n   */\n  private _tick(delay?: number) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(delay || 0, 100),\n      onComplete: this._onTickComplete,\n    });\n  }\n\n  /**\n   * Changes the cursor from invisible to visible\n   */\n  private _onTickComplete() {\n    this._currentTickCompleteState?.abort();\n    this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick,\n    });\n  }\n\n  /**\n   * Initializes delayed cursor\n   */\n  initDelayedCursor(restart?: boolean) {\n    this.abortCursorAnimation();\n    this._tick(restart ? 0 : this.cursorDelay);\n  }\n\n  /**\n   * Aborts cursor animation, clears all timeouts and clear textarea context if necessary\n   */\n  abortCursorAnimation() {\n    let shouldClear = false;\n    [this._currentTickState, this._currentTickCompleteState].forEach(\n      (cursorAnimation) => {\n        if (cursorAnimation && !cursorAnimation.isDone()) {\n          shouldClear = true;\n          cursorAnimation.abort();\n        }\n      },\n    );\n\n    this._currentCursorOpacity = 1;\n\n    //  make sure we clear context even if instance is not editing\n    if (shouldClear) {\n      this.clearContextTop();\n    }\n  }\n\n  /**\n   * Restart tue cursor animation if either is in complete state ( between animations )\n   * or if it never started before\n   */\n  restartCursorIfNeeded() {\n    if (\n      [this._currentTickState, this._currentTickCompleteState].some(\n        (cursorAnimation) => !cursorAnimation || cursorAnimation.isDone(),\n      )\n    ) {\n      this.initDelayedCursor();\n    }\n  }\n\n  /**\n   * Selects entire text\n   */\n  selectAll() {\n    this.selectionStart = 0;\n    this.selectionEnd = this._text.length;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Selects entire text and updates the visual state\n   */\n  cmdAll() {\n    this.selectAll();\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Returns selected text\n   * @return {String}\n   */\n  getSelectedText(): string {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n  }\n\n  /**\n   * Find new selection index representing start of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    // remove space before cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index--;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    // remove space after cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index++;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Find new selection index representing start of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    while (!/\\n/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    while (!/\\n/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Finds index corresponding to beginning or end of a word\n   * @param {Number} selectionStart Index of a character\n   * @param {Number} direction 1 or -1\n   * @return {Number} Index of the beginning or end of a word\n   */\n  searchWordBoundary(selectionStart: number, direction: 1 | -1): number {\n    const text = this._text;\n    // if we land on a space we move the cursor backwards\n    // if we are searching boundary end we move the cursor backwards ONLY if we don't land on a line break\n    let index =\n        selectionStart > 0 &&\n        this._reSpace.test(text[selectionStart]) &&\n        (direction === -1 || !reNewline.test(text[selectionStart - 1]))\n          ? selectionStart - 1\n          : selectionStart,\n      _char = text[index];\n    while (index > 0 && index < text.length && !reNonWord.test(_char)) {\n      index += direction;\n      _char = text[index];\n    }\n    if (direction === -1 && reNonWord.test(_char)) {\n      index++;\n    }\n    return index;\n  }\n\n  /**\n   * Selects the word that contains the char at index selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectWord(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    // search backwards\n    const newSelectionStart = this.searchWordBoundary(selectionStart, -1),\n      // search forward\n      newSelectionEnd = Math.max(\n        newSelectionStart,\n        this.searchWordBoundary(selectionStart, 1),\n      );\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    // remove next major, for now it renders twice :(\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Selects the line that contains selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectLine(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    const newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n      newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n  }\n\n  /**\n   * Enters editing state\n   */\n  enterEditing(e?: TPointerEvent) {\n    if (this.isEditing || !this.editable) {\n      return;\n    }\n    this.enterEditingImpl();\n    this.fire('editing:entered', e ? { e } : undefined);\n    this._fireSelectionChanged();\n    if (this.canvas) {\n      this.canvas.fire('text:editing:entered', {\n        target: this as unknown as IText,\n        e,\n      });\n      this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * runs the actual logic that enter from editing state, see {@link enterEditing}\n   */\n  enterEditingImpl() {\n    if (this.canvas) {\n      this.canvas.calcOffset();\n      this.canvas.textEditingManager.exitTextEditing();\n    }\n\n    this.isEditing = true;\n\n    this.initHiddenTextarea();\n    this.hiddenTextarea!.focus();\n    this.hiddenTextarea!.value = this.text;\n    this._updateTextarea();\n    this._saveEditingProps();\n    this._setEditingProps();\n    this._textBeforeEdit = this.text;\n\n    this._tick();\n  }\n\n  /**\n   * called by {@link Canvas#textEditingManager}\n   */\n  updateSelectionOnMouseMove(e: TPointerEvent) {\n    if (this.getActiveControl()) {\n      return;\n    }\n\n    const el = this.hiddenTextarea!;\n    // regain focus\n    getDocumentFromElement(el).activeElement !== el && el.focus();\n\n    const newSelectionStart = this.getSelectionStartFromPointer(e),\n      currentStart = this.selectionStart,\n      currentEnd = this.selectionEnd;\n    if (\n      (newSelectionStart !== this.__selectionStartOnMouseDown ||\n        currentStart === currentEnd) &&\n      (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n    ) {\n      return;\n    }\n    if (newSelectionStart > this.__selectionStartOnMouseDown) {\n      this.selectionStart = this.__selectionStartOnMouseDown;\n      this.selectionEnd = newSelectionStart;\n    } else {\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = this.__selectionStartOnMouseDown;\n    }\n    if (\n      this.selectionStart !== currentStart ||\n      this.selectionEnd !== currentEnd\n    ) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setEditingProps() {\n    this.hoverCursor = 'text';\n\n    if (this.canvas) {\n      this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n    }\n\n    this.borderColor = this.editingBorderColor;\n    this.hasControls = this.selectable = false;\n    this.lockMovementX = this.lockMovementY = true;\n  }\n\n  /**\n   * convert from textarea to grapheme indexes\n   */\n  fromStringToGraphemeSelection(start: number, end: number, text: string) {\n    const smallerTextStart = text.slice(0, start),\n      graphemeStart = this.graphemeSplit(smallerTextStart).length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = text.slice(start, end),\n      graphemeEnd = this.graphemeSplit(smallerTextEnd).length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * convert from fabric to textarea values\n   */\n  fromGraphemeToStringSelection(\n    start: number,\n    end: number,\n    graphemes: string[],\n  ) {\n    const smallerTextStart = graphemes.slice(0, start),\n      graphemeStart = smallerTextStart.join('').length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = graphemes.slice(start, end),\n      graphemeEnd = smallerTextEnd.join('').length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _updateTextarea() {\n    this.cursorOffsetCache = {};\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    if (!this.inCompositionMode) {\n      const newSelection = this.fromGraphemeToStringSelection(\n        this.selectionStart,\n        this.selectionEnd,\n        this._text,\n      );\n      this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n      this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    this.cursorOffsetCache = {};\n    const textarea = this.hiddenTextarea;\n    this.text = textarea.value;\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    const newSelection = this.fromStringToGraphemeSelection(\n      textarea.selectionStart,\n      textarea.selectionEnd,\n      textarea.value,\n    );\n    this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n    if (!this.inCompositionMode) {\n      this.selectionStart = newSelection.selectionStart;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const style = this._calcTextareaPosition();\n      this.hiddenTextarea!.style.left = style.left;\n      this.hiddenTextarea!.style.top = style.top;\n    }\n  }\n\n  /**\n   * @private\n   * @return {Object} style contains style for hiddenTextarea\n   */\n  _calcTextareaPosition() {\n    if (!this.canvas) {\n      return { left: '1px', top: '1px' };\n    }\n    const desiredPosition = this.inCompositionMode\n        ? this.compositionStart\n        : this.selectionStart,\n      boundaries = this._getCursorBoundaries(desiredPosition),\n      cursorLocation = this.get2DCursorLocation(desiredPosition),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex = cursorLocation.charIndex,\n      charHeight =\n        this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') *\n        this.lineHeight,\n      leftOffset = boundaries.leftOffset,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      upperCanvas = this.canvas.upperCanvasEl,\n      upperCanvasWidth = upperCanvas.width / retinaScaling,\n      upperCanvasHeight = upperCanvas.height / retinaScaling,\n      maxWidth = upperCanvasWidth - charHeight,\n      maxHeight = upperCanvasHeight - charHeight;\n\n    const p = new Point(\n      boundaries.left + leftOffset,\n      boundaries.top + boundaries.topOffset + charHeight,\n    )\n      .transform(this.calcTransformMatrix())\n      .transform(this.canvas.viewportTransform)\n      .multiply(\n        new Point(\n          upperCanvas.clientWidth / upperCanvasWidth,\n          upperCanvas.clientHeight / upperCanvasHeight,\n        ),\n      );\n\n    if (p.x < 0) {\n      p.x = 0;\n    }\n    if (p.x > maxWidth) {\n      p.x = maxWidth;\n    }\n    if (p.y < 0) {\n      p.y = 0;\n    }\n    if (p.y > maxHeight) {\n      p.y = maxHeight;\n    }\n\n    // add canvas offset on document\n    p.x += this.canvas._offset.left;\n    p.y += this.canvas._offset.top;\n\n    return {\n      left: `${p.x}px`,\n      top: `${p.y}px`,\n      fontSize: `${charHeight}px`,\n      charHeight: charHeight,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _restoreEditingProps() {\n    if (!this._savedProps) {\n      return;\n    }\n\n    this.hoverCursor = this._savedProps.hoverCursor;\n    this.hasControls = this._savedProps.hasControls;\n    this.borderColor = this._savedProps.borderColor;\n    this.selectable = this._savedProps.selectable;\n    this.lockMovementX = this._savedProps.lockMovementX;\n    this.lockMovementY = this._savedProps.lockMovementY;\n\n    if (this.canvas) {\n      this.canvas.defaultCursor =\n        this._savedProps.defaultCursor || this.canvas.defaultCursor;\n      this.canvas.moveCursor =\n        this._savedProps.moveCursor || this.canvas.moveCursor;\n    }\n\n    delete this._savedProps;\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * But it does not fire events\n   */\n  exitEditingImpl() {\n    const hiddenTextarea = this.hiddenTextarea;\n    this.selected = false;\n    this.isEditing = false;\n\n    if (hiddenTextarea) {\n      hiddenTextarea.blur && hiddenTextarea.blur();\n      hiddenTextarea.parentNode &&\n        hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n    }\n    this.hiddenTextarea = null;\n    this.abortCursorAnimation();\n    this.selectionStart !== this.selectionEnd && this.clearContextTop();\n    this.selectionEnd = this.selectionStart;\n    this._restoreEditingProps();\n    if (this._forceClearCache) {\n      this.initDimensions();\n      this.setCoords();\n    }\n  }\n\n  /**\n   * Exits from editing state and fires relevant events\n   */\n  exitEditing() {\n    const isTextChanged = this._textBeforeEdit !== this.text;\n    this.exitEditingImpl();\n\n    this.fire('editing:exited');\n    isTextChanged && this.fire(MODIFIED);\n    if (this.canvas) {\n      this.canvas.fire('text:editing:exited', {\n        target: this as unknown as IText,\n      });\n      // todo: evaluate add an action to this event\n      isTextChanged && this.canvas.fire('object:modified', { target: this });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _removeExtraneousStyles() {\n    for (const prop in this.styles) {\n      if (!this._textLines[prop as unknown as number]) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * remove and reflow a style block from start to end.\n   * @param {Number} start linear start position for removal (included in removal)\n   * @param {Number} end linear end position for removal ( excluded from removal )\n   */\n  removeStyleFromTo(start: number, end: number) {\n    const { lineIndex: lineStart, charIndex: charStart } =\n        this.get2DCursorLocation(start, true),\n      { lineIndex: lineEnd, charIndex: charEnd } = this.get2DCursorLocation(\n        end,\n        true,\n      );\n    if (lineStart !== lineEnd) {\n      // step1 remove the trailing of lineStart\n      if (this.styles[lineStart]) {\n        for (\n          let i = charStart;\n          i < this._unwrappedTextLines[lineStart].length;\n          i++\n        ) {\n          delete this.styles[lineStart][i];\n        }\n      }\n      // step2 move the trailing of lineEnd to lineStart if needed\n      if (this.styles[lineEnd]) {\n        for (\n          let i = charEnd;\n          i < this._unwrappedTextLines[lineEnd].length;\n          i++\n        ) {\n          const styleObj = this.styles[lineEnd][i];\n          if (styleObj) {\n            this.styles[lineStart] || (this.styles[lineStart] = {});\n            this.styles[lineStart][charStart + i - charEnd] = styleObj;\n          }\n        }\n      }\n      // step3 detects lines will be completely removed.\n      for (let i = lineStart + 1; i <= lineEnd; i++) {\n        delete this.styles[i];\n      }\n      // step4 shift remaining lines.\n      this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n    } else {\n      // remove and shift left on the same line\n      if (this.styles[lineStart]) {\n        const styleObj = this.styles[lineStart];\n        const diff = charEnd - charStart;\n        for (let i = charStart; i < charEnd; i++) {\n          delete styleObj[i];\n        }\n        for (const char in this.styles[lineStart]) {\n          const numericChar = parseInt(char, 10);\n          if (numericChar >= charEnd) {\n            styleObj[numericChar - diff] = styleObj[char];\n            delete styleObj[char];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Shifts line styles up or down\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} offset Can any number?\n   */\n  shiftLineStyles(lineIndex: number, offset: number) {\n    const clonedStyles = Object.assign({}, this.styles);\n    for (const line in this.styles) {\n      const numericLine = parseInt(line, 10);\n      if (numericLine > lineIndex) {\n        this.styles[numericLine + offset] = clonedStyles[numericLine];\n        if (!clonedStyles[numericLine - offset]) {\n          delete this.styles[numericLine];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle insertion of more consecutive style lines for when one or more\n   * newlines gets added to the text. Since current style needs to be shifted\n   * first we shift the current style of the number lines needed, then we add\n   * new lines from the last to the first.\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} qty number of lines to add\n   * @param {Array} copiedStyle Array of objects styles\n   */\n  insertNewlineStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    qty: number,\n    copiedStyle?: { [index: number]: TextStyleDeclaration },\n  ) {\n    const newLineStyles: { [index: number]: TextStyleDeclaration } = {};\n    const originalLineLength = this._unwrappedTextLines[lineIndex].length;\n    const isEndOfLine = originalLineLength === charIndex;\n\n    let someStyleIsCarryingOver = false;\n    qty || (qty = 1);\n    this.shiftLineStyles(lineIndex, qty);\n    const currentCharStyle = this.styles[lineIndex]\n      ? this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1]\n      : undefined;\n\n    // we clone styles of all chars\n    // after cursor onto the current line\n    for (const index in this.styles[lineIndex]) {\n      const numIndex = parseInt(index, 10);\n      if (numIndex >= charIndex) {\n        someStyleIsCarryingOver = true;\n        newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n        // remove lines from the previous line since they're on a new line now\n        if (!(isEndOfLine && charIndex === 0)) {\n          delete this.styles[lineIndex][index];\n        }\n      }\n    }\n    let styleCarriedOver = false;\n    if (someStyleIsCarryingOver && !isEndOfLine) {\n      // if is end of line, the extra style we copied\n      // is probably not something we want\n      this.styles[lineIndex + qty] = newLineStyles;\n      styleCarriedOver = true;\n    }\n    if (styleCarriedOver || originalLineLength > charIndex) {\n      // skip the last line of since we already prepared it.\n      // or contains text without style that we don't want to style\n      // just because it changed lines\n      qty--;\n    }\n    // for the all the lines or all the other lines\n    // we clone current char style onto the next (otherwise empty) line\n    while (qty > 0) {\n      if (copiedStyle && copiedStyle[qty - 1]) {\n        this.styles[lineIndex + qty] = {\n          0: { ...copiedStyle[qty - 1] },\n        };\n      } else if (currentCharStyle) {\n        this.styles[lineIndex + qty] = {\n          0: { ...currentCharStyle },\n        };\n      } else {\n        delete this.styles[lineIndex + qty];\n      }\n      qty--;\n    }\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Inserts style object for a given line/char index\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} quantity number Style object to insert, if given\n   * @param {Array} copiedStyle array of style objects\n   */\n  insertCharStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    quantity: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    if (!this.styles) {\n      this.styles = {};\n    }\n    const currentLineStyles = this.styles[lineIndex],\n      currentLineStylesCloned = currentLineStyles\n        ? { ...currentLineStyles }\n        : {};\n\n    quantity || (quantity = 1);\n    // shift all char styles by quantity forward\n    // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n    for (const index in currentLineStylesCloned) {\n      const numericIndex = parseInt(index, 10);\n      if (numericIndex >= charIndex) {\n        currentLineStyles[numericIndex + quantity] =\n          currentLineStylesCloned[numericIndex];\n        // only delete the style if there was nothing moved there\n        if (!currentLineStylesCloned[numericIndex - quantity]) {\n          delete currentLineStyles[numericIndex];\n        }\n      }\n    }\n    this._forceClearCache = true;\n    if (copiedStyle) {\n      while (quantity--) {\n        if (!Object.keys(copiedStyle[quantity]).length) {\n          continue;\n        }\n        if (!this.styles[lineIndex]) {\n          this.styles[lineIndex] = {};\n        }\n        this.styles[lineIndex][charIndex + quantity] = {\n          ...copiedStyle[quantity],\n        };\n      }\n      return;\n    }\n    if (!currentLineStyles) {\n      return;\n    }\n    const newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n    while (newStyle && quantity--) {\n      this.styles[lineIndex][charIndex + quantity] = { ...newStyle };\n    }\n  }\n\n  /**\n   * Inserts style object(s)\n   * @param {Array} insertedText Characters at the location where style is inserted\n   * @param {Number} start cursor index for inserting style\n   * @param {Array} [copiedStyle] array of style objects to insert.\n   */\n  insertNewStyleBlock(\n    insertedText: string[],\n    start: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    const cursorLoc = this.get2DCursorLocation(start, true),\n      addedLines = [0];\n    let linesLength = 0;\n    // get an array of how many char per lines are being added.\n    for (let i = 0; i < insertedText.length; i++) {\n      if (insertedText[i] === '\\n') {\n        linesLength++;\n        addedLines[linesLength] = 0;\n      } else {\n        addedLines[linesLength]++;\n      }\n    }\n    // for the first line copy the style from the current char position.\n    if (addedLines[0] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex,\n        addedLines[0],\n        copiedStyle,\n      );\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n    }\n    linesLength &&\n      this.insertNewlineStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex + addedLines[0],\n        linesLength,\n      );\n    let i;\n    for (i = 1; i < linesLength; i++) {\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(\n          cursorLoc.lineIndex + i,\n          0,\n          addedLines[i],\n          copiedStyle,\n        );\n      } else if (copiedStyle) {\n        // this test is required in order to close #6841\n        // when a pasted buffer begins with a newline then\n        // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]\n        // may be undefined for some reason\n        if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n      }\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n    }\n    if (addedLines[i] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex + i,\n        0,\n        addedLines[i],\n        copiedStyle,\n      );\n    }\n  }\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars(start: number, end: number = start + 1) {\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars(\n    text: string,\n    style: TextStyleDeclaration[] | undefined,\n    start: number,\n    end: number = start,\n  ) {\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    const graphemes = this.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [\n      ...this._text.slice(0, start),\n      ...graphemes,\n      ...this._text.slice(end),\n    ];\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * Set the selectionStart and selectionEnd according to the new position of cursor\n   * mimic the key - mouse navigation when shift is pressed.\n   */\n  setSelectionStartEndWithShift(\n    start: number,\n    end: number,\n    newSelection: number,\n  ) {\n    if (newSelection <= start) {\n      if (end === start) {\n        this._selectionDirection = LEFT;\n      } else if (this._selectionDirection === RIGHT) {\n        this._selectionDirection = LEFT;\n        this.selectionEnd = start;\n      }\n      this.selectionStart = newSelection;\n    } else if (newSelection > start && newSelection < end) {\n      if (this._selectionDirection === RIGHT) {\n        this.selectionEnd = newSelection;\n      } else {\n        this.selectionStart = newSelection;\n      }\n    } else {\n      // newSelection is > selection start and end\n      if (end === start) {\n        this._selectionDirection = RIGHT;\n      } else if (this._selectionDirection === LEFT) {\n        this._selectionDirection = RIGHT;\n        this.selectionStart = end;\n      }\n      this.selectionEnd = newSelection;\n    }\n  }\n}\n","import { config } from '../../config';\nimport { getFabricDocument, getEnv } from '../../env';\nimport { capValue } from '../../util/misc/capValue';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextBehavior } from './ITextBehavior';\nimport type { TKeyMapIText } from './constants';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, LEFT, RIGHT } from '../../constants';\nimport type { IText } from './IText';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\n\nexport abstract class ITextKeyBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextBehavior<Props, SProps, EventSpec> {\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behavior for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the IText or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = Object.assign({}, this.keysMap);\n   * The function must be in IText.prototype.myFunction And will receive event as args[0]\n   */\n  declare keysMap: TKeyMapIText;\n\n  declare keysMapRtl: TKeyMapIText;\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  declare ctrlKeysMapUp: TKeyMapIText;\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  declare ctrlKeysMapDown: TKeyMapIText;\n\n  declare hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * DOM container to append the hiddenTextarea.\n   * An alternative to attaching to the document.body.\n   * Useful to reduce laggish redraw of the full document.body tree and\n   * also with modals event capturing that won't let the textarea take focus.\n   * @type HTMLElement\n   * @default\n   */\n  declare hiddenTextareaContainer?: HTMLElement | null;\n\n  declare private _clickHandlerInitialized: boolean;\n  declare private _copyDone: boolean;\n  declare private fromPaste: boolean;\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea() {\n    const doc =\n      (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n      getFabricDocument();\n    const textarea = doc.createElement('textarea');\n    Object.entries({\n      autocapitalize: 'off',\n      autocorrect: 'off',\n      autocomplete: 'off',\n      spellcheck: 'false',\n      'data-fabric': 'textarea',\n      wrap: 'off',\n    }).map(([attribute, value]) => textarea.setAttribute(attribute, value));\n    const { top, left, fontSize } = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    textarea.style.cssText = `position: absolute; top: ${top}; left: ${left}; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: ${fontSize};`;\n\n    (this.hiddenTextareaContainer || doc.body).appendChild(textarea);\n\n    Object.entries({\n      blur: 'blur',\n      keydown: 'onKeyDown',\n      keyup: 'onKeyUp',\n      input: 'onInput',\n      copy: 'copy',\n      cut: 'copy',\n      paste: 'paste',\n      compositionstart: 'onCompositionStart',\n      compositionupdate: 'onCompositionUpdate',\n      compositionend: 'onCompositionEnd',\n    } as Record<string, keyof this>).map(([eventName, handler]) =>\n      textarea.addEventListener(\n        eventName,\n        (this[handler] as EventListener).bind(this),\n      ),\n    );\n    this.hiddenTextarea = textarea;\n  }\n\n  /**\n   * Override this method to customize cursor behavior on textbox blur\n   */\n  blur() {\n    this.abortCursorAnimation();\n  }\n\n  /**\n   * Handles keydown event\n   * only used for arrows and combination of modifier keys.\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyDown(e: KeyboardEvent) {\n    if (!this.isEditing) {\n      return;\n    }\n    const keyMap = this.direction === 'rtl' ? this.keysMapRtl : this.keysMap;\n    if (e.keyCode in keyMap) {\n      (this[keyMap[e.keyCode] as keyof this] as (arg: KeyboardEvent) => void)(\n        e,\n      );\n    } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapDown[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.inCompositionMode = false;\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    } else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyUp(e: KeyboardEvent) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapUp[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  }\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput(this: this & { hiddenTextarea: HTMLTextAreaElement }, e: Event) {\n    const fromPaste = this.fromPaste;\n    const { value, selectionStart, selectionEnd } = this.hiddenTextarea;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    const updateAndFire = () => {\n      this.updateFromTextArea();\n      this.fire(CHANGED);\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this as unknown as IText });\n        this.canvas.requestRenderAll();\n      }\n    };\n    if (this.hiddenTextarea.value === '') {\n      this.styles = {};\n      updateAndFire();\n      return;\n    }\n    // decisions about style changes.\n    const nextText = this._splitTextIntoLines(value).graphemeText,\n      charCount = this._text.length,\n      nextCharCount = nextText.length,\n      _selectionStart = this.selectionStart,\n      _selectionEnd = this.selectionEnd,\n      selection = _selectionStart !== _selectionEnd;\n    let copiedStyle: TextStyleDeclaration[] | undefined,\n      removedText,\n      charDiff = nextCharCount - charCount,\n      removeFrom,\n      removeTo;\n\n    const textareaSelection = this.fromStringToGraphemeSelection(\n      selectionStart,\n      selectionEnd,\n      value,\n    );\n    const backDelete = _selectionStart > textareaSelection.selectionStart;\n\n    if (selection) {\n      removedText = this._text.slice(_selectionStart, _selectionEnd);\n      charDiff += _selectionEnd - _selectionStart;\n    } else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(_selectionEnd + charDiff, _selectionEnd);\n      } else {\n        removedText = this._text.slice(\n          _selectionStart,\n          _selectionStart - charDiff,\n        );\n      }\n    }\n    const insertedText = nextText.slice(\n      textareaSelection.selectionEnd - charDiff,\n      textareaSelection.selectionEnd,\n    );\n    if (removedText && removedText.length) {\n      if (insertedText.length) {\n        // let's copy some style before deleting.\n        // we want to copy the style before the cursor OR the style at the cursor if selection\n        // is bigger than 0.\n        copiedStyle = this.getSelectionStyles(\n          _selectionStart,\n          _selectionStart + 1,\n          false,\n        );\n        // now duplicate the style one for each inserted text.\n        copiedStyle = insertedText.map(\n          () =>\n            // this return an array of references, but that is fine since we are\n            // copying the style later.\n            copiedStyle![0],\n        );\n      }\n      if (selection) {\n        removeFrom = _selectionStart;\n        removeTo = _selectionEnd;\n      } else if (backDelete) {\n        // detect differences between forwardDelete and backDelete\n        removeFrom = _selectionEnd - removedText.length;\n        removeTo = _selectionEnd;\n      } else {\n        removeFrom = _selectionEnd;\n        removeTo = _selectionEnd + removedText.length;\n      }\n      this.removeStyleFromTo(removeFrom, removeTo);\n    }\n    if (insertedText.length) {\n      const { copyPasteData } = getEnv();\n      if (\n        fromPaste &&\n        insertedText.join('') === copyPasteData.copiedText &&\n        !config.disableStyleCopyPaste\n      ) {\n        copiedStyle = copyPasteData.copiedTextStyle;\n      }\n      this.insertNewStyleBlock(insertedText, _selectionStart, copiedStyle);\n    }\n    updateAndFire();\n  }\n\n  /**\n   * Composition start\n   */\n  onCompositionStart() {\n    this.inCompositionMode = true;\n  }\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd() {\n    this.inCompositionMode = false;\n  }\n\n  onCompositionUpdate({ target }: CompositionEvent) {\n    const { selectionStart, selectionEnd } = target as HTMLTextAreaElement;\n    this.compositionStart = selectionStart;\n    this.compositionEnd = selectionEnd;\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * Copies selected text\n   */\n  copy() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n    const { copyPasteData } = getEnv();\n    copyPasteData.copiedText = this.getSelectedText();\n    if (!config.disableStyleCopyPaste) {\n      copyPasteData.copiedTextStyle = this.getSelectionStyles(\n        this.selectionStart,\n        this.selectionEnd,\n        true,\n      );\n    } else {\n      copyPasteData.copiedTextStyle = undefined;\n    }\n    this._copyDone = true;\n  }\n\n  /**\n   * Pastes text\n   */\n  paste() {\n    this.fromPaste = true;\n  }\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor(lineIndex: number, charIndex: number): number {\n    let widthBeforeCursor = this._getLineLeftOffset(lineIndex),\n      bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  }\n\n  /**\n   * Gets start offset of a selection\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (\n      lineIndex === this._textLines.length - 1 ||\n      e.metaKey ||\n      e.keyCode === 34\n    ) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n      textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return (\n      textAfterCursor.length +\n      indexOnOtherLine +\n      1 +\n      this.missingNewlineOffset(lineIndex)\n    );\n  }\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset(e: KeyboardEvent, isRight: boolean): number {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    } else {\n      return this.selectionStart;\n    }\n  }\n\n  /**\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n      textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\n      missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\n    // return a negative offset\n    return (\n      -this._textLines[lineIndex - 1].length +\n      indexOnOtherLine -\n      textBeforeCursor.length +\n      (1 - missingNewlineOffset)\n    );\n  }\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine(lineIndex: number, width: number) {\n    const line = this._textLines[lineIndex],\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    let widthOfCharsOnLine = lineLeftOffset,\n      indexOnLine = 0,\n      charWidth,\n      foundMatch;\n\n    for (let j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        const leftEdge = widthOfCharsOnLine - charWidth,\n          rightEdge = widthOfCharsOnLine,\n          offsetFromLeftEdge = Math.abs(leftEdge - width),\n          offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  }\n\n  /**\n   * Moves cursor down\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorDown(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  }\n\n  /**\n   * Moves cursor up\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorUp(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  }\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorUpOrDown(direction: 'Up' | 'Down', e: KeyboardEvent) {\n    const offset = this[`get${direction}CursorOffset`](\n      e,\n      this._selectionDirection === RIGHT,\n    );\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    } else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      const max = this.text.length;\n      this.selectionStart = capValue(0, this.selectionStart, max);\n      this.selectionEnd = capValue(0, this.selectionEnd, max);\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift(offset: number) {\n    const newSelection =\n      this._selectionDirection === LEFT\n        ? this.selectionStart + offset\n        : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(\n      this.selectionStart,\n      this.selectionEnd,\n      newSelection,\n    );\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift(offset: number) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor left\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorLeft(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  }\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   *\n   * @todo refactor not to use method name composition\n   */\n  _move(\n    e: KeyboardEvent,\n    prop: 'selectionStart' | 'selectionEnd',\n    direction: 'Left' | 'Right',\n  ): boolean {\n    let newValue: number | undefined;\n    if (e.altKey) {\n      newValue = this[`findWordBoundary${direction}`](this[prop]);\n    } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {\n      newValue = this[`findLineBoundary${direction}`](this[prop]);\n    } else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== 'undefined' && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _moveLeft(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Left');\n  }\n\n  /**\n   * @private\n   */\n  _moveRight(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Right');\n  }\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithoutShift(e: KeyboardEvent) {\n    let change = true;\n    this._selectionDirection = LEFT;\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (\n      this.selectionEnd === this.selectionStart &&\n      this.selectionStart !== 0\n    ) {\n      change = this._moveLeft(e, 'selectionStart');\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  }\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === RIGHT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveLeft(e, 'selectionEnd');\n    } else if (this.selectionStart !== 0) {\n      this._selectionDirection = LEFT;\n      return this._moveLeft(e, 'selectionStart');\n    }\n  }\n\n  /**\n   * Moves cursor right\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRight(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  }\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorLeftOrRight(direction: 'Left' | 'Right', e: KeyboardEvent) {\n    const actionName = `moveCursor${direction}${\n      e.shiftKey ? 'WithShift' : 'WithoutShift'\n    }` as const;\n    this._currentCursorOpacity = 1;\n    if (this[actionName](e)) {\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorRightWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === LEFT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveRight(e, 'selectionStart');\n    } else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = RIGHT;\n      return this._moveRight(e, 'selectionEnd');\n    }\n  }\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRightWithoutShift(e: KeyboardEvent) {\n    let changed = true;\n    this._selectionDirection = RIGHT;\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  }\n}\n","import type {\n  ObjectPointerEvents,\n  TPointerEvent,\n  TPointerEventInfo,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { invertTransform } from '../../util/misc/matrix';\nimport { DraggableTextDelegate } from './DraggableTextDelegate';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextKeyBehavior } from './ITextKeyBehavior';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport type { IText } from './IText';\n/**\n * `LEFT_CLICK === 0`\n */\nconst notALeftClick = (e: Event) => !!(e as MouseEvent).button;\n\nexport abstract class ITextClickBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextKeyBehavior<Props, SProps, EventSpec> {\n  protected draggableTextDelegate: DraggableTextDelegate;\n\n  initBehavior() {\n    // Initializes event handlers related to cursor or selection\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mouseup', this.mouseUpHandler);\n    this.on('mousedblclick', this.doubleClickHandler);\n    this.on('mousetripleclick', this.tripleClickHandler);\n\n    this.draggableTextDelegate = new DraggableTextDelegate(\n      this as unknown as IText,\n    );\n\n    super.initBehavior();\n  }\n\n  /**\n   * If this method returns true a mouse move operation over a text selection\n   * will not prevent the native mouse event allowing the browser to start a drag operation.\n   * shouldStartDragging can be read 'do not prevent default for mouse move event'\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns\n   */\n  shouldStartDragging() {\n    return this.draggableTextDelegate.isActive();\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drag source,\n   * @see also {@link DraggableTextDelegate#isActive}\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns {boolean} should handle event\n   */\n  onDragStart(e: DragEvent) {\n    return this.draggableTextDelegate.onDragStart(e);\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent) {\n    return this.draggableTextDelegate.canDrop(e);\n  }\n\n  /**\n   * Default handler for double click, select a word\n   */\n  doubleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectWord(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default handler for triple click, select a line\n   */\n  tripleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectLine(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   * initializing a mousedDown on a text area will cancel fabricjs knowledge of\n   * current compositionMode. It will be set to false.\n   */\n  _mouseDownHandler({ e, alreadySelected }: ObjectPointerEvents['mousedown']) {\n    if (\n      !this.canvas ||\n      !this.editable ||\n      notALeftClick(e) ||\n      this.getActiveControl()\n    ) {\n      return;\n    }\n\n    if (this.draggableTextDelegate.start(e)) {\n      return;\n    }\n\n    this.canvas.textEditingManager.register(this);\n\n    if (alreadySelected) {\n      this.inCompositionMode = false;\n      this.setCursorByClick(e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n    this.selected ||= alreadySelected || this.isEditing;\n  }\n\n  /**\n   * standard handler for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler({ e, transform }: ObjectPointerEvents['mouseup']) {\n    const didDrag = this.draggableTextDelegate.end(e);\n\n    if (this.canvas) {\n      this.canvas.textEditingManager.unregister(this);\n\n      const activeObject = this.canvas._activeObject;\n      if (activeObject && activeObject !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n\n    if (\n      !this.editable ||\n      (this.group && !this.group.interactive) ||\n      (transform && transform.actionPerformed) ||\n      notALeftClick(e) ||\n      didDrag\n    ) {\n      return;\n    }\n\n    if (this.selected && !this.getActiveControl()) {\n      this.enterEditing(e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      } else {\n        this.renderCursorOrSelection();\n      }\n    }\n  }\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {TPointerEvent} e Event object\n   */\n  setCursorByClick(e: TPointerEvent) {\n    const newSelection = this.getSelectionStartFromPointer(e),\n      start = this.selectionStart,\n      end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    } else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {TPointerEvent} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer(e: TPointerEvent): number {\n    const mouseOffset = this.canvas!.getScenePoint(e)\n      .transform(invertTransform(this.calcTransformMatrix()))\n      .add(new Point(-this._getLeftOffset(), -this._getTopOffset()));\n    let height = 0,\n      charIndex = 0,\n      lineIndex = 0;\n\n    for (let i = 0; i < this._textLines.length; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i);\n        lineIndex = i;\n        if (i > 0) {\n          charIndex +=\n            this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\n        }\n      } else {\n        break;\n      }\n    }\n    const lineLeftOffset = Math.abs(this._getLineLeftOffset(lineIndex));\n    let width = lineLeftOffset;\n    const charLength = this._textLines[lineIndex].length;\n    const chars = this.__charBounds[lineIndex];\n    for (let j = 0; j < charLength; j++) {\n      // i removed something about flipX here, check.\n      const charWidth = chars[j].kernedWidth;\n      const widthAfter = width + charWidth;\n      if (mouseOffset.x <= widthAfter) {\n        // if the pointer is closer to the end of the char we increment charIndex\n        // in order to position the cursor after the char\n        if (\n          Math.abs(mouseOffset.x - widthAfter) <=\n          Math.abs(mouseOffset.x - width)\n        ) {\n          charIndex++;\n        }\n        break;\n      }\n      width = widthAfter;\n      charIndex++;\n    }\n\n    return Math.min(\n      // if object is horizontally flipped, mirror cursor location from the end\n      this.flipX ? charLength - charIndex : charIndex,\n      this._text.length,\n    );\n  }\n}\n","export type TKeyMapIText = Record<\n  KeyboardEvent['keyCode'],\n  CursorHandlingMethods\n>;\n\nexport type CursorHandlingMethods =\n  | 'moveCursorUp'\n  | 'moveCursorDown'\n  | 'moveCursorLeft'\n  | 'moveCursorRight'\n  | 'exitEditing'\n  | 'copy'\n  | 'cut'\n  | 'cmdAll';\n\nconst MOVE_CURSOR_UP: CursorHandlingMethods = 'moveCursorUp';\nconst MOVE_CURSOR_DOWN: CursorHandlingMethods = 'moveCursorDown';\nconst MOVE_CURSOR_LEFT: CursorHandlingMethods = 'moveCursorLeft';\nconst MOVE_CURSOR_RIGHT: CursorHandlingMethods = 'moveCursorRight';\nconst EXIT_EDITING: CursorHandlingMethods = 'exitEditing';\n\n// @TODO look into import { Key } from 'ts-key-enum';\n// and transition from keyCode to Key\n// also reduce string duplication\nexport const keysMap: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_RIGHT,\n  36: MOVE_CURSOR_LEFT,\n  37: MOVE_CURSOR_LEFT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_RIGHT,\n  40: MOVE_CURSOR_DOWN,\n};\n\nexport const keysMapRtl: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_LEFT,\n  36: MOVE_CURSOR_RIGHT,\n  37: MOVE_CURSOR_RIGHT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_LEFT,\n  40: MOVE_CURSOR_DOWN,\n};\n\n/**\n * For functionalities on keyUp + ctrl || cmd\n */\nexport const ctrlKeysMapUp: TKeyMapIText = {\n  67: 'copy',\n  // there was a reason this wasn't deleted. for now leave it here\n  88: 'cut',\n};\n\n/**\n * For functionalities on keyDown + ctrl || cmd\n */\nexport const ctrlKeysMapDown: TKeyMapIText = {\n  65: 'cmdAll',\n};\n","import type { StaticCanvas } from '../../canvas/StaticCanvas';\n\n/**\n * Set the transform of the passed context to the same of a specific Canvas or StaticCanvas.\n * setTransform is used since this utility will RESET the ctx transform to the basic value\n * of retina scaling and viewport transform\n * It is not meant to be added to other transforms, it is used internally to preapre canvases to draw\n * @param ctx\n * @param canvas\n */\nexport const applyCanvasTransform = (\n  ctx: CanvasRenderingContext2D,\n  canvas: StaticCanvas,\n) => {\n  const scale = canvas.getRetinaScaling();\n  ctx.setTransform(scale, 0, 0, scale, 0, 0);\n  const v = canvas.viewportTransform;\n  ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n};\n","import { Canvas } from '../../canvas/Canvas';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextClickBehavior } from './ITextClickBehavior';\nimport {\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  keysMap,\n  keysMapRtl,\n} from './constants';\nimport type { TClassProperties, TFiller, TOptions } from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport {\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from '../Text/constants';\nimport { CENTER, FILL, LEFT, RIGHT } from '../../constants';\nimport type { ObjectToCanvasElementOptions } from '../Object/Object';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport { applyCanvasTransform } from '../../util/internals/applyCanvasTransform';\n\nexport type CursorBoundaries = {\n  left: number;\n  top: number;\n  leftOffset: number;\n  topOffset: number;\n};\n\nexport type CursorRenderingData = {\n  color: string;\n  opacity: number;\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\n// Declare IText protected properties to workaround TS\nconst protectedDefaultValues = {\n  _selectionDirection: null,\n  _reSpace: /\\s|\\r?\\n/,\n  inCompositionMode: false,\n};\n\nexport const iTextDefaultValues: Partial<TClassProperties<IText>> = {\n  selectionStart: 0,\n  selectionEnd: 0,\n  selectionColor: 'rgba(17,119,255,0.3)',\n  isEditing: false,\n  editable: true,\n  editingBorderColor: 'rgba(102,153,255,0.25)',\n  cursorWidth: 2,\n  cursorColor: '',\n  cursorDelay: 1000,\n  cursorDuration: 600,\n  caching: true,\n  hiddenTextareaContainer: null,\n  keysMap,\n  keysMapRtl,\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  ...protectedDefaultValues,\n};\n\n// @TODO this is not complete\ninterface UniqueITextProps {\n  selectionStart: number;\n  selectionEnd: number;\n}\n\nexport interface SerializedITextProps\n  extends SerializedTextProps,\n    UniqueITextProps {}\n\nexport interface ITextProps extends TextProps, UniqueITextProps {}\n\n/**\n * @fires changed\n * @fires selection:changed\n * @fires editing:entered\n * @fires editing:exited\n * @fires dragstart\n * @fires drag drag event firing on the drag source\n * @fires dragend\n * @fires copy\n * @fires cut\n * @fires paste\n *\n * #### Supported key combinations\n * ```\n *   Move cursor:                    left, right, up, down\n *   Select character:               shift + left, shift + right\n *   Select text vertically:         shift + up, shift + down\n *   Move cursor by word:            alt + left, alt + right\n *   Select words:                   shift + alt + left, shift + alt + right\n *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n *   Jump to start/end of text:      cmd + up, cmd + down\n *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n *   Delete character:               backspace\n *   Delete word:                    alt + backspace\n *   Delete line:                    cmd + backspace\n *   Forward delete:                 delete\n *   Copy text:                      ctrl/cmd + c\n *   Paste text:                     ctrl/cmd + v\n *   Cut text:                       ctrl/cmd + x\n *   Select entire text:             ctrl/cmd + a\n *   Quit editing                    tab or esc\n * ```\n *\n * #### Supported mouse/touch combination\n * ```\n *   Position cursor:                click/touch\n *   Create selection:               click/touch & drag\n *   Create selection:               click & shift + click\n *   Select word:                    double click\n *   Select line:                    triple click\n * ```\n */\nexport class IText<\n    Props extends TOptions<ITextProps> = Partial<ITextProps>,\n    SProps extends SerializedITextProps = SerializedITextProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends ITextClickBehavior<Props, SProps, EventSpec>\n  implements UniqueITextProps\n{\n  /**\n   * Index where text selection starts (or where cursor is when there is no selection)\n   * @type Number\n   * @default\n   */\n  declare selectionStart: number;\n\n  /**\n   * Index where text selection ends\n   * @type Number\n   * @default\n   */\n  declare selectionEnd: number;\n\n  declare compositionStart: number;\n\n  declare compositionEnd: number;\n\n  /**\n   * Color of text selection\n   * @type String\n   * @default\n   */\n  declare selectionColor: string;\n\n  /**\n   * Indicates whether text is in editing mode\n   * @type Boolean\n   * @default\n   */\n  declare isEditing: boolean;\n\n  /**\n   * Indicates whether a text can be edited\n   * @type Boolean\n   * @default\n   */\n  declare editable: boolean;\n\n  /**\n   * Border color of text object while it's in editing mode\n   * @type String\n   * @default\n   */\n  declare editingBorderColor: string;\n\n  /**\n   * Width of cursor (in px)\n   * @type Number\n   * @default\n   */\n  declare cursorWidth: number;\n\n  /**\n   * Color of text cursor color in editing mode.\n   * if not set (default) will take color from the text.\n   * if set to a color value that fabric can understand, it will\n   * be used instead of the color of the text at the current position.\n   * @type String\n   * @default\n   */\n  declare cursorColor: string;\n\n  /**\n   * Delay between cursor blink (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDelay: number;\n\n  /**\n   * Duration of cursor fade in (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDuration: number;\n\n  declare compositionColor: string;\n\n  /**\n   * Indicates whether internal text char widths can be cached\n   * @type Boolean\n   * @default\n   */\n  declare caching: boolean;\n\n  static ownDefaults = iTextDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...IText.ownDefaults };\n  }\n\n  static type = 'IText';\n\n  get type() {\n    const type = super.type;\n    // backward compatibility\n    return type === 'itext' ? 'i-text' : type;\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...IText.ownDefaults, ...options } as Props);\n    this.initBehavior();\n  }\n\n  /**\n   * While editing handle differently\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (this.isEditing && this._savedProps && key in this._savedProps) {\n      // @ts-expect-error irritating TS\n      this._savedProps[key] = value;\n      return this;\n    }\n    if (key === 'canvas') {\n      this.canvas instanceof Canvas &&\n        this.canvas.textEditingManager.remove(this);\n      value instanceof Canvas && value.textEditingManager.add(this);\n    }\n    return super._set(key, value);\n  }\n\n  /**\n   * Sets selection start (left boundary of a selection)\n   * @param {Number} index Index to set selection start to\n   */\n  setSelectionStart(index: number) {\n    index = Math.max(index, 0);\n    this._updateAndFire('selectionStart', index);\n  }\n\n  /**\n   * Sets selection end (right boundary of a selection)\n   * @param {Number} index Index to set selection end to\n   */\n  setSelectionEnd(index: number) {\n    index = Math.min(index, this.text.length);\n    this._updateAndFire('selectionEnd', index);\n  }\n\n  /**\n   * @private\n   * @param {String} property 'selectionStart' or 'selectionEnd'\n   * @param {Number} index new position of property\n   */\n  protected _updateAndFire(\n    property: 'selectionStart' | 'selectionEnd',\n    index: number,\n  ) {\n    if (this[property] !== index) {\n      this._fireSelectionChanged();\n      this[property] = index;\n    }\n    this._updateTextarea();\n  }\n\n  /**\n   * Fires the even of selection changed\n   * @private\n   */\n  _fireSelectionChanged() {\n    this.fire('selection:changed');\n    this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n  }\n\n  /**\n   * Initialize text dimensions. Render all text on given context\n   * or on a offscreen canvas to get the text width with measureText.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   * @private\n   */\n  initDimensions() {\n    this.isEditing && this.initDelayedCursor();\n    super.initDimensions();\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified selectionEnd or startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n    complete?: boolean,\n  ) {\n    return super.getSelectionStyles(startIndex, endIndex, complete);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} [styles] Styles object\n   * @param {Number} [startIndex] Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n   */\n  setSelectionStyles(\n    styles: object,\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n  ) {\n    return super.setSelectionStyles(styles, startIndex, endIndex);\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n   * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(\n    selectionStart = this.selectionStart,\n    skipWrapping?: boolean,\n  ) {\n    return super.get2DCursorLocation(selectionStart, skipWrapping);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    super.render(ctx);\n    // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n    // the correct position but not at every cursor animation.\n    this.cursorOffsetCache = {};\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * @override block cursor/selection logic while rendering the exported canvas\n   * @todo this workaround should be replaced with a more robust solution\n   */\n  toCanvasElement(options?: ObjectToCanvasElementOptions): HTMLCanvasElement {\n    const isEditing = this.isEditing;\n    this.isEditing = false;\n    const canvas = super.toCanvasElement(options);\n    this.isEditing = isEditing;\n    return canvas;\n  }\n\n  /**\n   * Renders cursor or selection (depending on what exists)\n   * it does on the contextTop. If contextTop is not available, do nothing.\n   */\n  renderCursorOrSelection() {\n    if (!this.isEditing || !this.canvas) {\n      return;\n    }\n    const ctx = this.clearContextTop(true);\n    if (!ctx) {\n      return;\n    }\n    const boundaries = this._getCursorBoundaries();\n\n    const ancestors = this.findAncestorsWithClipPath();\n    const hasAncestorsWithClipping = ancestors.length > 0;\n    let drawingCtx: CanvasRenderingContext2D = ctx;\n    let drawingCanvas: HTMLCanvasElement | undefined = undefined;\n    if (hasAncestorsWithClipping) {\n      // we have some clipPath, we need to draw the selection on an intermediate layer.\n      drawingCanvas = createCanvasElementFor(ctx.canvas);\n      drawingCtx = drawingCanvas.getContext('2d')!;\n      applyCanvasTransform(drawingCtx, this.canvas);\n      const m = this.calcTransformMatrix();\n      drawingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n\n    if (this.selectionStart === this.selectionEnd && !this.inCompositionMode) {\n      this.renderCursor(drawingCtx, boundaries);\n    } else {\n      this.renderSelection(drawingCtx, boundaries);\n    }\n\n    if (hasAncestorsWithClipping) {\n      // we need a neutral context.\n      // this won't work for nested clippaths in which a clippath\n      // has its own clippath\n      for (const ancestor of ancestors) {\n        const clipPath = ancestor.clipPath!;\n        const clippingCanvas = createCanvasElementFor(ctx.canvas);\n        const clippingCtx = clippingCanvas.getContext('2d')!;\n        applyCanvasTransform(clippingCtx, this.canvas);\n        // position the ctx in the center of the outer ancestor\n        if (!clipPath.absolutePositioned) {\n          const m = ancestor.calcTransformMatrix();\n          clippingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        }\n        clipPath.transform(clippingCtx);\n        // we assign an empty drawing context, we don't plan to have this working for nested clippaths for now\n        clipPath.drawObject(clippingCtx, true, {});\n        this.drawClipPathOnCache(drawingCtx, clipPath, clippingCanvas);\n      }\n    }\n\n    if (hasAncestorsWithClipping) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(drawingCanvas!, 0, 0);\n    }\n\n    this.canvas.contextTopDirty = true;\n    ctx.restore();\n  }\n\n  /**\n   * Finds and returns an array of clip paths that are applied to the parent\n   * group(s) of the current FabricObject instance. The object's hierarchy is\n   * traversed upwards (from the current object towards the root of the canvas),\n   * checking each parent object for the presence of a `clipPath` that is not\n   * absolutely positioned.\n   */\n  findAncestorsWithClipPath(): FabricObject[] {\n    const clipPathAncestors: FabricObject[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let obj: FabricObject | undefined = this;\n    while (obj) {\n      if (obj.clipPath) {\n        clipPathAncestors.push(obj);\n      }\n      obj = obj.parent;\n    }\n\n    return clipPathAncestors;\n  }\n\n  /**\n   * Returns cursor boundaries (left, top, leftOffset, topOffset)\n   * left/top are left/top of entire text box\n   * leftOffset/topOffset are offset from that left/top point of a text box\n   * @private\n   * @param {number} [index] index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundaries(\n    index: number = this.selectionStart,\n    skipCaching?: boolean,\n  ): CursorBoundaries {\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset(),\n      offsets = this._getCursorBoundariesOffsets(index, skipCaching);\n    return {\n      left: left,\n      top: top,\n      leftOffset: offsets.left,\n      topOffset: offsets.top,\n    };\n  }\n\n  /**\n   * Caches and returns cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundariesOffsets(\n    index: number,\n    skipCaching?: boolean,\n  ): { left: number; top: number } {\n    if (skipCaching) {\n      return this.__getCursorBoundariesOffsets(index);\n    }\n    if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n      return this.cursorOffsetCache as { left: number; top: number };\n    }\n    return (this.cursorOffsetCache = this.__getCursorBoundariesOffsets(index));\n  }\n\n  /**\n   * Calculates cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   */\n  __getCursorBoundariesOffsets(index: number) {\n    let topOffset = 0,\n      leftOffset = 0;\n    const { charIndex, lineIndex } = this.get2DCursorLocation(index);\n\n    for (let i = 0; i < lineIndex; i++) {\n      topOffset += this.getHeightOfLine(i);\n    }\n    const lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    const bound = this.__charBounds[lineIndex][charIndex];\n    bound && (leftOffset = bound.left);\n    if (\n      this.charSpacing !== 0 &&\n      charIndex === this._textLines[lineIndex].length\n    ) {\n      leftOffset -= this._getWidthOfCharSpacing();\n    }\n    const boundaries = {\n      top: topOffset,\n      left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n    };\n    if (this.direction === 'rtl') {\n      if (\n        this.textAlign === RIGHT ||\n        this.textAlign === JUSTIFY ||\n        this.textAlign === JUSTIFY_RIGHT\n      ) {\n        boundaries.left *= -1;\n      } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      } else if (\n        this.textAlign === CENTER ||\n        this.textAlign === JUSTIFY_CENTER\n      ) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      }\n    }\n    return boundaries;\n  }\n\n  /**\n   * Renders cursor on context Top, outside the animation cycle, on request\n   * Used for the drag/drop effect.\n   * If contextTop is not available, do nothing.\n   */\n  renderCursorAt(selectionStart: number) {\n    this._renderCursor(\n      this.canvas!.contextTop,\n      this._getCursorBoundaries(selectionStart, true),\n      selectionStart,\n    );\n  }\n\n  /**\n   * Renders cursor\n   * @param {Object} boundaries\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderCursor(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    this._renderCursor(ctx, boundaries, this.selectionStart);\n  }\n\n  /**\n   * Return the data needed to render the cursor for given selection start\n   * The left,top are relative to the object, while width and height are prescaled\n   * to look think with canvas zoom and object scaling,\n   * so they depend on canvas and object scaling\n   */\n  getCursorRenderingData(\n    selectionStart: number = this.selectionStart,\n    boundaries: CursorBoundaries = this._getCursorBoundaries(selectionStart),\n  ): CursorRenderingData {\n    const cursorLocation = this.get2DCursorLocation(selectionStart),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex =\n        cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n      charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n      multiplier = this.getObjectScaling().x * this.canvas!.getZoom(),\n      cursorWidth = this.cursorWidth / multiplier,\n      dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY'),\n      topOffset =\n        boundaries.topOffset +\n        ((1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex)) /\n          this.lineHeight -\n        charHeight * (1 - this._fontSizeFraction);\n\n    return {\n      color:\n        this.cursorColor ||\n        (this.getValueOfPropertyAt(lineIndex, charIndex, 'fill') as string),\n      opacity: this._currentCursorOpacity,\n      left: boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n      top: topOffset + boundaries.top + dy,\n      width: cursorWidth,\n      height: charHeight,\n    };\n  }\n\n  /**\n   * Render the cursor at the given selectionStart.\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderCursor(\n    ctx: CanvasRenderingContext2D,\n    boundaries: CursorBoundaries,\n    selectionStart: number,\n  ) {\n    const { color, opacity, left, top, width, height } =\n      this.getCursorRenderingData(selectionStart, boundaries);\n    ctx.fillStyle = color;\n    ctx.globalAlpha = opacity;\n    ctx.fillRect(left, top, width, height);\n  }\n\n  /**\n   * Renders text selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderSelection(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    const selection = {\n      selectionStart: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionStart\n        : this.selectionStart,\n      selectionEnd: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionEnd\n        : this.selectionEnd,\n    };\n    this._renderSelection(ctx, selection, boundaries);\n  }\n\n  /**\n   * Renders drag start text selection\n   */\n  renderDragSourceEffect() {\n    const dragStartSelection =\n      this.draggableTextDelegate.getDragStartSelection()!;\n    this._renderSelection(\n      this.canvas!.contextTop,\n      dragStartSelection,\n      this._getCursorBoundaries(dragStartSelection.selectionStart, true),\n    );\n  }\n\n  renderDropTargetEffect(e: DragEvent) {\n    const dragSelection = this.getSelectionStartFromPointer(e);\n    this.renderCursorAt(dragSelection);\n  }\n\n  /**\n   * Renders text selection\n   * @private\n   * @param {{ selectionStart: number, selectionEnd: number }} selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderSelection(\n    ctx: CanvasRenderingContext2D,\n    selection: { selectionStart: number; selectionEnd: number },\n    boundaries: CursorBoundaries,\n  ) {\n    const selectionStart = selection.selectionStart,\n      selectionEnd = selection.selectionEnd,\n      isJustify = this.textAlign.includes(JUSTIFY),\n      start = this.get2DCursorLocation(selectionStart),\n      end = this.get2DCursorLocation(selectionEnd),\n      startLine = start.lineIndex,\n      endLine = end.lineIndex,\n      startChar = start.charIndex < 0 ? 0 : start.charIndex,\n      endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n    for (let i = startLine; i <= endLine; i++) {\n      const lineOffset = this._getLineLeftOffset(i) || 0;\n      let lineHeight = this.getHeightOfLine(i),\n        realLineHeight = 0,\n        boxStart = 0,\n        boxEnd = 0;\n\n      if (i === startLine) {\n        boxStart = this.__charBounds[startLine][startChar].left;\n      }\n      if (i >= startLine && i < endLine) {\n        boxEnd =\n          isJustify && !this.isEndOfWrapping(i)\n            ? this.width\n            : this.getLineWidth(i) || 5; // WTF is this 5?\n      } else if (i === endLine) {\n        if (endChar === 0) {\n          boxEnd = this.__charBounds[endLine][endChar].left;\n        } else {\n          const charSpacing = this._getWidthOfCharSpacing();\n          boxEnd =\n            this.__charBounds[endLine][endChar - 1].left +\n            this.__charBounds[endLine][endChar - 1].width -\n            charSpacing;\n        }\n      }\n      realLineHeight = lineHeight;\n      if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n        lineHeight /= this.lineHeight;\n      }\n      let drawStart = boundaries.left + lineOffset + boxStart,\n        drawHeight = lineHeight,\n        extraTop = 0;\n      const drawWidth = boxEnd - boxStart;\n      if (this.inCompositionMode) {\n        ctx.fillStyle = this.compositionColor || 'black';\n        drawHeight = 1;\n        extraTop = lineHeight;\n      } else {\n        ctx.fillStyle = this.selectionColor;\n      }\n      if (this.direction === 'rtl') {\n        if (\n          this.textAlign === RIGHT ||\n          this.textAlign === JUSTIFY ||\n          this.textAlign === JUSTIFY_RIGHT\n        ) {\n          drawStart = this.width - drawStart - drawWidth;\n        } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        } else if (\n          this.textAlign === CENTER ||\n          this.textAlign === JUSTIFY_CENTER\n        ) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        }\n      }\n      ctx.fillRect(\n        drawStart,\n        boundaries.top + boundaries.topOffset + extraTop,\n        drawWidth,\n        drawHeight,\n      );\n      boundaries.topOffset += realLineHeight;\n    }\n  }\n\n  /**\n   * High level function to know the height of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns fontSize of char at the current cursor\n   * Unused from the library, is for the end user\n   * @return {Number} Character font size\n   */\n  getCurrentCharFontSize(): number {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n  }\n\n  /**\n   * High level function to know the color of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns color (fill) of char at the current cursor\n   * if the text object has a pattern or gradient for filler, it will return that.\n   * Unused by the library, is for the end user\n   * @return {String | TFiller} Character color (fill)\n   */\n  getCurrentCharColor(): string | TFiller | null {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, FILL);\n  }\n\n  /**\n   * Returns the cursor position for the getCurrent.. functions\n   * @private\n   */\n  _getCurrentCharIndex() {\n    const cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n      charIndex =\n        cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n    return { l: cursorPosition.lineIndex, c: charIndex };\n  }\n\n  dispose() {\n    this.exitEditingImpl();\n    this.draggableTextDelegate.dispose();\n    super.dispose();\n  }\n}\n\nclassRegistry.setClass(IText);\n// legacy\nclassRegistry.setClass(IText, 'i-text');\n","import type { TClassProperties, TOptions } from '../typedefs';\nimport { IText } from './IText/IText';\nimport { classRegistry } from '../ClassRegistry';\nimport { createTextboxDefaultControls } from '../controls/commonControls';\nimport { JUSTIFY } from './Text/constants';\nimport type { TextStyleDeclaration } from './Text/StyledText';\nimport type { SerializedITextProps, ITextProps } from './IText/IText';\nimport type { ITextEvents } from './IText/ITextBehavior';\nimport type { TextLinesInfo } from './Text/Text';\nimport type { Control } from '../controls/Control';\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textboxDefaultValues: Partial<TClassProperties<Textbox>> = {\n  minWidth: 20,\n  dynamicMinWidth: 2,\n  lockScalingFlip: true,\n  noScaleCache: false,\n  _wordJoiners: /[ \\t\\r]/,\n  splitByGrapheme: false,\n};\n\nexport type GraphemeData = {\n  wordsData: {\n    word: string[];\n    width: number;\n  }[][];\n  largestWordWidth: number;\n};\n\nexport type StyleMap = Record<string, { line: number; offset: number }>;\n\n// @TODO this is not complete\ninterface UniqueTextboxProps {\n  minWidth: number;\n  splitByGrapheme: boolean;\n  dynamicMinWidth: number;\n  _wordJoiners: RegExp;\n}\n\nexport interface SerializedTextboxProps\n  extends SerializedITextProps,\n    Pick<UniqueTextboxProps, 'minWidth' | 'splitByGrapheme'> {}\n\nexport interface TextboxProps extends ITextProps, UniqueTextboxProps {}\n\n/**\n * Textbox class, based on IText, allows the user to resize the text rectangle\n * and wraps lines automatically. Textboxes have their Y scaling locked, the\n * user can only change width. Height is adjusted automatically based on the\n * wrapping of lines.\n */\nexport class Textbox<\n    Props extends TOptions<TextboxProps> = Partial<TextboxProps>,\n    SProps extends SerializedTextboxProps = SerializedTextboxProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends IText<Props, SProps, EventSpec>\n  implements UniqueTextboxProps\n{\n  /**\n   * Minimum width of textbox, in pixels.\n   * @type Number\n   * @default\n   */\n  declare minWidth: number;\n\n  /**\n   * Minimum calculated width of a textbox, in pixels.\n   * fixed to 2 so that an empty textbox cannot go to 0\n   * and is still selectable without text.\n   * @type Number\n   * @default\n   */\n  declare dynamicMinWidth: number;\n\n  /**\n   * Use this boolean property in order to split strings that have no white space concept.\n   * this is a cheap way to help with chinese/japanese\n   * @type Boolean\n   * @since 2.6.0\n   */\n  declare splitByGrapheme: boolean;\n\n  declare _wordJoiners: RegExp;\n\n  declare _styleMap: StyleMap;\n\n  declare isWrapping: boolean;\n\n  static type = 'Textbox';\n\n  static textLayoutProperties = [...IText.textLayoutProperties, 'width'];\n\n  static ownDefaults = textboxDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Textbox.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...Textbox.ownDefaults, ...options } as Props);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createTextboxDefaultControls() };\n  }\n\n  /**\n   * Unlike superclass's version of this function, Textbox does not update\n   * its width.\n   * @private\n   * @override\n   */\n  initDimensions() {\n    if (!this.initialized) {\n      return;\n    }\n    this.isEditing && this.initDelayedCursor();\n    this._clearCache();\n    // clear dynamicMinWidth as it will be different after we re-wrap line\n    this.dynamicMinWidth = 0;\n    // wrap lines\n    this._styleMap = this._generateStyleMap(this._splitText());\n    // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n    if (this.dynamicMinWidth > this.width) {\n      this._set('width', this.dynamicMinWidth);\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n    // clear cache and re-calculate height\n    this.height = this.calcTextHeight();\n  }\n\n  /**\n   * Generate an object that translates the style object so that it is\n   * broken up by visual lines (new lines and automatic wrapping).\n   * The original text styles object is broken up by actual lines (new lines only),\n   * which is only sufficient for Text / IText\n   * @private\n   */\n  _generateStyleMap(textInfo: TextLinesInfo): StyleMap {\n    let realLineCount = 0,\n      realLineCharCount = 0,\n      charCount = 0;\n    const map: StyleMap = {};\n\n    for (let i = 0; i < textInfo.graphemeLines.length; i++) {\n      if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n        realLineCharCount = 0;\n        charCount++;\n        realLineCount++;\n      } else if (\n        !this.splitByGrapheme &&\n        this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) &&\n        i > 0\n      ) {\n        // this case deals with space's that are removed from end of lines when wrapping\n        realLineCharCount++;\n        charCount++;\n      }\n\n      map[i] = { line: realLineCount, offset: realLineCharCount };\n\n      charCount += textInfo.graphemeLines[i].length;\n      realLineCharCount += textInfo.graphemeLines[i].length;\n    }\n\n    return map;\n  }\n\n  /**\n   * Returns true if object has a style property or has it on a specified line\n   * @param {Number} lineIndex\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex: number): boolean {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (map) {\n        lineIndex = map.line;\n      }\n    }\n    return super.styleHas(property, lineIndex);\n  }\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    let offset = 0,\n      nextLineIndex = lineIndex + 1,\n      nextOffset: number,\n      shouldLimit = false;\n    const map = this._styleMap[lineIndex],\n      mapNextLine = this._styleMap[lineIndex + 1];\n    if (map) {\n      lineIndex = map.line;\n      offset = map.offset;\n    }\n    if (mapNextLine) {\n      nextLineIndex = mapNextLine.line;\n      shouldLimit = nextLineIndex === lineIndex;\n      nextOffset = mapNextLine.offset;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        const p2Number = parseInt(p2, 10);\n        if (p2Number >= offset && (!shouldLimit || p2Number < nextOffset!)) {\n          for (const p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (!map) {\n        return {};\n      }\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n    }\n    return super._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    const map = this._styleMap[lineIndex];\n    super._setStyleDeclaration(map.line, map.offset + charIndex, style);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._deleteStyleDeclaration(map.line, map.offset + charIndex);\n  }\n\n  /**\n   * probably broken need a fix\n   * Returns the real style line that correspond to the wrapped lineIndex line\n   * Used just to verify if the line does exist or not.\n   * @param {Number} lineIndex\n   * @returns {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    const map = this._styleMap[lineIndex];\n    return !!this.styles[map.line];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._setLineStyle(map.line);\n  }\n\n  /**\n   * Wraps text using the 'width' property of Textbox. First this function\n   * splits text on newlines, so we preserve newlines entered by the user.\n   * Then it wraps each line using the width of the Textbox by calling\n   * _wrapLine().\n   * @param {Array} lines The string array of text that is split into lines\n   * @param {Number} desiredWidth width you want to wrap to\n   * @returns {Array} Array of lines\n   */\n  _wrapText(lines: string[], desiredWidth: number): string[][] {\n    this.isWrapping = true;\n    // extract all thewords and the widths to optimally wrap lines.\n    const data = this.getGraphemeDataForRender(lines);\n    const wrapped: string[][] = [];\n    for (let i = 0; i < data.wordsData.length; i++) {\n      wrapped.push(...this._wrapLine(i, desiredWidth, data));\n    }\n    this.isWrapping = false;\n    return wrapped;\n  }\n\n  /**\n   * For each line of text terminated by an hard line stop,\n   * measure each word width and extract the largest word from all.\n   * The returned words here are the one that at the end will be rendered.\n   * @param {string[]} lines the lines we need to measure\n   *\n   */\n  getGraphemeDataForRender(lines: string[]): GraphemeData {\n    const splitByGrapheme = this.splitByGrapheme,\n      infix = splitByGrapheme ? '' : ' ';\n\n    let largestWordWidth = 0;\n\n    const data = lines.map((line, lineIndex) => {\n      let offset = 0;\n      const wordsOrGraphemes = splitByGrapheme\n        ? this.graphemeSplit(line)\n        : this.wordSplit(line);\n\n      if (wordsOrGraphemes.length === 0) {\n        return [{ word: [], width: 0 }];\n      }\n\n      return wordsOrGraphemes.map((word: string) => {\n        // if using splitByGrapheme words are already in graphemes.\n        const graphemeArray = splitByGrapheme\n          ? [word]\n          : this.graphemeSplit(word);\n        const width = this._measureWord(graphemeArray, lineIndex, offset);\n        largestWordWidth = Math.max(width, largestWordWidth);\n        offset += graphemeArray.length + infix.length;\n        return { word: graphemeArray, width };\n      });\n    });\n\n    return {\n      wordsData: data,\n      largestWordWidth,\n    };\n  }\n\n  /**\n   * Helper function to measure a string of text, given its lineIndex and charIndex offset\n   * It gets called when charBounds are not available yet.\n   * Override if necessary\n   * Use with {@link Textbox#wordSplit}\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {String} text\n   * @param {number} lineIndex\n   * @param {number} charOffset\n   * @returns {number}\n   */\n  _measureWord(word: string[], lineIndex: number, charOffset = 0): number {\n    let width = 0,\n      prevGrapheme;\n    const skipLeft = true;\n    for (let i = 0, len = word.length; i < len; i++) {\n      const box = this._getGraphemeBox(\n        word[i],\n        lineIndex,\n        i + charOffset,\n        prevGrapheme,\n        skipLeft,\n      );\n      width += box.kernedWidth;\n      prevGrapheme = word[i];\n    }\n    return width;\n  }\n\n  /**\n   * Override this method to customize word splitting\n   * Use with {@link Textbox#_measureWord}\n   * @param {string} value\n   * @returns {string[]} array of words\n   */\n  wordSplit(value: string): string[] {\n    return value.split(this._wordJoiners);\n  }\n\n  /**\n   * Wraps a line of text using the width of the Textbox as desiredWidth\n   * and leveraging the known width o words from GraphemeData\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} desiredWidth width you want to wrap the line to\n   * @param {GraphemeData} graphemeData an object containing all the lines' words width.\n   * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n   * @returns {Array} Array of line(s) into which the given text is wrapped\n   * to.\n   */\n  _wrapLine(\n    lineIndex: number,\n    desiredWidth: number,\n    { largestWordWidth, wordsData }: GraphemeData,\n    reservedSpace = 0,\n  ): string[][] {\n    const additionalSpace = this._getWidthOfCharSpacing(),\n      splitByGrapheme = this.splitByGrapheme,\n      graphemeLines = [],\n      infix = splitByGrapheme ? '' : ' ';\n\n    let lineWidth = 0,\n      line: string[] = [],\n      // spaces in different languages?\n      offset = 0,\n      infixWidth = 0,\n      lineJustStarted = true;\n\n    desiredWidth -= reservedSpace;\n\n    const maxWidth = Math.max(\n      desiredWidth,\n      largestWordWidth,\n      this.dynamicMinWidth,\n    );\n    // layout words\n    const data = wordsData[lineIndex];\n    offset = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      const { word, width: wordWidth } = data[i];\n      offset += word.length;\n\n      lineWidth += infixWidth + wordWidth - additionalSpace;\n      if (lineWidth > maxWidth && !lineJustStarted) {\n        graphemeLines.push(line);\n        line = [];\n        lineWidth = wordWidth;\n        lineJustStarted = true;\n      } else {\n        lineWidth += additionalSpace;\n      }\n\n      if (!lineJustStarted && !splitByGrapheme) {\n        line.push(infix);\n      }\n      line = line.concat(word);\n\n      infixWidth = splitByGrapheme\n        ? 0\n        : this._measureWord([infix], lineIndex, offset);\n      offset++;\n      lineJustStarted = false;\n    }\n\n    i && graphemeLines.push(line);\n\n    // TODO: this code is probably not necessary anymore.\n    // it can be moved out of this function since largestWordWidth is now\n    // known in advance\n    if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n      this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n    }\n    return graphemeLines;\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @param {Number} lineIndex text to split\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    if (!this._styleMap[lineIndex + 1]) {\n      // is last line, return true;\n      return true;\n    }\n    if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n      // this is last line before a line break, return true;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * This is important only for splitByGrapheme at the end of wrapping.\n   * If we are not wrapping the offset is always 1\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1 {\n    if (this.splitByGrapheme && !skipWrapping) {\n      return this.isEndOfWrapping(lineIndex) ? 1 : 0;\n    }\n    return 1;\n  }\n\n  /**\n   * Gets lines of text to render in the Textbox. This function calculates\n   * text wrapping on the fly every time it is called.\n   * @param {String} text text to split\n   * @returns {Array} Array of lines in the Textbox.\n   * @override\n   */\n  _splitTextIntoLines(text: string) {\n    const newText = super._splitTextIntoLines(text),\n      graphemeLines = this._wrapText(newText.lines, this.width),\n      lines = new Array(graphemeLines.length);\n    for (let i = 0; i < graphemeLines.length; i++) {\n      lines[i] = graphemeLines[i].join('');\n    }\n    newText.lines = lines;\n    newText.graphemeLines = graphemeLines;\n    return newText;\n  }\n\n  getMinWidth() {\n    return Math.max(this.minWidth, this.dynamicMinWidth);\n  }\n\n  _removeExtraneousStyles() {\n    const linesToKeep = new Map();\n    for (const prop in this._styleMap) {\n      const propNumber = parseInt(prop, 10);\n      if (this._textLines[propNumber]) {\n        const lineIndex = this._styleMap[prop].line;\n        linesToKeep.set(`${lineIndex}`, true);\n      }\n    }\n    for (const prop in this.styles) {\n      if (!linesToKeep.has(prop)) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject<T, K>([\n      'minWidth',\n      'splitByGrapheme',\n      ...propertiesToInclude,\n    ] as K[]);\n  }\n}\n\nclassRegistry.setClass(Textbox);\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport { sendPointToPlane } from '../../util/misc/planeChange';\nimport type { LayoutStrategyResult, StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { getObjectBounds } from './utils';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to match the clip path bounding box.\n */\nexport class ClipPathLayout extends LayoutStrategy {\n  static readonly type = 'clip-path';\n\n  shouldPerformLayout(context: StrictLayoutContext): boolean {\n    return !!context.target.clipPath && super.shouldPerformLayout(context);\n  }\n\n  shouldLayoutClipPath() {\n    return false;\n  }\n\n  calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    const { target } = context;\n    const { clipPath, group } = target;\n    if (!clipPath || !this.shouldPerformLayout(context)) {\n      return;\n    }\n    // TODO: remove stroke calculation from this case\n    const { width, height } = makeBoundingBoxFromPoints(\n      getObjectBounds(target, clipPath as FabricObject),\n    );\n    const size = new Point(width, height);\n    if (clipPath.absolutePositioned) {\n      //  we want the center point to exist in group's containing plane\n      const clipPathCenter = sendPointToPlane(\n        clipPath.getRelativeCenterPoint(),\n        undefined,\n        group ? group.calcTransformMatrix() : undefined,\n      );\n      return {\n        center: clipPathCenter,\n        size,\n      };\n    } else {\n      //  we want the center point to exist in group's containing plane, so we send it upwards\n      const clipPathCenter = clipPath\n        .getRelativeCenterPoint()\n        .transform(target.calcOwnMatrix(), true);\n      if (this.shouldPerformLayout(context)) {\n        // the clip path is positioned relative to the group's center which is affected by the bbox\n        // so we first calculate the bbox\n        const { center = new Point(), correction = new Point() } =\n          this.calcBoundingBox(objects, context) || {};\n        return {\n          center: center.add(clipPathCenter),\n          correction: correction.subtract(clipPathCenter),\n          size,\n        };\n      } else {\n        return {\n          center: target.getRelativeCenterPoint().add(clipPathCenter),\n          size,\n        };\n      }\n    }\n  }\n}\n\nclassRegistry.setClass(ClipPathLayout);\n","import { Point } from '../../Point';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will keep target's initial size.\n */\nexport class FixedLayout extends LayoutStrategy {\n  static readonly type = 'fixed';\n\n  /**\n   * @override respect target's initial size\n   */\n  getInitialSize(\n    { target }: StrictLayoutContext & InitializationLayoutContext,\n    { size }: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ): Point {\n    return new Point(target.width || size.x, target.height || size.y);\n  }\n}\n\nclassRegistry.setClass(FixedLayout);\n","import { LayoutManager } from './LayoutManager';\nimport type { RegistrationContext, StrictLayoutContext } from './types';\nimport type { Group } from '../shapes/Group';\n\n/**\n * Today the LayoutManager class also takes care of subscribing event handlers\n * to update the group layout when the group is interactive and a transform is applied\n * to a child object.\n * The ActiveSelection is never interactive, but it could contain objects from\n * groups that are.\n * The standard LayoutManager would subscribe the children of the activeSelection to\n * perform layout changes to the active selection itself, what we need instead is that\n * the transformation applied to the active selection will trigger changes to the\n * original group of the children ( the one referenced under the parent property )\n * This subclass of the LayoutManager has a single duty to fill the gap of this difference.`\n */\nexport class ActiveSelectionLayoutManager extends LayoutManager {\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      parent.layoutManager.subscribeTargets({\n        target: parent,\n        targets: [activeSelection],\n      });\n    });\n  }\n\n  /**\n   * unsubscribe from parent only if all its children were deselected\n   */\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const selectedObjects = activeSelection.getObjects();\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      !selectedObjects.some((object) => object.parent === parent) &&\n        parent.layoutManager.unsubscribeTargets({\n          target: parent,\n          targets: [activeSelection],\n        });\n    });\n  }\n}\n","import type { ControlRenderingStyleOverride } from '../controls/controlRendering';\nimport { classRegistry } from '../ClassRegistry';\nimport type { GroupProps } from './Group';\nimport { Group } from './Group';\nimport type { FabricObject } from './Object/FabricObject';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { TClassProperties } from '../typedefs';\nimport { log } from '../util/internals/console';\nimport { ActiveSelectionLayoutManager } from '../LayoutManager/ActiveSelectionLayoutManager';\nimport { uid } from '../util/internals/uid';\n\nexport type MultiSelectionStacking = 'canvas-stacking' | 'selection-order';\n\nexport interface ActiveSelectionOptions extends GroupProps {\n  multiSelectionStacking: MultiSelectionStacking;\n}\n\nconst activeSelectionDefaultValues: Partial<TClassProperties<ActiveSelection>> =\n  {\n    multiSelectionStacking: 'canvas-stacking',\n  };\n\n/**\n * Used by Canvas to manage selection.\n *\n * @example\n * class MyActiveSelection extends ActiveSelection {\n *   ...\n * }\n *\n * // override the default `ActiveSelection` class\n * classRegistry.setClass(MyActiveSelection)\n */\nexport class ActiveSelection extends Group {\n  static type = 'ActiveSelection';\n\n  static ownDefaults: Record<string, any> = activeSelectionDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...ActiveSelection.ownDefaults };\n  }\n\n  /**\n   * The ActiveSelection needs to use the ActiveSelectionLayoutManager\n   * or selections on interactive groups may be broken\n   */\n  declare layoutManager: ActiveSelectionLayoutManager;\n\n  /**\n   * controls how selected objects are added during a multiselection event\n   * - `canvas-stacking` adds the selected object to the active selection while respecting canvas object stacking order\n   * - `selection-order` adds the selected object to the top of the stack,\n   * meaning that the stack is ordered by the order in which objects were selected\n   * @default `canvas-stacking`\n   */\n  declare multiSelectionStacking: MultiSelectionStacking;\n\n  lockSize = true;\n\n  id = uid().toString();\n\n  constructor(\n    objects: FabricObject[] = [],\n    options: Partial<ActiveSelectionOptions> = {},\n  ) {\n    super();\n    Object.assign(this, ActiveSelection.ownDefaults);\n    this.setOptions(options);\n    const { left, top, layoutManager } = options;\n    this.groupInit(objects, {\n      left,\n      top,\n      layoutManager: layoutManager ?? new ActiveSelectionLayoutManager(),\n    });\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return true;\n  }\n\n  /**\n   * @private\n   * @override we don't want the selection monitor to be active\n   */\n  __objectSelectionMonitor() {\n    //  noop\n  }\n\n  /**\n   * Adds objects with respect to {@link multiSelectionStacking}\n   * @param targets object to add to selection\n   */\n  multiSelectAdd(...targets: FabricObject[]) {\n    if (this.multiSelectionStacking === 'selection-order') {\n      this.add(...targets);\n    } else {\n      //  respect object stacking as it is on canvas\n      //  perf enhancement for large ActiveSelection: consider a binary search of `isInFrontOf`\n      targets.forEach((target) => {\n        const index = this._objects.findIndex((obj) => obj.isInFrontOf(target));\n        const insertAt =\n          index === -1\n            ? //  `target` is in front of all other objects\n              this.size()\n            : index;\n        this.insertAt(insertAt, target);\n      });\n    }\n  }\n\n  /**\n   * @override block ancestors/descendants of selected objects from being selected to prevent a circular object tree\n   */\n  canEnterGroup(object: FabricObject) {\n    if (\n      this.getObjects().some(\n        (o) => o.isDescendantOf(object) || object.isDescendantOf(o),\n      )\n    ) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'ActiveSelection: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    }\n\n    return super.canEnterGroup(object);\n  }\n\n  /**\n   * Change an object so that it can be part of an active selection.\n   * this method is called by multiselectAdd from canvas code.\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    // This condition check that the object has currently a group, and the group\n    // is also its parent, meaning that is not in an active selection, but is\n    // in a normal group.\n    if (object.parent && object.parent === object.group) {\n      // Disconnect the object from the group functionalities, but keep the ref parent intact\n      // for later re-enter\n      object.parent._exitGroup(object);\n      // in this case the object is probably inside an active selection.\n    } else if (object.group && object.parent !== object.group) {\n      // in this case group.remove will also clear the old parent reference.\n      object.group.remove(object);\n    }\n    // enter the active selection from a render perspective\n    // the object will be in the objects array of both the ActiveSelection and the Group\n    // but referenced in the group's _activeObjects so that it won't be rendered twice.\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * we want objects to retain their canvas ref when exiting instance\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    // return to parent\n    object.parent && object.parent._enterGroup(object, true);\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    super._onAfterObjectsChange(type, targets);\n    const groups = new Set<Group>();\n    targets.forEach((object) => {\n      const { parent } = object;\n      parent && groups.add(parent);\n    });\n    if (type === LAYOUT_TYPE_REMOVED) {\n      //  invalidate groups' layout and mark as dirty\n      groups.forEach((group) => {\n        group._onAfterObjectsChange(LAYOUT_TYPE_ADDED, targets);\n      });\n    } else {\n      //  mark groups as dirty\n      groups.forEach((group) => {\n        group._set('dirty', true);\n      });\n    }\n  }\n\n  /**\n   * @override remove all objects\n   */\n  onDeselect() {\n    this.removeAll();\n    return false;\n  }\n\n  /**\n   * Returns string representation of a group\n   * @return {String}\n   */\n  toString() {\n    return `#<ActiveSelection: (${this.complexity()})>`;\n  }\n\n  /**\n   * Decide if the object should cache or not. The Active selection never caches\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return false;\n  }\n\n  /**\n   * Check if this group or its parent group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache() {\n    return false;\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [styleOverride] properties to override the object style\n   * @param {Object} [childrenOverride] properties to override the children overrides\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride?: ControlRenderingStyleOverride,\n    childrenOverride?: ControlRenderingStyleOverride,\n  ) {\n    ctx.save();\n    ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    const options = {\n      hasControls: false,\n      ...childrenOverride,\n      forActiveSelection: true,\n    };\n    for (let i = 0; i < this._objects.length; i++) {\n      this._objects[i]._renderControls(ctx, options);\n    }\n    super._renderControls(ctx, styleOverride);\n    ctx.restore();\n  }\n}\n\nclassRegistry.setClass(ActiveSelection);\nclassRegistry.setClass(ActiveSelection, 'activeSelection');\n","/**\n * Canvas 2D filter backend.\n */\nimport type { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TPipelineResources } from './typedefs';\n\nexport class Canvas2dFilterBackend {\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  /**\n   * Apply a set of filters against a source image and draw the filtered output\n   * to the provided destination canvas.\n   *\n   * @param {EnhancedFilter} filters The filter to apply.\n   * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n   * @param {Number} sourceWidth The width of the source input.\n   * @param {Number} sourceHeight The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    sourceElement: CanvasImageSource,\n    sourceWidth: number,\n    sourceHeight: number,\n    targetCanvas: HTMLCanvasElement,\n  ): T2DPipelineState | void {\n    const ctx = targetCanvas.getContext('2d', {\n      willReadFrequently: true,\n      desynchronized: true,\n    });\n    if (!ctx) {\n      return;\n    }\n    ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n    const imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const pipelineState: T2DPipelineState = {\n      sourceWidth,\n      sourceHeight,\n      imageData,\n      originalEl: sourceElement,\n      originalImageData,\n      canvasEl: targetCanvas,\n      ctx,\n      filterBackend: this,\n    };\n    filters.forEach((filter) => {\n      filter.applyTo(pipelineState);\n    });\n    const { imageData: imageDataPostFilter } = pipelineState;\n    if (\n      imageDataPostFilter.width !== sourceWidth ||\n      imageDataPostFilter.height !== sourceHeight\n    ) {\n      targetCanvas.width = imageDataPostFilter.width;\n      targetCanvas.height = imageDataPostFilter.height;\n    }\n    ctx.putImageData(imageDataPostFilter, 0, 0);\n    return pipelineState;\n  }\n}\n","import { config } from '../config';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport type {\n  TWebGLPipelineState,\n  TProgramCache,\n  TTextureCache,\n  TPipelineResources,\n} from './typedefs';\nimport type { BaseFilter } from './BaseFilter';\n\nexport class WebGLFilterBackend {\n  declare tileSize: number;\n\n  /**\n   * Define ...\n   **/\n  aPosition: Float32Array = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n\n  /**\n   * If GLPut data is the fastest operation, or if forced, this buffer will be used\n   * to transfer the data back in the 2d logic\n   **/\n  declare imageBuffer?: ArrayBuffer;\n\n  declare canvas: HTMLCanvasElement;\n\n  /**\n   * The Webgl context that will execute the operations for filtering\n   **/\n  declare gl: WebGLRenderingContext;\n\n  /**\n   * Keyed map for shader cache\n   **/\n  declare programCache: TProgramCache;\n\n  /**\n   * Keyed map for texture cache\n   **/\n  declare textureCache: TTextureCache;\n\n  /**\n   * Contains GPU info for debug\n   **/\n  declare gpuInfo: any;\n\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  constructor({ tileSize = config.textureSize } = {}) {\n    this.tileSize = tileSize;\n    this.setupGLContext(tileSize, tileSize);\n    this.captureGPUInfo();\n  }\n\n  /**\n   * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n   */\n  setupGLContext(width: number, height: number): void {\n    this.dispose();\n    this.createWebGLCanvas(width, height);\n  }\n\n  /**\n   * Create a canvas element and associated WebGL context and attaches them as\n   * class properties to the GLFilterBackend class.\n   */\n  createWebGLCanvas(width: number, height: number): void {\n    const canvas = createCanvasElementFor({ width, height });\n    const glOptions = {\n        alpha: true,\n        premultipliedAlpha: false,\n        depth: false,\n        stencil: false,\n        antialias: false,\n      },\n      gl = canvas.getContext('webgl', glOptions) as WebGLRenderingContext;\n\n    if (!gl) {\n      return;\n    }\n    gl.clearColor(0, 0, 0, 0);\n    // this canvas can fire webglcontextlost and webglcontextrestored\n    this.canvas = canvas;\n    this.gl = gl;\n  }\n\n  /**\n   * Attempts to apply the requested filters to the source provided, drawing the filtered output\n   * to the provided target canvas.\n   *\n   * @param {Array} filters The filters to apply.\n   * @param {TexImageSource} source The source to be filtered.\n   * @param {Number} width The width of the source input.\n   * @param {Number} height The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n   * omitted, caching will be skipped.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    source: TexImageSource,\n    width: number,\n    height: number,\n    targetCanvas: HTMLCanvasElement,\n    cacheKey?: string,\n  ): TWebGLPipelineState | undefined {\n    const gl = this.gl;\n    const ctx = targetCanvas.getContext('2d');\n    if (!gl || !ctx) {\n      return;\n    }\n    let cachedTexture;\n    if (cacheKey) {\n      cachedTexture = this.getCachedTexture(cacheKey, source);\n    }\n    const pipelineState: TWebGLPipelineState = {\n      originalWidth:\n        (source as HTMLImageElement).width ||\n        (source as HTMLImageElement).naturalWidth ||\n        0,\n      originalHeight:\n        (source as HTMLImageElement).height ||\n        (source as HTMLImageElement).naturalHeight ||\n        0,\n      sourceWidth: width,\n      sourceHeight: height,\n      destinationWidth: width,\n      destinationHeight: height,\n      context: gl,\n      sourceTexture: this.createTexture(\n        gl,\n        width,\n        height,\n        !cachedTexture ? source : undefined,\n      ),\n      targetTexture: this.createTexture(gl, width, height),\n      originalTexture:\n        cachedTexture ||\n        this.createTexture(\n          gl,\n          width,\n          height,\n          !cachedTexture ? source : undefined,\n        ),\n      passes: filters.length,\n      webgl: true,\n      aPosition: this.aPosition,\n      programCache: this.programCache,\n      pass: 0,\n      filterBackend: this,\n      targetCanvas: targetCanvas,\n    };\n    const tempFbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n    filters.forEach((filter: any) => {\n      filter && filter.applyTo(pipelineState);\n    });\n    resizeCanvasIfNeeded(pipelineState);\n    this.copyGLTo2D(gl, pipelineState);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.deleteTexture(pipelineState.sourceTexture);\n    gl.deleteTexture(pipelineState.targetTexture);\n    gl.deleteFramebuffer(tempFbo);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    return pipelineState;\n  }\n\n  /**\n   * Detach event listeners, remove references, and clean up caches.\n   */\n  dispose() {\n    if (this.canvas) {\n      // we are disposing, we don't care about the fact\n      // that the canvas shouldn't be null.\n      // @ts-expect-error disposing\n      this.canvas = null;\n      // @ts-expect-error disposing\n      this.gl = null;\n    }\n    this.clearWebGLCaches();\n  }\n\n  /**\n   * Wipe out WebGL-related caches.\n   */\n  clearWebGLCaches() {\n    this.programCache = {};\n    this.textureCache = {};\n  }\n\n  /**\n   * Create a WebGL texture object.\n   *\n   * Accepts specific dimensions to initialize the texture to or a source image.\n   *\n   * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n   * @param {number} width The width to initialize the texture at.\n   * @param {number} height The height to initialize the texture.\n   * @param {TexImageSource} textureImageSource A source for the texture data.\n   * @param {number} filter gl.NEAREST default or gl.LINEAR filters for the texture.\n   * This filter is very useful for LUTs filters. If you need interpolation use gl.LINEAR\n   * @returns {WebGLTexture}\n   */\n  createTexture(\n    gl: WebGLRenderingContext,\n    width: number,\n    height: number,\n    textureImageSource?: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ) {\n    const {\n      NEAREST,\n      TEXTURE_2D,\n      RGBA,\n      UNSIGNED_BYTE,\n      CLAMP_TO_EDGE,\n      TEXTURE_MAG_FILTER,\n      TEXTURE_MIN_FILTER,\n      TEXTURE_WRAP_S,\n      TEXTURE_WRAP_T,\n    } = gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(TEXTURE_2D, texture);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n    if (textureImageSource) {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        RGBA,\n        UNSIGNED_BYTE,\n        textureImageSource,\n      );\n    } else {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        width,\n        height,\n        0,\n        RGBA,\n        UNSIGNED_BYTE,\n        null,\n      );\n    }\n    return texture;\n  }\n\n  /**\n   * Can be optionally used to get a texture from the cache array\n   *\n   * If an existing texture is not found, a new texture is created and cached.\n   *\n   * @param {String} uniqueId A cache key to use to find an existing texture.\n   * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n   * texture cache entry if one does not already exist.\n   */\n  getCachedTexture(\n    uniqueId: string,\n    textureImageSource: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ): WebGLTexture | null {\n    const { textureCache } = this;\n    if (textureCache[uniqueId]) {\n      return textureCache[uniqueId];\n    } else {\n      const texture = this.createTexture(\n        this.gl,\n        (textureImageSource as HTMLImageElement).width,\n        (textureImageSource as HTMLImageElement).height,\n        textureImageSource,\n        filter,\n      );\n      if (texture) {\n        textureCache[uniqueId] = texture;\n      }\n      return texture;\n    }\n  }\n\n  /**\n   * Clear out cached resources related to a source image that has been\n   * filtered previously.\n   *\n   * @param {String} cacheKey The cache key provided when the source image was filtered.\n   */\n  evictCachesForKey(cacheKey: string) {\n    if (this.textureCache[cacheKey]) {\n      this.gl.deleteTexture(this.textureCache[cacheKey]);\n      delete this.textureCache[cacheKey];\n    }\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas.\n   *\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2D(gl: WebGLRenderingContext, pipelineState: TWebGLPipelineState) {\n    const glCanvas = gl.canvas,\n      targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    const sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(\n      glCanvas,\n      0,\n      sourceY,\n      targetCanvas.width,\n      targetCanvas.height,\n      0,\n      0,\n      targetCanvas.width,\n      targetCanvas.height,\n    );\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2DPutImageData(\n    this: Required<WebGLFilterBackend>,\n    gl: WebGLRenderingContext,\n    pipelineState: TWebGLPipelineState,\n  ) {\n    const targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n    if (!ctx) {\n      return;\n    }\n    const u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    const u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    const imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Attempt to extract GPU information strings from a WebGL context.\n   *\n   * Useful information when debugging or blacklisting specific GPUs.\n   *\n   * @returns {Object} A GPU info object with renderer and vendor strings.\n   */\n  captureGPUInfo() {\n    if (this.gpuInfo) {\n      return this.gpuInfo;\n    }\n    const gl = this.gl,\n      gpuInfo = { renderer: '', vendor: '' };\n    if (!gl) {\n      return gpuInfo;\n    }\n    const ext = gl.getExtension('WEBGL_debug_renderer_info');\n    if (ext) {\n      const renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n      const vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n      if (renderer) {\n        gpuInfo.renderer = renderer.toLowerCase();\n      }\n      if (vendor) {\n        gpuInfo.vendor = vendor.toLowerCase();\n      }\n    }\n    this.gpuInfo = gpuInfo;\n    return gpuInfo;\n  }\n}\n\nfunction resizeCanvasIfNeeded(pipelineState: TWebGLPipelineState): void {\n  const targetCanvas = pipelineState.targetCanvas,\n    width = targetCanvas.width,\n    height = targetCanvas.height,\n    dWidth = pipelineState.destinationWidth,\n    dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n","import { config } from '../config';\nimport { getEnv } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { Canvas2dFilterBackend } from './Canvas2dFilterBackend';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\n\nexport type FilterBackend = WebGLFilterBackend | Canvas2dFilterBackend;\n\nlet filterBackend: FilterBackend;\n\n/**\n * Verifies if it is possible to initialize webgl or fallback on a canvas2d filtering backend\n */\nexport function initFilterBackend(): FilterBackend {\n  const { WebGLProbe } = getEnv();\n  WebGLProbe.queryWebGL(createCanvasElement());\n  if (config.enableGLFiltering && WebGLProbe.isSupported(config.textureSize)) {\n    return new WebGLFilterBackend({ tileSize: config.textureSize });\n  } else {\n    return new Canvas2dFilterBackend();\n  }\n}\n\n/**\n * Get the current fabricJS filter backend  or initialize one if not available yet\n * @param [strict] pass `true` to create the backend if it wasn't created yet (default behavior),\n * pass `false` to get the backend ref without mutating it\n */\nexport function getFilterBackend(strict = true): FilterBackend {\n  if (!filterBackend && strict) {\n    filterBackend = initFilterBackend();\n  }\n  return filterBackend;\n}\n\nexport function setFilterBackend(backend: FilterBackend) {\n  filterBackend = backend;\n}\n","import { getFabricDocument, getEnv } from '../env';\nimport type { BaseFilter } from '../filters/BaseFilter';\nimport { getFilterBackend } from '../filters/FilterBackend';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type {\n  TClassProperties,\n  TCrossOrigin,\n  TSize,\n  Abortable,\n  TOptions,\n} from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport { findScaleToCover, findScaleToFit } from '../util/misc/findScaleTo';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n  loadImage,\n} from '../util/misc/objectEnlive';\nimport { parsePreserveAspectRatioAttribute } from '../util/misc/svgParsing';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { WebGLFilterBackend } from '../filters/WebGLFilterBackend';\nimport { FILL, NONE } from '../constants';\nimport { getDocumentFromElement } from '../util/dom_misc';\nimport type { CSSRules } from '../parser/typedefs';\nimport type { Resize, ResizeSerializedProps } from '../filters/Resize';\nimport type { TCachedFabricObject } from './Object/Object';\nimport { log } from '../util/internals/console';\n\n// @todo Would be nice to have filtering code not imported directly.\n\nexport type ImageSource =\n  | HTMLImageElement\n  | HTMLVideoElement\n  | HTMLCanvasElement\n  | OffscreenCanvas;\n\ninterface UniqueImageProps {\n  srcFromAttribute: boolean;\n  minimumScaleTrigger: number;\n  cropX: number;\n  cropY: number;\n  imageSmoothing: boolean;\n  filters: BaseFilter<string, Record<string, any>>[];\n  resizeFilter?: Resize;\n}\n\nexport const imageDefaultValues: Partial<TClassProperties<FabricImage>> = {\n  strokeWidth: 0,\n  srcFromAttribute: false,\n  minimumScaleTrigger: 0.5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: true,\n};\n\nexport interface SerializedImageProps extends SerializedObjectProps {\n  src: string;\n  crossOrigin: TCrossOrigin;\n  filters: any[];\n  resizeFilter?: ResizeSerializedProps;\n  cropX: number;\n  cropY: number;\n}\n\nexport interface ImageProps extends FabricObjectProps, UniqueImageProps {}\n\nconst IMAGE_PROPS = ['cropX', 'cropY'] as const;\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n */\nexport class FabricImage<\n    Props extends TOptions<ImageProps> = Partial<ImageProps>,\n    SProps extends SerializedImageProps = SerializedImageProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements ImageProps\n{\n  /**\n   * When calling {@link FabricImage.getSrc}, return value from element src with `element.getAttribute('src')`.\n   * This allows for relative urls as image src.\n   * @since 2.7.0\n   * @type Boolean\n   * @default false\n   */\n  declare srcFromAttribute: boolean;\n\n  /**\n   * private\n   * contains last value of scaleX to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleX = 1;\n\n  /**\n   * private\n   * contains last value of scaleY to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleY = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingX = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingY = 1;\n\n  /**\n   * minimum scale factor under which any resizeFilter is triggered to resize the image\n   * 0 will disable the automatic resize. 1 will trigger automatically always.\n   * number bigger than 1 are not implemented yet.\n   * @type Number\n   */\n  declare minimumScaleTrigger: number;\n\n  /**\n   * key used to retrieve the texture representing this image\n   * @since 2.0.0\n   * @type String\n   * @default\n   */\n  declare cacheKey: string;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropX: number;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropY: number;\n\n  /**\n   * Indicates whether this canvas will use image smoothing when painting this image.\n   * Also influence if the cacheCanvas for this image uses imageSmoothing\n   * @since 4.0.0-beta.11\n   * @type Boolean\n   * @default\n   */\n  declare imageSmoothing: boolean;\n\n  declare preserveAspectRatio: string;\n\n  declare protected src: string;\n\n  declare filters: BaseFilter<string, Record<string, any>>[];\n  declare resizeFilter: Resize;\n\n  declare _element: ImageSource;\n  declare _filteredEl?: HTMLCanvasElement;\n  declare _originalElement: ImageSource;\n\n  static type = 'Image';\n\n  static cacheProperties = [...cacheProperties, ...IMAGE_PROPS];\n\n  static ownDefaults = imageDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...FabricImage.ownDefaults,\n    };\n  }\n  /**\n   * Constructor\n   * Image can be initialized with any canvas drawable or a string.\n   * The string should be a url and will be loaded as an image.\n   * Canvas and Image element work out of the box, while videos require extra code to work.\n   * Please check video element events for seeking.\n   * @param {ImageSource | string} element Image element\n   * @param {Object} [options] Options object\n   */\n  constructor(elementId: string, options?: Props);\n  constructor(element: ImageSource, options?: Props);\n  constructor(arg0: ImageSource | string, options?: Props) {\n    super();\n    this.filters = [];\n    Object.assign(this, FabricImage.ownDefaults);\n    this.setOptions(options);\n    this.cacheKey = `texture${uid()}`;\n    this.setElement(\n      typeof arg0 === 'string'\n        ? ((\n            (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n            getFabricDocument()\n          ).getElementById(arg0) as ImageSource)\n        : arg0,\n      options,\n    );\n  }\n\n  /**\n   * Returns image element which this instance if based on\n   */\n  getElement() {\n    return this._element;\n  }\n\n  /**\n   * Sets image element for this instance to a specified one.\n   * If filters defined they are applied to new image.\n   * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n   * @param {HTMLImageElement} element\n   * @param {Partial<TSize>} [size] Options object\n   */\n  setElement(element: ImageSource, size: Partial<TSize> = {}) {\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._element = element;\n    this._originalElement = element;\n    this._setWidthHeight(size);\n    if (this.filters.length !== 0) {\n      this.applyFilters();\n    }\n    // resizeFilters work on the already filtered copy.\n    // we need to apply resizeFilters AFTER normal filters.\n    // applyResizeFilters is run more often than normal filters\n    // and is triggered by user interactions rather than dev code\n    if (this.resizeFilter) {\n      this.applyResizeFilters();\n    }\n  }\n\n  /**\n   * Delete a single texture if in webgl mode\n   */\n  removeTexture(key: string) {\n    const backend = getFilterBackend(false);\n    if (backend instanceof WebGLFilterBackend) {\n      backend.evictCachesForKey(key);\n    }\n  }\n\n  /**\n   * Delete textures, reference to elements and eventually JSDOM cleanup\n   */\n  dispose() {\n    super.dispose();\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._cacheContext = null;\n    (\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'] as const\n    ).forEach((elementKey) => {\n      const el = this[elementKey];\n      el && !(el instanceof OffscreenCanvas) && getEnv().dispose(el);\n      // @ts-expect-error disposing\n      this[elementKey] = undefined;\n    });\n  }\n\n  /**\n   * Get the crossOrigin value (of the corresponding image element)\n   */\n  getCrossOrigin(): string | null {\n    return (\n      this._originalElement &&\n      ((this._originalElement as any).crossOrigin || null)\n    );\n  }\n\n  /**\n   * Returns original size of an image\n   */\n  getOriginalSize() {\n    const element = this.getElement() as any;\n    if (!element) {\n      return {\n        width: 0,\n        height: 0,\n      };\n    }\n    return {\n      width: element.naturalWidth || element.width,\n      height: element.naturalHeight || element.height,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _stroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    const w = this.width / 2,\n      h = this.height / 2;\n    ctx.beginPath();\n    ctx.moveTo(-w, -h);\n    ctx.lineTo(w, -h);\n    ctx.lineTo(w, h);\n    ctx.lineTo(-w, h);\n    ctx.lineTo(-w, -h);\n    ctx.closePath();\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const filters: Record<string, any>[] = [];\n    this.filters.forEach((filterObj) => {\n      filterObj && filters.push(filterObj.toObject());\n    });\n    return {\n      ...super.toObject([...IMAGE_PROPS, ...propertiesToInclude]),\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters,\n      ...(this.resizeFilter\n        ? { resizeFilter: this.resizeFilter.toObject() }\n        : {}),\n    };\n  }\n\n  /**\n   * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n   * @return {Boolean}\n   */\n  hasCrop() {\n    return (\n      !!this.cropX ||\n      !!this.cropY ||\n      this.width < this._element.width ||\n      this.height < this._element.height\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {string[]} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const imageMarkup: string[] = [],\n      element = this._element,\n      x = -this.width / 2,\n      y = -this.height / 2;\n    let svgString: string[] = [],\n      strokeSvg: string[] = [],\n      clipPath = '',\n      imageRendering = '';\n    if (!element) {\n      return [];\n    }\n    if (this.hasCrop()) {\n      const clipPathId = uid();\n      svgString.push(\n        '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n        '\\t<rect x=\"' +\n          x +\n          '\" y=\"' +\n          y +\n          '\" width=\"' +\n          this.width +\n          '\" height=\"' +\n          this.height +\n          '\" />\\n',\n        '</clipPath>\\n',\n      );\n      clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n    }\n    if (!this.imageSmoothing) {\n      imageRendering = ' image-rendering=\"optimizeSpeed\"';\n    }\n    imageMarkup.push(\n      '\\t<image ',\n      'COMMON_PARTS',\n      `xlink:href=\"${this.getSvgSrc(true)}\" x=\"${x - this.cropX}\" y=\"${\n        y - this.cropY\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n      }\" width=\"${\n        element.width || (element as HTMLImageElement).naturalWidth\n      }\" height=\"${\n        element.height || (element as HTMLImageElement).naturalHeight\n      }\"${imageRendering}${clipPath}></image>\\n`,\n    );\n\n    if (this.stroke || this.strokeDashArray) {\n      const origFill = this.fill;\n      this.fill = null;\n      strokeSvg = [\n        `\\t<rect x=\"${x}\" y=\"${y}\" width=\"${this.width}\" height=\"${\n          this.height\n        }\" style=\"${this.getSvgStyles()}\" />\\n`,\n      ];\n      this.fill = origFill;\n    }\n    if (this.paintFirst !== FILL) {\n      svgString = svgString.concat(strokeSvg, imageMarkup);\n    } else {\n      svgString = svgString.concat(imageMarkup, strokeSvg);\n    }\n    return svgString;\n  }\n\n  /**\n   * Returns source of an image\n   * @param {Boolean} filtered indicates if the src is needed for svg\n   * @return {String} Source of an image\n   */\n  getSrc(filtered?: boolean): string {\n    const element = filtered ? this._element : this._originalElement;\n    if (element) {\n      if ((element as HTMLCanvasElement).toDataURL || element instanceof OffscreenCanvas) {\n        return (element as HTMLCanvasElement).toDataURL();\n      }\n\n      if (this.srcFromAttribute) {\n        return element.getAttribute('src') || '';\n      } else {\n        return (element as HTMLImageElement).src;\n      }\n    } else {\n      return this.src || '';\n    }\n  }\n\n  /**\n   * Alias for getSrc\n   * @param filtered\n   * @deprecated\n   */\n  getSvgSrc(filtered?: boolean) {\n    return this.getSrc(filtered);\n  }\n\n  /**\n   * Loads and sets source of an image\\\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   * @param {String} src Source string (URL)\n   * @param {LoadImageOptions} [options] Options object\n   */\n  setSrc(src: string, { crossOrigin, signal }: LoadImageOptions = {}) {\n    return loadImage(src, { crossOrigin, signal }).then((img) => {\n      typeof crossOrigin !== 'undefined' && this.set({ crossOrigin });\n      this.setElement(img);\n    });\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of an instance\n   */\n  toString() {\n    return `#<Image: { src: \"${this.getSrc()}\" }>`;\n  }\n\n  applyResizeFilters() {\n    const filter = this.resizeFilter,\n      minimumScale = this.minimumScaleTrigger,\n      objectScale = this.getTotalObjectScaling(),\n      scaleX = objectScale.x,\n      scaleY = objectScale.y,\n      elementToFilter = this._filteredEl || this._originalElement;\n    if (this.group) {\n      this.set('dirty', true);\n    }\n    if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n      this._element = elementToFilter;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      this._lastScaleX = scaleX;\n      this._lastScaleY = scaleY;\n      return;\n    }\n    const canvasEl = createCanvasElementFor(elementToFilter),\n      { width, height } = elementToFilter;\n    this._element = canvasEl;\n    this._lastScaleX = filter.scaleX = scaleX;\n    this._lastScaleY = filter.scaleY = scaleY;\n    getFilterBackend().applyFilters(\n      [filter],\n      elementToFilter,\n      width,\n      height,\n      this._element,\n    );\n    this._filterScalingX = canvasEl.width / this._originalElement.width;\n    this._filterScalingY = canvasEl.height / this._originalElement.height;\n  }\n\n  /**\n   * Applies filters assigned to this image (from \"filters\" array) or from filter param\n   * @method applyFilters\n   * @param {Array} filters to be applied\n   * @param {Boolean} forResizing specify if the filter operation is a resize operation\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[] = this.filters || [],\n  ) {\n    filters = filters.filter((filter) => filter && !filter.isNeutralState());\n    this.set('dirty', true);\n\n    // needs to clear out or WEBGL will not resize correctly\n    this.removeTexture(`${this.cacheKey}_filtered`);\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      // this is unsafe and needs to be rethinkend\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return;\n    }\n\n    const imgElement = this._originalElement,\n      sourceWidth =\n        (imgElement as HTMLImageElement).naturalWidth || imgElement.width,\n      sourceHeight =\n        (imgElement as HTMLImageElement).naturalHeight || imgElement.height;\n\n    if (this._element === this._originalElement) {\n      // if the _element a reference to _originalElement\n      // we need to create a new element to host the filtered pixels\n      const canvasEl = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else if (this._filteredEl) {\n      // if the _element is it own element,\n      // and we also have a _filteredEl, then we clean up _filteredEl\n      // and we assign it to _element.\n      // in this way we invalidate the eventual old resize filtered element\n      this._element = this._filteredEl;\n      this._filteredEl\n        .getContext('2d')!\n        .clearRect(0, 0, sourceWidth, sourceHeight);\n      // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n      this._lastScaleX = 1;\n      this._lastScaleY = 1;\n    }\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement,\n      this.cacheKey,\n    );\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n      this.applyResizeFilters();\n    }\n    this._stroke(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * it will set the imageSmoothing for the draw operation\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(\n    this: TCachedFabricObject<FabricImage>,\n    ctx: CanvasRenderingContext2D,\n  ) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    super.drawCacheOnCanvas(ctx);\n  }\n\n  /**\n   * Decide if the FabricImage should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * This is the special Image version where we would like to avoid caching where possible.\n   * Essentially images do not benefit from caching. They may require caching, and in that\n   * case we do it. Also caching an image usually ends in a loss of details.\n   * A full performance audit should be done.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    const elementToDraw = this._element;\n    if (!elementToDraw) {\n      return;\n    }\n    const scaleX = this._filterScalingX,\n      scaleY = this._filterScalingY,\n      w = this.width,\n      h = this.height,\n      // crop values cannot be lesser than 0.\n      cropX = Math.max(this.cropX, 0),\n      cropY = Math.max(this.cropY, 0),\n      elWidth =\n        (elementToDraw as HTMLImageElement).naturalWidth || elementToDraw.width,\n      elHeight =\n        (elementToDraw as HTMLImageElement).naturalHeight ||\n        elementToDraw.height,\n      sX = cropX * scaleX,\n      sY = cropY * scaleY,\n      // the width height cannot exceed element width/height, starting from the crop offset.\n      sW = Math.min(w * scaleX, elWidth - sX),\n      sH = Math.min(h * scaleY, elHeight - sY),\n      x = -w / 2,\n      y = -h / 2,\n      maxDestW = Math.min(w, elWidth / scaleX - cropX),\n      maxDestH = Math.min(h, elHeight / scaleY - cropY);\n\n    elementToDraw &&\n      ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n  }\n\n  /**\n   * needed to check if image needs resize\n   * @private\n   */\n  _needsResize() {\n    const scale = this.getTotalObjectScaling();\n    return scale.x !== this._lastScaleX || scale.y !== this._lastScaleY;\n  }\n\n  /**\n   * @private\n   * @deprecated unused\n   */\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n\n  /**\n   * @private\n   * Set the width and the height of the image object, using the element or the\n   * options.\n   */\n  _setWidthHeight({ width, height }: Partial<TSize> = {}) {\n    const size = this.getOriginalSize();\n    this.width = width || size.width;\n    this.height = height || size.height;\n  }\n\n  /**\n   * Calculate offset for center and scale factor for the image in order to respect\n   * the preserveAspectRatio attribute\n   * @private\n   */\n  parsePreserveAspectRatioAttribute() {\n    const pAR = parsePreserveAspectRatioAttribute(\n        this.preserveAspectRatio || '',\n      ),\n      pWidth = this.width,\n      pHeight = this.height,\n      parsedAttributes = { width: pWidth, height: pHeight };\n    let rWidth = this._element.width,\n      rHeight = this._element.height,\n      scaleX = 1,\n      scaleY = 1,\n      offsetLeft = 0,\n      offsetTop = 0,\n      cropX = 0,\n      cropY = 0,\n      offset;\n\n    if (pAR && (pAR.alignX !== NONE || pAR.alignY !== NONE)) {\n      if (pAR.meetOrSlice === 'meet') {\n        scaleX = scaleY = findScaleToFit(this._element, parsedAttributes);\n        offset = (pWidth - rWidth * scaleX) / 2;\n        if (pAR.alignX === 'Min') {\n          offsetLeft = -offset;\n        }\n        if (pAR.alignX === 'Max') {\n          offsetLeft = offset;\n        }\n        offset = (pHeight - rHeight * scaleY) / 2;\n        if (pAR.alignY === 'Min') {\n          offsetTop = -offset;\n        }\n        if (pAR.alignY === 'Max') {\n          offsetTop = offset;\n        }\n      }\n      if (pAR.meetOrSlice === 'slice') {\n        scaleX = scaleY = findScaleToCover(this._element, parsedAttributes);\n        offset = rWidth - pWidth / scaleX;\n        if (pAR.alignX === 'Mid') {\n          cropX = offset / 2;\n        }\n        if (pAR.alignX === 'Max') {\n          cropX = offset;\n        }\n        offset = rHeight - pHeight / scaleY;\n        if (pAR.alignY === 'Mid') {\n          cropY = offset / 2;\n        }\n        if (pAR.alignY === 'Max') {\n          cropY = offset;\n        }\n        rWidth = pWidth / scaleX;\n        rHeight = pHeight / scaleY;\n      }\n    } else {\n      scaleX = pWidth / rWidth;\n      scaleY = pHeight / rHeight;\n    }\n    return {\n      width: rWidth,\n      height: rHeight,\n      scaleX,\n      scaleY,\n      offsetLeft,\n      offsetTop,\n      cropX,\n      cropY,\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricImage.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'width',\n    'height',\n    'preserveAspectRatio',\n    'xlink:href',\n    'href',\n    'crossOrigin',\n    'image-rendering',\n  ];\n\n  /**\n   * Creates an instance of FabricImage from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricImage>}\n   */\n  static fromObject<T extends TOptions<SerializedImageProps>>(\n    { filters: f, resizeFilter: rf, src, crossOrigin, type, ...object }: T,\n    options?: Abortable,\n  ) {\n    return Promise.all([\n      loadImage(src!, { ...options, crossOrigin }),\n      f && enlivenObjects<BaseFilter<string>>(f, options),\n      // redundant - handled by enlivenObjectEnlivables, but nicely explicit\n      rf ? enlivenObjects<Resize>([rf], options) : [],\n      enlivenObjectEnlivables(object, options),\n    ]).then(([el, filters = [], [resizeFilter], hydratedProps = {}]) => {\n      return new this(el, {\n        ...object,\n        // TODO: passing src creates a difference between image creation and restoring from JSON\n        src,\n        filters,\n        resizeFilter,\n        ...hydratedProps,\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {LoadImageOptions} [options] Options object\n   * @returns {Promise<FabricImage>}\n   */\n  static fromURL<T extends TOptions<ImageProps>>(\n    url: string,\n    { crossOrigin = null, signal }: LoadImageOptions = {},\n    imageOptions?: T,\n  ): Promise<FabricImage> {\n    return loadImage(url, { crossOrigin, signal }).then(\n      (img) => new this(img, imageOptions),\n    );\n  }\n\n  /**\n   * Returns {@link FabricImage} instance from an SVG element\n   * @static\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @param {Function} callback Callback to execute when Image object is created\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable = {},\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return this.fromURL(\n      parsedAttributes['xlink:href'] || parsedAttributes['href'],\n      options,\n      parsedAttributes,\n    ).catch((err) => {\n      log('log', 'Unable to parse Image', err);\n      return null;\n    });\n  }\n}\n\nclassRegistry.setClass(FabricImage);\nclassRegistry.setSVGClass(FabricImage);\n","import { svgNS } from './constants';\nimport {\n  parsePreserveAspectRatioAttribute,\n  parseUnit,\n} from '../util/misc/svgParsing';\nimport { svgViewBoxElementsRegEx, reViewBoxAttrValue } from './constants';\nimport { NONE } from '../constants';\n\nexport type ParsedViewboxTransform = Partial<{\n  width: number;\n  height: number;\n  minX: number;\n  minY: number;\n  viewBoxWidth: number;\n  viewBoxHeight: number;\n}>;\n\n/**\n * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n */\nexport function applyViewboxTransform(\n  element: Element,\n): ParsedViewboxTransform {\n  if (!svgViewBoxElementsRegEx.test(element.nodeName)) {\n    return {};\n  }\n  const viewBoxAttr: string | null = element.getAttribute('viewBox');\n  let scaleX = 1;\n  let scaleY = 1;\n  let minX = 0;\n  let minY = 0;\n  let matrix;\n  let el;\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const x = element.getAttribute('x') || 0;\n  const y = element.getAttribute('y') || 0;\n  const goodViewbox = viewBoxAttr && reViewBoxAttrValue.test(viewBoxAttr);\n  const missingViewBox = !goodViewbox;\n  const missingDimAttr =\n    !widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%';\n\n  let translateMatrix = '';\n  let widthDiff = 0;\n  let heightDiff = 0;\n\n  if (missingViewBox) {\n    if (\n      (x || y) &&\n      element.parentNode &&\n      element.parentNode.nodeName !== '#document'\n    ) {\n      translateMatrix =\n        ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n      matrix = (element.getAttribute('transform') || '') + translateMatrix;\n      element.setAttribute('transform', matrix);\n      element.removeAttribute('x');\n      element.removeAttribute('y');\n    }\n  }\n\n  if (missingViewBox && missingDimAttr) {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const parsedDim: ParsedViewboxTransform = {\n    width: 0,\n    height: 0,\n  };\n\n  if (missingViewBox) {\n    parsedDim.width = parseUnit(widthAttr!);\n    parsedDim.height = parseUnit(heightAttr!);\n    // set a transform for elements that have x y and are inner(only) SVGs\n    return parsedDim;\n  }\n\n  const pasedViewBox = viewBoxAttr.match(reViewBoxAttrValue)!;\n  minX = -parseFloat(pasedViewBox[1]);\n  minY = -parseFloat(pasedViewBox[2]);\n  const viewBoxWidth = parseFloat(pasedViewBox[3]);\n  const viewBoxHeight = parseFloat(pasedViewBox[4]);\n  parsedDim.minX = minX;\n  parsedDim.minY = minY;\n  parsedDim.viewBoxWidth = viewBoxWidth;\n  parsedDim.viewBoxHeight = viewBoxHeight;\n  if (!missingDimAttr) {\n    parsedDim.width = parseUnit(widthAttr);\n    parsedDim.height = parseUnit(heightAttr);\n    scaleX = parsedDim.width / viewBoxWidth;\n    scaleY = parsedDim.height / viewBoxHeight;\n  } else {\n    parsedDim.width = viewBoxWidth;\n    parsedDim.height = viewBoxHeight;\n  }\n\n  // default is to preserve aspect ratio\n  const preserveAspectRatio = parsePreserveAspectRatioAttribute(\n    element.getAttribute('preserveAspectRatio') || '',\n  );\n  if (preserveAspectRatio.alignX !== NONE) {\n    //translate all container for the effect of Mid, Min, Max\n    if (preserveAspectRatio.meetOrSlice === 'meet') {\n      scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;\n      // calculate additional translation to move the viewbox\n    }\n    if (preserveAspectRatio.meetOrSlice === 'slice') {\n      scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;\n      // calculate additional translation to move the viewbox\n    }\n    widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n    heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n    if (preserveAspectRatio.alignX === 'Mid') {\n      widthDiff /= 2;\n    }\n    if (preserveAspectRatio.alignY === 'Mid') {\n      heightDiff /= 2;\n    }\n    if (preserveAspectRatio.alignX === 'Min') {\n      widthDiff = 0;\n    }\n    if (preserveAspectRatio.alignY === 'Min') {\n      heightDiff = 0;\n    }\n  }\n\n  if (\n    scaleX === 1 &&\n    scaleY === 1 &&\n    minX === 0 &&\n    minY === 0 &&\n    x === 0 &&\n    y === 0\n  ) {\n    return parsedDim;\n  }\n  if ((x || y) && element.parentNode!.nodeName !== '#document') {\n    translateMatrix =\n      ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n  }\n\n  matrix =\n    translateMatrix +\n    ' matrix(' +\n    scaleX +\n    ' 0' +\n    ' 0 ' +\n    scaleY +\n    ' ' +\n    (minX * scaleX + widthDiff) +\n    ' ' +\n    (minY * scaleY + heightDiff) +\n    ') ';\n  // seems unused.\n  // parsedDim.viewboxTransform = parseTransformAttribute(matrix);\n  if (element.nodeName === 'svg') {\n    el = element.ownerDocument.createElementNS(svgNS, 'g');\n    // element.firstChild != null\n    while (element.firstChild) {\n      el.appendChild(element.firstChild);\n    }\n    element.appendChild(el);\n  } else {\n    el = element;\n    el.removeAttribute('x');\n    el.removeAttribute('y');\n    matrix = el.getAttribute('transform') + matrix;\n  }\n  el.setAttribute('transform', matrix);\n  return parsedDim;\n}\n","export const getTagName = (node: Element) => node.tagName.replace('svg:', '');\n","import { svgInvalidAncestors } from './constants';\nimport { getSvgRegex } from './getSvgRegex';\nimport { getTagName } from './getTagName';\n\nconst svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n\nexport function hasInvalidAncestor(element: Element) {\n  let _element: Element | null = element;\n  while (_element && (_element = _element.parentElement)) {\n    if (\n      _element &&\n      _element.nodeName &&\n      svgInvalidAncestorsRegEx.test(getTagName(_element)) &&\n      !_element.getAttribute('instantiated_by_use')\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n","export function getMultipleNodes(\n  doc: Document,\n  nodeNames: string[],\n): Element[] {\n  let nodeName,\n    nodeArray: Element[] = [],\n    nodeList,\n    i,\n    len;\n  for (i = 0, len = nodeNames.length; i < len; i++) {\n    nodeName = nodeNames[i];\n    nodeList = doc.getElementsByTagNameNS(\n      'http://www.w3.org/2000/svg',\n      nodeName,\n    );\n    nodeArray = nodeArray.concat(Array.from(nodeList));\n  }\n  return nodeArray;\n}\n","const gradientsAttrs = [\n  'gradientTransform',\n  'x1',\n  'x2',\n  'y1',\n  'y2',\n  'gradientUnits',\n  'cx',\n  'cy',\n  'r',\n  'fx',\n  'fy',\n];\nconst xlinkAttr = 'xlink:href';\n\nexport function recursivelyParseGradientsXlink(\n  doc: Document,\n  gradient: Element,\n) {\n  const xLink = gradient.getAttribute(xlinkAttr)?.slice(1) || '',\n    referencedGradient = doc.getElementById(xLink);\n  if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n    recursivelyParseGradientsXlink(doc, referencedGradient as Element);\n  }\n  if (referencedGradient) {\n    gradientsAttrs.forEach((attr) => {\n      const value = referencedGradient.getAttribute(attr);\n      if (!gradient.hasAttribute(attr) && value) {\n        gradient.setAttribute(attr, value);\n      }\n    });\n    if (!gradient.children.length) {\n      const referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n  }\n  gradient.removeAttribute(xlinkAttr);\n}\n","import { getMultipleNodes } from './getMultipleNodes';\nimport { recursivelyParseGradientsXlink } from './recursivelyParseGradientsXlink';\n\nconst tagArray = [\n  'linearGradient',\n  'radialGradient',\n  'svg:linearGradient',\n  'svg:radialGradient',\n];\n\n/**\n * Parses an SVG document, returning all of the gradient declarations found in it\n * @param {SVGDocument} doc SVG document to parse\n * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n */\nexport function getGradientDefs(\n  doc: Document,\n): Record<string, SVGGradientElement> {\n  const elList = getMultipleNodes(doc, tagArray);\n  const gradientDefs: Record<string, SVGGradientElement> = {};\n  let j = elList.length;\n  while (j--) {\n    const el = elList[j];\n    if (el.getAttribute('xlink:href')) {\n      recursivelyParseGradientsXlink(doc, el);\n    }\n    const id = el.getAttribute('id');\n    if (id) {\n      gradientDefs[id] = el as SVGGradientElement;\n    }\n  }\n  return gradientDefs;\n}\n","import { Gradient } from '../gradient/Gradient';\nimport { Group } from '../shapes/Group';\nimport { FabricImage } from '../shapes/Image';\nimport { classRegistry } from '../ClassRegistry';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../util/misc/matrix';\nimport { removeTransformMatrixForSvgParsing } from '../util/transform_matrix_removal';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { Point } from '../Point';\nimport { CENTER, FILL, STROKE } from '../constants';\nimport { getGradientDefs } from './getGradientDefs';\nimport { getCSSRules } from './getCSSRules';\nimport type { LoadImageOptions } from '../util';\nimport type { CSSRules, TSvgReviverCallback } from './typedefs';\nimport type { ParsedViewboxTransform } from './applyViewboxTransform';\nimport type { SVGOptions } from '../gradient';\nimport { getTagName } from './getTagName';\nimport { parseTransformAttribute } from './parseTransformAttribute';\n\nconst findTag = (el: Element) =>\n  classRegistry.getSVGClass(getTagName(el).toLowerCase());\n\ntype StorageType = {\n  fill: SVGGradientElement;\n  stroke: SVGGradientElement;\n  clipPath: Element[];\n};\n\ntype NotParsedFabricObject = FabricObject & {\n  fill: string;\n  stroke: string;\n  clipPath?: string;\n  clipRule?: CanvasFillRule;\n};\n\nexport class ElementsParser {\n  declare elements: Element[];\n  declare options: LoadImageOptions & ParsedViewboxTransform;\n  declare reviver?: TSvgReviverCallback;\n  declare regexUrl: RegExp;\n  declare doc: Document;\n  declare clipPaths: Record<string, Element[]>;\n  declare gradientDefs: Record<string, SVGGradientElement>;\n  declare cssRules: CSSRules;\n\n  constructor(\n    elements: Element[],\n    options: LoadImageOptions & ParsedViewboxTransform,\n    reviver: TSvgReviverCallback | undefined,\n    doc: Document,\n    clipPaths: Record<string, Element[]>,\n  ) {\n    this.elements = elements;\n    this.options = options;\n    this.reviver = reviver;\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n    this.doc = doc;\n    this.clipPaths = clipPaths;\n    this.gradientDefs = getGradientDefs(doc);\n    this.cssRules = getCSSRules(doc);\n  }\n\n  parse(): Promise<Array<FabricObject | null>> {\n    return Promise.all(\n      this.elements.map((element) => this.createObject(element)),\n    );\n  }\n\n  async createObject(el: Element): Promise<FabricObject | null> {\n    const klass = findTag(el);\n    if (klass) {\n      const obj: NotParsedFabricObject = await klass.fromElement(\n        el,\n        this.options,\n        this.cssRules,\n      );\n      this.resolveGradient(obj, el, FILL);\n      this.resolveGradient(obj, el, STROKE);\n      if (obj instanceof FabricImage && obj._originalElement) {\n        removeTransformMatrixForSvgParsing(\n          obj,\n          obj.parsePreserveAspectRatioAttribute(),\n        );\n      } else {\n        removeTransformMatrixForSvgParsing(obj);\n      }\n      await this.resolveClipPath(obj, el);\n      this.reviver && this.reviver(el, obj);\n      return obj;\n    }\n    return null;\n  }\n\n  extractPropertyDefinition(\n    obj: NotParsedFabricObject,\n    property: 'fill' | 'stroke' | 'clipPath',\n    storage: Record<string, StorageType[typeof property]>,\n  ): StorageType[typeof property] | undefined {\n    const value = obj[property]!,\n      regex = this.regexUrl;\n    if (!regex.test(value)) {\n      return undefined;\n    }\n    // verify: can we remove the 'g' flag? and remove lastIndex changes?\n    regex.lastIndex = 0;\n    // we passed the regex test, so we know is not null;\n    const id = regex.exec(value)![1];\n    regex.lastIndex = 0;\n    // @todo fix this\n    return storage[id];\n  }\n\n  resolveGradient(\n    obj: NotParsedFabricObject,\n    el: Element,\n    property: 'fill' | 'stroke',\n  ) {\n    const gradientDef = this.extractPropertyDefinition(\n      obj,\n      property,\n      this.gradientDefs,\n    ) as SVGGradientElement;\n    if (gradientDef) {\n      const opacityAttr = el.getAttribute(property + '-opacity');\n      const gradient = Gradient.fromElement(gradientDef, obj, {\n        ...this.options,\n        opacity: opacityAttr,\n      } as SVGOptions);\n      obj.set(property, gradient);\n    }\n  }\n\n  // TODO: resolveClipPath could be run once per clippath with minor work per object.\n  // is a refactor that i m not sure is worth on this code\n  async resolveClipPath(\n    obj: NotParsedFabricObject,\n    usingElement: Element,\n    exactOwner?: Element,\n  ) {\n    const clipPathElements = this.extractPropertyDefinition(\n      obj,\n      'clipPath',\n      this.clipPaths,\n    ) as Element[];\n    if (clipPathElements) {\n      const objTransformInv = invertTransform(obj.calcTransformMatrix());\n      const clipPathTag = clipPathElements[0].parentElement!;\n      let clipPathOwner = usingElement;\n      while (\n        !exactOwner &&\n        clipPathOwner.parentElement &&\n        clipPathOwner.getAttribute('clip-path') !== obj.clipPath\n      ) {\n        clipPathOwner = clipPathOwner.parentElement;\n      }\n      // move the clipPath tag as sibling to the real element that is using it\n      clipPathOwner.parentElement!.appendChild(clipPathTag);\n\n      // this multiplication order could be opposite.\n      // but i don't have an svg to test it\n      // at the first SVG that has a transform on both places and is misplaced\n      // try to invert this multiplication order\n      const finalTransform = parseTransformAttribute(\n        `${clipPathOwner.getAttribute('transform') || ''} ${\n          clipPathTag.getAttribute('originalTransform') || ''\n        }`,\n      );\n\n      clipPathTag.setAttribute(\n        'transform',\n        `matrix(${finalTransform.join(',')})`,\n      );\n\n      const container = await Promise.all(\n        clipPathElements.map((clipPathElement) => {\n          return findTag(clipPathElement)\n            .fromElement(clipPathElement, this.options, this.cssRules)\n            .then((enlivedClippath: NotParsedFabricObject) => {\n              removeTransformMatrixForSvgParsing(enlivedClippath);\n              enlivedClippath.fillRule = enlivedClippath.clipRule!;\n              delete enlivedClippath.clipRule;\n              return enlivedClippath;\n            });\n        }),\n      );\n      const clipPath =\n        container.length === 1 ? container[0] : new Group(container);\n      const gTransform = multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix(),\n      );\n      if (clipPath.clipPath) {\n        await this.resolveClipPath(\n          clipPath,\n          clipPathOwner,\n          // this is tricky.\n          // it tries to differentiate from when clipPaths are inherited by outside groups\n          // or when are really clipPaths referencing other clipPaths\n          clipPathTag.getAttribute('clip-path') ? clipPathOwner : undefined,\n        );\n      }\n      const { scaleX, scaleY, angle, skewX, translateX, translateY } =\n        qrDecompose(gTransform);\n      clipPath.set({\n        flipX: false,\n        flipY: false,\n      });\n      clipPath.set({\n        scaleX,\n        scaleY,\n        angle,\n        skewX,\n        skewY: 0,\n      });\n      clipPath.setPositionByOrigin(\n        new Point(translateX, translateY),\n        CENTER,\n        CENTER,\n      );\n      obj.clipPath = clipPath;\n    } else {\n      // if clip-path does not resolve to any element, delete the property.\n      delete obj.clipPath;\n      return;\n    }\n  }\n}\n","import type { CSSRules } from './typedefs';\n\n/**\n * Returns CSS rules for a given SVG document\n * @param {HTMLElement} doc SVG document to parse\n * @return {Object} CSS rules of this document\n */\nexport function getCSSRules(doc: Document) {\n  const styles = doc.getElementsByTagName('style');\n  let i;\n  let len;\n  const allRules: CSSRules = {};\n\n  // very crude parsing of style contents\n  for (i = 0, len = styles.length; i < len; i++) {\n    const styleContents = (styles[i].textContent || '').replace(\n      // remove comments\n      /\\/\\*[\\s\\S]*?\\*\\//g,\n      '',\n    );\n\n    if (styleContents.trim() === '') {\n      continue;\n    }\n    // recovers all the rule in this form `body { style code... }`\n    // rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n    styleContents\n      .split('}')\n      // remove empty rules and remove everything if we didn't split in at least 2 pieces\n      .filter((rule, index, array) => array.length > 1 && rule.trim())\n      // at this point we have hopefully an array of rules `body { style code... `\n      .forEach((rule) => {\n        // if there is more than one opening bracket and the rule starts with '@', it is likely\n        // a nested at-rule like @media, @supports, @scope, etc. Ignore these as the code below\n        // can not handle it.\n        if (\n          (rule.match(/{/g) || []).length > 1 &&\n          rule.trim().startsWith('@')\n        ) {\n          return;\n        }\n\n        const match = rule.split('{'),\n          ruleObj: Record<string, string> = {},\n          declaration = match[1].trim(),\n          propertyValuePairs = declaration.split(';').filter(function (pair) {\n            return pair.trim();\n          });\n\n        for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n          const pair = propertyValuePairs[i].split(':'),\n            property = pair[0].trim(),\n            value = pair[1].trim();\n          ruleObj[property] = value;\n        }\n        rule = match[0].trim();\n        rule.split(',').forEach((_rule) => {\n          _rule = _rule.replace(/^svg/i, '').trim();\n          if (_rule === '') {\n            return;\n          }\n          allRules[_rule] = {\n            ...(allRules[_rule] || {}),\n            ...ruleObj,\n          };\n        });\n      });\n  }\n  return allRules;\n}\n","import { applyViewboxTransform } from './applyViewboxTransform';\nimport { svgValidTagNamesRegEx } from './constants';\nimport { hasInvalidAncestor } from './hasInvalidAncestor';\nimport { parseUseDirectives } from './parseUseDirectives';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { ElementsParser } from './elements_parser';\nimport { log, SignalAbortedError } from '../util/internals/console';\nimport { getTagName } from './getTagName';\n\nconst isValidSvgTag = (el: Element) =>\n  svgValidTagNamesRegEx.test(getTagName(el));\n\nexport const createEmptyResponse = (): SVGParsingOutput => ({\n  objects: [],\n  elements: [],\n  options: {},\n  allElements: [],\n});\n\n/**\n * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n * @static\n * @function\n * @memberOf fabric\n * @param {HTMLElement} doc SVG document to parse\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @return {SVGParsingOutput}\n * {@link SVGParsingOutput} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n */\nexport async function parseSVGDocument(\n  doc: Document,\n  reviver?: TSvgReviverCallback,\n  { crossOrigin, signal }: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  if (signal && signal.aborted) {\n    log('log', new SignalAbortedError('parseSVGDocument'));\n    // this is an unhappy path, we dont care about speed\n    return createEmptyResponse();\n  }\n  const documentElement = doc.documentElement;\n  parseUseDirectives(doc);\n\n  const descendants = Array.from(documentElement.getElementsByTagName('*')),\n    options = {\n      ...applyViewboxTransform(documentElement),\n      crossOrigin,\n      signal,\n    };\n  const elements = descendants.filter((el) => {\n    applyViewboxTransform(el);\n    return isValidSvgTag(el) && !hasInvalidAncestor(el); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n  });\n  if (!elements || (elements && !elements.length)) {\n    return {\n      ...createEmptyResponse(),\n      options,\n      allElements: descendants,\n    };\n  }\n  const localClipPaths: Record<string, Element[]> = {};\n  descendants\n    .filter((el) => getTagName(el) === 'clipPath')\n    .forEach((el) => {\n      el.setAttribute('originalTransform', el.getAttribute('transform') || '');\n      const id = el.getAttribute('id')!;\n      localClipPaths[id] = Array.from(el.getElementsByTagName('*')).filter(\n        (el) => isValidSvgTag(el),\n      );\n    });\n\n  // Precedence of rules:   style > class > attribute\n  const elementParser = new ElementsParser(\n    elements,\n    options,\n    reviver,\n    doc,\n    localClipPaths,\n  );\n\n  const instances = await elementParser.parse();\n\n  return {\n    objects: instances,\n    elements,\n    options,\n    allElements: descendants,\n  };\n}\n","import { svgNS } from './constants';\nimport { getMultipleNodes } from './getMultipleNodes';\nimport { applyViewboxTransform } from './applyViewboxTransform';\nimport { parseStyleString } from './parseStyleString';\n\nexport function parseUseDirectives(doc: Document) {\n  const nodelist = getMultipleNodes(doc, ['use', 'svg:use']);\n  const skipAttributes = ['x', 'y', 'xlink:href', 'href', 'transform'];\n\n  for (const useElement of nodelist) {\n    const useAttributes: NamedNodeMap = useElement.attributes;\n\n    const useAttrMap: Record<string, string> = {};\n    for (const attr of useAttributes) {\n      attr.value && (useAttrMap[attr.name] = attr.value);\n    }\n\n    const xlink = (useAttrMap['xlink:href'] || useAttrMap.href || '').slice(1);\n\n    if (xlink === '') {\n      return;\n    }\n    const referencedElement = doc.getElementById(xlink);\n    if (referencedElement === null) {\n      // if we can't find the target of the xlink, consider this use tag bad, similar to no xlink\n      return;\n    }\n    let clonedOriginal = referencedElement.cloneNode(true) as Element;\n\n    const originalAttributes: NamedNodeMap = clonedOriginal.attributes;\n\n    const originalAttrMap: Record<string, string> = {};\n    for (const attr of originalAttributes) {\n      attr.value && (originalAttrMap[attr.name] = attr.value);\n    }\n\n    // Transform attribute needs to be merged in a particular way\n    const { x = 0, y = 0, transform = '' } = useAttrMap;\n    const currentTrans = `${transform} ${\n      originalAttrMap.transform || ''\n    } translate(${x}, ${y})`;\n\n    applyViewboxTransform(clonedOriginal);\n\n    if (/^svg$/i.test(clonedOriginal.nodeName)) {\n      // if is an SVG, create a group and apply all the attributes on top of it\n      const el3 = clonedOriginal.ownerDocument.createElementNS(svgNS, 'g');\n      Object.entries(originalAttrMap).forEach(([name, value]) =>\n        el3.setAttributeNS(svgNS, name, value),\n      );\n      el3.append(...clonedOriginal.childNodes);\n      clonedOriginal = el3;\n    }\n\n    for (const attr of useAttributes) {\n      if (!attr) {\n        continue;\n      }\n      const { name, value } = attr;\n      if (skipAttributes.includes(name)) {\n        continue;\n      }\n\n      if (name === 'style') {\n        // when use has a style, merge the two styles, with the ref being priority (not use)\n        // priority is by feature. an attribute for fill on the original element\n        // will overwrite the fill in style or attribute for tha use\n        const styleRecord: Record<string, any> = {};\n        parseStyleString(value, styleRecord);\n        // cleanup styleRecord from attributes of original\n        Object.entries(originalAttrMap).forEach(([name, value]) => {\n          styleRecord[name] = value;\n        });\n        // now we can put in the style of the original that will overwrite the original attributes\n        parseStyleString(originalAttrMap.style || '', styleRecord);\n        const mergedStyles = Object.entries(styleRecord)\n          .map((entry) => entry.join(':'))\n          .join(';');\n        clonedOriginal.setAttribute(name, mergedStyles);\n      } else {\n        // set the attribute from use element only if the original does not have it already\n        !originalAttrMap[name] && clonedOriginal.setAttribute(name, value);\n      }\n    }\n\n    clonedOriginal.setAttribute('transform', currentTrans);\n    clonedOriginal.setAttribute('instantiated_by_use', '1');\n    clonedOriginal.removeAttribute('id');\n    useElement.parentNode!.replaceChild(clonedOriginal, useElement);\n  }\n}\n","import { getFabricWindow } from '../env';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { parseSVGDocument } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\n\n/**\n * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n * @memberOf fabric\n * @param {String} string representing the svg\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromString(\n  string: string,\n  reviver?: TSvgReviverCallback,\n  options?: LoadImageOptions,\n): Promise<SVGParsingOutput> {\n  const parser = new (getFabricWindow().DOMParser)(),\n    // should we use `image/svg+xml` here?\n    doc = parser.parseFromString(string.trim(), 'text/xml');\n  return parseSVGDocument(doc, reviver, options);\n}\n","import { request } from '../util/internals/dom_request';\nimport { parseSVGDocument, createEmptyResponse } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\n\n/**\n * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n * @memberOf fabric\n * @param {string} url where the SVG is\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromURL(\n  url: string,\n  reviver?: TSvgReviverCallback,\n  options: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  // need to handle error properly\n  return new Promise<Document>((resolve, reject) => {\n    const onComplete = (r: XMLHttpRequest) => {\n      const xml = r.responseXML;\n      if (xml) {\n        resolve(xml);\n      }\n      reject();\n    };\n\n    request(url.replace(/^\\n\\s*/, '').trim(), {\n      onComplete,\n      signal: options.signal,\n    });\n  })\n    .then((parsedDoc) => parseSVGDocument(parsedDoc, reviver, options))\n    .catch(() => {\n      // this is an unhappy path, we dont care about speed\n      return createEmptyResponse();\n    });\n}\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Polyline } from '../shapes/Polyline';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { MODIFY_POLY } from '../constants';\n\nconst ACTION_NAME: TModificationEvents = MODIFY_POLY;\n\ntype TTransformAnchor = Transform & { pointIndex: number };\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nexport const createPolyPositionHandler = (pointIndex: number) => {\n  return function (dim: Point, finalMatrix: TMat2D, polyObject: Polyline) {\n    const { points, pathOffset } = polyObject;\n    return new Point(points[pointIndex])\n      .subtract(pathOffset)\n      .transform(\n        multiplyTransformMatrices(\n          polyObject.getViewportTransform(),\n          polyObject.calcTransformMatrix(),\n        ),\n      );\n  };\n};\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nexport const polyActionHandler = (\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) => {\n  const { target, pointIndex } = transform;\n  const poly = target as Polyline;\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    poly.calcOwnMatrix(),\n  );\n\n  poly.points[pointIndex] = mouseLocalPosition.add(poly.pathOffset);\n  poly.setDimensions();\n  poly.set('dirty', true);\n  return true;\n};\n\n/**\n * Keep the polygon in the same position when we change its `width`/`height`/`top`/`left`.\n */\nexport const factoryPolyActionHandler = (\n  pointIndex: number,\n  fn: TransformActionHandler<TTransformAnchor>,\n) => {\n  return function (\n    eventData: TPointerEvent,\n    transform: Transform,\n    x: number,\n    y: number,\n  ) {\n    const poly = transform.target as Polyline,\n      anchorPoint = new Point(\n        poly.points[(pointIndex > 0 ? pointIndex : poly.points.length) - 1],\n      ),\n      anchorPointInParentPlane = anchorPoint\n        .subtract(poly.pathOffset)\n        .transform(poly.calcOwnMatrix()),\n      actionPerformed = fn(eventData, { ...transform, pointIndex }, x, y);\n\n    const newAnchorPointInParentPlane = anchorPoint\n      .subtract(poly.pathOffset)\n      .transform(poly.calcOwnMatrix());\n\n    const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n    poly.left -= diff.x;\n    poly.top -= diff.y;\n\n    return actionPerformed;\n  };\n};\n\nexport const createPolyActionHandler = (pointIndex: number) =>\n  wrapWithFireEvent(\n    ACTION_NAME,\n    factoryPolyActionHandler(pointIndex, polyActionHandler),\n  );\n\nexport function createPolyControls(\n  poly: Polyline,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  numOfControls: number,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  arg0: number | Polyline,\n  options: Partial<Control> = {},\n) {\n  const controls = {} as Record<string, Control>;\n  for (\n    let idx = 0;\n    idx < (typeof arg0 === 'number' ? arg0 : arg0.points.length);\n    idx++\n  ) {\n    controls[`p${idx}`] = new Control({\n      actionName: ACTION_NAME,\n      positionHandler: createPolyPositionHandler(idx),\n      actionHandler: createPolyActionHandler(idx),\n      ...options,\n    });\n  }\n  return controls;\n}\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { TAxis, TAxisKey } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  isLocked,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport {\n  CENTER,\n  SCALE_X,\n  SCALE_Y,\n  SKEWING,\n  SKEW_X,\n  SKEW_Y,\n} from '../constants';\n\nexport type SkewTransform = Transform & { skewingSide: -1 | 1 };\n\nconst AXIS_KEYS: Record<\n  TAxis,\n  {\n    counterAxis: TAxis;\n    scale: TAxisKey<'scale'>;\n    skew: TAxisKey<'skew'>;\n    lockSkewing: TAxisKey<'lockSkewing'>;\n    origin: TAxisKey<'origin'>;\n    flip: TAxisKey<'flip'>;\n  }\n> = {\n  x: {\n    counterAxis: 'y',\n    scale: SCALE_X,\n    skew: SKEW_X,\n    lockSkewing: 'lockSkewingX',\n    origin: 'originX',\n    flip: 'flipX',\n  },\n  y: {\n    counterAxis: 'x',\n    scale: SCALE_Y,\n    skew: SKEW_Y,\n    lockSkewing: 'lockSkewingY',\n    origin: 'originY',\n    flip: 'flipY',\n  },\n};\n\nconst skewMap = ['ns', 'nesw', 'ew', 'nwse'];\n\n/**\n * return the correct cursor style for the skew action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const skewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n  coord,\n) => {\n  if (control.x !== 0 && isLocked(fabricObject, 'lockSkewingY')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  if (control.y !== 0 && isLocked(fabricObject, 'lockSkewingX')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control, coord) % 4;\n  return `${skewMap[n]}-resize`;\n};\n\n/**\n * Since skewing is applied before scaling, calculations are done in a scaleless plane\n * @see https://github.com/fabricjs/fabric.js/pull/8380\n */\nfunction skewObject(\n  axis: TAxis,\n  { target, ex, ey, skewingSide, ...transform }: SkewTransform,\n  pointer: Point,\n) {\n  const { skew: skewKey } = AXIS_KEYS[axis],\n    offset = pointer\n      .subtract(new Point(ex, ey))\n      .divide(new Point(target.scaleX, target.scaleY))[axis],\n    skewingBefore = target[skewKey],\n    skewingStart = transform[skewKey],\n    shearingStart = Math.tan(degreesToRadians(skewingStart)),\n    // let a, b be the size of target\n    // let a' be the value of a after applying skewing\n    // then:\n    // a' = a + b * skewA => skewA = (a' - a) / b\n    // the value b is tricky since skewY is applied before skewX\n    b =\n      axis === 'y'\n        ? target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n            // since skewY is applied before skewX, b (=width) is not affected by skewX\n            skewX: 0,\n          }).x\n        : target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n          }).y;\n\n  const shearing =\n    (2 * offset * skewingSide) /\n      // we max out fractions to safeguard from asymptotic behavior\n      Math.max(b, 1) +\n    // add starting state\n    shearingStart;\n\n  const skewing = radiansToDegrees(Math.atan(shearing));\n\n  target.set(skewKey, skewing);\n  const changed = skewingBefore !== target[skewKey];\n\n  if (changed && axis === 'y') {\n    // we don't want skewing to affect scaleX\n    // so we factor it by the inverse skewing diff to make it seem unchanged to the viewer\n    const { skewX, scaleX } = target,\n      dimBefore = target._getTransformedDimensions({ skewY: skewingBefore }),\n      dimAfter = target._getTransformedDimensions(),\n      compensationFactor = skewX !== 0 ? dimBefore.x / dimAfter.x : 1;\n    compensationFactor !== 1 &&\n      target.set(SCALE_X, compensationFactor * scaleX);\n  }\n\n  return changed;\n}\n\n/**\n * Wrapped Action handler for skewing on a given axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nfunction skewHandler(\n  axis: TAxis,\n  eventData: TPointerEvent,\n  transform: Transform,\n  x: number,\n  y: number,\n) {\n  const { target } = transform,\n    {\n      counterAxis,\n      origin: originKey,\n      lockSkewing: lockSkewingKey,\n      skew: skewKey,\n      flip: flipKey,\n    } = AXIS_KEYS[axis];\n  if (isLocked(target, lockSkewingKey)) {\n    return false;\n  }\n\n  const { origin: counterOriginKey, flip: counterFlipKey } =\n      AXIS_KEYS[counterAxis],\n    counterOriginFactor =\n      resolveOrigin(transform[counterOriginKey]) *\n      (target[counterFlipKey] ? -1 : 1),\n    // if the counter origin is top/left (= -0.5) then we are skewing x/y values on the bottom/right side of target respectively.\n    // if the counter origin is bottom/right (= 0.5) then we are skewing x/y values on the top/left side of target respectively.\n    // skewing direction on the top/left side of target is OPPOSITE to the direction of the movement of the pointer,\n    // so we factor skewing direction by this value.\n    skewingSide = (-Math.sign(counterOriginFactor) *\n      (target[flipKey] ? -1 : 1)) as 1 | -1,\n    skewingDirection =\n      ((target[skewKey] === 0 &&\n        // in case skewing equals 0 we use the pointer offset from target center to determine the direction of skewing\n        getLocalPoint(transform, CENTER, CENTER, x, y)[axis] > 0) ||\n      // in case target has skewing we use that as the direction\n      target[skewKey] > 0\n        ? 1\n        : -1) * skewingSide,\n    // anchor to the opposite side of the skewing direction\n    // normalize value from [-1, 1] to origin value [0, 1]\n    origin = -skewingDirection * 0.5 + 0.5;\n\n  const finalHandler = wrapWithFireEvent<SkewTransform>(\n    SKEWING,\n    wrapWithFixedAnchor((eventData, transform, x, y) =>\n      skewObject(axis, transform, new Point(x, y)),\n    ),\n  );\n\n  return finalHandler(\n    eventData,\n    {\n      ...transform,\n      [originKey]: origin,\n      skewingSide,\n    },\n    x,\n    y,\n  );\n}\n\n/**\n * Wrapped Action handler for skewing on the X axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('x', eventData, transform, x, y);\n};\n\n/**\n * Wrapped Action handler for skewing on the Y axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('y', eventData, transform, x, y);\n};\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Path } from '../shapes/Path';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport type { TSimpleParseCommandType } from '../util/path/typedefs';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\nconst ACTION_NAME: TModificationEvents = 'modifyPath' as const;\n\ntype TTransformAnchor = Transform;\n\nexport type PathPointControlStyle = {\n  controlFill?: string;\n  controlStroke?: string;\n  connectionDashArray?: number[];\n};\n\nconst calcPathPointPosition = (\n  pathObject: Path,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n  const command = path[commandIndex];\n  return new Point(\n    (command[pointIndex] as number) - pathOffset.x,\n    (command[pointIndex + 1] as number) - pathOffset.y,\n  ).transform(\n    multiplyTransformMatrices(\n      pathObject.getViewportTransform(),\n      pathObject.calcTransformMatrix(),\n    ),\n  );\n};\n\nconst movePathPoint = (\n  pathObject: Path,\n  x: number,\n  y: number,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n\n  const anchorCommand =\n    path[(commandIndex > 0 ? commandIndex : path.length) - 1];\n  const anchorPoint = new Point(\n    anchorCommand[pointIndex] as number,\n    anchorCommand[pointIndex + 1] as number,\n  );\n\n  const anchorPointInParentPlane = anchorPoint\n    .subtract(pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    pathObject.calcOwnMatrix(),\n  );\n\n  path[commandIndex][pointIndex] = mouseLocalPosition.x + pathOffset.x;\n  path[commandIndex][pointIndex + 1] = mouseLocalPosition.y + pathOffset.y;\n  pathObject.setDimensions();\n\n  const newAnchorPointInParentPlane = anchorPoint\n    .subtract(pathObject.pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n  pathObject.left -= diff.x;\n  pathObject.top -= diff.y;\n  pathObject.set('dirty', true);\n  return true;\n};\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nfunction pathPositionHandler(\n  this: PathPointControl,\n  dim: Point,\n  finalMatrix: TMat2D,\n  pathObject: Path,\n) {\n  const { commandIndex, pointIndex } = this;\n  return calcPathPointPosition(pathObject, commandIndex, pointIndex);\n}\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nfunction pathActionHandler(\n  this: PathPointControl,\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) {\n  const { target } = transform;\n  const { commandIndex, pointIndex } = this;\n  const actionPerformed = movePathPoint(\n    target as Path,\n    x,\n    y,\n    commandIndex,\n    pointIndex,\n  );\n  if (actionPerformed) {\n    fireEvent(this.actionName as TModificationEvents, {\n      ...commonEventInfo(eventData, transform, x, y),\n      commandIndex,\n      pointIndex,\n    });\n  }\n  return actionPerformed;\n}\n\nconst indexFromPrevCommand = (previousCommandType: TSimpleParseCommandType) =>\n  previousCommandType === 'C' ? 5 : previousCommandType === 'Q' ? 3 : 1;\n\nclass PathPointControl extends Control {\n  declare commandIndex: number;\n  declare pointIndex: number;\n  declare controlFill: string;\n  declare controlStroke: string;\n  constructor(options?: Partial<PathPointControl>) {\n    super(options);\n  }\n\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const overrides: ControlRenderingStyleOverride = {\n      ...styleOverride,\n      cornerColor: this.controlFill,\n      cornerStrokeColor: this.controlStroke,\n      transparentCorners: !this.controlFill,\n    };\n    super.render(ctx, left, top, overrides, fabricObject);\n  }\n}\n\nclass PathControlPointControl extends PathPointControl {\n  declare connectionDashArray?: number[];\n  declare connectToCommandIndex: number;\n  declare connectToPointIndex: number;\n  constructor(options?: Partial<PathControlPointControl>) {\n    super(options);\n  }\n\n  render(\n    this: PathControlPointControl,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const { path } = fabricObject;\n    const {\n      commandIndex,\n      pointIndex,\n      connectToCommandIndex,\n      connectToPointIndex,\n    } = this;\n    ctx.save();\n    ctx.strokeStyle = this.controlStroke;\n    if (this.connectionDashArray) {\n      ctx.setLineDash(this.connectionDashArray);\n    }\n    const [commandType] = path[commandIndex];\n    const point = calcPathPointPosition(\n      fabricObject,\n      connectToCommandIndex,\n      connectToPointIndex,\n    );\n\n    if (commandType === 'Q') {\n      // one control point connects to 2 points\n      const point2 = calcPathPointPosition(\n        fabricObject,\n        commandIndex,\n        pointIndex + 2,\n      );\n      ctx.moveTo(point2.x, point2.y);\n      ctx.lineTo(left, top);\n    } else {\n      ctx.moveTo(left, top);\n    }\n    ctx.lineTo(point.x, point.y);\n    ctx.stroke();\n    ctx.restore();\n\n    super.render(ctx, left, top, styleOverride, fabricObject);\n  }\n}\n\nconst createControl = (\n  commandIndexPos: number,\n  pointIndexPos: number,\n  isControlPoint: boolean,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  },\n  connectToCommandIndex?: number,\n  connectToPointIndex?: number,\n) =>\n  new (isControlPoint ? PathControlPointControl : PathPointControl)({\n    commandIndex: commandIndexPos,\n    pointIndex: pointIndexPos,\n    actionName: ACTION_NAME,\n    positionHandler: pathPositionHandler,\n    actionHandler: pathActionHandler,\n    connectToCommandIndex,\n    connectToPointIndex,\n    ...options,\n    ...(isControlPoint ? options.controlPointStyle : options.pointStyle),\n  } as Partial<PathControlPointControl>);\n\nexport function createPathControls(\n  path: Path,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  } = {},\n): Record<string, Control> {\n  const controls = {} as Record<string, Control>;\n  let previousCommandType: TSimpleParseCommandType = 'M';\n  path.path.forEach((command, commandIndex) => {\n    const commandType = command[0];\n\n    if (commandType !== 'Z') {\n      controls[`c_${commandIndex}_${commandType}`] = createControl(\n        commandIndex,\n        command.length - 2,\n        false,\n        options,\n      );\n    }\n    switch (commandType) {\n      case 'C':\n        controls[`c_${commandIndex}_C_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex - 1,\n          indexFromPrevCommand(previousCommandType),\n        );\n        controls[`c_${commandIndex}_C_CP_2`] = createControl(\n          commandIndex,\n          3,\n          true,\n          options,\n          commandIndex,\n          5,\n        );\n        break;\n      case 'Q':\n        controls[`c_${commandIndex}_Q_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex,\n          3,\n        );\n        break;\n    }\n    previousCommandType = commandType;\n  });\n  return controls;\n}\n","import { getFabricWindow } from '../env';\nimport { createCanvasElement, createCanvasElementFor } from '../util/misc/dom';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\n\nexport const isWebGLPipelineState = (\n  options: TWebGLPipelineState | T2DPipelineState,\n): options is TWebGLPipelineState => {\n  return (options as TWebGLPipelineState).webgl !== undefined;\n};\n\n/**\n * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n * drawImage should be faster, but is also bugged for a small combination of old hardware\n * and drivers.\n * putImageData is faster than drawImage for that specific operation.\n */\nexport const isPutImageFaster = (width: number, height: number): boolean => {\n  const targetCanvas = createCanvasElementFor({ width, height });\n  const sourceCanvas = createCanvasElement();\n  const gl = sourceCanvas.getContext('webgl')!;\n  // eslint-disable-next-line no-undef\n  const imageBuffer = new ArrayBuffer(width * height * 4);\n\n  const testContext = {\n    imageBuffer: imageBuffer,\n  } as unknown as Required<WebGLFilterBackend>;\n  const testPipelineState = {\n    destinationWidth: width,\n    destinationHeight: height,\n    targetCanvas: targetCanvas,\n  } as unknown as TWebGLPipelineState;\n  let startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2D.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const drawImageTime = getFabricWindow().performance.now() - startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2DPutImageData.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const putImageDataTime = getFabricWindow().performance.now() - startTime;\n\n  return drawImageTime > putImageDataTime;\n};\n","export const highPsourceCode = `precision highp float`;\n\nexport const identityFragmentShader = `\n    ${highPsourceCode};\n    varying vec2 vTexCoord;\n    uniform sampler2D uTexture;\n    void main() {\n      gl_FragColor = texture2D(uTexture, vTexCoord);\n    }`;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    void main() {\n      vTexCoord = aPosition;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }`;\n","import { getEnv } from '../env';\nimport type {\n  T2DPipelineState,\n  TWebGLAttributeLocationMap,\n  TWebGLPipelineState,\n  TWebGLProgramCacheItem,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport {\n  highPsourceCode,\n  identityFragmentShader,\n  vertexSource,\n} from './shaders/baseFilter';\nimport type { Abortable } from '../typedefs';\nimport { FabricError } from '../util/internals/console';\nimport { createCanvasElementFor } from '../util/misc/dom';\n\nconst regex = new RegExp(highPsourceCode, 'g');\n\nexport class BaseFilter<\n  Name extends string,\n  OwnProps extends Record<string, any> = object,\n  SerializedProps extends Record<string, any> = OwnProps,\n> {\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  get type(): Name {\n    return (this.constructor as typeof BaseFilter).type as Name;\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'BaseFilter';\n\n  /**\n   * Contains the uniform locations for the fragment shader.\n   * uStepW and uStepH are handled by the BaseFilter, each filter class\n   * needs to specify all the one that are needed\n   */\n  static uniformLocations: string[] = [];\n\n  declare static defaults: Record<string, unknown>;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor({\n    type,\n    ...options\n  }: { type?: never } & Partial<OwnProps> & Record<string, any> = {}) {\n    Object.assign(\n      this,\n      (this.constructor as typeof BaseFilter).defaults,\n      options,\n    );\n  }\n\n  protected getFragmentSource(): string {\n    return identityFragmentShader;\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram(\n    gl: WebGLRenderingContext,\n    fragmentSource: string = this.getFragmentSource(),\n    vertexSource: string = this.getVertexSource(),\n  ) {\n    const {\n      WebGLProbe: { GLPrecision = 'highp' },\n    } = getEnv();\n    if (GLPrecision !== 'highp') {\n      fragmentSource = fragmentSource.replace(\n        regex,\n        highPsourceCode.replace('highp', GLPrecision),\n      );\n    }\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    const program = gl.createProgram();\n\n    if (!vertexShader || !fragmentShader || !program) {\n      throw new FabricError(\n        'Vertex, fragment shader or program creation error',\n      );\n    }\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Vertex shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          vertexShader,\n        )}`,\n      );\n    }\n\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Fragment shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          fragmentShader,\n        )}`,\n      );\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new FabricError(\n        `Shader link error for \"${this.type}\" ${gl.getProgramInfoLog(program)}`,\n      );\n    }\n\n    const uniformLocations = this.getUniformLocations(gl, program) || {};\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n\n    return {\n      program,\n      attributeLocations: this.getAttributeLocations(gl, program),\n      uniformLocations,\n    };\n  }\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLAttributeLocationMap {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  }\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLUniformLocationMap {\n    const locations = (this.constructor as unknown as typeof BaseFilter<string>)\n      .uniformLocations;\n\n    const uniformLocations: Record<string, WebGLUniformLocation | null> = {};\n    for (let i = 0; i < locations.length; i++) {\n      uniformLocations[locations[i]] = gl.getUniformLocation(\n        program,\n        locations[i],\n      );\n    }\n    return uniformLocations;\n  }\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData(\n    gl: WebGLRenderingContext,\n    attributeLocations: Record<string, number>,\n    aPositionData: Float32Array,\n  ) {\n    const attributeLocation = attributeLocations.aPosition;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  }\n\n  _setupFrameBuffer(options: TWebGLPipelineState) {\n    const gl = options.context;\n    if (options.passes > 1) {\n      const width = options.destinationWidth;\n      const height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(\n          gl,\n          width,\n          height,\n        );\n      }\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        options.targetTexture,\n        0,\n      );\n    } else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  }\n\n  _swapTextures(options: TWebGLPipelineState) {\n    options.passes--;\n    options.pass++;\n    const temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  }\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isNeutralState(options?: any): boolean {\n    return false;\n  }\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(_options: T2DPipelineState): void {\n    // override by subclass\n  }\n\n  /**\n   * Returns a string that represent the current selected shader code for the filter.\n   * Used to force recompilation when parameters change or to retrieve the shader from cache\n   * @type string\n   **/\n  getCacheKey(): string {\n    return this.type;\n  }\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   * @return {WebGLProgram} the compiled program shader\n   */\n  retrieveShader(options: TWebGLPipelineState): TWebGLProgramCacheItem {\n    const key = this.getCacheKey();\n    if (!options.programCache[key]) {\n      options.programCache[key] = this.createProgram(options.context);\n    }\n    return options.programCache[key];\n  }\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context;\n    const shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    } else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  bindAdditionalTexture(\n    gl: WebGLRenderingContext,\n    texture: WebGLTexture,\n    textureUnit: number,\n  ) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  unbindAdditionalTexture(gl: WebGLRenderingContext, textureUnit: number) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} _gl The canvas context used to compile the shader program.\n   * @param {Object} _uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData(\n    _gl: WebGLRenderingContext,\n    _uniformLocations: TWebGLUniformLocationMap,\n  ): void {\n    // override by subclass\n  }\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer(options: T2DPipelineState) {\n    if (!options.helpLayer) {\n      const { sourceWidth, sourceHeight } = options;\n      const helpLayer = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      options.helpLayer = helpLayer;\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * It will automatically export the default values of a filter,\n   * stored in the static defaults property.\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): { type: Name } & SerializedProps {\n    const defaultKeys = Object.keys(\n      (this.constructor as typeof BaseFilter).defaults || {},\n    ) as (keyof SerializedProps)[];\n\n    return {\n      type: this.type,\n      ...defaultKeys.reduce<SerializedProps>((acc, key) => {\n        acc[key] = this[\n          key as keyof this\n        ] as unknown as (typeof acc)[typeof key];\n        return acc;\n      }, {} as SerializedProps),\n    };\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  static async fromObject(\n    { type, ...filterOptions }: Record<string, any>,\n    _options?: Abortable,\n  ): Promise<BaseFilter<string>> {\n    return new this(filterOptions);\n  }\n}\n","export const blendColorFragmentSource = {\n  multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n  screen:\n    'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n  add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n  difference: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n  subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n  lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n  darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n  exclusion:\n    'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n  overlay: `\n    if (uColor.r < 0.5) {\n      gl_FragColor.r *= 2.0 * uColor.r;\n    } else {\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n    }\n    if (uColor.g < 0.5) {\n      gl_FragColor.g *= 2.0 * uColor.g;\n    } else {\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n    }\n    if (uColor.b < 0.5) {\n      gl_FragColor.b *= 2.0 * uColor.b;\n    } else {\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n    }\n    `,\n  tint: `\n    gl_FragColor.rgb *= (1.0 - uColor.a);\n    gl_FragColor.rgb += uColor.rgb;\n    `,\n} as const;\n","import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const alpha = this.alpha;\n    const tr = source[0] * alpha;\n    const tg = source[1] * alpha;\n    const tb = source[2] * alpha;\n    const alpha1 = 1 - alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      let oR, oG, oB;\n      switch (this.mode) {\n        case 'multiply':\n          oR = (r * tr) / 255;\n          oG = (g * tg) / 255;\n          oB = (b * tb) / 255;\n          break;\n        case 'screen':\n          oR = 255 - ((255 - r) * (255 - tr)) / 255;\n          oG = 255 - ((255 - g) * (255 - tg)) / 255;\n          oB = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          oR = r + tr;\n          oG = g + tg;\n          oB = b + tb;\n          break;\n        case 'difference':\n          oR = Math.abs(r - tr);\n          oG = Math.abs(g - tg);\n          oB = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          oR = r - tr;\n          oG = g - tg;\n          oB = b - tb;\n          break;\n        case 'darken':\n          oR = Math.min(r, tr);\n          oG = Math.min(g, tg);\n          oB = Math.min(b, tb);\n          break;\n        case 'lighten':\n          oR = Math.max(r, tr);\n          oG = Math.max(g, tg);\n          oB = Math.max(b, tb);\n          break;\n        case 'overlay':\n          oR =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          oG =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          oB =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          oR = tr + r - (2 * tr * r) / 255;\n          oG = tg + g - (2 * tg * g) / 255;\n          oB = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          oR = tr + r * alpha1;\n          oG = tg + g * alpha1;\n          oB = tb + b * alpha1;\n      }\n      data[i] = oR;\n      data[i + 1] = oG;\n      data[i + 2] = oB;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n","import type { TBlendImageMode } from '../BlendImage';\n\nexport const fragmentSource: Record<TBlendImageMode, string> = {\n  multiply: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.rgba *= color2.rgba;\n      gl_FragColor = color;\n    }\n    `,\n  mask: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.a = color2.a;\n      gl_FragColor = color;\n    }\n    `,\n} as const;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    uniform mat3 uTransformMatrix;\n    void main() {\n      vTexCoord = aPosition;\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ` as const;\n","import { FabricImage } from '../shapes/Image';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport type { WebGLFilterBackend } from './WebGLFilterBackend';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource, vertexSource } from './shaders/blendImage';\n\nexport type TBlendImageMode = 'multiply' | 'mask';\n\ntype BlendImageOwnProps = {\n  mode: TBlendImageMode;\n  alpha: number;\n};\n\nexport const blendImageDefaultValues: BlendImageOwnProps = {\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Image Blend filter class\n * @example\n * const filter = new filters.BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendImage extends BaseFilter<'BlendImage', BlendImageOwnProps> {\n  /**\n   * Image to make the blend operation with.\n   **/\n  declare image: FabricImage;\n\n  /**\n   * Blend mode for the filter: either 'multiply' or 'mask'. 'multiply' will\n   * multiply the values of each channel (R, G, B, and A) of the filter image by\n   * their corresponding values in the base image. 'mask' will only look at the\n   * alpha channel of the filter image, and apply those values to the base\n   * image's alpha channel.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendImageOwnProps['mode'];\n\n  /**\n   * alpha value. represent the strength of the blend image operation.\n   * not implemented.\n   **/\n  declare alpha: BlendImageOwnProps['alpha'];\n\n  static type = 'BlendImage';\n\n  static defaults = blendImageDefaultValues;\n\n  static uniformLocations = ['uTransformMatrix', 'uImage'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource(): string {\n    return fragmentSource[this.mode];\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context,\n      texture = this.createTexture(options.filterBackend, this.image);\n    this.bindAdditionalTexture(gl, texture!, gl.TEXTURE1);\n    super.applyToWebGL(options);\n    this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n  }\n\n  createTexture(backend: WebGLFilterBackend, image: FabricImage) {\n    return backend.getCachedTexture(image.cacheKey, image.getElement());\n  }\n\n  /**\n   * Calculate a transformMatrix to adapt the image to blend over\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  calculateMatrix() {\n    const image = this.image,\n      { width, height } = image.getElement();\n    return [\n      1 / image.scaleX,\n      0,\n      0,\n      0,\n      1 / image.scaleY,\n      0,\n      -image.left / width,\n      -image.top / height,\n      1,\n    ];\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({\n    imageData: { data, width, height },\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const image = this.image;\n    if (!resources.blendImage) {\n      resources.blendImage = createCanvasElement();\n    }\n    const canvas1 = resources.blendImage;\n    const context = canvas1.getContext('2d')!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas1.width = width;\n      canvas1.height = height;\n    } else {\n      context.clearRect(0, 0, width, height);\n    }\n    context.setTransform(\n      image.scaleX,\n      0,\n      0,\n      image.scaleY,\n      image.left,\n      image.top,\n    );\n    context.drawImage(image.getElement(), 0, 0, width, height);\n    const blendData = context.getImageData(0, 0, width, height).data;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      const tr = blendData[i];\n      const tg = blendData[i + 1];\n      const tb = blendData[i + 2];\n      const ta = blendData[i + 3];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          data[i + 3] = (a * ta) / 255;\n          break;\n        case 'mask':\n          data[i + 3] = ta;\n          break;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const matrix = this.calculateMatrix();\n    gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n    gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * TODO: Handle the possibility of missing image better.\n   * As of now a BlendImage filter without image can't be used with fromObject\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): {\n    type: 'BlendImage';\n    image: ReturnType<FabricImage['toObject']>;\n  } & BlendImageOwnProps {\n    return {\n      ...super.toObject(),\n      image: this.image && this.image.toObject(),\n    };\n  }\n\n  /**\n   * Create filter instance from an object representation\n   * @static\n   * @param {object} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting image loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<BlendImage>}\n   */\n  static async fromObject(\n    { type, image, ...filterOptions }: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<BaseFilter<'BlendImage', BlendImageOwnProps>> {\n    return FabricImage.fromObject(image, options).then(\n      (enlivedImage) => new this({ ...filterOptions, image: enlivedImage }),\n    );\n  }\n}\n\nclassRegistry.setClass(BlendImage);\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  TWebGLPipelineState,\n  T2DPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/blur';\n\ntype BlurOwnProps = {\n  blur: number;\n};\n\nexport const blurDefaultValues: BlurOwnProps = {\n  blur: 0,\n};\n\n/**\n * Blur filter class\n * @example\n * const filter = new Blur({\n *   blur: 0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Blur extends BaseFilter<'Blur', BlurOwnProps> {\n  /**\n   * blur value, in percentage of image dimensions.\n   * specific to keep the image blur constant at different resolutions\n   * range between 0 and 1.\n   * @type Number\n   * @default\n   */\n  declare blur: BlurOwnProps['blur'];\n\n  declare horizontal: boolean;\n  declare aspectRatio: number;\n\n  static type = 'Blur';\n\n  static defaults = blurDefaultValues;\n\n  static uniformLocations = ['uDelta'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      // this aspectRatio is used to give the same blur to vertical and horizontal\n      this.aspectRatio = options.sourceWidth / options.sourceHeight;\n      options.passes++;\n      this._setupFrameBuffer(options);\n      this.horizontal = true;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n      this._setupFrameBuffer(options);\n      this.horizontal = false;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    // this code mimic the shader for output consistency\n    // it samples 31 pixels across the image over a distance that depends from the blur value.\n    this.aspectRatio = width / height;\n    this.horizontal = true;\n    let blurValue = this.getBlurValue() * width;\n    const imageData = new Uint8ClampedArray(data);\n    const samples = 15;\n    const bytesInRow = 4 * width;\n    for (let i = 0; i < data.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i - (i % bytesInRow);\n      const maxIRow = minIRow + bytesInRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = 4;\n      // } else if (offset < 1) {\n      //   pixelOffset = -4;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * 4;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = data[sampledPixel + 3] * weight;\n        r += data[sampledPixel] * localAlpha;\n        g += data[sampledPixel + 1] * localAlpha;\n        b += data[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      imageData[i] = r / a;\n      imageData[i + 1] = g / a;\n      imageData[i + 2] = b / a;\n      imageData[i + 3] = a / totalA;\n    }\n    this.horizontal = false;\n    blurValue = this.getBlurValue() * height;\n    for (let i = 0; i < imageData.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i % bytesInRow;\n      const maxIRow = imageData.length - bytesInRow + minIRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = bytesInRow;\n      // } else if (offset < 1) {\n      //   pixelOffset = -bytesInRow;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * bytesInRow;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = imageData[sampledPixel + 3] * weight;\n        r += imageData[sampledPixel] * localAlpha;\n        g += imageData[sampledPixel + 1] * localAlpha;\n        b += imageData[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      data[i] = r / a;\n      data[i + 1] = g / a;\n      data[i + 2] = b / a;\n      data[i + 3] = a / totalA;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const delta = this.chooseRightDelta();\n    gl.uniform2fv(uniformLocations.uDelta, delta);\n  }\n\n  isNeutralState() {\n    return this.blur === 0;\n  }\n\n  getBlurValue(): number {\n    let blurScale = 1;\n    const { horizontal, aspectRatio } = this;\n    if (horizontal) {\n      if (aspectRatio > 1) {\n        // image is wide, i want to shrink radius horizontal\n        blurScale = 1 / aspectRatio;\n      }\n    } else {\n      if (aspectRatio < 1) {\n        // image is tall, i want to shrink radius vertical\n        blurScale = aspectRatio;\n      }\n    }\n    return blurScale * this.blur * 0.12;\n  }\n\n  /**\n   * choose right value of image percentage to blur with\n   * @returns {Array} a numeric array with delta values\n   */\n  chooseRightDelta() {\n    const blur = this.getBlurValue();\n    return this.horizontal ? [blur, 0] : [0, blur];\n  }\n}\n\nclassRegistry.setClass(Blur);\n","export const fragmentSource = `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n    const float nSamples = 15.0;\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n    float random(vec3 scale) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n    }\n    void main() {\n      vec4 color = vec4(0.0);\n      float totalC = 0.0;\n      float totalA = 0.0;\n      float offset = random(v3offset);\n      for (float t = -nSamples; t <= nSamples; t++) {\n        float percent = (t + offset - 0.5) / nSamples;\n        vec4 sample = texture2D(uTexture, vTexCoord + uDelta * percent);\n        float weight = 1.0 - abs(percent);\n        float alpha = weight * sample.a;\n        color.rgb += sample.rgb * alpha;\n        color.a += alpha;\n        totalA += weight;\n        totalC += alpha;\n      }\n      gl_FragColor.rgb = color.rgb / totalC;\n      gl_FragColor.a = color.a / totalA;\n    }\n  ` as const;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\n\ntype BrightnessOwnProps = {\n  brightness: number;\n};\n\nexport const brightnessDefaultValues: BrightnessOwnProps = {\n  brightness: 0,\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter<'Brightness', BrightnessOwnProps> {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: BrightnessOwnProps['brightness'];\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  static uniformLocations = ['uBrightness'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] += brightness;\n      data[i + 1] += brightness;\n      data[i + 2] += brightness;\n    }\n  }\n\n  isNeutralState() {\n    return this.brightness === 0;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBrightness;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += uBrightness;\n    gl_FragColor = color;\n  }\n`;\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  varying vec2 vTexCoord;\n  uniform mat4 uColorMatrix;\n  uniform vec4 uConstants;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color *= uColorMatrix;\n    color += uConstants;\n    gl_FragColor = color;\n  }`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TMatColorMatrix,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/colorMatrix';\n\nexport type ColorMatrixOwnProps = {\n  matrix: TMatColorMatrix;\n  colorsOnly: boolean;\n};\n\nexport const colorMatrixDefaultValues: ColorMatrixOwnProps = {\n  matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n  colorsOnly: true,\n};\n\n/**\n   * Color Matrix filter class\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl demo}\n   * @example <caption>Kodachrome filter</caption>\n   * const filter = new ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\nexport class ColorMatrix<\n  Name extends string = 'ColorMatrix',\n  OwnProps extends object = ColorMatrixOwnProps,\n  SerializedProps extends object = ColorMatrixOwnProps,\n> extends BaseFilter<Name, OwnProps, SerializedProps> {\n  /**\n   * Colormatrix for pixels.\n   * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n   * outside the -1, 1 range.\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Array} matrix array of 20 numbers.\n   * @default\n   */\n  declare matrix: ColorMatrixOwnProps['matrix'];\n\n  /**\n   * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n   * to save some calculation\n   * @type Boolean\n   * @default true\n   */\n  declare colorsOnly: ColorMatrixOwnProps['colorsOnly'];\n\n  static type = 'ColorMatrix';\n\n  static defaults = colorMatrixDefaultValues;\n\n  static uniformLocations = ['uColorMatrix', 'uConstants'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      m = this.matrix,\n      colorsOnly = this.colorsOnly;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n      data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n      data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n      if (!colorsOnly) {\n        const a = data[i + 3];\n        data[i] += a * m[3];\n        data[i + 1] += a * m[8];\n        data[i + 2] += a * m[13];\n        data[i + 3] =\n          r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const m = this.matrix,\n      matrix = [\n        m[0],\n        m[1],\n        m[2],\n        m[3],\n        m[5],\n        m[6],\n        m[7],\n        m[8],\n        m[10],\n        m[11],\n        m[12],\n        m[13],\n        m[15],\n        m[16],\n        m[17],\n        m[18],\n      ],\n      constants = [m[4], m[9], m[14], m[19]];\n    gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n    gl.uniform4fv(uniformLocations.uConstants, constants);\n  }\n\n  toObject(): { type: Name } & SerializedProps {\n    return {\n      ...super.toObject(),\n      matrix: [...this.matrix] as TMatColorMatrix,\n    };\n  }\n}\n\nclassRegistry.setClass(ColorMatrix);\n","import { ColorMatrix } from './ColorMatrix';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TMatColorMatrix } from './typedefs';\n\ntype FixedFiltersOwnProps = {\n  colorsOnly: boolean;\n};\n\nexport function createColorMatrixFilter(key: string, matrix: TMatColorMatrix) {\n  const newClass = class extends ColorMatrix<\n    typeof key,\n    FixedFiltersOwnProps,\n    FixedFiltersOwnProps\n  > {\n    static type = key;\n\n    static defaults = {\n      colorsOnly: false,\n      matrix,\n    };\n\n    toObject(): { type: string } & FixedFiltersOwnProps {\n      return { type: this.type, colorsOnly: this.colorsOnly };\n    }\n  };\n  classRegistry.setClass(newClass, key);\n  return newClass as typeof ColorMatrix<typeof key, FixedFiltersOwnProps>;\n}\n\nexport const Brownie = createColorMatrixFilter(\n  'Brownie',\n  [\n    0.5997, 0.34553, -0.27082, 0, 0.186, -0.0377, 0.86095, 0.15059, 0, -0.1449,\n    0.24113, -0.07441, 0.44972, 0, -0.02965, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Vintage = createColorMatrixFilter(\n  'Vintage',\n  [\n    0.62793, 0.32021, -0.03965, 0, 0.03784, 0.02578, 0.64411, 0.03259, 0,\n    0.02926, 0.0466, -0.08512, 0.52416, 0, 0.02023, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Kodachrome = createColorMatrixFilter(\n  'Kodachrome',\n  [\n    1.12855, -0.39673, -0.03992, 0, 0.24991, -0.16404, 1.08352, -0.05498, 0,\n    0.09698, -0.16786, -0.56034, 1.60148, 0, 0.13972, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Technicolor = createColorMatrixFilter(\n  'Technicolor',\n  [\n    1.91252, -0.85453, -0.09155, 0, 0.04624, -0.30878, 1.76589, -0.10601, 0,\n    -0.27589, -0.2311, -0.75018, 1.84759, 0, 0.12137, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Polaroid = createColorMatrixFilter(\n  'Polaroid',\n  [\n    1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016,\n    1.483, 0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Sepia = createColorMatrixFilter(\n  'Sepia',\n  [\n    0.393, 0.769, 0.189, 0, 0, 0.349, 0.686, 0.168, 0, 0, 0.272, 0.534, 0.131,\n    0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const BlackWhite = createColorMatrixFilter(\n  'BlackWhite',\n  [\n    1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0,\n    1, 0,\n  ],\n);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLPipelineState } from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\n\ntype ComposedOwnProps = {\n  subFilters: BaseFilter<string, object, object>[];\n};\n\ntype ComposedSerializedProps = {\n  subFilters: Record<string, unknown>[];\n};\n\n/**\n * A container class that knows how to apply a sequence of filters to an input image.\n */\nexport class Composed extends BaseFilter<\n  'Composed',\n  ComposedOwnProps,\n  ComposedSerializedProps\n> {\n  /**\n   * A non sparse array of filters to apply\n   */\n  declare subFilters: ComposedOwnProps['subFilters'];\n\n  static type = 'Composed';\n\n  constructor(\n    options: { subFilters?: BaseFilter<string>[] } & Record<string, any> = {},\n  ) {\n    super(options);\n    this.subFilters = options.subFilters || [];\n  }\n\n  /**\n   * Apply this container's filters to the input image provided.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be applied.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      options.passes += this.subFilters.length - 1;\n    }\n    this.subFilters.forEach((filter) => {\n      filter.applyTo(options);\n    });\n  }\n\n  /**\n   * Serialize this filter into JSON.\n   * @returns {Object} A JSON representation of this filter.\n   */\n  toObject() {\n    return {\n      type: this.type,\n      subFilters: this.subFilters.map((filter) => filter.toObject()),\n    };\n  }\n\n  isNeutralState() {\n    return !this.subFilters.some((filter) => !filter.isNeutralState());\n  }\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   * @static\n   * @param {oject} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting `BlendImage` filter loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<Composed>}\n   */\n  static fromObject(\n    object: Record<string, any>,\n    options?: { signal: AbortSignal },\n  ): Promise<Composed> {\n    return Promise.all(\n      ((object.subFilters || []) as BaseFilter<string>[]).map((filter) =>\n        classRegistry\n          .getClass<typeof BaseFilter>(filter.type)\n          .fromObject(filter, options),\n      ),\n    ).then((enlivedFilters) => new this({ subFilters: enlivedFilters }));\n  }\n}\n\nclassRegistry.setClass(Composed);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/constrast';\n\ntype ContrastOwnProps = {\n  contrast: number;\n};\n\nexport const contrastDefaultValues: ContrastOwnProps = {\n  contrast: 0,\n};\n\n/**\n * Contrast filter class\n * @example\n * const filter = new Contrast({\n *   contrast: 0.25\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Contrast extends BaseFilter<'Contrast', ContrastOwnProps> {\n  /**\n   * contrast value, range from -1 to 1.\n   * @param {Number} contrast\n   * @default 0\n   */\n  declare contrast: ContrastOwnProps['contrast'];\n\n  static type = 'Contrast';\n\n  static defaults = contrastDefaultValues;\n\n  static uniformLocations = ['uContrast'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  isNeutralState() {\n    return this.contrast === 0;\n  }\n\n  /**\n   * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const contrast = Math.floor(this.contrast * 255),\n      contrastF = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = contrastF * (data[i] - 128) + 128;\n      data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n      data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uContrast, this.contrast);\n  }\n}\n\nclassRegistry.setClass(Contrast);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uContrast;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n    gl_FragColor = color;\n  }`;\n","export const fragmentSource = {\n  Convolute_3_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_3_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_5_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_5_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_7_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_7_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_9_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_9_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/convolute';\n\nexport type ConvoluteOwnProps = {\n  opaque: boolean;\n  matrix: number[];\n};\n\nexport const convoluteDefaultValues: ConvoluteOwnProps = {\n  opaque: false,\n  matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n};\n\n/**\n * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n * @example <caption>Sharpen filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 0, -1,  0,\n *            -1,  5, -1,\n *             0, -1,  0 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Blur filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter with opaqueness</caption>\n * const filter = new Convolute({\n *   opaque: true,\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Convolute extends BaseFilter<'Convolute', ConvoluteOwnProps> {\n  /*\n   * Opaque value (true/false)\n   */\n  declare opaque: ConvoluteOwnProps['opaque'];\n\n  /*\n   * matrix for the filter, max 9x9\n   */\n  declare matrix: ConvoluteOwnProps['matrix'];\n\n  static type = 'Convolute';\n\n  static defaults = convoluteDefaultValues;\n\n  static uniformLocations = ['uMatrix', 'uOpaque', 'uHalfSize', 'uSize'];\n\n  getCacheKey() {\n    return `${this.type}_${Math.sqrt(this.matrix.length)}_${\n      this.opaque ? 1 : 0\n    }` as keyof typeof fragmentSource;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.getCacheKey()];\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      weights = this.matrix,\n      side = Math.round(Math.sqrt(weights.length)),\n      halfSide = Math.floor(side / 2),\n      sw = imageData.width,\n      sh = imageData.height,\n      output = options.ctx.createImageData(sw, sh),\n      dst = output.data,\n      // go through the destination image pixels\n      alphaFac = this.opaque ? 1 : 0;\n    let r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n\n    for (y = 0; y < sh; y++) {\n      for (x = 0; x < sw; x++) {\n        dstOff = (y * sw + x) * 4;\n        // calculate the weighed sum of the source image pixels that\n        // fall under the convolution matrix\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n\n        for (cy = 0; cy < side; cy++) {\n          for (cx = 0; cx < side; cx++) {\n            scy = y + cy - halfSide;\n            scx = x + cx - halfSide;\n\n            // eslint-disable-next-line max-depth\n            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n              continue;\n            }\n\n            srcOff = (scy * sw + scx) * 4;\n            wt = weights[cy * side + cx];\n\n            r += data[srcOff] * wt;\n            g += data[srcOff + 1] * wt;\n            b += data[srcOff + 2] * wt;\n            // eslint-disable-next-line max-depth\n            if (!alphaFac) {\n              a += data[srcOff + 3] * wt;\n            }\n          }\n        }\n        dst[dstOff] = r;\n        dst[dstOff + 1] = g;\n        dst[dstOff + 2] = b;\n        if (!alphaFac) {\n          dst[dstOff + 3] = a;\n        } else {\n          dst[dstOff + 3] = data[dstOff + 3];\n        }\n      }\n    }\n    options.imageData = output;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      ...super.toObject(),\n      opaque: this.opaque,\n      matrix: [...this.matrix],\n    };\n  }\n}\n\nclassRegistry.setClass(Convolute);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform vec3 uGamma;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    vec3 correction = (1.0 / uGamma);\n    color.r = pow(color.r, correction.r);\n    color.g = pow(color.g, correction.g);\n    color.b = pow(color.b, correction.b);\n    gl_FragColor = color;\n    gl_FragColor.rgb *= color.a;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/gamma';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nconst GAMMA = 'Gamma' as const;\n\nexport type GammaInput = [number, number, number];\n\nexport type GammaOwnProps = {\n  gamma: GammaInput;\n};\n\nexport const gammaDefaultValues: GammaOwnProps = {\n  gamma: [1, 1, 1],\n};\n\n/**\n * Gamma filter class\n * @example\n * const filter = new Gamma({\n *   gamma: [1, 0.5, 2.1]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Gamma extends BaseFilter<typeof GAMMA, GammaOwnProps> {\n  /**\n   * Gamma array value, from 0.01 to 2.2.\n   * @param {Array} gamma\n   * @default\n   */\n  declare gamma: GammaOwnProps['gamma'];\n  declare rgbValues?: {\n    r: Uint8Array;\n    g: Uint8Array;\n    b: Uint8Array;\n  };\n\n  static type = GAMMA;\n\n  static defaults = gammaDefaultValues;\n\n  static uniformLocations = ['uGamma'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  constructor(options: { gamma?: GammaInput } = {}) {\n    super(options);\n    this.gamma =\n      options.gamma ||\n      ((\n        this.constructor as typeof Gamma\n      ).defaults.gamma.concat() as GammaInput);\n  }\n\n  /**\n   * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const gamma = this.gamma,\n      rInv = 1 / gamma[0],\n      gInv = 1 / gamma[1],\n      bInv = 1 / gamma[2];\n\n    if (!this.rgbValues) {\n      this.rgbValues = {\n        r: new Uint8Array(256),\n        g: new Uint8Array(256),\n        b: new Uint8Array(256),\n      };\n    }\n\n    // This is an optimization - pre-compute a look-up table for each color channel\n    // instead of performing these pow calls for each pixel in the image.\n    const rgb = this.rgbValues;\n    for (let i = 0; i < 256; i++) {\n      rgb.r[i] = Math.pow(i / 255, rInv) * 255;\n      rgb.g[i] = Math.pow(i / 255, gInv) * 255;\n      rgb.b[i] = Math.pow(i / 255, bInv) * 255;\n    }\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = rgb.r[data[i]];\n      data[i + 1] = rgb.g[data[i + 1]];\n      data[i + 2] = rgb.b[data[i + 2]];\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n  }\n\n  isNeutralState() {\n    const { gamma } = this;\n    return gamma[0] === 1 && gamma[1] === 1 && gamma[2] === 1;\n  }\n\n  toObject(): { type: typeof GAMMA; gamma: GammaInput } {\n    return {\n      type: GAMMA,\n      gamma: this.gamma.concat() as GammaInput,\n    };\n  }\n}\n\nclassRegistry.setClass(Gamma);\n","import type { TGrayscaleMode } from '../Grayscale';\n\nexport const fragmentSource: Record<TGrayscaleMode, string> = {\n  average: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      float average = (color.r + color.b + color.g) / 3.0;\n      gl_FragColor = vec4(average, average, average, color.a);\n    }\n    `,\n  lightness: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n  luminosity: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/grayscale';\n\nexport type TGrayscaleMode = 'average' | 'lightness' | 'luminosity';\n\ntype GrayscaleOwnProps = {\n  mode: TGrayscaleMode;\n};\n\nexport const grayscaleDefaultValues: GrayscaleOwnProps = {\n  mode: 'average',\n};\n\n/**\n * Grayscale image filter class\n * @example\n * const filter = new Grayscale();\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Grayscale extends BaseFilter<'Grayscale', GrayscaleOwnProps> {\n  declare mode: TGrayscaleMode;\n\n  static type = 'Grayscale';\n\n  static defaults = grayscaleDefaultValues;\n\n  static uniformLocations = ['uMode'];\n\n  /**\n   * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0, value: number; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      switch (this.mode) {\n        case 'average':\n          value = (r + g + b) / 3;\n          break;\n        case 'lightness':\n          value = (Math.min(r, g, b) + Math.max(r, g, b)) / 2;\n          break;\n        case 'luminosity':\n          value = 0.21 * r + 0.72 * g + 0.07 * b;\n          break;\n      }\n\n      data[i + 2] = data[i + 1] = data[i] = value;\n    }\n  }\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.mode];\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const mode = 1;\n    gl.uniform1i(uniformLocations.uMode, mode);\n  }\n\n  /**\n   * Grayscale filter isNeutralState implementation\n   * The filter is never neutral\n   * on the image\n   **/\n  isNeutralState() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Grayscale);\n","import { cos } from '../util/misc/cos';\nimport { sin } from '../util/misc/sin';\nimport {\n  ColorMatrix,\n  type ColorMatrixOwnProps,\n  colorMatrixDefaultValues,\n} from './ColorMatrix';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\n\nexport type HueRotationOwnProps = ColorMatrixOwnProps & {\n  rotation: number;\n};\n\nexport type HueRotationSerializedProps = {\n  rotation: number;\n};\n\nexport const hueRotationDefaultValues: HueRotationOwnProps = {\n  ...colorMatrixDefaultValues,\n  rotation: 0,\n};\n\n/**\n * HueRotation filter class\n * @example\n * const filter = new HueRotation({\n *   rotation: -0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class HueRotation extends ColorMatrix<\n  'HueRotation',\n  HueRotationOwnProps,\n  HueRotationSerializedProps\n> {\n  /**\n   * HueRotation value, from -1 to 1.\n   */\n  declare rotation: HueRotationOwnProps['rotation'];\n\n  static type = 'HueRotation';\n\n  static defaults = hueRotationDefaultValues;\n\n  calculateMatrix() {\n    const rad = this.rotation * Math.PI,\n      cosine = cos(rad),\n      sine = sin(rad),\n      aThird = 1 / 3,\n      aThirdSqtSin = Math.sqrt(aThird) * sine,\n      OneMinusCos = 1 - cosine;\n    this.matrix = [\n      cosine + OneMinusCos / 3,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      aThird * OneMinusCos - aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n    ];\n  }\n\n  isNeutralState() {\n    return this.rotation === 0;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    this.calculateMatrix();\n    super.applyTo(options);\n  }\n\n  toObject() {\n    return {\n      type: this.type,\n      rotation: this.rotation,\n    };\n  }\n}\n\nclassRegistry.setClass(HueRotation);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/invert';\n\nexport type InvertOwnProps = {\n  alpha: boolean;\n  invert: boolean;\n};\n\nexport const invertDefaultValues: InvertOwnProps = {\n  alpha: false,\n  invert: true,\n};\n\n/**\n * @example\n * const filter = new Invert();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Invert extends BaseFilter<'Invert', InvertOwnProps> {\n  /**\n   * Invert also alpha.\n   * @param {Boolean} alpha\n   * @default\n   **/\n  declare alpha: InvertOwnProps['alpha'];\n\n  /**\n   * Filter invert. if false, does nothing\n   * @param {Boolean} invert\n   * @default\n   */\n  declare invert: InvertOwnProps['invert'];\n\n  static type = 'Invert';\n\n  static defaults = invertDefaultValues;\n\n  static uniformLocations = ['uInvert', 'uAlpha'];\n\n  /**\n   * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];\n      data[i + 1] = 255 - data[i + 1];\n      data[i + 2] = 255 - data[i + 2];\n\n      if (this.alpha) {\n        data[i + 3] = 255 - data[i + 3];\n      }\n    }\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Invert filter isNeutralState implementation\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * @param {Object} options\n   **/\n  isNeutralState() {\n    return !this.invert;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1i(uniformLocations.uInvert, Number(this.invert));\n    gl.uniform1i(uniformLocations.uAlpha, Number(this.alpha));\n  }\n}\n\nclassRegistry.setClass(Invert);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform int uInvert;\n  uniform int uAlpha;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    if (uInvert == 1) {\n      if (uAlpha == 1) {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\n      } else {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n      }\n    } else {\n      gl_FragColor = color;\n    }\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/noise';\n\nexport type NoiseOwnProps = {\n  noise: number;\n};\n\nexport const noiseDefaultValues: NoiseOwnProps = {\n  noise: 0,\n};\n\n/**\n * Noise filter class\n * @example\n * const filter = new Noise({\n *   noise: 700\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Noise extends BaseFilter<'Noise', NoiseOwnProps> {\n  /**\n   * Noise value, from\n   * @param {Number} noise\n   * @default\n   */\n  declare noise: NoiseOwnProps['noise'];\n\n  static type = 'Noise';\n\n  static defaults = noiseDefaultValues;\n\n  static uniformLocations = ['uNoise', 'uSeed'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const noise = this.noise;\n    for (let i = 0; i < data.length; i += 4) {\n      const rand = (0.5 - Math.random()) * noise;\n      data[i] += rand;\n      data[i + 1] += rand;\n      data[i + 2] += rand;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n    gl.uniform1f(uniformLocations.uSeed, Math.random());\n  }\n\n  isNeutralState() {\n    return this.noise === 0;\n  }\n}\n\nclassRegistry.setClass(Noise);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uStepH;\n  uniform float uNoise;\n  uniform float uSeed;\n  varying vec2 vTexCoord;\n  float rand(vec2 co, float seed, float vScale) {\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n  }\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/pixelate';\n\nexport type PixelateOwnProps = {\n  blocksize: number;\n};\n\nexport const pixelateDefaultValues: PixelateOwnProps = {\n  blocksize: 4,\n};\n\n/**\n * Pixelate filter class\n * @example\n * const filter = new Pixelate({\n *   blocksize: 8\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Pixelate extends BaseFilter<'Pixelate', PixelateOwnProps> {\n  declare blocksize: PixelateOwnProps['blocksize'];\n\n  static type = 'Pixelate';\n\n  static defaults = pixelateDefaultValues;\n\n  static uniformLocations = ['uBlocksize'];\n\n  /**\n   * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    for (let i = 0; i < height; i += this.blocksize) {\n      for (let j = 0; j < width; j += this.blocksize) {\n        const index = i * 4 * width + j * 4;\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const a = data[index + 3];\n\n        for (let _i = i; _i < Math.min(i + this.blocksize, height); _i++) {\n          for (let _j = j; _j < Math.min(j + this.blocksize, width); _j++) {\n            const index = _i * 4 * width + _j * 4;\n            data[index] = r;\n            data[index + 1] = g;\n            data[index + 2] = b;\n            data[index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicate when the filter is not gonna apply changes to the image\n   **/\n  isNeutralState() {\n    return this.blocksize === 1;\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n  }\n}\n\nclassRegistry.setClass(Pixelate);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBlocksize;\n  uniform float uStepW;\n  uniform float uStepH;\n  varying vec2 vTexCoord;\n  void main() {\n    float blockW = uBlocksize * uStepW;\n    float blockH = uBlocksize * uStepH;\n    int posX = int(vTexCoord.x / blockW);\n    int posY = int(vTexCoord.y / blockH);\n    float fposX = float(posX);\n    float fposY = float(posY);\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n    vec4 color = texture2D(uTexture, squareCoords);\n    gl_FragColor = color;\n  }\n`;\n","import { classRegistry } from '../ClassRegistry';\nimport { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport { fragmentShader } from './shaders/removeColor';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nexport type RemoveColorOwnProps = {\n  color: string;\n  distance: number;\n  useAlpha: boolean;\n};\n\nexport const removeColorDefaultValues: RemoveColorOwnProps = {\n  color: '#FFFFFF',\n  distance: 0.02,\n  useAlpha: false,\n};\n\n/**\n * Remove white filter class\n * @example\n * const filter = new RemoveColor({\n *   threshold: 0.2,\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class RemoveColor extends BaseFilter<\n  'RemoveColor',\n  RemoveColorOwnProps\n> {\n  /**\n   * Color to remove, in any format understood by {@link Color}.\n   * @param {String} type\n   * @default\n   */\n  declare color: RemoveColorOwnProps['color'];\n\n  /**\n   * distance to actual color, as value up or down from each r,g,b\n   * between 0 and 1\n   **/\n  declare distance: RemoveColorOwnProps['distance'];\n\n  /**\n   * For color to remove inside distance, use alpha channel for a smoother deletion\n   * NOT IMPLEMENTED YET\n   **/\n  declare useAlpha: RemoveColorOwnProps['useAlpha'];\n\n  static type = 'RemoveColor';\n\n  static defaults = removeColorDefaultValues;\n\n  static uniformLocations = ['uLow', 'uHigh'];\n\n  getFragmentSource() {\n    return fragmentShader;\n  }\n\n  /**\n   * Applies filter to canvas element\n   * @param {Object} canvasEl Canvas element to apply filter to\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const distance = this.distance * 255,\n      source = new Color(this.color).getSource(),\n      lowC = [source[0] - distance, source[1] - distance, source[2] - distance],\n      highC = [\n        source[0] + distance,\n        source[1] + distance,\n        source[2] + distance,\n      ];\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      if (\n        r > lowC[0] &&\n        g > lowC[1] &&\n        b > lowC[2] &&\n        r < highC[0] &&\n        g < highC[1] &&\n        b < highC[2]\n      ) {\n        data[i + 3] = 0;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource(),\n      distance = this.distance,\n      lowC = [\n        0 + source[0] / 255 - distance,\n        0 + source[1] / 255 - distance,\n        0 + source[2] / 255 - distance,\n        1,\n      ],\n      highC = [\n        source[0] / 255 + distance,\n        source[1] / 255 + distance,\n        source[2] / 255 + distance,\n        1,\n      ];\n    gl.uniform4fv(uniformLocations.uLow, lowC);\n    gl.uniform4fv(uniformLocations.uHigh, highC);\n  }\n}\n\nclassRegistry.setClass(RemoveColor);\n","export const fragmentShader = `\nprecision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vTexCoord);\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n    gl_FragColor.a = 0.0;\n  }\n}\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { XY } from '../Point';\n\nexport type TResizeType = 'bilinear' | 'hermite' | 'sliceHack' | 'lanczos';\n\nexport type ResizeOwnProps = {\n  resizeType: TResizeType;\n  scaleX: number;\n  scaleY: number;\n  lanczosLobes: number;\n};\n\nexport type ResizeSerializedProps = ResizeOwnProps;\n\nexport const resizeDefaultValues: ResizeOwnProps = {\n  resizeType: 'hermite',\n  scaleX: 1,\n  scaleY: 1,\n  lanczosLobes: 3,\n};\n\ntype ResizeDuring2DResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n};\n\ntype ResizeDuringWEBGLResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n  horizontal: boolean;\n  width: number;\n  height: number;\n  taps: number[];\n  tempScale: number;\n  dH: number;\n  dW: number;\n};\n\n/**\n * Resize image filter class\n * @example\n * const filter = new Resize();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Resize extends BaseFilter<'Resize', ResizeOwnProps> {\n  /**\n   * Resize type\n   * for webgl resizeType is just lanczos, for canvas2d can be:\n   * bilinear, hermite, sliceHack, lanczos.\n   * @default\n   */\n  declare resizeType: ResizeOwnProps['resizeType'];\n\n  /**\n   * Scale factor for resizing, x axis\n   * @param {Number} scaleX\n   * @default\n   */\n  declare scaleX: ResizeOwnProps['scaleX'];\n\n  /**\n   * Scale factor for resizing, y axis\n   * @param {Number} scaleY\n   * @default\n   */\n  declare scaleY: ResizeOwnProps['scaleY'];\n\n  /**\n   * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n   * @param {Number} lanczosLobes\n   * @default\n   */\n  declare lanczosLobes: ResizeOwnProps['lanczosLobes'];\n\n  static type = 'Resize';\n\n  static defaults = resizeDefaultValues;\n\n  static uniformLocations = ['uDelta', 'uTaps'];\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    this: ResizeDuringWEBGLResize,\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform2fv(\n      uniformLocations.uDelta,\n      this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height],\n    );\n    gl.uniform1fv(uniformLocations.uTaps, this.taps);\n  }\n\n  getFilterWindow(this: ResizeDuringWEBGLResize) {\n    const scale = this.tempScale;\n    return Math.ceil(this.lanczosLobes / scale);\n  }\n\n  getCacheKey(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return `${this.type}_${filterWindow}`;\n  }\n\n  getFragmentSource(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return this.generateShader(filterWindow);\n  }\n\n  getTaps(this: ResizeDuringWEBGLResize) {\n    const lobeFunction = this.lanczosCreate(this.lanczosLobes),\n      scale = this.tempScale,\n      filterWindow = this.getFilterWindow(),\n      taps = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      taps[i - 1] = lobeFunction(i * scale);\n    }\n    return taps;\n  }\n\n  /**\n   * Generate vertex and shader sources from the necessary steps numbers\n   * @param {Number} filterWindow\n   */\n  generateShader(filterWindow: number) {\n    const offsets = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      offsets[i - 1] = `${i}.0 * uDelta`;\n    }\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec2 uDelta;\n      varying vec2 vTexCoord;\n      uniform float uTaps[${filterWindow}];\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        float sum = 1.0;\n        ${offsets\n          .map(\n            (offset, i) => `\n              color += texture2D(uTexture, vTexCoord + ${offset}) * uTaps[${i}] + texture2D(uTexture, vTexCoord - ${offset}) * uTaps[${i}];\n              sum += 2.0 * uTaps[${i}];\n            `,\n          )\n          .join('\\n')}\n        gl_FragColor = color / sum;\n      }\n    `;\n  }\n\n  applyToForWebgl(this: ResizeDuringWEBGLResize, options: TWebGLPipelineState) {\n    options.passes++;\n    this.width = options.sourceWidth;\n    this.horizontal = true;\n    this.dW = Math.round(this.width * this.scaleX);\n    this.dH = options.sourceHeight;\n    this.tempScale = this.dW / this.width;\n    this.taps = this.getTaps();\n    options.destinationWidth = this.dW;\n    super.applyTo(options);\n    options.sourceWidth = options.destinationWidth;\n\n    this.height = options.sourceHeight;\n    this.horizontal = false;\n    this.dH = Math.round(this.height * this.scaleY);\n    this.tempScale = this.dH / this.height;\n    this.taps = this.getTaps();\n    options.destinationHeight = this.dH;\n    super.applyTo(options);\n    options.sourceHeight = options.destinationHeight;\n  }\n\n  /**\n   * Apply the resize filter to the image\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      (this as unknown as ResizeDuringWEBGLResize).applyToForWebgl(options);\n    } else {\n      (this as unknown as ResizeDuring2DResize).applyTo2d(options);\n    }\n  }\n\n  isNeutralState() {\n    return this.scaleX === 1 && this.scaleY === 1;\n  }\n\n  lanczosCreate(lobes: number) {\n    return (x: number) => {\n      if (x >= lobes || x <= -lobes) {\n        return 0.0;\n      }\n      if (x < 1.1920929e-7 && x > -1.1920929e-7) {\n        return 1.0;\n      }\n      x *= Math.PI;\n      const xx = x / lobes;\n      return ((Math.sin(x) / x) * Math.sin(xx)) / xx;\n    };\n  }\n\n  applyTo2d(this: ResizeDuring2DResize, options: T2DPipelineState) {\n    const imageData = options.imageData,\n      scaleX = this.scaleX,\n      scaleY = this.scaleY;\n\n    this.rcpScaleX = 1 / scaleX;\n    this.rcpScaleY = 1 / scaleY;\n\n    const oW = imageData.width;\n    const oH = imageData.height;\n    const dW = Math.round(oW * scaleX);\n    const dH = Math.round(oH * scaleY);\n    let newData: ImageData;\n\n    if (this.resizeType === 'sliceHack') {\n      newData = this.sliceByTwo(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'hermite') {\n      newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'bilinear') {\n      newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'lanczos') {\n      newData = this.lanczosResize(options, oW, oH, dW, dH);\n    } else {\n      // this should never trigger, is here just for safety net.\n      newData = new ImageData(dW, dH);\n    }\n    options.imageData = newData;\n  }\n\n  /**\n   * Filter sliceByTwo\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  sliceByTwo(\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const imageData = options.imageData;\n    const mult = 0.5;\n    let doneW = false;\n    let doneH = false;\n    let stepW = oW * mult;\n    let stepH = oH * mult;\n    const resources = options.filterBackend.resources;\n    let sX = 0;\n    let sY = 0;\n    const dX = oW;\n    let dY = 0;\n    if (!resources.sliceByTwo) {\n      resources.sliceByTwo = createCanvasElement();\n    }\n    const tmpCanvas = resources.sliceByTwo;\n    if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n      tmpCanvas.width = oW * 1.5;\n      tmpCanvas.height = oH;\n    }\n    const ctx = tmpCanvas.getContext('2d')!;\n    ctx.clearRect(0, 0, oW * 1.5, oH);\n    ctx.putImageData(imageData, 0, 0);\n\n    dW = Math.floor(dW);\n    dH = Math.floor(dH);\n\n    while (!doneW || !doneH) {\n      oW = stepW;\n      oH = stepH;\n      if (dW < Math.floor(stepW * mult)) {\n        stepW = Math.floor(stepW * mult);\n      } else {\n        stepW = dW;\n        doneW = true;\n      }\n      if (dH < Math.floor(stepH * mult)) {\n        stepH = Math.floor(stepH * mult);\n      } else {\n        stepH = dH;\n        doneH = true;\n      }\n      ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n      sX = dX;\n      sY = dY;\n      dY += stepH;\n    }\n    return ctx.getImageData(sX, sY, dW, dH);\n  }\n\n  /**\n   * Filter lanczosResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  lanczosResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ): ImageData {\n    function process(u: number): ImageData {\n      let v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n      center.x = (u + 0.5) * ratioX;\n      icenter.x = Math.floor(center.x);\n      for (v = 0; v < dH; v++) {\n        center.y = (v + 0.5) * ratioY;\n        icenter.y = Math.floor(center.y);\n        a = 0;\n        red = 0;\n        green = 0;\n        blue = 0;\n        alpha = 0;\n        for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n          if (i < 0 || i >= oW) {\n            continue;\n          }\n          fX = Math.floor(1000 * Math.abs(i - center.x));\n          if (!cacheLanc[fX]) {\n            cacheLanc[fX] = {};\n          }\n          for (let j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n            if (j < 0 || j >= oH) {\n              continue;\n            }\n            fY = Math.floor(1000 * Math.abs(j - center.y));\n            if (!cacheLanc[fX][fY]) {\n              cacheLanc[fX][fY] = lanczos(\n                Math.sqrt(\n                  Math.pow(fX * rcpRatioX, 2) + Math.pow(fY * rcpRatioY, 2),\n                ) / 1000,\n              );\n            }\n            weight = cacheLanc[fX][fY];\n            if (weight > 0) {\n              idx = (j * oW + i) * 4;\n              a += weight;\n              red += weight * srcData[idx];\n              green += weight * srcData[idx + 1];\n              blue += weight * srcData[idx + 2];\n              alpha += weight * srcData[idx + 3];\n            }\n          }\n        }\n        idx = (v * dW + u) * 4;\n        destData[idx] = red / a;\n        destData[idx + 1] = green / a;\n        destData[idx + 2] = blue / a;\n        destData[idx + 3] = alpha / a;\n      }\n\n      if (++u < dW) {\n        return process(u);\n      } else {\n        return destImg;\n      }\n    }\n\n    const srcData = options.imageData.data,\n      destImg = options.ctx.createImageData(dW, dH),\n      destData = destImg.data,\n      lanczos = this.lanczosCreate(this.lanczosLobes),\n      ratioX = this.rcpScaleX,\n      ratioY = this.rcpScaleY,\n      rcpRatioX = 2 / this.rcpScaleX,\n      rcpRatioY = 2 / this.rcpScaleY,\n      range2X = Math.ceil((ratioX * this.lanczosLobes) / 2),\n      range2Y = Math.ceil((ratioY * this.lanczosLobes) / 2),\n      cacheLanc: Record<number, Record<number, number>> = {},\n      center: XY = { x: 0, y: 0 },\n      icenter: XY = { x: 0, y: 0 };\n\n    return process(0);\n  }\n\n  /**\n   * bilinearFiltering\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  bilinearFiltering(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    let a;\n    let b;\n    let c;\n    let d;\n    let x;\n    let y;\n    let i;\n    let j;\n    let xDiff;\n    let yDiff;\n    let chnl;\n    let color;\n    let offset = 0;\n    let origPix;\n    const ratioX = this.rcpScaleX;\n    const ratioY = this.rcpScaleY;\n    const w4 = 4 * (oW - 1);\n    const img = options.imageData;\n    const pixels = img.data;\n    const destImage = options.ctx.createImageData(dW, dH);\n    const destPixels = destImage.data;\n    for (i = 0; i < dH; i++) {\n      for (j = 0; j < dW; j++) {\n        x = Math.floor(ratioX * j);\n        y = Math.floor(ratioY * i);\n        xDiff = ratioX * j - x;\n        yDiff = ratioY * i - y;\n        origPix = 4 * (y * oW + x);\n\n        for (chnl = 0; chnl < 4; chnl++) {\n          a = pixels[origPix + chnl];\n          b = pixels[origPix + 4 + chnl];\n          c = pixels[origPix + w4 + chnl];\n          d = pixels[origPix + w4 + 4 + chnl];\n          color =\n            a * (1 - xDiff) * (1 - yDiff) +\n            b * xDiff * (1 - yDiff) +\n            c * yDiff * (1 - xDiff) +\n            d * xDiff * yDiff;\n          destPixels[offset++] = color;\n        }\n      }\n    }\n    return destImage;\n  }\n\n  /**\n   * hermiteFastResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  hermiteFastResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const ratioW = this.rcpScaleX,\n      ratioH = this.rcpScaleY,\n      ratioWHalf = Math.ceil(ratioW / 2),\n      ratioHHalf = Math.ceil(ratioH / 2),\n      img = options.imageData,\n      data = img.data,\n      img2 = options.ctx.createImageData(dW, dH),\n      data2 = img2.data;\n    for (let j = 0; j < dH; j++) {\n      for (let i = 0; i < dW; i++) {\n        const x2 = (i + j * dW) * 4;\n        let weight = 0;\n        let weights = 0;\n        let weightsAlpha = 0;\n        let gxR = 0;\n        let gxG = 0;\n        let gxB = 0;\n        let gxA = 0;\n        const centerY = (j + 0.5) * ratioH;\n        for (let yy = Math.floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n          const dy = Math.abs(centerY - (yy + 0.5)) / ratioHHalf,\n            centerX = (i + 0.5) * ratioW,\n            w0 = dy * dy;\n          for (let xx = Math.floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n            let dx = Math.abs(centerX - (xx + 0.5)) / ratioWHalf;\n            const w = Math.sqrt(w0 + dx * dx);\n            /* eslint-disable max-depth */\n            if (w > 1 && w < -1) {\n              continue;\n            }\n            //hermite filter\n            weight = 2 * w * w * w - 3 * w * w + 1;\n            if (weight > 0) {\n              dx = 4 * (xx + yy * oW);\n              //alpha\n              gxA += weight * data[dx + 3];\n              weightsAlpha += weight;\n              //colors\n              if (data[dx + 3] < 255) {\n                weight = (weight * data[dx + 3]) / 250;\n              }\n              gxR += weight * data[dx];\n              gxG += weight * data[dx + 1];\n              gxB += weight * data[dx + 2];\n              weights += weight;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n        data2[x2] = gxR / weights;\n        data2[x2 + 1] = gxG / weights;\n        data2[x2 + 2] = gxB / weights;\n        data2[x2 + 3] = gxA / weightsAlpha;\n      }\n    }\n    return img2;\n  }\n}\n\nclassRegistry.setClass(Resize);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\nexport type SaturationOwnProps = {\n  saturation: number;\n};\n\nexport const saturationDefaultValues: SaturationOwnProps = {\n  saturation: 0,\n};\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Saturation extends BaseFilter<'Saturation', SaturationOwnProps> {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: SaturationOwnProps['saturation'];\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  static uniformLocations = ['uSaturation'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      data[i] += max !== r ? (max - r) * adjust : 0;\n      data[i + 1] += max !== g ? (max - g) * adjust : 0;\n      data[i + 2] += max !== b ? (max - b) * adjust : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n\n  isNeutralState() {\n    return this.saturation === 0;\n  }\n}\n\nclassRegistry.setClass(Saturation);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uSaturation;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float rgMax = max(color.r, color.g);\n    float rgbMax = max(rgMax, color.b);\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/vibrance';\n\nexport type VibranceOwnProps = {\n  vibrance: number;\n};\n\nexport const vibranceDefaultValues: VibranceOwnProps = {\n  vibrance: 0,\n};\n\n/**\n * Vibrance filter class\n * @example\n * const filter = new Vibrance({\n *   vibrance: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Vibrance extends BaseFilter<'Vibrance', VibranceOwnProps> {\n  /**\n   * Vibrance value, from -1 to 1.\n   * Increases/decreases the saturation of more muted colors with less effect on saturated colors.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} vibrance\n   * @default\n   */\n  declare vibrance: VibranceOwnProps['vibrance'];\n\n  static type = 'Vibrance';\n\n  static defaults = vibranceDefaultValues;\n\n  static uniformLocations = ['uVibrance'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.vibrance;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      const avg = (r + g + b) / 3;\n      const amt = ((Math.abs(max - avg) * 2) / 255) * adjust;\n      data[i] += max !== r ? (max - r) * amt : 0;\n      data[i + 1] += max !== g ? (max - g) * amt : 0;\n      data[i + 2] += max !== b ? (max - b) * amt : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {TWebGLUniformLocationMap} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);\n  }\n\n  isNeutralState() {\n    return this.vibrance === 0;\n  }\n}\n\nclassRegistry.setClass(Vibrance);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uVibrance;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float max = max(color.r, max(color.g, color.b));\n    float avg = (color.r + color.g + color.b) / 3.0;\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\n    gl_FragColor = color;\n  }\n`;\n"],"names":["BaseConfiguration","constructor","_defineProperty","this","window","devicePixelRatio","config","super","configure","arguments","length","undefined","Object","assign","addFonts","paths","fontPaths","removeFonts","forEach","fontFamily","clearFonts","restoreDefaults","keys","defaults","reduce","acc","key","log","severity","_len","optionalParams","Array","_key","console","FabricError","Error","message","options","SignalAbortedError","context","GLProbe","WebGLProbe","testPrecision","gl","precision","fragmentSource","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","queryWebGL","canvas","getContext","maxTextureSize","getParameter","MAX_TEXTURE_SIZE","GLPrecision","find","getExtension","loseContext","isSupported","textureSize","copyPasteData","env","setEnv","value","getEnv","document","isTouchSupported","navigator","maxTouchPoints","dispose","getFabricDocument","getFabricWindow","getDevicePixelRatio","_config$devicePixelRa","Math","max","cache","getFontCache","_ref","fontStyle","fontWeight","toLowerCase","charWidthsCache","fontCache","cacheKey","clearFontCache","limitDimsByArea","ar","perfLimitSizeTotal","roughWidth","sqrt","floor","VERSION","noop","halfPI","PI","quarterPI","twoMathPi","PiBy180","iMatrix","freeze","DEFAULT_SVG_FONT_SIZE","ALIASING_LIMIT","kRect","CENTER","LEFT","TOP","BOTTOM","RIGHT","NONE","reNewline","MOVING","SCALING","ROTATING","ROTATE","SKEWING","RESIZING","MODIFY_POLY","MODIFY_PATH","CHANGED","SCALE","SCALE_X","SCALE_Y","SKEW_X","SKEW_Y","FILL","STROKE","MODIFIED","JSON","SVG","classRegistry","Map","has","classType","getClass","get","setClass","classConstructor","set","type","getSVGClass","SVGTagName","setSVGClass","runningAnimations","remove","index","indexOf","splice","cancelAll","animations","animation","abort","cancelByCanvas","filter","_animation$target","target","cancelByTarget","Observable","on","arg0","handler","__eventListeners","entries","eventName","off","push","once","disposers","_ref2","d","disposer","args","call","_removeEventListener","eventListener","_ref3","fire","_this$__eventListener","listenersForEvent","concat","i","removeFromArray","array","idx","cos","angle","abs","sin","angleSlice","sign","Point","y","x","add","that","addEquals","scalarAdd","scalar","scalarAddEquals","subtract","subtractEquals","scalarSubtract","scalarSubtractEquals","multiply","scalarMultiply","scalarMultiplyEquals","divide","scalarDivide","scalarDivideEquals","eq","lt","lte","gt","gte","lerp","t","min","distanceFrom","dx","dy","radiansFrom","atan2","midPointFrom","toString","setXY","setX","setY","setFromPoint","swap","clone","rotate","radians","origin","ZERO","sinus","cosinus","p","transform","ignoreOffset","isCollection","fabricObject","isArray","_objects","createCollectionMixin","Base","Collection","_onObjectAdded","object","_onObjectRemoved","_onStackOrderChanged","objects","size","insertAt","_len2","_key2","removed","_len3","_key3","forEachObject","callback","getObjects","_len4","types","_key4","o","isType","item","isEmpty","contains","deep","includes","some","obj","complexity","memo","current","sendObjectToBack","unshift","bringObjectToFront","sendObjectBackwards","intersecting","newIdx","findNewLowerIndex","bringObjectForward","findNewUpperIndex","moveObjectTo","isOverlapping","collectObjects","left","top","width","height","includeIntersecting","tl","br","selectable","visible","intersectsWithRect","isContainedWithinRect","containsPoint","CommonMethods","_setOptions","prop","_setObject","_set","toggle","property","requestAnimFrame","requestAnimationFrame","cancelAnimFrame","handle","cancelAnimationFrame","id","uid","createCanvasElement","element","createElement","createImage","createCanvasElementFor","newCanvas","toDataURL","canvasEl","format","quality","toBlob","Promise","resolve","_","degreesToRadians","degrees","radiansToDegrees","isIdentityMatrix","mat","every","transformPoint","invertTransform","a","r","multiplyTransformMatrices","b","is2x2","multiplyTransformMatrixArray","matrices","reduceRight","product","curr","calcPlaneRotation","qrDecompose","denom","pow","scaleX","scaleY","skewX","skewY","translateX","translateY","createTranslateMatrix","createRotateMatrix","angleRadiant","cosValue","sinValue","createScaleMatrix","angleToSkew","tan","skewToAngle","atan","createSkewXMatrix","skewValue","createSkewYMatrix","calcDimensionsMatrix","flipX","flipY","matrix","composeMatrix","scaleMatrix","loadImage","url","signal","crossOrigin","reject","aborted","img","err","src","addEventListener","done","onload","onerror","removeEventListener","enlivenObjects","reviver","instances","all","map","fromObject","then","fabricInstance","catch","error","instance","finally","enlivenObjectEnlivables","serializedObject","promises","values","enlived","pick","source","pickBy","predicate","toFixed","number","fractionDigits","parseFloat","Number","matrixToSVG","NUM_FRACTION_DIGITS","join","isFiller","filler","toLive","isSerializableFiller","toObject","isPattern","offsetX","isTextObject","_renderText","isPath","_renderPathCommands","isActiveSelection","getScrollLeftTop","doc","getDocumentFromElement","elementLoop","docElement","documentElement","body","scrollLeft","scrollTop","parentNode","host","nodeType","style","position","el","ownerDocument","getWindowFromElement","_el$ownerDocument","defaultView","setCanvasDimensions","ctx","retinaScaling","setAttribute","scale","setCSSDimensions","makeElementUnselectable","onselectstart","userSelect","StaticCanvasDOMManager","createLowerCanvas","lower","getElementById","hasAttribute","_originalCanvasStyle","cssText","classList","cleanupDOM","removeAttribute","setDimensions","calcOffset","_getWindowFromElement","offset","elemStyle","getComputedStyle","parseInt","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","box","docElem","getBoundingClientRect","scrollLeftTop","clientLeft","clientTop","getElementOffset","staticCanvasDefaults","backgroundVpt","backgroundColor","overlayVpt","overlayColor","includeDefaultValues","svgViewportTransformation","renderOnAddRemove","skipOffscreen","enableRetinaScaling","imageSmoothingEnabled","controlsAboveOverlay","allowTouchScrolling","viewportTransform","StaticCanvas","lowerCanvasEl","_this$elements$lower","elements","contextContainer","_this$elements$lower2","getDefaults","ownDefaults","initElements","_setDimensionsImpl","skipControlsDrawing","calcViewportBoundaries","requestRenderAll","setCoords","getRetinaScaling","_offset","getWidth","getHeight","dimensions","cssOnly","backstoreOnly","hasLostContext","getZoom","setViewportTransform","vpt","zoomToPoint","point","before","newPoint","after","setZoom","absolutePan","relativePan","getElement","clearContext","clearRect","clear","backgroundImage","overlayImage","renderAll","cancelRequestedRender","destroyed","renderCanvas","renderAndReset","nextRenderHandle","disposed","iVpt","vptCoords","tr","bl","drawControls","_ctx","v","path","clipPath","patternQuality","_renderBackground","save","_renderObjects","restore","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","__cleanupTask","globalCompositeOperation","zoomX","zoomY","drawImage","_cacheCanvas","cacheTranslationX","cacheTranslationY","len","render","_renderBackgroundOrOverlay","fill","needsVpt","isAFiller","beginPath","moveTo","lineTo","closePath","fillStyle","offsetY","m","gradientTransform","patternTransform","getCenterPoint","centerObjectH","_centerObject","centerObjectV","centerObject","viewportCenterObject","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","center","toDatalessJSON","propertiesToInclude","toDatalessObject","_toObjectMethod","toJSON","methodName","clipPathData","excludeFromExport","_toObject","version","__serializeBgOverlay","originalValue","data","bgImage","bgColor","background","overlay","toSVG","markup","_setSVGPreamble","_setSVGHeader","clipPathId","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","optViewBox","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","createSVGClipPathMarkup","toClipPathSVG","shouldTransform","additionalTransform","fontList","styles","styleRow","fontListMarkup","_setSVGObject","bgOrOverlay","repeat","finalWidth","finalHeight","loadFromJSON","json","serialized","parse","enlivedMap","properties","cloneWithoutData","multiplier","finalMultiplier","toCanvasElement","scaledWidth","scaledHeight","zoom","originalWidth","originalHeight","originalSkipControlsDrawing","newZoom","vp","newVp","originalRetina","objectsToRender","task","destroy","kill","touchEvents","getPointer","event","scroll","_evt","touchProp","changedTouches","getTouchInfo","clientX","clientY","isTouchEvent","pointerType","stopEvent","e","preventDefault","stopPropagation","makeBoundingBoxFromPoints","points","removeTransformFromObject","inverted","finalTransform","calcOwnMatrix","applyTransformToObject","addTransformToObject","otherOptions","setPositionByOrigin","resetObjectTransform","saveObjectTransform","sizeAfterTransform","dimX","dimY","bbox","calcPlaneChangeMatrix","from","sendPointToPlane","to","sendVectorToPlane","sendObjectToPlane","fireEvent","_target$canvas","originOffset","bottom","right","resolveOrigin","originValue","unitVectorX","zero","rotateVector","vector","createVector","magnitude","calcAngleBetweenVectors","crossProduct","dotProduct","calcVectorRotation","getUnitVector","getOrthonormalVector","counterClockwise","isBetweenVectors","AxB","AxT","BxT","NOT_ALLOWED_CURSOR","isTransformCentered","originX","originY","invertOrigin","isLocked","lockingKey","commonEventInfo","eventData","pointer","findCornerQuadrant","control","coord","round","getLocalPoint","corner","controls","padding","localPoint","getRelativeCenterPoint","translateToGivenOrigin","normalizePoint","dragHandler","newLeft","newTop","moveX","moveY","ColorNameMap","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hue2rgb","q","rgb2Hsl","g","maxValue","minValue","h","s","l","fromAlphaToFloat","endsWith","hexify","toUpperCase","padStart","greyAverage","avg","Color","color","setSource","_source","_tryParsingColor","sourceFromHex","sourceFromRgb","sourceFromHsl","isUnrecognised","getSource","toRgb","toRgba","toHsl","toHsla","toHex","toHexa","slice","getAlpha","setAlpha","alpha","toGrayscale","toBlackWhite","threshold","average","bOrW","overlayWith","otherColor","otherSource","R","G","B","fromRgb","fromRgba","match","parsedValue","fromHsl","fromHsla","parseAngletoDegrees","fromHex","expandedValue","split","hex","hexCouple","lowercase","numeric","parseUnit","fontSize","unit","exec","dpi","DPI","parsePreserveAspectRatioAttribute","attribute","firstPart","secondPart","trim","alignX","alignY","align","meetOrSlice","colorPropToSVG","colorValue","opacityValue","inlineStyle","opacity","FabricObjectSVGExportMixin","getSvgStyles","skipShadow","fillRule","strokeWidth","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","visibility","getSvgFilter","stroke","shadow","getSvgCommons","getSvgTransform","full","calcTransformMatrix","_toSVG","_reviver","_createBaseSVGMarkup","_createBaseClipPathSVGMarkup","objectMarkup","commonPieces","noStyle","withShadow","styleInfo","shadowInfo","vectorEffect","strokeUniform","absoluteClipPath","absolutePositioned","clipPathMarkup","addPaintOrder","paintFirst","getSvgRegex","arr","RegExp","TEXT_DECORATION_THICKNESS","fontProperties","textDecorationProperties","textLayoutProperties","additionalProps","styleProperties","textDefaultValues","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","underline","overline","linethrough","textAlign","lineHeight","textBackgroundColor","pathStartOffset","pathSide","pathAlign","charSpacing","deltaY","direction","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","superscript","baseline","subscript","_fontSizeFraction","offsets","_fontSizeMult","JUSTIFY","JUSTIFY_LEFT","JUSTIFY_RIGHT","JUSTIFY_CENTER","reNum","String","raw","viewportSeparator","svgNS","reFontDeclaration","attributesMap","cx","cy","display","fSize","cPath","svgValidTagNamesRegEx","svgViewBoxElementsRegEx","svgValidParentsRegEx","reViewBoxAttrValue","shadowOffsetRegex","reOffsetsAndBlur","Shadow","parseShadow","shadowStr","blur","replace","fBoxX","fBoxY","affectStroke","nonScaling","capValue","stateProperties","cacheProperties","fabricObjectDefaultValues","minScaleLimit","objectCaching","centeredRotation","centeredScaling","dirty","normalize","c","asin","elastic","defaultEasing","easeOutBounce","easeInBounce","easeInCirc","easeInCubic","easeInElastic","normA","normS","normP","easeInExpo","easeInOutBounce","easeInOutCirc","easeInOutCubic","easeInOutElastic","normC","easeInOutExpo","easeInOutQuad","easeInOutQuart","easeInOutQuint","easeInOutSine","easeInQuad","easeInQuart","easeInQuint","easeInSine","easeOutCirc","easeOutCubic","easeOutElastic","easeOutExpo","easeOutQuad","easeOutQuart","easeOutQuint","easeOutSine","defaultAbort","AnimationBase","startValue","byValue","duration","delay","easing","onStart","onChange","onComplete","tick","bind","_onStart","_onChange","_onComplete","_abort","endValue","calculate","state","_state","isDone","start","firstTick","timestamp","startTime","Date","register","setTimeout","durationMs","boundDurationMs","durationProgress","valueProgress","unregister","ValueAnimation","timeElapsed","ArrayAnimation","defaultColorEasing","wrapColorCallback","rgba","ColorAnimation","startColor","endColor","animate","isArrayAnimation","animateColor","Intersection","status","append","isPointContained","T","A","infinite","AB","isPointInPolygon","other","hits","inter","intersectSegmentSegment","intersectLineLine","a1","a2","b1","b2","aInfinite","bInfinite","a2xa1x","a2ya1y","b2xb1x","b2yb1y","a1xb1x","a1yb1y","uaT","ubT","uB","ua","ub","segmentsCoincide","intersectSegmentLine","s1","s2","l1","l2","intersectLinePolygon","result","intersectSegmentPolygon","intersectPolygonPolygon","points1","points2","coincidences","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","ObjectGeometry","getX","getXY","getY","getRelativeX","setRelativeX","getRelativeY","setRelativeY","relativePosition","getRelativeXY","group","setRelativeXY","isStrokeAccountedForInDimensions","getCoords","aCoords","calcACoords","coords","intersectsWithObject","intersection","isContainedWithinObject","getBoundingRect","isOnScreen","isPartiallyOnScreen","getScaledWidth","_getTransformedDimensions","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","getCanvasRetinaScaling","_this$canvas","getTotalAngle","getViewportTransform","_this$canvas2","rotateMatrix","tMatrix","finalMatrix","dim","w","transformMatrixKey","skipGroup","prefix","matrixCache","ownMatrixCache","_getNonTransformedDimensions","_calculateCurrentDimensions","dimOptions","preScalingStrokeValue","finalDimensions","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","translateToOriginPoint","relCenter","getPointByOrigin","pos","_getLeftTopCoords","FabricObject","name","setOptions","_createCacheCanvas","_cacheContext","_updateCacheCanvas","_limitCacheSize","dims","maxCacheSideLimit","minCacheSideLimit","limX","limY","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","neededX","neededY","ceil","dimensionsChanged","zoomChanged","setTransform","drawingWidth","drawingHeight","translate","needFullTransform","contextTop","getObjectScaling","retina","getObjectOpacity","_constrainScale","isChanged","parent","isNotVisible","_setupCompositeOperation","drawSelectionBackground","_setOpacity","_setShadow","drawCacheOnCanvas","_removeCacheCanvas","drawObject","isCacheDirty","parentClipPaths","hasStroke","hasFill","needsItsOwnCache","ownCaching","isOnACache","willDrawShadow","drawClipPathOnCache","canvasWithClipPath","originalFill","originalStroke","_setClippingProperties","_render","_drawClipPath","createClipPathLayer","prevClipPath","skipCanvas","fillRect","_removeShadow","globalAlpha","_setStrokeStyles","decl","lineWidth","lineCap","lineDashOffset","lineJoin","miterLimit","gradientUnits","_applyPatternForTransformedGradient","strokeStyle","_applyPatternGradientTransform","_setFillStyles","_setLineDash","dashArray","setLineDash","sx","sy","multX","multY","scaling","shadowColor","shadowBlur","browserShadowBlurConstant","shadowOffsetX","shadowOffsetY","_renderPaintInOrder","_renderStroke","_renderFill","_pCtx$createPattern","pCanvas","pCtx","createPattern","_findCenterFromElement","objectForm","cloneAsImage","origParams","originalGroup","originalShadow","canvasProvider","withoutTransform","withoutShadow","boundingRect","shadowOffset","originalCanvas","setOnGroup","animatable","_animate","propIsColor","colorProperties","animationOptions","isDescendantOf","getAncestors","ancestors","findCommonAncestors","fork","otherFork","common","otherAncestors","ancestor","j","hasCommonAncestors","commonAncestors","isInFrontOf","ancestorData","firstCommonAncestor","headOfFork","pop","headOfOtherFork","thisIndex","otherIndex","propertiesToSerialize","customProperties","toFixedBound","val","_removeDefaultValues","baseValues","getPrototypeOf","baseValue","_fromObject","serializedObjectOptions","extraParam","enlivedObjectOptions","wrapWithFireEvent","actionHandler","extraEventInfo","actionPerformed","wrapWithFixedAnchor","centerPoint","constraint","changeWidth","changeObjectWidth","strokePadding","oldWidth","newWidth","renderCircleControl","styleOverride","xSize","sizeX","cornerSize","ySize","sizeY","transparentCorners","cornerStrokeColor","myLeft","myTop","cornerColor","arc","renderSquareControl","xSizeBy2","ySizeBy2","strokeRect","Control","shouldActivate","controlKey","_fabricObject$canvas","getActiveObject","isControlVisible","getActionHandler","getMouseDownHandler","mouseDownHandler","getMouseUpHandler","mouseUpHandler","cursorStyleHandler","cursorStyle","getActionName","actionName","getVisibility","_fabricObject$_contro","_fabricObject$_contro2","_controlsVisibility","setVisibility","positionHandler","currentControl","calcCornerCoords","objectCornerSize","centerX","centerY","isTouch","touchSizeX","touchSizeY","cornerStyle","rotationStyleHandler","lockRotation","rotationWithSnapping","rotateObjectWithSnapping","ex","ey","theta","pivotPoint","lastAngle","curAngle","snapAngle","snapThreshold","rightAngleLocked","leftAngleLocked","hasRotated","scaleIsProportional","uniformIsToggled","lockSize","uniformScaling","scalingIsForbidden","by","scaleProportionally","lockX","lockY","scaleMap","scaleCursorStyleHandler","n","scaleObject","signX","signY","gestureScale","distance","original","oldScaleX","oldScaleY","scalingEqually","scaleObjectFromCorner","scalingX","scaleObjectX","scaleObjectByX","scalingY","scaleObjectY","scaleObjectByY","scaleOrSkewActionName","scaleSkewCursorStyleHandler","scalingXOrSkewingY","scalingYOrSkewingX","createObjectDefaultControls","ml","mr","mb","mt","mtr","withConnection","createResizeControls","createTextboxDefaultControls","InteractiveFabricObject","createControls","targetCanvas","noScaleCache","_currentTransform","action","startsWith","getActiveControl","__corner","oCoords","findControl","forTouch","hasControls","cornerEntries","touchCorner","calcOCoords","rMatrix","positionMatrix","startMatrix","transformOptions","forEachControl","_calcCornerCoords","touchCornerSize","fn","selectionBackgroundColor","_activeObject","wh","strokeBorders","_drawBorders","borderColor","borderDashArray","drawControlsConnectingLines","_renderControls","hasBorders","styleOptions","shouldDrawBorders","shouldDrawControls","borderScaleFactor","isMoving","borderOpacityWhenMoving","drawBorders","forActiveSelection","shouldStroke","cornerDashArray","setControlVisible","setControlsVisibility","clearContextTop","restoreManually","onDeselect","_options","onSelect","shouldStartDragging","_e","onDragStart","canDrop","renderDragSourceEffect","renderDropTargetEffect","setScaleX","setScaleY","applyMixins","derivedCtor","constructors","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","create","lockMovementX","lockMovementY","lockScalingX","lockScalingY","lockSkewingX","lockSkewingY","lockScalingFlip","evented","perPixelTargetFind","activeOn","hoverCursor","moveCursor","isTransparent","tolerance","getImageData","StrokeProjectionsBase","strokeProjectionMagnitude","strokeUniformScalar","createSideVector","projectOrthogonally","applySkew","calcOrthogonalProjection","isSkewed","scaleUnitVector","unitVector","zeroVector","StrokeLineJoinProjections","getOrthogonalRotationFactor","vector1","vector2","C","AC","bisector","orthogonalProjection","correctSide","projectBevel","projections","projectMiter","hypotUnitScalar","miterVector","projectRoundNoSkew","startCircle","endCircle","projectRoundWithSkew","shearing","circleRadius","newY","furthestY","newX","furthestX","projectRound","isStraightLine","newOrigin","proj0","proj1","comparisonVector","isProj0Start","projectPoints","project","originPoint","projectedPoint","StrokeLineCapProjections","projectButt","projection","projectSquare","strokePointingOut","projectedA","projectStrokeOnPoints","openPath","reduced","findIndexRight","cloneStyles","newObj","keyInner","segmenter","graphemeSplit","textstring","Intl","Segmenter","granularity","segments","segment","graphemeSplitImpl","graphemes","chr","getWholeChar","str","code","charCodeAt","isNaN","charAt","next","prev","string","firstLetterOnly","hasStyleChanged","prevStyle","thisStyle","forTextSpans","textDecorationThickness","stylesToArray","text","textLines","stylesArray","charIndex","chars","end","stylesFromArray","stylesObject","styleIndex","SHARED_ATTRIBUTES","selectorMatches","selector","nodeName","classNames","getAttribute","azAz","matcher","splitClassNames","elementMatchesRule","selectors","parentMatching","firstMatching","parentElement","doesSomeParentMatch","getGlobalStylesForElement","cssRules","rule","normalizeAttr","attr","_attributesMap","regex","transforms","transformList","reTransformList","reTransform","reTransformAll","parseTransformAttribute","attributeValue","cleanupSvgAttribute","test","matchAll","transformMatch","matchedParams","operation","rawArgs","arg1","arg2","arg3","arg4","arg5","arg","normalizeValue","parentAttributes","parsed","ouputValue","transformMatrix","fillIndex","strokeIndex","parseStyleString","oStyle","chunk","parseStyleAttribute","parseStyleObject","colorAttributesMap","parseAttributes","attributes","parentFontSize","ownAttributes","normalizedStyle","normalizedAttr","normalizedValue","font","parseFontDeclaration","mergedAttrs","colorAttr","setStrokeFillOpacity","RECT_PROPS","Rect","_initRxRy","rx","ry","isRounded","bezierCurveTo","fromElement","restOfparsedAttributes","ATTRIBUTE_NAMES","Boolean","LAYOUT_TYPE_INITIALIZATION","LAYOUT_TYPE_ADDED","LAYOUT_TYPE_REMOVED","LAYOUT_TYPE_IMPERATIVE","getObjectBounds","destinationGroup","currentGroup","objectCenter","accountForStroke","strokeUniformVector","scalingStrokeWidth","sizeVector","LayoutStrategy","calcLayoutResult","shouldPerformLayout","calcBoundingBox","prevStrategy","strategy","shouldLayoutClipPath","getInitialSize","overrides","bboxSize","bboxCenter","actualSize","relativeCorrection","FitContentLayout","LAYOUT_MANAGER","LayoutManager","_subscriptions","performLayout","strictContext","bubbles","_prevLayoutStrategy","onBeforeLayout","layoutResult","getLayoutResult","commitLayout","onAfterLayout","attachHandlers","trigger","subscribe","unsubscribe","_context","delete","unsubscribeTargets","targets","subscribeTargets","tricklingContext","layoutManager","prevCenter","nextCenter","correction","_context$x","_context$y","layoutObjects","layoutObject","bubblingContext","NoopLayoutManager","Group","groupInit","_options$layoutManage","__objectSelectionTracker","__objectSelectionMonitor","__objectSelectionDisposer","enterGroup","canEnterGroup","_filterObjectsBeforeEnteringGroup","allowedObjects","_onAfterObjectsChange","removeParentTransform","exitGroup","_shouldSetNestedCoords","subTargetCheck","removeAll","_activeObjects","selected","activeObjects","_watchObject","watch","_enterGroup","activeObject","_exitGroup","ownCache","preserveObjectStacking","triggerLayout","__serializeObjects","method","_includeDefaultValues","originalDefaults","_createSVGBgRect","fillStroke","commons","svgString","bg","abortable","hydratedOptions","layoutClass","strategyClass","interactive","findScaleToFit","destination","findScaleToCover","commaWsp","reArcCommandPoints","repeatedCommands","M","segmentToBezier","theta1","theta2","cosTh","sinTh","cx1","cy1","mT","fromX","fromY","costh1","sinth1","costh2","sinth2","toX","toY","calcVectorAngle","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","begx","begy","cp1x","cp1y","cp2x","cp2y","endx","endy","argsString","cachesBoundsOfCurve","boundsOfCurveCache","tvalues","bounds","b2ac","sqrtb2ac","t1","t2","jlen","iterator","getPointOnCubicBezierIterator","fromArcToBeziers","fx","fy","rot","large","sweep","tx","ty","segsNorm","arcToSegments","rotateX","root","sinTheta","px","py","rx2","ry2","py2","px2","pl","_rx","_ry","mTheta","dtheta","mDelta","th3","makePathSimpler","x1","y1","destinationPath","previous","controlX","controlY","parsedCommand","converted","calcLineLength","x2","y2","pct","c1","c2","CB2","c3","CB3","c4","CB4","QB1","QB2","QB3","getTangentCubicIterator","p1x","p1y","p2x","p2y","p3x","p3y","p4x","p4y","qb1","qb2","qb3","tangentX","tangentY","getPointOnQuadraticBezierIterator","getTangentQuadraticIterator","invT","pathIterator","tempP","tmpLen","perc","findPercentageForDistance","segInfo","nextLen","nextStep","lastPerc","angleFinder","getPathSegmentsInfo","tempInfo","totalLength","info","basicInfo","command","destX","destY","getPointOnPath","infos","segPercent","rePathCmdAll","regExpArcCommandPoints","reMyNum","commandLengths","parsePath","pathString","_pathString$match","chain","matchStr","commandLetter","commandLength","paramArr","lastIndex","out","newCommand","transformedCommand","getSmoothPathFromPoints","p1","p2","multSignX","multSignY","manyPoints","midPoint","joinPath","pathData","getRandomInt","random","request","xhr","removeListener","ontimeout","onreadystatechange","readyState","open","send","_assignTransformMatrixProps","removeTransformMatrixForSvgParsing","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","_newCanvas$getContext","getRegularPolygonPath","numVertexes","radius","interiorAngle","rotationAdjustment","rad","commonAttributes","groupSVGElements","mergeClipPaths","_b$group","transformPath","pathOffset","pathSegment","newSegment","setStyle","elementStyle","setProperty","CanvasDOMManager","containerClass","upperCanvasEl","createUpperCanvas","upper","applyCanvasStyle","container","createContainerElement","replaceChild","className","removeChild","SelectableCanvas","_this$elements$upper","_this$elements$upper2","wrapperEl","_objectsToRender","deselected","_discardActiveObject","_hoveredTarget","_hoveredTargets","_chooseObjectsToRender","contextTopDirty","_groupSelector","isDrawingMode","renderTopLayer","_isCurrentlyDrawing","freeDrawingBrush","selection","_drawSelection","renderTop","setTargetFindTolerance","targetFindTolerance","pixelFindCanvasEl","pixelFindContext","isTargetTransparent","selectionBgc","enhancedTolerance","_isSelectionKeyPressed","sKey","selectionKey","_shouldClearSelection","getActiveObjects","_shouldCenterTransform","modifierKeyPressed","centerTransform","_getOriginFromCorner","controlName","_setupCurrentTransform","alreadySelected","_control$getActionHan","getScenePoint","getActionFromCorner","altKey","centeredKey","lastX","lastY","shiftKey","setCursor","cursor","deltaX","extent","strokeOffset","selectionLineWidth","minX","minY","maxX","maxY","selectionColor","selectionBorderColor","selectionDashArray","findTarget","skipTargetFind","getViewportPoint","aObjects","searchPossibleTargets","subTargets","altSelectionKey","_pointIsInObjectSelectionArea","viewportZoom","angleRadians","cosP","sinP","cosPSinP","cosPMinusSinP","_checkTarget","isEditing","_searchPossibleTargets","subTarget","_viewportPoint","_getPointerImpl","_scenePoint","fromViewport","boundsWidth","boundsHeight","cssScale","_resetTransformEventData","_setBrushStyles","willReadFrequently","getTopContext","getSelectionContext","getSelectionElement","active","_fireSelectionEvents","oldObjects","somethingChanged","invalidate","added","setActiveObject","currentActives","_setActiveObject","prevActiveObject","endCurrentTransform","discardActiveObject","discarded","_finalizeCurrentTransform","_scaling","originalProperties","_realizeGroupTransformOnObject","originalValues","uniScaleKey","altActionKey","selectionFullyContained","defaultCursor","freeDrawingCursor","notAllowedCursor","stopContextMenu","fireRightClick","fireMiddleClick","enablePointerEvents","TextEditingManager","cb","hiddenTextarea","focus","__disposer","exitTextEditing","exitEditing","onMouseMove","_this$target","updateSelectionOnMouseMove","addEventOptions","passive","getEventPoints","viewportPoint","scenePoint","addListener","syntheticEventConfig","mouse","in","targetIn","targetOut","canvasIn","canvasOut","drag","Canvas","eventHandler","addOrRemove","_getEventPrefix","functor","_eventjsFunctor","canvasElement","eventTypePrefix","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onClick","_onDragStart","_onDragEnd","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","_onTouchStart","removeListeners","_onMouseUp","_onTouchEnd","clearTimeout","_willAddMouseDown","__onMouseWheel","shared","nestedTarget","_isClick","_dragSource","_onDragProgress","_renderDragEffects","dropTarget","_dropTarget","didDrop","dataTransfer","dropEffect","dragSource","_draggedoverTarget","findDragTargets","eventType","_fireEnterLeaveEvents","_basicEventHandler","clicks","detail","_cacheTransformEventData","_handleEvent","getPointerId","evt","identifier","pointerId","_isMainEvent","isPrimary","touches","mainTouchId","shouldPreventScrolling","currentActiveObject","__onMouseDown","_target","__onMouseUp","__onMouseMove","_shouldRender","_this$_activeObject","isClick","button","_onMouseUpInDrawingMode","shouldRender","targetWasActive","handleSelection","found","originalControl","originalMouseUpHandler","_setCursorFromEvent","extraData","currentTarget","currentSubTargets","_onMouseDownInDrawingMode","onMouseDown","_onMouseMoveInDrawingMode","onMouseUp","grouped","handleMultiSelection","groupSelector","_transformObject","_fireOverOutEvents","textEditingManager","fireSyntheticInOutEvents","oldTarget","fireCanvas","draggedoverTarget","targetChanged","outOpt","nextTarget","inOpt","previousTarget","localPointer","_performTransformAction","activeSelection","reverse","isAS","prevActiveObjects","multiSelectAdd","newActiveSelection","point1","point2","collectedObjects","klass","linearDefaultCoords","radialDefaultCoords","ifNaN","valueIfNaN","RE_PERCENT","isPercent","parsePercent","NaN","RE_KEY_VALUE_PAIRS","RE_KEY_VALUE","parseColorStop","opacityMultiplier","keyValuePairs","parseColorStops","opacityAttr","colorStops","colorStopEls","getElementsByTagName","parseType","parseGradientUnits","getValue","parseCoords","valuesToConvert","finalValue","propValue","convertPercentUnitsToValues","parseLinearCoords","parseRadialCoords","Gradient","addColorStop","colorStop","preTransform","sort","needsSwap","minRadius","percentageShift","gradient","createLinearGradient","createRadialGradient","svgOptions","viewBoxWidth","viewBoxHeight","Pattern","isImageSource","isCanvasSource","sourceToString","complete","naturalWidth","naturalHeight","patternSource","patternOffsetX","patternOffsetY","BaseBrush","_saveAndTransform","needsFullRender","_resetShadow","_isOutSideCanvas","Path","_setPath","adjustPosition","setBoundingBox","_calcBoundsFromPath","quadraticCurveTo","pathCmd","sourcePath","_getOffsetTransform","digits","_calcDimensions","subpathStartX","subpathStartY","parsedAttributes","PencilBrush","_points","_hasStraightLine","drawSegment","drawStraightLine","straightLineKey","_prepareForDrawing","_addPoint","limitedToCanvasSize","oldEnd","_finalizeAndAddPath","_reset","convertPointsToSVGPath","createPath","decimatePoints","cDistance","lastPoint","adjustedDistance","newPoints","decimate","isEmptySVGPath","CIRCLE_PROPS","Circle","setRadius","startAngle","endAngle","getRadiusX","getRadiusY","startX","startY","endX","endY","otherParsedAttributes","CircleBrush","drawDot","addPoint","dot","originalRenderOnAddRemove","circles","circle","pointerPoint","SprayBrush","sprayChunks","sprayChunk","addSprayChunk","renderChunck","rects","chunck","rect","optimizeOverlapping","uniqueRects","uniqueRectsArray","getUniqueRects","sprayChunck","density","dotWidthVariance","dotWidth","randomOpacity","PatternBrush","getPatternSrc","patternCanvas","patternCtx","getPattern","pattern","topLeft","coordProps","Line","_setWidthHeight","calcLinePoints","origStrokeStyle","_this$stroke","_x1","_x2","_y1","_y2","xMult","yMult","Triangle","widthBy2","heightBy2","ELLIPSE_PROPS","Ellipse","getRx","getRy","polylineDefaultValues","exactBoundingBox","Polyline","initialized","isOpen","_projectStrokeOnPoints","strokeDiff","bboxNoStroke","layoutProperties","_options$width","_options$height","_options$width2","_options$height2","changed","output","diffX","diffY","pointsSplit","parsedPoints","parsePointsAttribute","Polygon","StyledText","isEmptyStyles","lineIndex","line","p3","styleHas","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","styleObject","_textLines","removeStyle","lineNum","charNum","_extendStyles","get2DCursorLocation","_getLineStyle","_setLineStyle","newStyle","_getStyleDeclaration","_setStyleDeclaration","getSelectionStyles","startIndex","endIndex","getStyleAtPosition","getCompleteStyleDeclaration","setSelectionStyles","_forceClearCache","_lineStyle$charIndex","lineStyle","_styleProperties","_deleteStyleDeclaration","_deleteLineStyle","createSVGInlineRect","svgColor","createSVGRect","measuringContext","getMeasuringContext","FabricText","setPathInfo","initDimensions","segmentsInfo","_splitText","newLines","_splitTextIntoLines","lines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","calcTextHeight","enlargeSpaces","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","charBound","spaces","isEndOfWrapping","getLineWidth","__charBounds","kernedWidth","missingNewlineOffset","_lineIndex","selectionStart","skipWrapping","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","leftOffset","_getLeftOffset","lineTopOffset","_getTopOffset","heightOfLine","getHeightOfLine","lineLeftOffset","_getLineLeftOffset","drawStart","currentColor","boxWidth","boxStart","lastColor","getValueOfPropertyAt","charBox","renderLeft","_measureChar","_char","previousChar","prevCharStyle","fontDeclaration","couple","stylesAreEqual","fontMultiplier","coupleWidth","previousWidth","measureText","getHeightOfChar","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","prevGrapheme","graphemeInfo","llength","lineBounds","grapheme","_getGraphemeBox","positionInPath","totalPathLength","_setGraphemeOnPath","numOfSpaces","centerPosition","skipLeft","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isJustify","shortCut","isLtr","currentDirection","actualStyle","nextStyle","timeToRender","drawingLeft","charsToRender","_renderChar","_applyPatternGradientTransformText","handleFiller","fullDecl","shouldFill","fillOffsets","fillText","strokeOffsets","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","lineDiff","__lineWidths","_charStyle$property","topOffset","offsetAligner","lastDecoration","lastFill","lastTickness","currentDecoration","currentFill","currentTickness","currentSize","currentDy","finalTickness","parsedFontFamily","genericFonts","newLine","newText","needsDims","isAddingPath","textAnchor","textDecoration","restOfOptions","textContent","textHeightScaleFactor","scaledDiff","textHeight","offX","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","lineTop","textBgRects","textSpans","getSvgTextDecoration","textTopOffset","textLeftOffset","lineOffset","_setSVGTextLineText","_createTextCharSpan","char","styleDecl","numFractionDigit","dySpan","angleAttr","wBy2","renderPoint","getPath","kerning","features","liga","toPathData","_setSVGTextLineBg","getSvgSpanStyles","useWhiteSpace","thickness","decoration","DraggableTextDelegate","dragEnterHandler","dragOverHandler","dragLeaveHandler","dragEndHandler","dropHandler","_dispose","isPointerOverSelection","newSelection","getSelectionStartFromPointer","selectionEnd","__mouseDownInPlace","isActive","__dragStartFired","setCursorByClick","initDelayedCursor","__isDraggingOver","getDragStartSelection","__dragStartSelection","setDragImage","_e$dataTransfer","flipFactor","boundaries","_getCursorBoundaries","diff","bgc","dragImage","border","__dragImageDisposer","appendChild","setData","stringify","effectAllowed","abortCursorAnimation","editable","defaultPrevented","dragStartSelection","targetCanDrop","ev","_e$dataTransfer2","insert","getData","trailing","selectionStartOffset","removeChars","trimEnd","insertChars","enterEditing","_updateTextarea","_e$dataTransfer3","reNonWord","ITextBehavior","initBehavior","_tick","_onTickComplete","_animateCursor","toValue","_currentCursorOpacity","renderCursorOrSelection","_currentTickState","cursorDuration","_this$_currentTickCom","_currentTickCompleteState","restart","cursorDelay","shouldClear","cursorAnimation","restartCursorIfNeeded","selectAll","_fireSelectionChanged","cmdAll","getSelectedText","findWordBoundaryLeft","startFrom","_reSpace","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","selectWord","newSelectionStart","newSelectionEnd","selectLine","enterEditingImpl","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","activeElement","currentStart","currentEnd","__selectionStartOnMouseDown","editingBorderColor","fromStringToGraphemeSelection","smallerTextStart","graphemeStart","smallerTextEnd","fromGraphemeToStringSelection","cursorOffsetCache","inCompositionMode","updateTextareaPosition","updateFromTextArea","textarea","_calcTextareaPosition","desiredPosition","compositionStart","cursorLocation","charHeight","upperCanvas","upperCanvasWidth","upperCanvasHeight","clientWidth","clientHeight","_savedProps","_restoreEditingProps","exitEditingImpl","isTextChanged","_removeExtraneousStyles","removeStyleFromTo","lineStart","charStart","lineEnd","charEnd","styleObj","shiftLineStyles","numericChar","clonedStyles","numericLine","insertNewlineStyleObject","qty","copiedStyle","newLineStyles","originalLineLength","isEndOfLine","someStyleIsCarryingOver","currentCharStyle","numIndex","styleCarriedOver","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLength","setSelectionStartEndWithShift","_selectionDirection","ITextKeyBehavior","autocapitalize","autocorrect","autocomplete","spellcheck","wrap","hiddenTextareaContainer","keydown","keyup","input","copy","cut","paste","compositionstart","compositionupdate","compositionend","onKeyDown","keyMap","keysMapRtl","keysMap","keyCode","ctrlKeysMapDown","ctrlKey","metaKey","stopImmediatePropagation","onKeyUp","_copyDone","ctrlKeysMapUp","onInput","fromPaste","updateAndFire","nextText","charCount","nextCharCount","_selectionStart","_selectionEnd","removedText","removeFrom","removeTo","charDiff","textareaSelection","backDelete","copiedText","disableStyleCopyPaste","copiedTextStyle","onCompositionStart","onCompositionEnd","onCompositionUpdate","compositionEnd","_getWidthBeforeCursor","bound","widthBeforeCursor","getDownCursorOffset","isRight","selectionProp","_getSelectionForOffset","indexOnOtherLine","_getIndexOnLine","getUpCursorOffset","textBeforeCursor","charWidth","foundMatch","widthOfCharsOnLine","indexOnLine","leftEdge","rightEdge","offsetFromLeftEdge","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","newValue","_moveLeft","_moveRight","moveCursorLeftWithoutShift","change","moveCursorLeftWithShift","moveCursorRight","moveCursorRightWithShift","moveCursorRightWithoutShift","notALeftClick","ITextClickBehavior","_mouseDownHandler","doubleClickHandler","tripleClickHandler","draggableTextDelegate","didDrag","mouseOffset","charLength","widthAfter","MOVE_CURSOR_UP","MOVE_CURSOR_DOWN","MOVE_CURSOR_LEFT","MOVE_CURSOR_RIGHT","EXIT_EDITING","applyCanvasTransform","iTextDefaultValues","cursorColor","caching","IText","setSelectionStart","_updateAndFire","setSelectionEnd","findAncestorsWithClipPath","hasAncestorsWithClipping","drawingCanvas","drawingCtx","renderSelection","renderCursor","clippingCanvas","clippingCtx","clipPathAncestors","skipCaching","_getCursorBoundariesOffsets","__getCursorBoundariesOffsets","renderCursorAt","_renderCursor","getCursorRenderingData","_renderSelection","dragSelection","startLine","endLine","startChar","endChar","realLineHeight","boxEnd","drawHeight","extraTop","drawWidth","compositionColor","getCurrentCharFontSize","cp","_getCurrentCharIndex","getCurrentCharColor","cursorPosition","Textbox","dynamicMinWidth","_styleMap","_generateStyleMap","textInfo","realLineCount","realLineCharCount","splitByGrapheme","isWrapping","nextOffset","nextLineIndex","shouldLimit","mapNextLine","p2Number","_wrapText","desiredWidth","getGraphemeDataForRender","wrapped","wordsData","_wrapLine","infix","largestWordWidth","wordsOrGraphemes","wordSplit","word","graphemeArray","_measureWord","charOffset","_wordJoiners","reservedSpace","additionalSpace","infixWidth","lineJustStarted","wordWidth","getMinWidth","minWidth","linesToKeep","propNumber","ClipPathLayout","clipPathCenter","FixedLayout","ActiveSelectionLayoutManager","parents","Set","selectedObjects","ActiveSelection","multiSelectionStacking","findIndex","groups","childrenOverride","Canvas2dFilterBackend","applyFilters","filters","sourceElement","sourceWidth","sourceHeight","desynchronized","pipelineState","imageData","originalEl","originalImageData","filterBackend","applyTo","imageDataPostFilter","putImageData","WebGLFilterBackend","tileSize","Float32Array","setupGLContext","captureGPUInfo","createWebGLCanvas","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","destinationWidth","destinationHeight","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","aPosition","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","dWidth","dHeight","resizeCanvasIfNeeded","copyGLTo2D","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","textureImageSource","NEAREST","RGBA","UNSIGNED_BYTE","CLAMP_TO_EDGE","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texture","texParameteri","texImage2D","uniqueId","evictCachesForKey","glCanvas","sourceY","copyGLTo2DPutImageData","numBytes","u8","Uint8Array","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","imgData","ImageData","gpuInfo","renderer","vendor","ext","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","initFilterBackend","enableGLFiltering","getFilterBackend","setFilterBackend","backend","IMAGE_PROPS","FabricImage","setElement","_element","removeTexture","_originalElement","resizeFilter","applyResizeFilters","elementKey","OffscreenCanvas","getCrossOrigin","getOriginalSize","_stroke","filterObj","getSrc","hasCrop","imageMarkup","strokeSvg","imageRendering","imageSmoothing","getSvgSrc","origFill","filtered","srcFromAttribute","setSrc","minimumScale","minimumScaleTrigger","elementToFilter","_filteredEl","_filterScalingX","_filterScalingY","_lastScaleX","_lastScaleY","isNeutralState","imgElement","_needsResize","elementToDraw","elWidth","elHeight","sX","sY","sW","sH","maxDestW","maxDestH","_resetWidthHeight","pAR","preserveAspectRatio","pWidth","pHeight","rWidth","rHeight","f","rf","hydratedProps","fromURL","imageOptions","applyViewboxTransform","viewBoxAttr","widthAttr","heightAttr","missingViewBox","missingDimAttr","translateMatrix","widthDiff","heightDiff","parsedDim","pasedViewBox","createElementNS","firstChild","getTagName","node","tagName","svgInvalidAncestorsRegEx","getMultipleNodes","nodeNames","nodeList","nodeArray","getElementsByTagNameNS","gradientsAttrs","xlinkAttr","recursivelyParseGradientsXlink","_gradient$getAttribut","xLink","referencedGradient","children","referenceClone","cloneNode","tagArray","findTag","ElementsParser","clipPaths","regexUrl","gradientDefs","elList","getGradientDefs","allRules","styleContents","ruleObj","propertyValuePairs","pair","_rule","getCSSRules","createObject","resolveGradient","resolveClipPath","extractPropertyDefinition","storage","gradientDef","usingElement","exactOwner","clipPathElements","objTransformInv","clipPathTag","clipPathOwner","clipPathElement","enlivedClippath","clipRule","gTransform","isValidSvgTag","async","parseSVGDocument","createEmptyResponse","allElements","nodelist","skipAttributes","useElement","useAttributes","useAttrMap","xlink","href","referencedElement","clonedOriginal","originalAttributes","originalAttrMap","currentTrans","el3","setAttributeNS","childNodes","styleRecord","mergedStyles","entry","parseUseDirectives","descendants","hasInvalidAncestor","localClipPaths","elementParser","loadSVGFromString","parseFromString","loadSVGFromURL","xml","responseXML","parsedDoc","ACTION_NAME","createPolyPositionHandler","pointIndex","polyObject","polyActionHandler","poly","mouseLocalPosition","factoryPolyActionHandler","anchorPoint","anchorPointInParentPlane","createPolyActionHandler","AXIS_KEYS","counterAxis","skew","lockSkewing","flip","skewMap","skewHandler","axis","originKey","lockSkewingKey","skewKey","flipKey","counterOriginKey","counterFlipKey","counterOriginFactor","skewingSide","finalHandler","skewingBefore","skewingStart","shearingStart","skewing","dimBefore","dimAfter","compensationFactor","skewObject","calcPathPointPosition","pathObject","commandIndex","pathPositionHandler","pathActionHandler","movePathPoint","anchorCommand","PathPointControl","controlFill","controlStroke","PathControlPointControl","connectToCommandIndex","connectToPointIndex","connectionDashArray","commandType","createControl","commandIndexPos","pointIndexPos","isControlPoint","controlPointStyle","pointStyle","previousCommandType","indexFromPrevCommand","skewCursorStyleHandler","skewHandlerX","skewHandlerY","isWebGLPipelineState","isPutImageFaster","testContext","ArrayBuffer","testPipelineState","performance","now","drawImageTime","highPsourceCode","identityFragmentShader","BaseFilter","getFragmentSource","getVertexSource","createProgram","vertexSource","vertexShader","VERTEX_SHADER","program","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","attributeLocations","getAttributeLocations","getAttribLocation","locations","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","finish","_swapTextures","temp","applyToWebGL","applyTo2d","getCacheKey","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","_gl","_uniformLocations","createHelpLayer","helpLayer","defaultKeys","filterOptions","blendColorFragmentSource","screen","difference","lighten","darken","exclusion","tint","BlendColor","mode","tg","alpha1","oR","oG","oB","uniform4fv","uColor","mask","BlendImage","image","TEXTURE1","calculateMatrix","resources","blendImage","canvas1","blendData","uniform1i","uImage","uniformMatrix3fv","uTransformMatrix","enlivedImage","Blur","aspectRatio","horizontal","blurValue","getBlurValue","samples","bytesInRow","totalA","minIRow","maxIRow","percent","weight","sampledPixel","localAlpha","delta","chooseRightDelta","uniform2fv","uDelta","blurScale","Brightness","brightness","uBrightness","colorMatrixDefaultValues","colorsOnly","ColorMatrix","constants","uniformMatrix4fv","uColorMatrix","uConstants","createColorMatrixFilter","_Class","newClass","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","Composed","subFilters","enlivedFilters","Contrast","contrast","contrastF","uContrast","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","Convolute","opaque","weights","side","halfSide","sw","sh","createImageData","dst","alphaFac","dstOff","scx","scy","srcOff","wt","uniform1fv","uMatrix","GAMMA","Gamma","gamma","rInv","gInv","bInv","rgbValues","rgb","uniform3fv","uGamma","lightness","luminosity","Grayscale","uMode","hueRotationDefaultValues","rotation","HueRotation","cosine","sine","aThird","aThirdSqtSin","OneMinusCos","Invert","invert","uInvert","uAlpha","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","uBlocksize","RemoveColor","lowC","highC","uLow","uHigh","useAlpha","Resize","uTaps","taps","getFilterWindow","tempScale","lanczosLobes","filterWindow","generateShader","getTaps","lobeFunction","lanczosCreate","applyToForWebgl","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","oW","oH","newData","resizeType","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","mult","doneW","doneH","stepW","stepH","dX","dY","tmpCanvas","srcData","destImg","destData","lanczos","ratioX","ratioY","rcpRatioX","rcpRatioY","range2X","range2Y","cacheLanc","icenter","process","u","fX","fY","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","yy","w0","Saturation","adjust","saturation","uSaturation","Vibrance","vibrance","amt","uVibrance"],"mappings":"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"}